/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.ImportarExportarConstantesFunciones;
import com.bydan.erp.contabilidad.util.ImportarExportarParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.ImportarExportarParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.ImportarExportarBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ImportarExportarBeanSwingJInternalFrame extends ImportarExportarJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ImportarExportarBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ImportarExportar> importarexportarValidator = new ClassValidator<ImportarExportar>(ImportarExportar.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ImportarExportar importarexportar;	
	public ImportarExportar importarexportarAux;
	public ImportarExportar importarexportarAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ImportarExportar importarexportarTotales;
	public Long idImportarExportarActual;
	public Long iIdNuevoImportarExportar=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboPeriodoImportExport="";

	public List<PeriodoImportExport> periodoimportexportsForeignKey;

	public List<PeriodoImportExport> getperiodoimportexportsForeignKey() {
		return periodoimportexportsForeignKey;
	}

	public void setperiodoimportexportsForeignKey(List<PeriodoImportExport> periodoimportexportsForeignKey) {
		this.periodoimportexportsForeignKey = periodoimportexportsForeignKey;
	}

	//OBJETO FK ACTUAL
	public PeriodoImportExport periodoimportexportForeignKey;

	public PeriodoImportExport getperiodoimportexportForeignKey() {
		return periodoimportexportForeignKey;
	}

	public void setperiodoimportexportForeignKey(PeriodoImportExport periodoimportexportForeignKey) {
		this.periodoimportexportForeignKey = periodoimportexportForeignKey;
	}

	public String sFinalQueryComboTransaccionConta="";

	public List<TransaccionConta> transaccioncontasForeignKey;

	public List<TransaccionConta> gettransaccioncontasForeignKey() {
		return transaccioncontasForeignKey;
	}

	public void settransaccioncontasForeignKey(List<TransaccionConta> transaccioncontasForeignKey) {
		this.transaccioncontasForeignKey = transaccioncontasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TransaccionConta transaccioncontaForeignKey;

	public TransaccionConta gettransaccioncontaForeignKey() {
		return transaccioncontaForeignKey;
	}

	public void settransaccioncontaForeignKey(TransaccionConta transaccioncontaForeignKey) {
		this.transaccioncontaForeignKey = transaccioncontaForeignKey;
	}

	public String sFinalQueryComboTipoImportacion="";

	public List<TipoImportacion> tipoimportacionsForeignKey;

	public List<TipoImportacion> gettipoimportacionsForeignKey() {
		return tipoimportacionsForeignKey;
	}

	public void settipoimportacionsForeignKey(List<TipoImportacion> tipoimportacionsForeignKey) {
		this.tipoimportacionsForeignKey = tipoimportacionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoImportacion tipoimportacionForeignKey;

	public TipoImportacion gettipoimportacionForeignKey() {
		return tipoimportacionForeignKey;
	}

	public void settipoimportacionForeignKey(TipoImportacion tipoimportacionForeignKey) {
		this.tipoimportacionForeignKey = tipoimportacionForeignKey;
	}

	public String sFinalQueryComboTipoComprobante="";

	public List<TipoComprobante> tipocomprobantesForeignKey;

	public List<TipoComprobante> gettipocomprobantesForeignKey() {
		return tipocomprobantesForeignKey;
	}

	public void settipocomprobantesForeignKey(List<TipoComprobante> tipocomprobantesForeignKey) {
		this.tipocomprobantesForeignKey = tipocomprobantesForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoComprobante tipocomprobanteForeignKey;

	public TipoComprobante gettipocomprobanteForeignKey() {
		return tipocomprobanteForeignKey;
	}

	public void settipocomprobanteForeignKey(TipoComprobante tipocomprobanteForeignKey) {
		this.tipocomprobanteForeignKey = tipocomprobanteForeignKey;
	}

	public String sFinalQueryComboTipoTributario="";

	public List<TipoTributario> tipotributariosForeignKey;

	public List<TipoTributario> gettipotributariosForeignKey() {
		return tipotributariosForeignKey;
	}

	public void settipotributariosForeignKey(List<TipoTributario> tipotributariosForeignKey) {
		this.tipotributariosForeignKey = tipotributariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTributario tipotributarioForeignKey;

	public TipoTributario gettipotributarioForeignKey() {
		return tipotributarioForeignKey;
	}

	public void settipotributarioForeignKey(TipoTributario tipotributarioForeignKey) {
		this.tipotributarioForeignKey = tipotributarioForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTipoIva="";

	public List<TipoIva> tipoivasForeignKey;

	public List<TipoIva> gettipoivasForeignKey() {
		return tipoivasForeignKey;
	}

	public void settipoivasForeignKey(List<TipoIva> tipoivasForeignKey) {
		this.tipoivasForeignKey = tipoivasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoIva tipoivaForeignKey;

	public TipoIva gettipoivaForeignKey() {
		return tipoivaForeignKey;
	}

	public void settipoivaForeignKey(TipoIva tipoivaForeignKey) {
		this.tipoivaForeignKey = tipoivaForeignKey;
	}

	public String sFinalQueryComboTipoIce="";

	public List<TipoIce> tipoicesForeignKey;

	public List<TipoIce> gettipoicesForeignKey() {
		return tipoicesForeignKey;
	}

	public void settipoicesForeignKey(List<TipoIce> tipoicesForeignKey) {
		this.tipoicesForeignKey = tipoicesForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoIce tipoiceForeignKey;

	public TipoIce gettipoiceForeignKey() {
		return tipoiceForeignKey;
	}

	public void settipoiceForeignKey(TipoIce tipoiceForeignKey) {
		this.tipoiceForeignKey = tipoiceForeignKey;
	}

	public String sFinalQueryComboTipoBanco="";

	public List<TipoBanco> tipobancosForeignKey;

	public List<TipoBanco> gettipobancosForeignKey() {
		return tipobancosForeignKey;
	}

	public void settipobancosForeignKey(List<TipoBanco> tipobancosForeignKey) {
		this.tipobancosForeignKey = tipobancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoBanco tipobancoForeignKey;

	public TipoBanco gettipobancoForeignKey() {
		return tipobancoForeignKey;
	}

	public void settipobancoForeignKey(TipoBanco tipobancoForeignKey) {
		this.tipobancoForeignKey = tipobancoForeignKey;
	}

	public String sFinalQueryComboTipoComprobanteBanco="";

	public List<TipoComprobante> tipocomprobantebancosForeignKey;

	public List<TipoComprobante> gettipocomprobantebancosForeignKey() {
		return tipocomprobantebancosForeignKey;
	}

	public void settipocomprobantebancosForeignKey(List<TipoComprobante> tipocomprobantebancosForeignKey) {
		this.tipocomprobantebancosForeignKey = tipocomprobantebancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoComprobante tipocomprobantebancoForeignKey;

	public TipoComprobante gettipocomprobantebancoForeignKey() {
		return tipocomprobantebancoForeignKey;
	}

	public void settipocomprobantebancoForeignKey(TipoComprobante tipocomprobantebancoForeignKey) {
		this.tipocomprobantebancoForeignKey = tipocomprobantebancoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoImportarExportar;
	public Boolean isPermisoNuevoImportarExportar;
	public Boolean isPermisoActualizarImportarExportar;
	public Boolean isPermisoActualizarOriginalImportarExportar;
	public Boolean isPermisoEliminarImportarExportar;
	public Boolean isPermisoGuardarCambiosImportarExportar;
	public Boolean isPermisoConsultaImportarExportar;
	public Boolean isPermisoBusquedaImportarExportar;
	public Boolean isPermisoReporteImportarExportar;
	public Boolean isPermisoPaginacionMedioImportarExportar;
	public Boolean isPermisoPaginacionAltoImportarExportar;
	public Boolean isPermisoPaginacionTodoImportarExportar;
	public Boolean isPermisoCopiarImportarExportar;
	public Boolean isPermisoVerFormImportarExportar;
	public Boolean isPermisoDuplicarImportarExportar;
	public Boolean isPermisoOrdenImportarExportar;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ImportarExportarParameterReturnGeneral importarexportarReturnGeneral;
	public ImportarExportarParameterReturnGeneral importarexportarParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoImportarExportar=false;
	public Boolean esParaAccionDesdeFormularioImportarExportar=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ImportarExportarSessionBeanAdditional importarexportarSessionBeanAdditional=null;
	
	public ImportarExportarSessionBeanAdditional getImportarExportarSessionBeanAdditional() {
		return this.importarexportarSessionBeanAdditional;
	}
	
	public void setImportarExportarSessionBeanAdditional(ImportarExportarSessionBeanAdditional importarexportarSessionBeanAdditional) {
		try {
			this.importarexportarSessionBeanAdditional=importarexportarSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ImportarExportarBeanSwingJInternalFrameAdditional importarexportarBeanSwingJInternalFrameAdditional=null;
	//public class ImportarExportarBeanSwingJInternalFrame
	
	public ImportarExportarBeanSwingJInternalFrameAdditional getImportarExportarBeanSwingJInternalFrameAdditional() {
		return this.importarexportarBeanSwingJInternalFrameAdditional;
	}
	
	public void setImportarExportarBeanSwingJInternalFrameAdditional(ImportarExportarBeanSwingJInternalFrameAdditional importarexportarBeanSwingJInternalFrameAdditional) {
		try {
			this.importarexportarBeanSwingJInternalFrameAdditional=importarexportarBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ImportarExportarLogic importarexportarLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ImportarExportar importarexportarBean;
	public ImportarExportarConstantesFunciones importarexportarConstantesFunciones;
	//public ImportarExportarParameterReturnGeneral importarexportarReturnGeneral;
	
	//FK
	
	public ModuloLogic moduloLogic;
	public AsientoContableLogic asientocontableLogic;
	public PeriodoImportExportLogic periodoimportexportLogic;
	public TransaccionContaLogic transaccioncontaLogic;
	public TipoImportacionLogic tipoimportacionLogic;
	public TipoComprobanteLogic tipocomprobanteLogic;
	public TipoTributarioLogic tipotributarioLogic;
	public ClienteLogic clienteLogic;
	public TipoIvaLogic tipoivaLogic;
	public TipoIceLogic tipoiceLogic;
	public TipoBancoLogic tipobancoLogic;
	public TipoComprobanteLogic tipocomprobantebancoLogic;
	
	//PARAMETROS
	
	
	//public List<ImportarExportar> importarexportars;	
	//public List<ImportarExportar> importarexportarsEliminados;
	//public List<ImportarExportar> importarexportarsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoImportarExportar=false;
	public Boolean isVisibilidadCeldaDuplicarImportarExportar=true;
	public Boolean isVisibilidadCeldaCopiarImportarExportar=true;
	public Boolean isVisibilidadCeldaVerFormImportarExportar=true;
	public Boolean isVisibilidadCeldaOrdenImportarExportar=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
	public Boolean isVisibilidadCeldaModificarImportarExportar=false;
	public Boolean isVisibilidadCeldaActualizarImportarExportar=false;
	public Boolean isVisibilidadCeldaEliminarImportarExportar=false;
	public Boolean isVisibilidadCeldaCancelarImportarExportar=false;
	public Boolean isVisibilidadCeldaGuardarImportarExportar=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosImportarExportar=false;	
	
	
	public Boolean isVisibilidadBusquedaPorNumeroComprobante=false;
	public Boolean isVisibilidadBusquedaPorRucInformante=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdPeriodoImportExport=false;
	public Boolean isVisibilidadFK_IdTipoBanco=false;
	public Boolean isVisibilidadFK_IdTipoComprobante=false;
	public Boolean isVisibilidadFK_IdTipoComprobanteBanco=false;
	public Boolean isVisibilidadFK_IdTipoIce=false;
	public Boolean isVisibilidadFK_IdTipoImportacion=false;
	public Boolean isVisibilidadFK_IdTipoIva=false;
	public Boolean isVisibilidadFK_IdTipoTributario=false;
	public Boolean isVisibilidadFK_IdTransaccionConta=false;
	
	public Long getiIdNuevoImportarExportar() {
		return this.iIdNuevoImportarExportar;
	}

	public void setiIdNuevoImportarExportar(Long iIdNuevoImportarExportar) {
		this.iIdNuevoImportarExportar = iIdNuevoImportarExportar;
	}
	
	public Long getidImportarExportarActual() {
		return this.idImportarExportarActual;
	}

	public void setidImportarExportarActual(Long idImportarExportarActual) {
		this.idImportarExportarActual = idImportarExportarActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ImportarExportar getimportarexportar() {
		return this.importarexportar;
	}

	public void setimportarexportar(ImportarExportar importarexportar) {
		this.importarexportar = importarexportar;
	}
	
	public ImportarExportar getimportarexportarAux() {
		return this.importarexportarAux;
	}

	public void setimportarexportarAux(ImportarExportar importarexportarAux) {
		this.importarexportarAux = importarexportarAux;
	}				
	
	public ImportarExportar getimportarexportarAnterior() {
		return this.importarexportarAnterior;
	}

	public void setimportarexportarAnterior(ImportarExportar importarexportarAnterior) {
		this.importarexportarAnterior = importarexportarAnterior;
	}	
	
	public ImportarExportar getimportarexportarTotales() {
		return this.importarexportarTotales;
	}

	public void setimportarexportarTotales(ImportarExportar importarexportarTotales) {
		this.importarexportarTotales = importarexportarTotales;
	}	
	
	public ImportarExportar getimportarexportarBean() {
		return this.importarexportarBean;
	}

	public void setimportarexportarBean(ImportarExportar importarexportarBean) {
		this.importarexportarBean = importarexportarBean;
	}	
	
	public ImportarExportarParameterReturnGeneral getimportarexportarReturnGeneral() {
		return this.importarexportarReturnGeneral;
	}

	public void setimportarexportarReturnGeneral(ImportarExportarParameterReturnGeneral importarexportarReturnGeneral) {
		this.importarexportarReturnGeneral = importarexportarReturnGeneral;
	}	
	
	
	public String numero_comprobanteBusquedaPorNumeroComprobante="";

	public String getnumero_comprobanteBusquedaPorNumeroComprobante() {
		return this.numero_comprobanteBusquedaPorNumeroComprobante;
	}

	public void setnumero_comprobanteBusquedaPorNumeroComprobante(String numero_comprobanteBusquedaPorNumeroComprobante) {
		this.numero_comprobanteBusquedaPorNumeroComprobante = numero_comprobanteBusquedaPorNumeroComprobante;
	}

	public String rucBusquedaPorRucInformante="";

	public String getrucBusquedaPorRucInformante() {
		return this.rucBusquedaPorRucInformante;
	}

	public void setrucBusquedaPorRucInformante(String rucBusquedaPorRucInformante) {
		this.rucBusquedaPorRucInformante = rucBusquedaPorRucInformante;
	}

	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_periodo_import_exportFK_IdPeriodoImportExport=-1L;

	public Long getid_periodo_import_exportFK_IdPeriodoImportExport() {
		return this.id_periodo_import_exportFK_IdPeriodoImportExport;
	}

	public void setid_periodo_import_exportFK_IdPeriodoImportExport(Long id_periodo_import_exportFK_IdPeriodoImportExport) {
		this.id_periodo_import_exportFK_IdPeriodoImportExport = id_periodo_import_exportFK_IdPeriodoImportExport;
	}

	public Long id_tipo_bancoFK_IdTipoBanco=-1L;

	public Long getid_tipo_bancoFK_IdTipoBanco() {
		return this.id_tipo_bancoFK_IdTipoBanco;
	}

	public void setid_tipo_bancoFK_IdTipoBanco(Long id_tipo_bancoFK_IdTipoBanco) {
		this.id_tipo_bancoFK_IdTipoBanco = id_tipo_bancoFK_IdTipoBanco;
	}

	public Long id_tipo_comprobanteFK_IdTipoComprobante=-1L;

	public Long getid_tipo_comprobanteFK_IdTipoComprobante() {
		return this.id_tipo_comprobanteFK_IdTipoComprobante;
	}

	public void setid_tipo_comprobanteFK_IdTipoComprobante(Long id_tipo_comprobanteFK_IdTipoComprobante) {
		this.id_tipo_comprobanteFK_IdTipoComprobante = id_tipo_comprobanteFK_IdTipoComprobante;
	}

	public Long id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco=-1L;

	public Long getid_tipo_comprobante_bancoFK_IdTipoComprobanteBanco() {
		return this.id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco;
	}

	public void setid_tipo_comprobante_bancoFK_IdTipoComprobanteBanco(Long id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco) {
		this.id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco = id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco;
	}

	public Long id_tipo_iceFK_IdTipoIce=-1L;

	public Long getid_tipo_iceFK_IdTipoIce() {
		return this.id_tipo_iceFK_IdTipoIce;
	}

	public void setid_tipo_iceFK_IdTipoIce(Long id_tipo_iceFK_IdTipoIce) {
		this.id_tipo_iceFK_IdTipoIce = id_tipo_iceFK_IdTipoIce;
	}

	public Long id_tipo_importacionFK_IdTipoImportacion=-1L;

	public Long getid_tipo_importacionFK_IdTipoImportacion() {
		return this.id_tipo_importacionFK_IdTipoImportacion;
	}

	public void setid_tipo_importacionFK_IdTipoImportacion(Long id_tipo_importacionFK_IdTipoImportacion) {
		this.id_tipo_importacionFK_IdTipoImportacion = id_tipo_importacionFK_IdTipoImportacion;
	}

	public Long id_tipo_ivaFK_IdTipoIva=-1L;

	public Long getid_tipo_ivaFK_IdTipoIva() {
		return this.id_tipo_ivaFK_IdTipoIva;
	}

	public void setid_tipo_ivaFK_IdTipoIva(Long id_tipo_ivaFK_IdTipoIva) {
		this.id_tipo_ivaFK_IdTipoIva = id_tipo_ivaFK_IdTipoIva;
	}

	public Long id_tipo_tributarioFK_IdTipoTributario=-1L;

	public Long getid_tipo_tributarioFK_IdTipoTributario() {
		return this.id_tipo_tributarioFK_IdTipoTributario;
	}

	public void setid_tipo_tributarioFK_IdTipoTributario(Long id_tipo_tributarioFK_IdTipoTributario) {
		this.id_tipo_tributarioFK_IdTipoTributario = id_tipo_tributarioFK_IdTipoTributario;
	}

	public Long id_transaccion_contaFK_IdTransaccionConta=-1L;

	public Long getid_transaccion_contaFK_IdTransaccionConta() {
		return this.id_transaccion_contaFK_IdTransaccionConta;
	}

	public void setid_transaccion_contaFK_IdTransaccionConta(Long id_transaccion_contaFK_IdTransaccionConta) {
		this.id_transaccion_contaFK_IdTransaccionConta = id_transaccion_contaFK_IdTransaccionConta;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ImportarExportarLogic getImportarExportarLogic()	{		
		return importarexportarLogic;
	}

	public void setImportarExportarLogic(ImportarExportarLogic importarexportarLogic) {
		this.importarexportarLogic = importarexportarLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoImportarExportar() {
		return isEsNuevoImportarExportar;
	}

	public void setIsEsNuevoImportarExportar(Boolean isEsNuevoImportarExportar) {
		this.isEsNuevoImportarExportar = isEsNuevoImportarExportar;
	}

	public Boolean getEsParaAccionDesdeFormularioImportarExportar() {
		return esParaAccionDesdeFormularioImportarExportar;
	}
	
	public void setEsParaAccionDesdeFormularioImportarExportar(Boolean esParaAccionDesdeFormularioImportarExportar) {
		this.esParaAccionDesdeFormularioImportarExportar = esParaAccionDesdeFormularioImportarExportar;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(importarexportarSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(importarexportarSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodoImportExportsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodoimportexportsForeignKey=new ArrayList<PeriodoImportExport>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoImportExportLogic periodoimportexportLogic=new PeriodoImportExportLogic();

			periodoimportexportLogic.getPeriodoImportExportDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionPeriodoImportExport()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoimportexportLogic.getPeriodoImportExportDataAccess().setIsForForeingKeyData(true);

					periodoimportexportLogic.getTodosPeriodoImportExportsWithConnection(sFinalQuery,new Pagination());

					this.periodoimportexportsForeignKey=periodoimportexportLogic.getPeriodoImportExports();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodoImportExport(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoimportexportLogic.getEntityWithConnection(importarexportarSessionBean.getlidPeriodoImportExportActual());
					this.periodoimportexportsForeignKey.add(periodoimportexportLogic.getPeriodoImportExport());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionContasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccioncontasForeignKey=new ArrayList<TransaccionConta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionContaLogic transaccioncontaLogic=new TransaccionContaLogic();

			transaccioncontaLogic.getTransaccionContaDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionConta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccioncontaLogic.getTransaccionContaDataAccess().setIsForForeingKeyData(true);

					transaccioncontaLogic.getTodosTransaccionContasWithConnection(sFinalQuery,new Pagination());

					this.transaccioncontasForeignKey=transaccioncontaLogic.getTransaccionContas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccionConta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccioncontaLogic.getEntityWithConnection(importarexportarSessionBean.getlidTransaccionContaActual());
					this.transaccioncontasForeignKey.add(transaccioncontaLogic.getTransaccionConta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoImportacionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoimportacionsForeignKey=new ArrayList<TipoImportacion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoImportacion tipoimportacionNulo = new TipoImportacion();

			TipoImportacionLogic tipoimportacionLogic=new TipoImportacionLogic();

			tipoimportacionLogic.getTipoImportacionDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoImportacion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoimportacionLogic.getTipoImportacionDataAccess().setIsForForeingKeyData(true);

					tipoimportacionLogic.getTodosTipoImportacionsWithConnection(sFinalQuery,new Pagination());

					this.tipoimportacionsForeignKey=tipoimportacionLogic.getTipoImportacions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipoimportacionsForeignKey.add(0, tipoimportacionNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoImportacion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoimportacionLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoImportacionActual());
					this.tipoimportacionsForeignKey.add(tipoimportacionLogic.getTipoImportacion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoComprobantesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocomprobantesForeignKey=new ArrayList<TipoComprobante>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoComprobanteLogic tipocomprobanteLogic=new TipoComprobanteLogic();

			tipocomprobanteLogic.getTipoComprobanteDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobante()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocomprobanteLogic.getTipoComprobanteDataAccess().setIsForForeingKeyData(true);

					tipocomprobanteLogic.getTodosTipoComprobantesWithConnection(sFinalQuery,new Pagination());

					this.tipocomprobantesForeignKey=tipocomprobanteLogic.getTipoComprobantes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoComprobante(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocomprobanteLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoComprobanteActual());
					this.tipocomprobantesForeignKey.add(tipocomprobanteLogic.getTipoComprobante());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTributariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTributarioLogic tipotributarioLogic=new TipoTributarioLogic();

			tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

					tipotributarioLogic.getTodosTipoTributariosWithConnection(sFinalQuery,new Pagination());

					this.tipotributariosForeignKey=tipotributarioLogic.getTipoTributarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTributario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotributarioLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoTributarioActual());
					this.tipotributariosForeignKey.add(tipotributarioLogic.getTipoTributario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(importarexportarSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoIvasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoivasForeignKey=new ArrayList<TipoIva>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoIvaLogic tipoivaLogic=new TipoIvaLogic();

			tipoivaLogic.getTipoIvaDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIva()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoivaLogic.getTipoIvaDataAccess().setIsForForeingKeyData(true);

					tipoivaLogic.getTodosTipoIvasWithConnection(sFinalQuery,new Pagination());

					this.tipoivasForeignKey=tipoivaLogic.getTipoIvas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoIva(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoivaLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoIvaActual());
					this.tipoivasForeignKey.add(tipoivaLogic.getTipoIva());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoIcesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoicesForeignKey=new ArrayList<TipoIce>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoIceLogic tipoiceLogic=new TipoIceLogic();

			tipoiceLogic.getTipoIceDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIce()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoiceLogic.getTipoIceDataAccess().setIsForForeingKeyData(true);

					tipoiceLogic.getTodosTipoIcesWithConnection(sFinalQuery,new Pagination());

					this.tipoicesForeignKey=tipoiceLogic.getTipoIces();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoIce(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoiceLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoIceActual());
					this.tipoicesForeignKey.add(tipoiceLogic.getTipoIce());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipobancosForeignKey=new ArrayList<TipoBanco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoBancoLogic tipobancoLogic=new TipoBancoLogic();

			//tipobancoLogic.getTipoBancoDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipobancoLogic.getTipoBancoDataAccess().setIsForForeingKeyData(true);

					tipobancoLogic.getTodosTipoBancosWithConnection(sFinalQuery,new Pagination());

					this.tipobancosForeignKey=tipobancoLogic.getTipoBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipobancoLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoBancoActual());
					this.tipobancosForeignKey.add(tipobancoLogic.getTipoBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoComprobanteBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocomprobantebancosForeignKey=new ArrayList<TipoComprobante>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoComprobanteLogic tipocomprobanteLogic=new TipoComprobanteLogic();

			//tipocomprobanteLogic.getTipoComprobanteDataAccess().setIsForForeingKeyData(true);

			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobanteBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocomprobantebancoLogic.getTipoComprobanteDataAccess().setIsForForeingKeyData(true);

					tipocomprobanteLogic.getTodosTipoComprobantesWithConnection(sFinalQuery,new Pagination());

					this.tipocomprobantebancosForeignKey=tipocomprobanteLogic.getTipoComprobantes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoComprobanteBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocomprobanteLogic.getEntityWithConnection(importarexportarSessionBean.getlidTipoComprobanteBancoActual());
					this.tipocomprobantebancosForeignKey.add(tipocomprobanteLogic.getTipoComprobante());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloImportarExportar.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloImportarExportarGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloImportarExportarGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloImportarExportarGenerico!=null && jComboBoxid_moduloImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_moduloImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableImportarExportar.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableImportarExportarGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableImportarExportarGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableImportarExportarGenerico!=null && jComboBoxid_asiento_contableImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoImportExportForeignKey(Long idPeriodoImportExportSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			PeriodoImportExport  periodoimportexportTemp=null;

			for(PeriodoImportExport periodoimportexportAux:periodoimportexportsForeignKey) {
				if(periodoimportexportAux.getId()!=null && periodoimportexportAux.getId().equals(idPeriodoImportExportSeleccionado)) {
					periodoimportexportTemp=periodoimportexportAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoimportexportTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setPeriodoImportExport(periodoimportexportTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setSelectedItem(periodoimportexportTemp);
					}
				} else {
					//jComboBoxid_periodo_import_exportImportarExportar.setSelectedItem(periodoimportexportTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdPeriodoImportExport") || sFormularioTipoBusqueda.equals("Todos")){
					if(periodoimportexportTemp!=null && jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar!=null) {
						jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.setSelectedItem(periodoimportexportTemp);
					} else {
						if(jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar!=null) {
							//jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.setSelectedItem(periodoimportexportTemp);
							if(jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.getItemCount()>0) {
								jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoImportExportForeignKeyDescripcion(Long idPeriodoImportExportSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			PeriodoImportExport  periodoimportexportTemp=null;

			for(PeriodoImportExport periodoimportexportAux:periodoimportexportsForeignKey) {
				if(periodoimportexportAux.getId()!=null && periodoimportexportAux.getId().equals(idPeriodoImportExportSeleccionado)) {
					periodoimportexportTemp=periodoimportexportAux;
					break;
				}
			}


			sDescripcion=PeriodoImportExportConstantesFunciones.getPeriodoImportExportDescripcion(periodoimportexportTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoImportExportForeignKeyGenerico(Long idPeriodoImportExportSeleccionado,JComboBox jComboBoxid_periodo_import_exportImportarExportarGenerico)throws Exception
	{
		try
		{
			PeriodoImportExport  periodoimportexportTemp=null;

			for(PeriodoImportExport periodoimportexportAux:periodoimportexportsForeignKey) {
				if(periodoimportexportAux.getId()!=null && periodoimportexportAux.getId().equals(idPeriodoImportExportSeleccionado)) {
					periodoimportexportTemp=periodoimportexportAux;
					break;
				}
			}

			if(periodoimportexportTemp!=null) {
				jComboBoxid_periodo_import_exportImportarExportarGenerico.setSelectedItem(periodoimportexportTemp);
			} else {
				if(jComboBoxid_periodo_import_exportImportarExportarGenerico!=null && jComboBoxid_periodo_import_exportImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_periodo_import_exportImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionContaForeignKey(Long idTransaccionContaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TransaccionConta  transaccioncontaTemp=null;

			for(TransaccionConta transaccioncontaAux:transaccioncontasForeignKey) {
				if(transaccioncontaAux.getId()!=null && transaccioncontaAux.getId().equals(idTransaccionContaSeleccionado)) {
					transaccioncontaTemp=transaccioncontaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccioncontaTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTransaccionConta(transaccioncontaTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setSelectedItem(transaccioncontaTemp);
					}
				} else {
					//jComboBoxid_transaccion_contaImportarExportar.setSelectedItem(transaccioncontaTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccionConta") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccioncontaTemp!=null && jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar!=null) {
						jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.setSelectedItem(transaccioncontaTemp);
					} else {
						if(jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar!=null) {
							//jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.setSelectedItem(transaccioncontaTemp);
							if(jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.getItemCount()>0) {
								jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionContaForeignKeyDescripcion(Long idTransaccionContaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TransaccionConta  transaccioncontaTemp=null;

			for(TransaccionConta transaccioncontaAux:transaccioncontasForeignKey) {
				if(transaccioncontaAux.getId()!=null && transaccioncontaAux.getId().equals(idTransaccionContaSeleccionado)) {
					transaccioncontaTemp=transaccioncontaAux;
					break;
				}
			}


			sDescripcion=TransaccionContaConstantesFunciones.getTransaccionContaDescripcion(transaccioncontaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionContaForeignKeyGenerico(Long idTransaccionContaSeleccionado,JComboBox jComboBoxid_transaccion_contaImportarExportarGenerico)throws Exception
	{
		try
		{
			TransaccionConta  transaccioncontaTemp=null;

			for(TransaccionConta transaccioncontaAux:transaccioncontasForeignKey) {
				if(transaccioncontaAux.getId()!=null && transaccioncontaAux.getId().equals(idTransaccionContaSeleccionado)) {
					transaccioncontaTemp=transaccioncontaAux;
					break;
				}
			}

			if(transaccioncontaTemp!=null) {
				jComboBoxid_transaccion_contaImportarExportarGenerico.setSelectedItem(transaccioncontaTemp);
			} else {
				if(jComboBoxid_transaccion_contaImportarExportarGenerico!=null && jComboBoxid_transaccion_contaImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_transaccion_contaImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoImportacionForeignKey(Long idTipoImportacionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoImportacion  tipoimportacionTemp=null;

			for(TipoImportacion tipoimportacionAux:tipoimportacionsForeignKey) {
				if(tipoimportacionAux.getId()!=null && tipoimportacionAux.getId().equals(idTipoImportacionSeleccionado)) {
					tipoimportacionTemp=tipoimportacionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoimportacionTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoImportacion(tipoimportacionTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setSelectedItem(tipoimportacionTemp);
					}
				} else {
					//jComboBoxid_tipo_importacionImportarExportar.setSelectedItem(tipoimportacionTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoImportacion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoimportacionTemp!=null && jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar!=null) {
						jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.setSelectedItem(tipoimportacionTemp);
					} else {
						if(jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar!=null) {
							//jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.setSelectedItem(tipoimportacionTemp);
							if(jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoImportacionForeignKeyDescripcion(Long idTipoImportacionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoImportacion  tipoimportacionTemp=null;

			for(TipoImportacion tipoimportacionAux:tipoimportacionsForeignKey) {
				if(tipoimportacionAux.getId()!=null && tipoimportacionAux.getId().equals(idTipoImportacionSeleccionado)) {
					tipoimportacionTemp=tipoimportacionAux;
					break;
				}
			}


			sDescripcion=TipoImportacionConstantesFunciones.getTipoImportacionDescripcion(tipoimportacionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoImportacionForeignKeyGenerico(Long idTipoImportacionSeleccionado,JComboBox jComboBoxid_tipo_importacionImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoImportacion  tipoimportacionTemp=null;

			for(TipoImportacion tipoimportacionAux:tipoimportacionsForeignKey) {
				if(tipoimportacionAux.getId()!=null && tipoimportacionAux.getId().equals(idTipoImportacionSeleccionado)) {
					tipoimportacionTemp=tipoimportacionAux;
					break;
				}
			}

			if(tipoimportacionTemp!=null) {
				jComboBoxid_tipo_importacionImportarExportarGenerico.setSelectedItem(tipoimportacionTemp);
			} else {
				if(jComboBoxid_tipo_importacionImportarExportarGenerico!=null && jComboBoxid_tipo_importacionImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_importacionImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoComprobanteForeignKey(Long idTipoComprobanteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobanteTemp=null;

			for(TipoComprobante tipocomprobanteAux:tipocomprobantesForeignKey) {
				if(tipocomprobanteAux.getId()!=null && tipocomprobanteAux.getId().equals(idTipoComprobanteSeleccionado)) {
					tipocomprobanteTemp=tipocomprobanteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocomprobanteTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoComprobante(tipocomprobanteTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setSelectedItem(tipocomprobanteTemp);
					}
				} else {
					//jComboBoxid_tipo_comprobanteImportarExportar.setSelectedItem(tipocomprobanteTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoComprobante") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocomprobanteTemp!=null && jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar!=null) {
						jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.setSelectedItem(tipocomprobanteTemp);
					} else {
						if(jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar!=null) {
							//jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.setSelectedItem(tipocomprobanteTemp);
							if(jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoComprobanteForeignKeyDescripcion(Long idTipoComprobanteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoComprobante  tipocomprobanteTemp=null;

			for(TipoComprobante tipocomprobanteAux:tipocomprobantesForeignKey) {
				if(tipocomprobanteAux.getId()!=null && tipocomprobanteAux.getId().equals(idTipoComprobanteSeleccionado)) {
					tipocomprobanteTemp=tipocomprobanteAux;
					break;
				}
			}


			sDescripcion=TipoComprobanteConstantesFunciones.getTipoComprobanteDescripcion(tipocomprobanteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoComprobanteForeignKeyGenerico(Long idTipoComprobanteSeleccionado,JComboBox jComboBoxid_tipo_comprobanteImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobanteTemp=null;

			for(TipoComprobante tipocomprobanteAux:tipocomprobantesForeignKey) {
				if(tipocomprobanteAux.getId()!=null && tipocomprobanteAux.getId().equals(idTipoComprobanteSeleccionado)) {
					tipocomprobanteTemp=tipocomprobanteAux;
					break;
				}
			}

			if(tipocomprobanteTemp!=null) {
				jComboBoxid_tipo_comprobanteImportarExportarGenerico.setSelectedItem(tipocomprobanteTemp);
			} else {
				if(jComboBoxid_tipo_comprobanteImportarExportarGenerico!=null && jComboBoxid_tipo_comprobanteImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_comprobanteImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTributarioForeignKey(Long idTipoTributarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotributarioTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoTributario(tipotributarioTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setSelectedItem(tipotributarioTemp);
					}
				} else {
					//jComboBoxid_tipo_tributarioImportarExportar.setSelectedItem(tipotributarioTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotributarioTemp!=null && jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar!=null) {
						jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.setSelectedItem(tipotributarioTemp);
					} else {
						if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar!=null) {
							//jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.setSelectedItem(tipotributarioTemp);
							if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTributarioForeignKeyDescripcion(Long idTipoTributarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}


			sDescripcion=TipoTributarioConstantesFunciones.getTipoTributarioDescripcion(tipotributarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTributarioForeignKeyGenerico(Long idTipoTributarioSeleccionado,JComboBox jComboBoxid_tipo_tributarioImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(tipotributarioTemp!=null) {
				jComboBoxid_tipo_tributarioImportarExportarGenerico.setSelectedItem(tipotributarioTemp);
			} else {
				if(jComboBoxid_tipo_tributarioImportarExportarGenerico!=null && jComboBoxid_tipo_tributarioImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_tributarioImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteImportarExportar.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteImportarExportar!=null) {
						jComboBoxid_clienteFK_IdClienteImportarExportar.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteImportarExportar!=null) {
							//jComboBoxid_clienteFK_IdClienteImportarExportar.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteImportarExportar.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteImportarExportarGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteImportarExportarGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteImportarExportarGenerico!=null && jComboBoxid_clienteImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_clienteImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoIvaForeignKey(Long idTipoIvaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoIva  tipoivaTemp=null;

			for(TipoIva tipoivaAux:tipoivasForeignKey) {
				if(tipoivaAux.getId()!=null && tipoivaAux.getId().equals(idTipoIvaSeleccionado)) {
					tipoivaTemp=tipoivaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoivaTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoIva(tipoivaTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setSelectedItem(tipoivaTemp);
					}
				} else {
					//jComboBoxid_tipo_ivaImportarExportar.setSelectedItem(tipoivaTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoIva") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoivaTemp!=null && jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar!=null) {
						jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.setSelectedItem(tipoivaTemp);
					} else {
						if(jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar!=null) {
							//jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.setSelectedItem(tipoivaTemp);
							if(jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoIvaForeignKeyDescripcion(Long idTipoIvaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoIva  tipoivaTemp=null;

			for(TipoIva tipoivaAux:tipoivasForeignKey) {
				if(tipoivaAux.getId()!=null && tipoivaAux.getId().equals(idTipoIvaSeleccionado)) {
					tipoivaTemp=tipoivaAux;
					break;
				}
			}


			sDescripcion=TipoIvaConstantesFunciones.getTipoIvaDescripcion(tipoivaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoIvaForeignKeyGenerico(Long idTipoIvaSeleccionado,JComboBox jComboBoxid_tipo_ivaImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoIva  tipoivaTemp=null;

			for(TipoIva tipoivaAux:tipoivasForeignKey) {
				if(tipoivaAux.getId()!=null && tipoivaAux.getId().equals(idTipoIvaSeleccionado)) {
					tipoivaTemp=tipoivaAux;
					break;
				}
			}

			if(tipoivaTemp!=null) {
				jComboBoxid_tipo_ivaImportarExportarGenerico.setSelectedItem(tipoivaTemp);
			} else {
				if(jComboBoxid_tipo_ivaImportarExportarGenerico!=null && jComboBoxid_tipo_ivaImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_ivaImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoIceForeignKey(Long idTipoIceSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoIce  tipoiceTemp=null;

			for(TipoIce tipoiceAux:tipoicesForeignKey) {
				if(tipoiceAux.getId()!=null && tipoiceAux.getId().equals(idTipoIceSeleccionado)) {
					tipoiceTemp=tipoiceAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoiceTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoIce(tipoiceTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setSelectedItem(tipoiceTemp);
					}
				} else {
					//jComboBoxid_tipo_iceImportarExportar.setSelectedItem(tipoiceTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoIce") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoiceTemp!=null && jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar!=null) {
						jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.setSelectedItem(tipoiceTemp);
					} else {
						if(jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar!=null) {
							//jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.setSelectedItem(tipoiceTemp);
							if(jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoIceForeignKeyDescripcion(Long idTipoIceSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoIce  tipoiceTemp=null;

			for(TipoIce tipoiceAux:tipoicesForeignKey) {
				if(tipoiceAux.getId()!=null && tipoiceAux.getId().equals(idTipoIceSeleccionado)) {
					tipoiceTemp=tipoiceAux;
					break;
				}
			}


			sDescripcion=TipoIceConstantesFunciones.getTipoIceDescripcion(tipoiceTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoIceForeignKeyGenerico(Long idTipoIceSeleccionado,JComboBox jComboBoxid_tipo_iceImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoIce  tipoiceTemp=null;

			for(TipoIce tipoiceAux:tipoicesForeignKey) {
				if(tipoiceAux.getId()!=null && tipoiceAux.getId().equals(idTipoIceSeleccionado)) {
					tipoiceTemp=tipoiceAux;
					break;
				}
			}

			if(tipoiceTemp!=null) {
				jComboBoxid_tipo_iceImportarExportarGenerico.setSelectedItem(tipoiceTemp);
			} else {
				if(jComboBoxid_tipo_iceImportarExportarGenerico!=null && jComboBoxid_tipo_iceImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_iceImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoBancoForeignKey(Long idTipoBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoBanco  tipobancoTemp=null;

			for(TipoBanco tipobancoAux:tipobancosForeignKey) {
				if(tipobancoAux.getId()!=null && tipobancoAux.getId().equals(idTipoBancoSeleccionado)) {
					tipobancoTemp=tipobancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipobancoTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoBanco(tipobancoTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setSelectedItem(tipobancoTemp);
					}
				} else {
					//jComboBoxid_tipo_bancoImportarExportar.setSelectedItem(tipobancoTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipobancoTemp!=null && jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar!=null) {
						jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.setSelectedItem(tipobancoTemp);
					} else {
						if(jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar!=null) {
							//jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.setSelectedItem(tipobancoTemp);
							if(jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoBancoForeignKeyDescripcion(Long idTipoBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoBanco  tipobancoTemp=null;

			for(TipoBanco tipobancoAux:tipobancosForeignKey) {
				if(tipobancoAux.getId()!=null && tipobancoAux.getId().equals(idTipoBancoSeleccionado)) {
					tipobancoTemp=tipobancoAux;
					break;
				}
			}


			sDescripcion=TipoBancoConstantesFunciones.getTipoBancoDescripcion(tipobancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoBancoForeignKeyGenerico(Long idTipoBancoSeleccionado,JComboBox jComboBoxid_tipo_bancoImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoBanco  tipobancoTemp=null;

			for(TipoBanco tipobancoAux:tipobancosForeignKey) {
				if(tipobancoAux.getId()!=null && tipobancoAux.getId().equals(idTipoBancoSeleccionado)) {
					tipobancoTemp=tipobancoAux;
					break;
				}
			}

			if(tipobancoTemp!=null) {
				jComboBoxid_tipo_bancoImportarExportarGenerico.setSelectedItem(tipobancoTemp);
			} else {
				if(jComboBoxid_tipo_bancoImportarExportarGenerico!=null && jComboBoxid_tipo_bancoImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_bancoImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoComprobanteBancoForeignKey(Long idTipoComprobanteBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobantebancoTemp=null;

			for(TipoComprobante tipocomprobantebancoAux:tipocomprobantebancosForeignKey) {
				if(tipocomprobantebancoAux.getId()!=null && tipocomprobantebancoAux.getId().equals(idTipoComprobanteBancoSeleccionado)) {
					tipocomprobantebancoTemp=tipocomprobantebancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocomprobantebancoTemp!=null) {

					if(this.importarexportar!=null) {
						this.importarexportar.setTipoComprobanteBanco(tipocomprobantebancoTemp);
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedItem(tipocomprobantebancoTemp);
					}
				} else {
					//jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedItem(tipocomprobantebancoTemp);
					if(this.jInternalFrameDetalleFormImportarExportar!=null) {
						if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.getItemCount()>0) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoComprobanteBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocomprobantebancoTemp!=null && jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar!=null) {
						jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.setSelectedItem(tipocomprobantebancoTemp);
					} else {
						if(jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar!=null) {
							//jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.setSelectedItem(tipocomprobantebancoTemp);
							if(jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.getItemCount()>0) {
								jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoComprobanteBancoForeignKeyDescripcion(Long idTipoComprobanteBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoComprobante  tipocomprobantebancoTemp=null;

			for(TipoComprobante tipocomprobantebancoAux:tipocomprobantebancosForeignKey) {
				if(tipocomprobantebancoAux.getId()!=null && tipocomprobantebancoAux.getId().equals(idTipoComprobanteBancoSeleccionado)) {
					tipocomprobantebancoTemp=tipocomprobantebancoAux;
					break;
				}
			}


			sDescripcion=TipoComprobanteConstantesFunciones.getTipoComprobanteDescripcion(tipocomprobantebancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoComprobanteBancoForeignKeyGenerico(Long idTipoComprobanteBancoSeleccionado,JComboBox jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobantebancoTemp=null;

			for(TipoComprobante tipocomprobantebancoAux:tipocomprobantebancosForeignKey) {
				if(tipocomprobantebancoAux.getId()!=null && tipocomprobantebancoAux.getId().equals(idTipoComprobanteBancoSeleccionado)) {
					tipocomprobantebancoTemp=tipocomprobantebancoAux;
					break;
				}
			}

			if(tipocomprobantebancoTemp!=null) {
				jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico.setSelectedItem(tipocomprobantebancoTemp);
			} else {
				if(jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico!=null && jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico.getItemCount()>0) {
					jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_moduloImportarExportarGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloImportarExportarGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloImportarExportarGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				importarexportar.setid_modulo(moduloAux.getId());
				importarexportar.setmodulo_descripcion(ImportarExportarConstantesFunciones.getModuloDescripcion(moduloAux));
				importarexportar.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_asiento_contableImportarExportarGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableImportarExportarGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableImportarExportarGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				importarexportar.setid_asiento_contable(asientocontableAux.getId());
				importarexportar.setasientocontable_descripcion(ImportarExportarConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				importarexportar.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoImportExportForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_periodo_import_exportImportarExportarGenerico)throws Exception
	{
		try
		{
			PeriodoImportExport  periodoimportexportAux=new PeriodoImportExport();

			if(jComboBoxid_periodo_import_exportImportarExportarGenerico==null) {
				periodoimportexportAux=(PeriodoImportExport)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.getSelectedItem();
			} else {
				periodoimportexportAux=(PeriodoImportExport)jComboBoxid_periodo_import_exportImportarExportarGenerico.getSelectedItem();
			}

			if(periodoimportexportAux!=null && periodoimportexportAux.getId()!=null) {
				importarexportar.setid_periodo_import_export(periodoimportexportAux.getId());
				importarexportar.setperiodoimportexport_descripcion(ImportarExportarConstantesFunciones.getPeriodoImportExportDescripcion(periodoimportexportAux));
				importarexportar.setPeriodoImportExport(periodoimportexportAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionContaForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_transaccion_contaImportarExportarGenerico)throws Exception
	{
		try
		{
			TransaccionConta  transaccioncontaAux=new TransaccionConta();

			if(jComboBoxid_transaccion_contaImportarExportarGenerico==null) {
				transaccioncontaAux=(TransaccionConta)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.getSelectedItem();
			} else {
				transaccioncontaAux=(TransaccionConta)jComboBoxid_transaccion_contaImportarExportarGenerico.getSelectedItem();
			}

			if(transaccioncontaAux!=null && transaccioncontaAux.getId()!=null) {
				importarexportar.setid_transaccion_conta(transaccioncontaAux.getId());
				importarexportar.settransaccionconta_descripcion(ImportarExportarConstantesFunciones.getTransaccionContaDescripcion(transaccioncontaAux));
				importarexportar.setTransaccionConta(transaccioncontaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoImportacionForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_importacionImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoImportacion  tipoimportacionAux=new TipoImportacion();

			if(jComboBoxid_tipo_importacionImportarExportarGenerico==null) {
				tipoimportacionAux=(TipoImportacion)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.getSelectedItem();
			} else {
				tipoimportacionAux=(TipoImportacion)jComboBoxid_tipo_importacionImportarExportarGenerico.getSelectedItem();
			}

			if(tipoimportacionAux!=null && tipoimportacionAux.getId()!=null) {
				importarexportar.setid_tipo_importacion(tipoimportacionAux.getId());
				importarexportar.settipoimportacion_descripcion(ImportarExportarConstantesFunciones.getTipoImportacionDescripcion(tipoimportacionAux));
				importarexportar.setTipoImportacion(tipoimportacionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoComprobanteForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_comprobanteImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobanteAux=new TipoComprobante();

			if(jComboBoxid_tipo_comprobanteImportarExportarGenerico==null) {
				tipocomprobanteAux=(TipoComprobante)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.getSelectedItem();
			} else {
				tipocomprobanteAux=(TipoComprobante)jComboBoxid_tipo_comprobanteImportarExportarGenerico.getSelectedItem();
			}

			if(tipocomprobanteAux!=null && tipocomprobanteAux.getId()!=null) {
				importarexportar.setid_tipo_comprobante(tipocomprobanteAux.getId());
				importarexportar.settipocomprobante_descripcion(ImportarExportarConstantesFunciones.getTipoComprobanteDescripcion(tipocomprobanteAux));
				importarexportar.setTipoComprobante(tipocomprobanteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTributarioForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_tributarioImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioAux=new TipoTributario();

			if(jComboBoxid_tipo_tributarioImportarExportarGenerico==null) {
				tipotributarioAux=(TipoTributario)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.getSelectedItem();
			} else {
				tipotributarioAux=(TipoTributario)jComboBoxid_tipo_tributarioImportarExportarGenerico.getSelectedItem();
			}

			if(tipotributarioAux!=null && tipotributarioAux.getId()!=null) {
				importarexportar.setid_tipo_tributario(tipotributarioAux.getId());
				importarexportar.settipotributario_descripcion(ImportarExportarConstantesFunciones.getTipoTributarioDescripcion(tipotributarioAux));
				importarexportar.setTipoTributario(tipotributarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_clienteImportarExportarGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteImportarExportarGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteImportarExportarGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				importarexportar.setid_cliente(clienteAux.getId());
				importarexportar.setcliente_descripcion(ImportarExportarConstantesFunciones.getClienteDescripcion(clienteAux));
				importarexportar.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoIvaForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_ivaImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoIva  tipoivaAux=new TipoIva();

			if(jComboBoxid_tipo_ivaImportarExportarGenerico==null) {
				tipoivaAux=(TipoIva)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.getSelectedItem();
			} else {
				tipoivaAux=(TipoIva)jComboBoxid_tipo_ivaImportarExportarGenerico.getSelectedItem();
			}

			if(tipoivaAux!=null && tipoivaAux.getId()!=null) {
				importarexportar.setid_tipo_iva(tipoivaAux.getId());
				importarexportar.settipoiva_descripcion(ImportarExportarConstantesFunciones.getTipoIvaDescripcion(tipoivaAux));
				importarexportar.setTipoIva(tipoivaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoIceForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_iceImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoIce  tipoiceAux=new TipoIce();

			if(jComboBoxid_tipo_iceImportarExportarGenerico==null) {
				tipoiceAux=(TipoIce)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.getSelectedItem();
			} else {
				tipoiceAux=(TipoIce)jComboBoxid_tipo_iceImportarExportarGenerico.getSelectedItem();
			}

			if(tipoiceAux!=null && tipoiceAux.getId()!=null) {
				importarexportar.setid_tipo_ice(tipoiceAux.getId());
				importarexportar.settipoice_descripcion(ImportarExportarConstantesFunciones.getTipoIceDescripcion(tipoiceAux));
				importarexportar.setTipoIce(tipoiceAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoBancoForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_bancoImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoBanco  tipobancoAux=new TipoBanco();

			if(jComboBoxid_tipo_bancoImportarExportarGenerico==null) {
				tipobancoAux=(TipoBanco)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.getSelectedItem();
			} else {
				tipobancoAux=(TipoBanco)jComboBoxid_tipo_bancoImportarExportarGenerico.getSelectedItem();
			}

			if(tipobancoAux!=null && tipobancoAux.getId()!=null) {
				importarexportar.setid_tipo_banco(tipobancoAux.getId());
				importarexportar.settipobanco_descripcion(ImportarExportarConstantesFunciones.getTipoBancoDescripcion(tipobancoAux));
				importarexportar.setTipoBanco(tipobancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoComprobanteBancoForeignKey(ImportarExportar importarexportar,JComboBox jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico)throws Exception
	{
		try
		{
			TipoComprobante  tipocomprobanteAux=new TipoComprobante();

			if(jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico==null) {
				tipocomprobanteAux=(TipoComprobante)this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.getSelectedItem();
			} else {
				tipocomprobanteAux=(TipoComprobante)jComboBoxid_tipo_comprobante_bancoImportarExportarGenerico.getSelectedItem();
			}

			if(tipocomprobanteAux!=null && tipocomprobanteAux.getId()!=null) {
				importarexportar.setid_tipo_comprobante_banco(tipocomprobanteAux.getId());
				importarexportar.settipocomprobantebanco_descripcion(ImportarExportarConstantesFunciones.getTipoComprobanteBancoDescripcion(tipocomprobanteAux));
				importarexportar.setTipoComprobanteBanco(tipocomprobanteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.addItem(asientocontable);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodoImportExportsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodoImportExport=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.removeAllItems();

							for(PeriodoImportExport periodoimportexport:this.periodoimportexportsForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.addItem(periodoimportexport);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPeriodoImportExport") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.removeAllItems();

							for(PeriodoImportExport periodoimportexport:this.periodoimportexportsForeignKey) {
								this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.addItem(periodoimportexport);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionContasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccionConta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.removeAllItems();

							for(TransaccionConta transaccionconta:this.transaccioncontasForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.addItem(transaccionconta);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccionConta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.removeAllItems();

							for(TransaccionConta transaccionconta:this.transaccioncontasForeignKey) {
								this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.addItem(transaccionconta);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoImportacionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoImportacion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.removeAllItems();

							for(TipoImportacion tipoimportacion:this.tipoimportacionsForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.addItem(tipoimportacion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoImportacion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.removeAllItems();

							for(TipoImportacion tipoimportacion:this.tipoimportacionsForeignKey) {
								this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.addItem(tipoimportacion);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoComprobantesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoComprobante=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.removeAllItems();

							for(TipoComprobante tipocomprobante:this.tipocomprobantesForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.addItem(tipocomprobante);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoComprobante") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.removeAllItems();

							for(TipoComprobante tipocomprobante:this.tipocomprobantesForeignKey) {
								this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.addItem(tipocomprobante);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTributariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTributario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.addItem(tipotributario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.addItem(tipotributario);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteImportarExportar.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteImportarExportar.addItem(cliente);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoIvasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoIva=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.removeAllItems();

							for(TipoIva tipoiva:this.tipoivasForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.addItem(tipoiva);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoIva") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.removeAllItems();

							for(TipoIva tipoiva:this.tipoivasForeignKey) {
								this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.addItem(tipoiva);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoIcesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoIce=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.removeAllItems();

							for(TipoIce tipoice:this.tipoicesForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.addItem(tipoice);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoIce") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.removeAllItems();

							for(TipoIce tipoice:this.tipoicesForeignKey) {
								this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.addItem(tipoice);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.removeAllItems();

							for(TipoBanco tipobanco:this.tipobancosForeignKey) {
								if(tipobanco.getes_defecto()) {
									this.importarexportarBean.setid_tipo_banco(tipobanco.getId());
								}

								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.addItem(tipobanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.removeAllItems();

							for(TipoBanco tipobanco:this.tipobancosForeignKey) {
								this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.addItem(tipobanco);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoComprobanteBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoComprobante=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.removeAllItems();

							for(TipoComprobante tipocomprobantebanco:this.tipocomprobantebancosForeignKey) {
								this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.addItem(tipocomprobantebanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormImportarExportar!=null) { 
					}

					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoComprobanteBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.removeAllItems();

							for(TipoComprobante tipocomprobantebanco:this.tipocomprobantebancosForeignKey) {
								this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.addItem(tipocomprobantebanco);
							}
						}

						if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoImportExportForeignKey(PeriodoImportExport periodoimportexport,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setSelectedItem(periodoimportexport);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.setSelectedItem(periodoimportexport);
						} else {
							this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionContaForeignKey(TransaccionConta transaccionconta,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setSelectedItem(transaccionconta);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.setSelectedItem(transaccionconta);
						} else {
							this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoImportacionForeignKey(TipoImportacion tipoimportacion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setSelectedItem(tipoimportacion);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.setSelectedItem(tipoimportacion);
						} else {
							this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoComprobanteForeignKey(TipoComprobante tipocomprobante,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setSelectedItem(tipocomprobante);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.setSelectedItem(tipocomprobante);
						} else {
							this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTributarioForeignKey(TipoTributario tipotributario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setSelectedItem(tipotributario);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.setSelectedItem(tipotributario);
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteImportarExportar.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoIvaForeignKey(TipoIva tipoiva,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setSelectedItem(tipoiva);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.setSelectedItem(tipoiva);
						} else {
							this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoIceForeignKey(TipoIce tipoice,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setSelectedItem(tipoice);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.setSelectedItem(tipoice);
						} else {
							this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoBancoForeignKey(TipoBanco tipobanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setSelectedItem(tipobanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.setSelectedItem(tipobanco);
						} else {
							this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoComprobanteBancoForeignKey(TipoComprobante tipocomprobantebanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedItem(tipocomprobantebanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormImportarExportar!=null) {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.setSelectedItem(tipocomprobantebanco);
						} else {
							this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesImportarExportar() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ImportarExportarConstantesFunciones.refrescarForeignKeysDescripcionesImportarExportar(this.importarexportarLogic.getImportarExportars());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ImportarExportarConstantesFunciones.refrescarForeignKeysDescripcionesImportarExportar(this.importarexportars);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(PeriodoImportExport.class));
		classes.add(new Classe(TransaccionConta.class));
		classes.add(new Classe(TipoImportacion.class));
		classes.add(new Classe(TipoComprobante.class));
		classes.add(new Classe(TipoTributario.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(TipoIva.class));
		classes.add(new Classe(TipoIce.class));
		classes.add(new Classe(TipoBanco.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//importarexportarLogic.setImportarExportars(this.importarexportars);
			importarexportarLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ImportarExportarParameterReturnGeneral getImportarExportarParameterGeneral() {
		return this.importarexportarParameterGeneral;
	}
	
	public void setImportarExportarParameterGeneral(ImportarExportarParameterReturnGeneral importarexportarParameterGeneral) {
		this.importarexportarParameterGeneral = importarexportarParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoImportarExportar() {
		return isPermisoTodoImportarExportar;
	}

	public void setIsPermisoTodoImportarExportar(Boolean isPermisoTodoImportarExportar) {
		this.isPermisoTodoImportarExportar = isPermisoTodoImportarExportar;
	}

	public Boolean getIsPermisoNuevoImportarExportar() {
		return isPermisoNuevoImportarExportar;
	}

	public void setIsPermisoNuevoImportarExportar(Boolean isPermisoNuevoImportarExportar) {
		this.isPermisoNuevoImportarExportar = isPermisoNuevoImportarExportar;
	}

	public Boolean getIsPermisoActualizarImportarExportar() {
		return isPermisoActualizarImportarExportar;
	}

	public void setIsPermisoActualizarImportarExportar(Boolean isPermisoActualizarImportarExportar) {
		this.isPermisoActualizarImportarExportar = isPermisoActualizarImportarExportar;
	}

	public Boolean getIsPermisoEliminarImportarExportar() {
		return isPermisoEliminarImportarExportar;
	}

	public void setIsPermisoEliminarImportarExportar(Boolean isPermisoEliminarImportarExportar) {
		this.isPermisoEliminarImportarExportar = isPermisoEliminarImportarExportar;
	}

	public Boolean getIsPermisoGuardarCambiosImportarExportar() {
		return isPermisoGuardarCambiosImportarExportar;
	}

	public void setIsPermisoGuardarCambiosImportarExportar(Boolean isPermisoGuardarCambiosImportarExportar) {
		this.isPermisoGuardarCambiosImportarExportar = isPermisoGuardarCambiosImportarExportar;
	}
	
	public Boolean getIsPermisoConsultaImportarExportar() {
		return isPermisoConsultaImportarExportar;
	}

	public void setIsPermisoConsultaImportarExportar(Boolean isPermisoConsultaImportarExportar) {
		this.isPermisoConsultaImportarExportar = isPermisoConsultaImportarExportar;
	}

	public Boolean getIsPermisoBusquedaImportarExportar() {
		return isPermisoBusquedaImportarExportar;
	}

	public void setIsPermisoBusquedaImportarExportar(Boolean isPermisoBusquedaImportarExportar) {
		this.isPermisoBusquedaImportarExportar = isPermisoBusquedaImportarExportar;
	}

	public Boolean getIsPermisoReporteImportarExportar() {
		return isPermisoReporteImportarExportar;
	}

	public void setIsPermisoReporteImportarExportar(Boolean isPermisoReporteImportarExportar) {
		this.isPermisoReporteImportarExportar = isPermisoReporteImportarExportar;
	}
	
	public Boolean getIsPermisoPaginacionMedioImportarExportar() {
		return isPermisoPaginacionMedioImportarExportar;
	}

	public void setIsPermisoPaginacionMedioImportarExportar(Boolean isPermisoPaginacionMedioImportarExportar) {
		this.isPermisoPaginacionMedioImportarExportar = isPermisoPaginacionMedioImportarExportar;
	}
	
	public Boolean getIsPermisoPaginacionTodoImportarExportar() {
		return isPermisoPaginacionTodoImportarExportar;
	}

	public void setIsPermisoPaginacionTodoImportarExportar(Boolean isPermisoPaginacionTodoImportarExportar) {
		this.isPermisoPaginacionTodoImportarExportar = isPermisoPaginacionTodoImportarExportar;
	}
	
	public Boolean getIsPermisoPaginacionAltoImportarExportar() {
		return isPermisoPaginacionAltoImportarExportar;
	}

	public void setIsPermisoPaginacionAltoImportarExportar(Boolean isPermisoPaginacionAltoImportarExportar) {
		this.isPermisoPaginacionAltoImportarExportar = isPermisoPaginacionAltoImportarExportar;
	}
	
	public Boolean getIsPermisoCopiarImportarExportar() {
		return isPermisoCopiarImportarExportar;
	}

	public void setIsPermisoCopiarImportarExportar(Boolean isPermisoCopiarImportarExportar) {
		this.isPermisoCopiarImportarExportar = isPermisoCopiarImportarExportar;
	}
	
	public Boolean getIsPermisoVerFormImportarExportar() {
		return isPermisoVerFormImportarExportar;
	}

	public void setIsPermisoVerFormImportarExportar(Boolean isPermisoVerFormImportarExportar) {
		this.isPermisoVerFormImportarExportar = isPermisoVerFormImportarExportar;
	}
	
	public Boolean getIsPermisoDuplicarImportarExportar() {
		return isPermisoDuplicarImportarExportar;
	}

	public void setIsPermisoDuplicarImportarExportar(Boolean isPermisoDuplicarImportarExportar) {
		this.isPermisoDuplicarImportarExportar = isPermisoDuplicarImportarExportar;
	}
	
	public Boolean getIsPermisoOrdenImportarExportar() {
		return isPermisoOrdenImportarExportar;
	}

	public void setIsPermisoOrdenImportarExportar(Boolean isPermisoOrdenImportarExportar) {
		this.isPermisoOrdenImportarExportar = isPermisoOrdenImportarExportar;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoImportarExportar() {
		return isVisibilidadCeldaNuevoImportarExportar;
	}

	public void setIsVisibilidadCeldaNuevoImportarExportar(Boolean isVisibilidadCeldaNuevoImportarExportar) {
		this.isVisibilidadCeldaNuevoImportarExportar = isVisibilidadCeldaNuevoImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarImportarExportar() {
		return isVisibilidadCeldaDuplicarImportarExportar;
	}

	public void setIsVisibilidadCeldaDuplicarImportarExportar(Boolean isVisibilidadCeldaDuplicarImportarExportar) {
		this.isVisibilidadCeldaDuplicarImportarExportar = isVisibilidadCeldaDuplicarImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarImportarExportar() {
		return isVisibilidadCeldaCopiarImportarExportar;
	}

	public void setIsVisibilidadCeldaCopiarImportarExportar(Boolean isVisibilidadCeldaCopiarImportarExportar) {
		this.isVisibilidadCeldaCopiarImportarExportar = isVisibilidadCeldaCopiarImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormImportarExportar() {
		return isVisibilidadCeldaVerFormImportarExportar;
	}

	public void setIsVisibilidadCeldaVerFormImportarExportar(Boolean isVisibilidadCeldaVerFormImportarExportar) {
		this.isVisibilidadCeldaVerFormImportarExportar = isVisibilidadCeldaVerFormImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenImportarExportar() {
		return isVisibilidadCeldaOrdenImportarExportar;
	}

	public void setIsVisibilidadCeldaOrdenImportarExportar(Boolean isVisibilidadCeldaOrdenImportarExportar) {
		this.isVisibilidadCeldaOrdenImportarExportar = isVisibilidadCeldaOrdenImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesImportarExportar() {
		return isVisibilidadCeldaNuevoRelacionesImportarExportar;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesImportarExportar(Boolean isVisibilidadCeldaNuevoRelacionesImportarExportar) {
		this.isVisibilidadCeldaNuevoRelacionesImportarExportar = isVisibilidadCeldaNuevoRelacionesImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaModificarImportarExportar() {
		return isVisibilidadCeldaModificarImportarExportar;
	}

	public void setIsVisibilidadCeldaModificarImportarExportar(Boolean isVisibilidadCeldaModificarImportarExportar) {
		this.isVisibilidadCeldaModificarImportarExportar = isVisibilidadCeldaModificarImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarImportarExportar() {
		return isVisibilidadCeldaActualizarImportarExportar;
	}

	public void setIsVisibilidadCeldaActualizarImportarExportar(Boolean isVisibilidadCeldaActualizarImportarExportar) {
		this.isVisibilidadCeldaActualizarImportarExportar = isVisibilidadCeldaActualizarImportarExportar;
	}

	public Boolean getIsVisibilidadCeldaEliminarImportarExportar() {
		return isVisibilidadCeldaEliminarImportarExportar;
	}

	public void setIsVisibilidadCeldaEliminarImportarExportar(Boolean isVisibilidadCeldaEliminarImportarExportar) {
		this.isVisibilidadCeldaEliminarImportarExportar = isVisibilidadCeldaEliminarImportarExportar;
	}

	public Boolean getIsVisibilidadCeldaCancelarImportarExportar() {
		return isVisibilidadCeldaCancelarImportarExportar;
	}

	public void setIsVisibilidadCeldaCancelarImportarExportar(Boolean isVisibilidadCeldaCancelarImportarExportar) {
		this.isVisibilidadCeldaCancelarImportarExportar = isVisibilidadCeldaCancelarImportarExportar;
	}

	public Boolean getIsVisibilidadCeldaGuardarImportarExportar() {
		return isVisibilidadCeldaGuardarImportarExportar;
	}

	public void setIsVisibilidadCeldaGuardarImportarExportar(Boolean isVisibilidadCeldaGuardarImportarExportar) {
		this.isVisibilidadCeldaGuardarImportarExportar = isVisibilidadCeldaGuardarImportarExportar;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosImportarExportar() {
		return isVisibilidadCeldaGuardarCambiosImportarExportar;
	}

	public void setIsVisibilidadCeldaGuardarCambiosImportarExportar(Boolean isVisibilidadCeldaGuardarCambiosImportarExportar) {
		this.isVisibilidadCeldaGuardarCambiosImportarExportar = isVisibilidadCeldaGuardarCambiosImportarExportar;
	}
		
	public ImportarExportarSessionBean getimportarexportarSessionBean() {
		return this.importarexportarSessionBean;
	}
	
	public void setimportarexportarSessionBean(ImportarExportarSessionBean importarexportarSessionBean) {
		this.importarexportarSessionBean=importarexportarSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorNumeroComprobante() {
		return this.isVisibilidadBusquedaPorNumeroComprobante;
	}

	public void setisVisibilidadBusquedaPorNumeroComprobante(Boolean isVisibilidadBusquedaPorNumeroComprobante) {
		this.isVisibilidadBusquedaPorNumeroComprobante=isVisibilidadBusquedaPorNumeroComprobante;
	}

	public Boolean getisVisibilidadBusquedaPorRucInformante() {
		return this.isVisibilidadBusquedaPorRucInformante;
	}

	public void setisVisibilidadBusquedaPorRucInformante(Boolean isVisibilidadBusquedaPorRucInformante) {
		this.isVisibilidadBusquedaPorRucInformante=isVisibilidadBusquedaPorRucInformante;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdPeriodoImportExport() {
		return this.isVisibilidadFK_IdPeriodoImportExport;
	}

	public void setisVisibilidadFK_IdPeriodoImportExport(Boolean isVisibilidadFK_IdPeriodoImportExport) {
		this.isVisibilidadFK_IdPeriodoImportExport=isVisibilidadFK_IdPeriodoImportExport;
	}

	public Boolean getisVisibilidadFK_IdTipoBanco() {
		return this.isVisibilidadFK_IdTipoBanco;
	}

	public void setisVisibilidadFK_IdTipoBanco(Boolean isVisibilidadFK_IdTipoBanco) {
		this.isVisibilidadFK_IdTipoBanco=isVisibilidadFK_IdTipoBanco;
	}

	public Boolean getisVisibilidadFK_IdTipoComprobante() {
		return this.isVisibilidadFK_IdTipoComprobante;
	}

	public void setisVisibilidadFK_IdTipoComprobante(Boolean isVisibilidadFK_IdTipoComprobante) {
		this.isVisibilidadFK_IdTipoComprobante=isVisibilidadFK_IdTipoComprobante;
	}

	public Boolean getisVisibilidadFK_IdTipoComprobanteBanco() {
		return this.isVisibilidadFK_IdTipoComprobanteBanco;
	}

	public void setisVisibilidadFK_IdTipoComprobanteBanco(Boolean isVisibilidadFK_IdTipoComprobanteBanco) {
		this.isVisibilidadFK_IdTipoComprobanteBanco=isVisibilidadFK_IdTipoComprobanteBanco;
	}

	public Boolean getisVisibilidadFK_IdTipoIce() {
		return this.isVisibilidadFK_IdTipoIce;
	}

	public void setisVisibilidadFK_IdTipoIce(Boolean isVisibilidadFK_IdTipoIce) {
		this.isVisibilidadFK_IdTipoIce=isVisibilidadFK_IdTipoIce;
	}

	public Boolean getisVisibilidadFK_IdTipoImportacion() {
		return this.isVisibilidadFK_IdTipoImportacion;
	}

	public void setisVisibilidadFK_IdTipoImportacion(Boolean isVisibilidadFK_IdTipoImportacion) {
		this.isVisibilidadFK_IdTipoImportacion=isVisibilidadFK_IdTipoImportacion;
	}

	public Boolean getisVisibilidadFK_IdTipoIva() {
		return this.isVisibilidadFK_IdTipoIva;
	}

	public void setisVisibilidadFK_IdTipoIva(Boolean isVisibilidadFK_IdTipoIva) {
		this.isVisibilidadFK_IdTipoIva=isVisibilidadFK_IdTipoIva;
	}

	public Boolean getisVisibilidadFK_IdTipoTributario() {
		return this.isVisibilidadFK_IdTipoTributario;
	}

	public void setisVisibilidadFK_IdTipoTributario(Boolean isVisibilidadFK_IdTipoTributario) {
		this.isVisibilidadFK_IdTipoTributario=isVisibilidadFK_IdTipoTributario;
	}

	public Boolean getisVisibilidadFK_IdTransaccionConta() {
		return this.isVisibilidadFK_IdTransaccionConta;
	}

	public void setisVisibilidadFK_IdTransaccionConta(Boolean isVisibilidadFK_IdTransaccionConta) {
		this.isVisibilidadFK_IdTransaccionConta=isVisibilidadFK_IdTransaccionConta;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysImportarExportar(ImportarExportar importarexportar)throws Exception {
		try {
			
				this.setActualParaGuardarModuloForeignKey(importarexportar,null);
				this.setActualParaGuardarAsientoContableForeignKey(importarexportar,null);
				this.setActualParaGuardarPeriodoImportExportForeignKey(importarexportar,null);
				this.setActualParaGuardarTransaccionContaForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoImportacionForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoComprobanteForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoTributarioForeignKey(importarexportar,null);
				this.setActualParaGuardarClienteForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoIvaForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoIceForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoBancoForeignKey(importarexportar,null);
				this.setActualParaGuardarTipoComprobanteBancoForeignKey(importarexportar,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(ImportarExportar importarexportar,ImportarExportar importarexportarAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalImportarExportar(importarexportar);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		importarexportarAux.setId(importarexportar.getId());
		importarexportarAux.setVersionRow(importarexportar.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessImportarExportar();
		
			int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = importarexportarValidator.getInvalidValues(this.importarexportar);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			importarexportarLogic.setDatosCliente(datosCliente);
			importarexportarLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				importarexportarAux=new  ImportarExportar();
				
				importarexportarAux.setIsNew(true);
				importarexportarAux.setIsChanged(true);
				
				importarexportarAux.setImportarExportarOriginal(this.importarexportar);
				
				importarexportarAux.setId(this.importarexportar.getId());	
				importarexportarAux.setVersionRow(this.importarexportar.getVersionRow());	
				importarexportarAux.setid_modulo(this.importarexportar.getid_modulo());	
				importarexportarAux.setid_asiento_contable(this.importarexportar.getid_asiento_contable());	
				importarexportarAux.setruc(this.importarexportar.getruc());	
				importarexportarAux.setid_periodo_import_export(this.importarexportar.getid_periodo_import_export());	
				importarexportarAux.setid_transaccion_conta(this.importarexportar.getid_transaccion_conta());	
				importarexportarAux.setfecha(this.importarexportar.getfecha());	
				
				if(this.importarexportar.getid_tipo_importacion()!=null && this.importarexportar.getid_tipo_importacion()>0L) {
					importarexportarAux.setid_tipo_importacion(this.importarexportar.getid_tipo_importacion());
				} else {
					importarexportarAux.setid_tipo_importacion(null);
				}	
				importarexportarAux.setid_tipo_comprobante(this.importarexportar.getid_tipo_comprobante());	
				importarexportarAux.setnumero_comprobante(this.importarexportar.getnumero_comprobante());	
				importarexportarAux.setdocumento_transporte(this.importarexportar.getdocumento_transporte());	
				importarexportarAux.setnumero_referencia_comprobante(this.importarexportar.getnumero_referencia_comprobante());	
				importarexportarAux.setid_tipo_tributario(this.importarexportar.getid_tipo_tributario());	
				importarexportarAux.setcodigo_fiscal(this.importarexportar.getcodigo_fiscal());	
				importarexportarAux.setid_cliente(this.importarexportar.getid_cliente());	
				importarexportarAux.setes_juridico(this.importarexportar.getes_juridico());	
				importarexportarAux.setbase0(this.importarexportar.getbase0());	
				importarexportarAux.setmonto_total_cif(this.importarexportar.getmonto_total_cif());	
				importarexportarAux.setmonto_iva(this.importarexportar.getmonto_iva());	
				importarexportarAux.setid_tipo_iva(this.importarexportar.getid_tipo_iva());	
				importarexportarAux.setmonto_ice(this.importarexportar.getmonto_ice());	
				importarexportarAux.setid_tipo_ice(this.importarexportar.getid_tipo_ice());	
				importarexportarAux.setbase_general(this.importarexportar.getbase_general());	
				importarexportarAux.setid_tipo_banco(this.importarexportar.getid_tipo_banco());	
				importarexportarAux.setid_tipo_comprobante_banco(this.importarexportar.getid_tipo_comprobante_banco());	
				importarexportarAux.setcon_convenio(this.importarexportar.getcon_convenio());	
				importarexportarAux.setcon_devolucion(this.importarexportar.getcon_devolucion());	
				importarexportarAux.setfecha_emision(this.importarexportar.getfecha_emision());	
				importarexportarAux.setnumero_serie_comprobante(this.importarexportar.getnumero_serie_comprobante());	
				importarexportarAux.setnumero_autorizacion_comprobante(this.importarexportar.getnumero_autorizacion_comprobante());	
				importarexportarAux.setnumero_secuencial_fuente(this.importarexportar.getnumero_secuencial_fuente());	
				importarexportarAux.setvalor_fob(this.importarexportar.getvalor_fob());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.importarexportarSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(importarexportarAux,importarexportars);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.importarexportarSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.saveImportarExportars();//WithConnection
						//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);
					
					this.refrescarForeignKeysDescripcionesImportarExportar();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								importarexportarLogic.saveImportarExportarRelaciones(importarexportarAux);//WithConnection
								//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
									|| this.importarexportarSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(importarexportarAux,importarexportars);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				importarexportarAux=new  ImportarExportar();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.importarexportarSessionBean.getEsGuardarRelacionado() 
					|| (this.importarexportarSessionBean.getEsGuardarRelacionado() && this.importarexportar.getId()>=0)) {
						
					importarexportarAux.setIsNew(false);
				}
				
				importarexportarAux.setIsDeleted(false);
			
				importarexportarAux.setId(this.importarexportar.getId());	
				importarexportarAux.setVersionRow(this.importarexportar.getVersionRow());	
				importarexportarAux.setid_modulo(this.importarexportar.getid_modulo());	
				importarexportarAux.setid_asiento_contable(this.importarexportar.getid_asiento_contable());	
				importarexportarAux.setruc(this.importarexportar.getruc());	
				importarexportarAux.setid_periodo_import_export(this.importarexportar.getid_periodo_import_export());	
				importarexportarAux.setid_transaccion_conta(this.importarexportar.getid_transaccion_conta());	
				importarexportarAux.setfecha(this.importarexportar.getfecha());	
				
				if(this.importarexportar.getid_tipo_importacion()!=null && this.importarexportar.getid_tipo_importacion()>0L) {
					importarexportarAux.setid_tipo_importacion(this.importarexportar.getid_tipo_importacion());
				} else {
					importarexportarAux.setid_tipo_importacion(null);
				}	
				importarexportarAux.setid_tipo_comprobante(this.importarexportar.getid_tipo_comprobante());	
				importarexportarAux.setnumero_comprobante(this.importarexportar.getnumero_comprobante());	
				importarexportarAux.setdocumento_transporte(this.importarexportar.getdocumento_transporte());	
				importarexportarAux.setnumero_referencia_comprobante(this.importarexportar.getnumero_referencia_comprobante());	
				importarexportarAux.setid_tipo_tributario(this.importarexportar.getid_tipo_tributario());	
				importarexportarAux.setcodigo_fiscal(this.importarexportar.getcodigo_fiscal());	
				importarexportarAux.setid_cliente(this.importarexportar.getid_cliente());	
				importarexportarAux.setes_juridico(this.importarexportar.getes_juridico());	
				importarexportarAux.setbase0(this.importarexportar.getbase0());	
				importarexportarAux.setmonto_total_cif(this.importarexportar.getmonto_total_cif());	
				importarexportarAux.setmonto_iva(this.importarexportar.getmonto_iva());	
				importarexportarAux.setid_tipo_iva(this.importarexportar.getid_tipo_iva());	
				importarexportarAux.setmonto_ice(this.importarexportar.getmonto_ice());	
				importarexportarAux.setid_tipo_ice(this.importarexportar.getid_tipo_ice());	
				importarexportarAux.setbase_general(this.importarexportar.getbase_general());	
				importarexportarAux.setid_tipo_banco(this.importarexportar.getid_tipo_banco());	
				importarexportarAux.setid_tipo_comprobante_banco(this.importarexportar.getid_tipo_comprobante_banco());	
				importarexportarAux.setcon_convenio(this.importarexportar.getcon_convenio());	
				importarexportarAux.setcon_devolucion(this.importarexportar.getcon_devolucion());	
				importarexportarAux.setfecha_emision(this.importarexportar.getfecha_emision());	
				importarexportarAux.setnumero_serie_comprobante(this.importarexportar.getnumero_serie_comprobante());	
				importarexportarAux.setnumero_autorizacion_comprobante(this.importarexportar.getnumero_autorizacion_comprobante());	
				importarexportarAux.setnumero_secuencial_fuente(this.importarexportar.getnumero_secuencial_fuente());	
				importarexportarAux.setvalor_fob(this.importarexportar.getvalor_fob());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(importarexportarAux,importarexportars);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.importarexportarSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.saveImportarExportars();//WithConnection
						//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);
					
					this.refrescarForeignKeysDescripcionesImportarExportar();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								importarexportarLogic.saveImportarExportarRelaciones(importarexportarAux);//WithConnection
								//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
									|| this.importarexportarSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(importarexportarAux,importarexportars);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.importarexportar,importarexportarAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				importarexportarAux=new  ImportarExportar();
				
				importarexportarAux.setIsNew(false);
				importarexportarAux.setIsChanged(false);
				
				importarexportarAux.setIsDeleted(true);
				
				importarexportarAux.setId(this.importarexportar.getId());	
				importarexportarAux.setVersionRow(this.importarexportar.getVersionRow());	
				importarexportarAux.setid_modulo(this.importarexportar.getid_modulo());	
				importarexportarAux.setid_asiento_contable(this.importarexportar.getid_asiento_contable());	
				importarexportarAux.setruc(this.importarexportar.getruc());	
				importarexportarAux.setid_periodo_import_export(this.importarexportar.getid_periodo_import_export());	
				importarexportarAux.setid_transaccion_conta(this.importarexportar.getid_transaccion_conta());	
				importarexportarAux.setfecha(this.importarexportar.getfecha());	
				
				if(this.importarexportar.getid_tipo_importacion()!=null && this.importarexportar.getid_tipo_importacion()>0L) {
					importarexportarAux.setid_tipo_importacion(this.importarexportar.getid_tipo_importacion());
				} else {
					importarexportarAux.setid_tipo_importacion(null);
				}	
				importarexportarAux.setid_tipo_comprobante(this.importarexportar.getid_tipo_comprobante());	
				importarexportarAux.setnumero_comprobante(this.importarexportar.getnumero_comprobante());	
				importarexportarAux.setdocumento_transporte(this.importarexportar.getdocumento_transporte());	
				importarexportarAux.setnumero_referencia_comprobante(this.importarexportar.getnumero_referencia_comprobante());	
				importarexportarAux.setid_tipo_tributario(this.importarexportar.getid_tipo_tributario());	
				importarexportarAux.setcodigo_fiscal(this.importarexportar.getcodigo_fiscal());	
				importarexportarAux.setid_cliente(this.importarexportar.getid_cliente());	
				importarexportarAux.setes_juridico(this.importarexportar.getes_juridico());	
				importarexportarAux.setbase0(this.importarexportar.getbase0());	
				importarexportarAux.setmonto_total_cif(this.importarexportar.getmonto_total_cif());	
				importarexportarAux.setmonto_iva(this.importarexportar.getmonto_iva());	
				importarexportarAux.setid_tipo_iva(this.importarexportar.getid_tipo_iva());	
				importarexportarAux.setmonto_ice(this.importarexportar.getmonto_ice());	
				importarexportarAux.setid_tipo_ice(this.importarexportar.getid_tipo_ice());	
				importarexportarAux.setbase_general(this.importarexportar.getbase_general());	
				importarexportarAux.setid_tipo_banco(this.importarexportar.getid_tipo_banco());	
				importarexportarAux.setid_tipo_comprobante_banco(this.importarexportar.getid_tipo_comprobante_banco());	
				importarexportarAux.setcon_convenio(this.importarexportar.getcon_convenio());	
				importarexportarAux.setcon_devolucion(this.importarexportar.getcon_devolucion());	
				importarexportarAux.setfecha_emision(this.importarexportar.getfecha_emision());	
				importarexportarAux.setnumero_serie_comprobante(this.importarexportar.getnumero_serie_comprobante());	
				importarexportarAux.setnumero_autorizacion_comprobante(this.importarexportar.getnumero_autorizacion_comprobante());	
				importarexportarAux.setnumero_secuencial_fuente(this.importarexportar.getnumero_secuencial_fuente());	
				importarexportarAux.setvalor_fob(this.importarexportar.getvalor_fob());	
				
				if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.importarexportarAux.getId()>=0) {	
						this.importarexportarsEliminados.add(importarexportarAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(importarexportarAux,importarexportars);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.importarexportarSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.saveImportarExportars();//WithConnection
						//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								importarexportarLogic.saveImportarExportarRelaciones(importarexportarAux);//WithConnection
								//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
								|| this.importarexportarSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(importarexportarAux,importarexportarLogic.getImportarExportars());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(importarexportarAux,importarexportars);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getImportarExportars().addAll(this.importarexportarsEliminados);
					
					importarexportarLogic.saveImportarExportars();//WithConnection
					//importarexportarLogic.getSetVersionRowImportarExportars();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesImportarExportar();
				
				this.importarexportarsEliminados= new ArrayList<ImportarExportar>();		
			}
			
			if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Importar Exportar GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.importarexportar=importarexportarAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessImportarExportar();
      	}
		
	}	
	
	public void actualizarRelaciones(ImportarExportar importarexportarLocal) throws Exception {
		
		if(this.importarexportarSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ImportarExportar importarexportarLocal) throws Exception {	
		if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				importarexportarLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				importarexportarLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoImportExportDetalleFormJInternalFrame.class)) {
				PeriodoImportExportBeanSwingJInternalFrame periodoimportexportBeanSwingJInternalFrameLocal=(PeriodoImportExportBeanSwingJInternalFrame) ((PeriodoImportExportDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoimportexportBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodoImportExport(periodoimportexportBeanSwingJInternalFrameLocal.getperiodoimportexport(),true);
				periodoimportexportBeanSwingJInternalFrameLocal.actualizarLista(periodoimportexportBeanSwingJInternalFrameLocal.periodoimportexport,this.periodoimportexportsForeignKey);

				periodoimportexportBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoimportexportBeanSwingJInternalFrameLocal.periodoimportexport);

				importarexportarLocal.setPeriodoImportExport(periodoimportexportBeanSwingJInternalFrameLocal.periodoimportexport);

				this.addItemDefectoCombosForeignKeyPeriodoImportExport();
				this.cargarCombosFramePeriodoImportExportsForeignKey("Formulario");
				this.setActualPeriodoImportExportForeignKey(periodoimportexportBeanSwingJInternalFrameLocal.periodoimportexport.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionContaDetalleFormJInternalFrame.class)) {
				TransaccionContaBeanSwingJInternalFrame transaccioncontaBeanSwingJInternalFrameLocal=(TransaccionContaBeanSwingJInternalFrame) ((TransaccionContaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccioncontaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccionConta(transaccioncontaBeanSwingJInternalFrameLocal.gettransaccionconta(),true);
				transaccioncontaBeanSwingJInternalFrameLocal.actualizarLista(transaccioncontaBeanSwingJInternalFrameLocal.transaccionconta,this.transaccioncontasForeignKey);

				transaccioncontaBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccioncontaBeanSwingJInternalFrameLocal.transaccionconta);

				importarexportarLocal.setTransaccionConta(transaccioncontaBeanSwingJInternalFrameLocal.transaccionconta);

				this.addItemDefectoCombosForeignKeyTransaccionConta();
				this.cargarCombosFrameTransaccionContasForeignKey("Formulario");
				this.setActualTransaccionContaForeignKey(transaccioncontaBeanSwingJInternalFrameLocal.transaccionconta.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoImportacionDetalleFormJInternalFrame.class)) {
				TipoImportacionBeanSwingJInternalFrame tipoimportacionBeanSwingJInternalFrameLocal=(TipoImportacionBeanSwingJInternalFrame) ((TipoImportacionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoimportacionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoImportacion(tipoimportacionBeanSwingJInternalFrameLocal.gettipoimportacion(),true);
				tipoimportacionBeanSwingJInternalFrameLocal.actualizarLista(tipoimportacionBeanSwingJInternalFrameLocal.tipoimportacion,this.tipoimportacionsForeignKey);

				tipoimportacionBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoimportacionBeanSwingJInternalFrameLocal.tipoimportacion);

				importarexportarLocal.setTipoImportacion(tipoimportacionBeanSwingJInternalFrameLocal.tipoimportacion);

				this.addItemDefectoCombosForeignKeyTipoImportacion();
				this.cargarCombosFrameTipoImportacionsForeignKey("Formulario");
				this.setActualTipoImportacionForeignKey(tipoimportacionBeanSwingJInternalFrameLocal.tipoimportacion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoComprobanteDetalleFormJInternalFrame.class)) {
				TipoComprobanteBeanSwingJInternalFrame tipocomprobanteBeanSwingJInternalFrameLocal=(TipoComprobanteBeanSwingJInternalFrame) ((TipoComprobanteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocomprobanteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoComprobante(tipocomprobanteBeanSwingJInternalFrameLocal.gettipocomprobante(),true);
				tipocomprobanteBeanSwingJInternalFrameLocal.actualizarLista(tipocomprobanteBeanSwingJInternalFrameLocal.tipocomprobante,this.tipocomprobantesForeignKey);

				tipocomprobanteBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocomprobanteBeanSwingJInternalFrameLocal.tipocomprobante);

				importarexportarLocal.setTipoComprobante(tipocomprobanteBeanSwingJInternalFrameLocal.tipocomprobante);

				this.addItemDefectoCombosForeignKeyTipoComprobante();
				this.cargarCombosFrameTipoComprobantesForeignKey("Formulario");
				this.setActualTipoComprobanteForeignKey(tipocomprobanteBeanSwingJInternalFrameLocal.tipocomprobante.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTributarioDetalleFormJInternalFrame.class)) {
				TipoTributarioBeanSwingJInternalFrame tipotributarioBeanSwingJInternalFrameLocal=(TipoTributarioBeanSwingJInternalFrame) ((TipoTributarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotributarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.gettipotributario(),true);
				tipotributarioBeanSwingJInternalFrameLocal.actualizarLista(tipotributarioBeanSwingJInternalFrameLocal.tipotributario,this.tipotributariosForeignKey);

				tipotributarioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				importarexportarLocal.setTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey("Formulario");
				this.setActualTipoTributarioForeignKey(tipotributarioBeanSwingJInternalFrameLocal.tipotributario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				importarexportarLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoIvaDetalleFormJInternalFrame.class)) {
				TipoIvaBeanSwingJInternalFrame tipoivaBeanSwingJInternalFrameLocal=(TipoIvaBeanSwingJInternalFrame) ((TipoIvaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoivaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoIva(tipoivaBeanSwingJInternalFrameLocal.gettipoiva(),true);
				tipoivaBeanSwingJInternalFrameLocal.actualizarLista(tipoivaBeanSwingJInternalFrameLocal.tipoiva,this.tipoivasForeignKey);

				tipoivaBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoivaBeanSwingJInternalFrameLocal.tipoiva);

				importarexportarLocal.setTipoIva(tipoivaBeanSwingJInternalFrameLocal.tipoiva);

				this.addItemDefectoCombosForeignKeyTipoIva();
				this.cargarCombosFrameTipoIvasForeignKey("Formulario");
				this.setActualTipoIvaForeignKey(tipoivaBeanSwingJInternalFrameLocal.tipoiva.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoIceDetalleFormJInternalFrame.class)) {
				TipoIceBeanSwingJInternalFrame tipoiceBeanSwingJInternalFrameLocal=(TipoIceBeanSwingJInternalFrame) ((TipoIceDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoiceBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoIce(tipoiceBeanSwingJInternalFrameLocal.gettipoice(),true);
				tipoiceBeanSwingJInternalFrameLocal.actualizarLista(tipoiceBeanSwingJInternalFrameLocal.tipoice,this.tipoicesForeignKey);

				tipoiceBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoiceBeanSwingJInternalFrameLocal.tipoice);

				importarexportarLocal.setTipoIce(tipoiceBeanSwingJInternalFrameLocal.tipoice);

				this.addItemDefectoCombosForeignKeyTipoIce();
				this.cargarCombosFrameTipoIcesForeignKey("Formulario");
				this.setActualTipoIceForeignKey(tipoiceBeanSwingJInternalFrameLocal.tipoice.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoBancoDetalleFormJInternalFrame.class)) {
				TipoBancoBeanSwingJInternalFrame tipobancoBeanSwingJInternalFrameLocal=(TipoBancoBeanSwingJInternalFrame) ((TipoBancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipobancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoBanco(tipobancoBeanSwingJInternalFrameLocal.gettipobanco(),true);
				tipobancoBeanSwingJInternalFrameLocal.actualizarLista(tipobancoBeanSwingJInternalFrameLocal.tipobanco,this.tipobancosForeignKey);

				tipobancoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipobancoBeanSwingJInternalFrameLocal.tipobanco);

				importarexportarLocal.setTipoBanco(tipobancoBeanSwingJInternalFrameLocal.tipobanco);

				this.addItemDefectoCombosForeignKeyTipoBanco();
				this.cargarCombosFrameTipoBancosForeignKey("Formulario");
				this.setActualTipoBancoForeignKey(tipobancoBeanSwingJInternalFrameLocal.tipobanco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoComprobanteDetalleFormJInternalFrame.class)) {
				TipoComprobanteBeanSwingJInternalFrame tipocomprobantebancoBeanSwingJInternalFrameLocal=(TipoComprobanteBeanSwingJInternalFrame) ((TipoComprobanteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocomprobantebancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoComprobante(tipocomprobantebancoBeanSwingJInternalFrameLocal.gettipocomprobante(),true);
				tipocomprobantebancoBeanSwingJInternalFrameLocal.actualizarLista(tipocomprobantebancoBeanSwingJInternalFrameLocal.tipocomprobante,this.tipocomprobantebancosForeignKey);

				tipocomprobantebancoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocomprobantebancoBeanSwingJInternalFrameLocal.tipocomprobante);

				importarexportarLocal.setTipoComprobanteBanco(tipocomprobantebancoBeanSwingJInternalFrameLocal.tipocomprobante);

				this.addItemDefectoCombosForeignKeyTipoComprobanteBanco();
				this.cargarCombosFrameTipoComprobanteBancosForeignKey("Formulario");
				this.setActualTipoComprobanteBancoForeignKey(tipocomprobantebancoBeanSwingJInternalFrameLocal.tipocomprobante.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarImportarExportarActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = importarexportarValidator.getInvalidValues(this.importarexportar);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ImportarExportar importarexportar,List<ImportarExportar> importarexportars) throws Exception {
		try	{		
			ImportarExportarConstantesFunciones.actualizarLista(importarexportar,importarexportars,this.importarexportarSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ImportarExportar importarexportar,List<ImportarExportar> importarexportars) throws Exception {
		try	{			
			ImportarExportarConstantesFunciones.actualizarSelectedLista(importarexportar,importarexportars);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ImportarExportar> importarexportarsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				importarexportarsLocal=this.importarexportarLogic.getImportarExportars();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				importarexportarsLocal=this.importarexportars;
			}
			//ARCHITECTURE
		
			for(ImportarExportar importarexportarLocal:importarexportarsLocal) {
				if(this.permiteMantenimiento(importarexportarLocal) && importarexportarLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ImportarExportarConstantesFunciones.getImportarExportarLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_moduloImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_asiento_contableImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.RUCINFORMANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelrucImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDPERIODOIMPORTEXPORT)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_periodo_import_exportImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTRANSACCIONCONTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_transaccion_contaImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelfechaImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOIMPORTACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_importacionImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_comprobanteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_comprobanteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.DOCUMENTOTRANSPORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabeldocumento_transporteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.NUMEROREFERENCIACOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_referencia_comprobanteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOTRIBUTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_tributarioImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.CODIGOFISCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcodigo_fiscalImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_clienteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.ESJURIDICO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabeles_juridicoImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.BASE0)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelbase0ImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.MONTOTOTALCIF)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_total_cifImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.MONTOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_ivaImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_ivaImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.MONTOICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_iceImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_iceImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.BASEGENERAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelbase_generalImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_bancoImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.IDTIPOCOMPROBANTEBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_comprobante_bancoImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.CONCONVENIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_convenioImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.CONDEVOLUCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_devolucionImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelfecha_emisionImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.NUMEROSERIECOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_serie_comprobanteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.NUMEROAUTORIZACIONCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_autorizacion_comprobanteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.NUMEROSECUENCIALFUENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_secuencial_fuenteImportarExportar,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ImportarExportarConstantesFunciones.VALORFOB)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelvalor_fobImportarExportar,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_moduloImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_asiento_contableImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelrucImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_periodo_import_exportImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_transaccion_contaImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelfechaImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_importacionImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_comprobanteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_comprobanteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabeldocumento_transporteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_referencia_comprobanteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_tributarioImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelcodigo_fiscalImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_clienteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabeles_juridicoImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelbase0ImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_total_cifImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_ivaImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_ivaImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_iceImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_iceImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelbase_generalImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_bancoImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelid_tipo_comprobante_bancoImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_convenioImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_devolucionImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelfecha_emisionImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_serie_comprobanteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_autorizacion_comprobanteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_secuencial_fuenteImportarExportar,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormImportarExportar.jLabelvalor_fobImportarExportar,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoImportarExportar--;	
		
		
		this.importarexportarAux=new ImportarExportar();
		
		this.importarexportarAux.setId(this.iIdNuevoImportarExportar);
		this.importarexportarAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.importarexportarLogic.getImportarExportars().add(this.importarexportarAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.importarexportars.add(this.importarexportarAux);
		}
		//ARCHITECTURE
		
		this.importarexportar=this.importarexportarAux;
		
		if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioImportarExportar(this.importarexportar);
			this.setVariablesObjetoActualToFormularioForeignKeyImportarExportar(this.importarexportar);
		}
				
		//this.setDefaultControlesImportarExportar();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyImportarExportar();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyImportarExportar();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyImportarExportar();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualImportarExportar(this.importarexportarBean,this.importarexportar,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ImportarExportarConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
			classes=ImportarExportarConstantesFunciones.getClassesRelationshipsOfImportarExportar(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.importarexportarReturnGeneral=importarexportarLogic.procesarEventosImportarExportarsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.importarexportarLogic.getImportarExportars(),this.importarexportar,this.importarexportarParameterGeneral,this.isEsNuevoImportarExportar,classes);//this.importarexportarLogic.getImportarExportar()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanImportarExportar(this.importarexportarReturnGeneral,this.importarexportarBean,false);
		
		if(this.importarexportarReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyImportarExportar(this.importarexportarReturnGeneral.getImportarExportar());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioImportarExportar(this.importarexportarReturnGeneral.getImportarExportar());
		}
		
		if(this.importarexportarReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioImportarExportar(this.importarexportarReturnGeneral.getImportarExportar(),classes);//this.importarexportarBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyImportarExportar();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyImportarExportar();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ImportarExportarBeanSwingJInternalFrameAdditional.RecargarFormImportarExportar(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingImportarExportar(false);
						
			if(importarexportarSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualImportarExportar();
			}
			
			this.actualizarVisualTableDatosImportarExportar();
			
			this.jTableDatosImportarExportar.setRowSelectionInterval(this.getIndiceNuevoImportarExportar(), this.getIndiceNuevoImportarExportar());
			
			this.seleccionarFilaTablaImportarExportarActual();
						
			this.actualizarEstadoCeldasBotonesImportarExportar("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesImportarExportar(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarrucImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarfechaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarnumero_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activardocumento_transporteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarnumero_referencia_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarcodigo_fiscalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activares_juridicoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarbase0ImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarmonto_total_cifImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarmonto_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarmonto_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarbase_generalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarcon_convenioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarcon_devolucionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarfecha_emisionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarnumero_serie_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarnumero_autorizacion_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarnumero_secuencial_fuenteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarvalor_fobImportarExportar);	
		//
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_moduloImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_asiento_contableImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_periodo_import_exportImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_transaccion_contaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_importacionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_tributarioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_clienteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_bancoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setEnabled(isHabilitar && this.importarexportarConstantesFunciones.activarid_tipo_comprobante_bancoImportarExportar);
	};
	
	public void setDefaultControlesImportarExportar() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoImportarExportar(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.importarexportarSessionBean.setConGuardarRelaciones(true);			
			this.importarexportarSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.setVisible(true);
			
					
		} else {
			//this.importarexportarSessionBean.setConGuardarRelaciones(false);			
			this.importarexportarSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoImportarExportar() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
				if(importarexportarAux.getId().equals(this.iIdNuevoImportarExportar)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ImportarExportar importarexportarAux:this.importarexportars) {
				if(importarexportarAux.getId().equals(this.iIdNuevoImportarExportar)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualImportarExportar(ImportarExportar importarexportar,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
				if(importarexportarAux.getId().equals(importarexportar.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ImportarExportar importarexportarAux:this.importarexportars) {
				if(importarexportarAux.getId().equals(importarexportar.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalImportarExportar(ImportarExportar importarexportarOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
				if(importarexportarAux.getImportarExportarOriginal().getId().equals(importarexportarOriginal.getId())) {
					existe=true;
					importarexportarOriginal.setId(importarexportarAux.getId());
					importarexportarOriginal.setVersionRow(importarexportarAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ImportarExportar importarexportarAux:this.importarexportars) {
				if(importarexportarAux.getImportarExportarOriginal().getId().equals(importarexportarOriginal.getId())) {
					existe=true;
					importarexportarOriginal.setId(importarexportarAux.getId());
					importarexportarOriginal.setVersionRow(importarexportarAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosImportarExportar(Boolean esParaCancelar) throws Exception {
		importarexportarsAux=new ArrayList<ImportarExportar>();
		importarexportarAux=new ImportarExportar();
		
		if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
					if(importarexportarAux.getId()<0) {
						importarexportarsAux.add(importarexportarAux);
					}		
				}
				this.iIdNuevoImportarExportar=0L;
				this.importarexportarLogic.getImportarExportars().removeAll(importarexportarsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ImportarExportar importarexportarAux:this.importarexportars) {
					if(importarexportarAux.getId()<0) {
						importarexportarsAux.add(importarexportarAux);
					}		
				}
				this.iIdNuevoImportarExportar=0L;
				this.importarexportars.removeAll(importarexportarsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoImportarExportar 
					&& this.importarexportarLogic.getImportarExportars().size()>0
					) {
					importarexportarAux=this.importarexportarLogic.getImportarExportars().get(this.importarexportarLogic.getImportarExportars().size() - 1);
				
					if(importarexportarAux.getId()<0) {
						this.importarexportarLogic.getImportarExportars().remove(importarexportarAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoImportarExportar && this.importarexportars.size()>0) {
					importarexportarAux=this.importarexportars.get(this.importarexportars.size() - 1);
				
					if(importarexportarAux.getId()<0) {
						this.importarexportars.remove(importarexportarAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoImportarExportar(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(importarexportar.getId()<0) {
				this.importarexportarLogic.getImportarExportars().remove(this.importarexportar);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(importarexportar.getId()<0) {
				this.importarexportars.remove(this.importarexportar);
			}
		}			
	}
	
	public void setEstadosInicialesImportarExportar(List<ImportarExportar> importarexportarsAux) throws Exception {
		ImportarExportarConstantesFunciones.setEstadosInicialesImportarExportar(importarexportarsAux);
	}
	
	public void setEstadosInicialesImportarExportar(ImportarExportar importarexportarAux) throws Exception {
		ImportarExportarConstantesFunciones.setEstadosInicialesImportarExportar(importarexportarAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarImportarExportarActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarImportarExportarActual()) {
				if(!this.isEsNuevoImportarExportar) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoImportarExportar=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarImportarExportarActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Importar Exportar ?", "MANTENIMIENTO DE Importar Exportar", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ImportarExportar importarexportar) throws Exception {
		ImportarExportarConstantesFunciones.seleccionarAsignar(this.importarexportar,importarexportar);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarImportarExportar=this.isPermisoActualizarOriginalImportarExportar;
			
			
			this.seleccionarAsignar(importarexportar);
			
			

			idAsientoContableActual=importarexportar.getid_asiento_contable();
			this.seleccionarAsientoContableActual();

			idClienteActual=importarexportar.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ImportarExportarConstantesFunciones.quitarEspaciosImportarExportar(this.importarexportar,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesImportarExportar("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.importarexportarSessionBean.setsFuncionBusquedaRapida(this.importarexportarSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoImportarExportar) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosImportarExportar(esParaCancelar);				
				this.cancelarNuevoImportarExportar(esParaCancelar);								
			}
			
			this.importarexportar=new ImportarExportar();
			
			this.inicializarImportarExportar();
			
			this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarImportarExportar() throws Exception {
		try {
			ImportarExportarConstantesFunciones.inicializarImportarExportar(this.importarexportar);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.importarexportarLogic.getImportarExportars().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteImportarExportars(String sAccionBusqueda,List<ImportarExportar> importarexportarsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ImportarExportar"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ImportarExportarMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ImportarExportarMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ImportarExportar"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Importar Exportars");		
		parameters.put("busquedapor", ImportarExportarConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceImportarExportar=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ImportarExportarConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ImportarExportarConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceImportarExportar=new JRBeanArrayDataSource(ImportarExportarJInternalFrame.TraerImportarExportarBeans(importarexportarsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceImportarExportar);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ImportarExportarConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ImportarExportarConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ImportarExportarBean.TraerImportarExportarBeans(importarexportarsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoImportarExportarActionPerformed(null);
					//this.generarExcelReporteImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesImportarExportars(sAccionBusqueda,sTipoArchivoReporte,importarexportarsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteImportarExportars(String sAccionBusqueda,String sTipoArchivoReporte,List<ImportarExportar> importarexportarsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ImportarExportars");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderImportarExportar("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ImportarExportar importarexportar : importarexportarsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ImportarExportarConstantesFunciones.generarExcelReporteDataImportarExportar("NORMAL",row,workbook,importarexportar,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderImportarExportar(String sTipo,Row row,Workbook workbook) {
		
		ImportarExportarConstantesFunciones.generarExcelReporteHeaderImportarExportar(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalImportarExportars(String sAccionBusqueda,String sTipoArchivoReporte,List<ImportarExportar> importarexportarsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ImportarExportars");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ImportarExportar importarexportar : importarexportarsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ImportarExportarConstantesFunciones.getImportarExportarDescripcion(importarexportar));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getperiodoimportexport_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettransaccionconta_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipoimportacion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipocomprobante_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getdocumento_transporte());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getnumero_referencia_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipotributario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getcodigo_fiscal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(importarexportar.getes_juridico()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_BASE0))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASE0);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getbase0());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getmonto_total_cif());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_MONTOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getmonto_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipoiva_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_MONTOICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getmonto_ice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipoice_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getbase_general());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipobanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.gettipocomprobantebanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(importarexportar.getcon_convenio()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(importarexportar.getcon_devolucion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getnumero_serie_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getnumero_autorizacion_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getnumero_secuencial_fuente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ImportarExportarConstantesFunciones.LABEL_VALORFOB))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_VALORFOB);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(importarexportar.getvalor_fob());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesImportarExportars(String sAccionBusqueda,String sTipoArchivoReporte,List<ImportarExportar> importarexportarsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ImportarExportar> importarexportarsRespaldo=null;
		
		classes=ImportarExportarConstantesFunciones.getClassesRelationshipsOfImportarExportar(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.importarexportarLogic.setDatosCliente(this.datosCliente);
		this.importarexportarLogic.setDatosDeep(this.datosDeep);
		this.importarexportarLogic.setIsConDeep(true);
		
		importarexportarsRespaldo=this.importarexportarLogic.getImportarExportars();
		
		this.importarexportarLogic.setImportarExportars(importarexportarsParaReportes);	
		this.importarexportarLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		importarexportarsParaReportes=this.importarexportarLogic.getImportarExportars();
		this.importarexportarLogic.setImportarExportars(importarexportarsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ImportarExportars");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderImportarExportar("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ImportarExportar importarexportar : importarexportarsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderImportarExportar("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ImportarExportarConstantesFunciones.generarExcelReporteDataImportarExportar("NORMAL",row,workbook,importarexportar,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ImportarExportarConstantesFunciones.getImportarExportarDescripcion(importarexportar));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoImportarExportar.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessImportarExportar() throws Exception {		
		this.startProcessImportarExportar(true);
	}
	
	public void startProcessImportarExportar(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasImportarExportar ,this.jPanelParametrosReportesImportarExportar, this.jScrollPanelDatosImportarExportar,this.jPanelPaginacionImportarExportar, this.jScrollPanelDatosEdicionImportarExportar, this.jPanelAccionesImportarExportar,this.jPanelAccionesFormularioImportarExportar,this.jmenuBarImportarExportar,this.jmenuBarDetalleImportarExportar,this.jTtoolBarImportarExportar,this.jTtoolBarDetalleImportarExportar);		
		
		final JTabbedPane jTabbedPaneBusquedasImportarExportar=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesImportarExportar=this.jPanelParametrosReportesImportarExportar;
		//final JScrollPane jScrollPanelDatosImportarExportar=this.jScrollPanelDatosImportarExportar;
		final JTable jTableDatosImportarExportar=this.jTableDatosImportarExportar;		
		final JPanel jPanelPaginacionImportarExportar=this.jPanelPaginacionImportarExportar;
		//final JScrollPane jScrollPanelDatosEdicionImportarExportar=this.jScrollPanelDatosEdicionImportarExportar;
		final JPanel jPanelAccionesImportarExportar=this.jPanelAccionesImportarExportar;
		
		JPanel jPanelCamposAuxiliarImportarExportar=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarImportarExportar=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			jPanelCamposAuxiliarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jPanelCamposImportarExportar;
			jPanelAccionesFormularioAuxiliarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jPanelAccionesFormularioImportarExportar;
		}
		
		final JPanel jPanelCamposImportarExportar=jPanelCamposAuxiliarImportarExportar;
		final JPanel jPanelAccionesFormularioImportarExportar=jPanelAccionesFormularioAuxiliarImportarExportar;
		
		
		final JMenuBar jmenuBarImportarExportar=new JMenuBar();
		final JMenuBar jmenuBarDetalleImportarExportar=new JMenuBar();
		final JToolBar jTtoolBarImportarExportar=new JToolBar();
		final JToolBar jTtoolBarDetalleImportarExportar=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasImportarExportar;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesImportarExportar;
			processRunnable.jTableDatos=jTableDatosImportarExportar;
			processRunnable.jPanelCampos=jPanelCamposImportarExportar;
			processRunnable.jPanelPaginacion=jPanelPaginacionImportarExportar;
			processRunnable.jPanelAcciones=jPanelAccionesImportarExportar;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioImportarExportar;
			
			
			processRunnable.jmenuBar=jmenuBarImportarExportar;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleImportarExportar;
			processRunnable.jTtoolBar=jTtoolBarImportarExportar;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleImportarExportar;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasImportarExportar ,jPanelParametrosReportesImportarExportar,jTableDatosImportarExportar, /*jScrollPanelDatosImportarExportar,*/jPanelCamposImportarExportar,jPanelPaginacionImportarExportar, /*jScrollPanelDatosEdicionImportarExportar,*/ jPanelAccionesImportarExportar,jPanelAccionesFormularioImportarExportar,jmenuBarImportarExportar,jmenuBarDetalleImportarExportar,jTtoolBarImportarExportar,jTtoolBarDetalleImportarExportar);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasImportarExportar ,jPanelParametrosReportesImportarExportar, jScrollPanelDatosImportarExportar,jPanelPaginacionImportarExportar, jScrollPanelDatosEdicionImportarExportar, jPanelAccionesImportarExportar,jPanelAccionesFormularioImportarExportar,jmenuBarImportarExportar,jmenuBarDetalleImportarExportar,jTtoolBarImportarExportar,jTtoolBarDetalleImportarExportar);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessImportarExportar() {// throws Exception 
		this.finishProcessImportarExportar(true);
	}
	
	public void finishProcessImportarExportar(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasImportarExportar ,this.jPanelParametrosReportesImportarExportar, this.jScrollPanelDatosImportarExportar,this.jPanelPaginacionImportarExportar, this.jScrollPanelDatosEdicionImportarExportar, this.jPanelAccionesImportarExportar,this.jPanelAccionesFormularioImportarExportar,this.jmenuBarImportarExportar,this.jmenuBarDetalleImportarExportar,this.jTtoolBarImportarExportar,this.jTtoolBarDetalleImportarExportar);		
		
		final JTabbedPane jTabbedPaneBusquedasImportarExportar=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesImportarExportar=this.jPanelParametrosReportesImportarExportar;
		//final JScrollPane jScrollPanelDatosImportarExportar=this.jScrollPanelDatosImportarExportar;
		final JTable jTableDatosImportarExportar=this.jTableDatosImportarExportar;		
		final JPanel jPanelPaginacionImportarExportar=this.jPanelPaginacionImportarExportar;
		//final JScrollPane jScrollPanelDatosEdicionImportarExportar=this.jScrollPanelDatosEdicionImportarExportar;
		final JPanel jPanelAccionesImportarExportar=this.jPanelAccionesImportarExportar;
		
		JPanel jPanelCamposAuxiliarImportarExportar=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarImportarExportar=new JPanel();
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			jPanelCamposAuxiliarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jPanelCamposImportarExportar;
			jPanelAccionesFormularioAuxiliarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jPanelAccionesFormularioImportarExportar;
		}
		
		final JPanel jPanelCamposImportarExportar=jPanelCamposAuxiliarImportarExportar;
		final JPanel jPanelAccionesFormularioImportarExportar=jPanelAccionesFormularioAuxiliarImportarExportar;
		
		
		final JMenuBar jmenuBarImportarExportar=new JMenuBar();
		final JMenuBar jmenuBarDetalleImportarExportar=new JMenuBar();
		final JToolBar jTtoolBarImportarExportar=new JToolBar();
		final JToolBar jTtoolBarDetalleImportarExportar=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasImportarExportar;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesImportarExportar;
			processRunnable.jTableDatos=jTableDatosImportarExportar;
			processRunnable.jPanelCampos=jPanelCamposImportarExportar;
			processRunnable.jPanelPaginacion=jPanelPaginacionImportarExportar;
			processRunnable.jPanelAcciones=jPanelAccionesImportarExportar;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioImportarExportar;
			
			
			processRunnable.jmenuBar=jmenuBarImportarExportar;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleImportarExportar;
			processRunnable.jTtoolBar=jTtoolBarImportarExportar;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleImportarExportar;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasImportarExportar ,jPanelParametrosReportesImportarExportar, jTableDatosImportarExportar,/*jScrollPanelDatosImportarExportar,*/jPanelCamposImportarExportar,jPanelPaginacionImportarExportar, /*jScrollPanelDatosEdicionImportarExportar,*/ jPanelAccionesImportarExportar,jPanelAccionesFormularioImportarExportar,jmenuBarImportarExportar,jmenuBarDetalleImportarExportar,jTtoolBarImportarExportar,jTtoolBarDetalleImportarExportar));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesImportarExportar(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarImportarExportar(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuImportarExportar(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarImportarExportar(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarImportarExportar,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleImportarExportar,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuImportarExportar(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarImportarExportar,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleImportarExportar,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.importarexportarConstantesFunciones.getsFinalQueryImportarExportar();
		String  finalQueryPaginacionTodos=this.importarexportarConstantesFunciones.getsFinalQueryImportarExportar();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ImportarExportarConstantesFunciones.getArrayColumnasGlobalesNoImportarExportar(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ImportarExportarConstantesFunciones.getArrayColumnasGlobalesImportarExportar(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ImportarExportarConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.importarexportarsEliminados= new ArrayList<ImportarExportar>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessImportarExportar();
		
				///*ImportarExportarSessionBean*/this.importarexportarSessionBean=new ImportarExportarSessionBean();
			
			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ImportarExportarConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ImportarExportarConstantesFunciones.getClassesForeignKeysOfImportarExportar(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/importarexportar."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			importarexportarsAux= new ArrayList<ImportarExportar>();
			
				
			importarexportarLogic.setDatosCliente(this.datosCliente);
			importarexportarLogic.setDatosDeep(this.datosDeep);
			importarexportarLogic.setIsConDeep(true);
			
			
			importarexportarLogic.getImportarExportarDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					importarexportarLogic.getTodosImportarExportars(finalQueryGlobal,pagination);
					
					//importarexportarLogic.getTodosImportarExportarsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(importarexportarLogic.getImportarExportars()==null|| importarexportarLogic.getImportarExportars().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							importarexportarsAux= new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux= new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							importarexportarLogic.getTodosImportarExportars(finalQueryGlobal+"",this.pagination);												
							
							//importarexportarLogic.getTodosImportarExportarsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteImportarExportars("Todos",importarexportarLogic.getImportarExportars() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());					
							importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idImportarExportar=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idImportarExportar=this.idActual;
				
				} else if(this.idImportarExportarActual!=null && this.idImportarExportarActual!=0L) {
					idImportarExportar=idImportarExportarActual;
				}
				
					
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndicePorId(idImportarExportar);
				
				this.importarexportars=new ArrayList<ImportarExportar>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					importarexportarLogic.getEntity(idImportarExportar);
					
					//importarexportarLogic.getEntityWithConnection(idImportarExportar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
					importarexportarLogic.getImportarExportars().add(importarexportarLogic.getImportarExportar());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportars=new ArrayList<ImportarExportar>();
					this.importarexportars.add(importarexportar);
				}
				
				if(importarexportarLogic.getImportarExportar()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorNumeroComprobante")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorNumeroComprobante(numero_comprobanteBusquedaPorNumeroComprobante);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsBusquedaPorNumeroComprobante(finalQueryGlobal,pagination,numero_comprobanteBusquedaPorNumeroComprobante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorNumeroComprobante(numero_comprobanteBusquedaPorNumeroComprobante);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorNumeroComprobante(numero_comprobanteBusquedaPorNumeroComprobante);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsBusquedaPorNumeroComprobante(finalQueryGlobal,pagination,numero_comprobanteBusquedaPorNumeroComprobante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorNumeroComprobante(numero_comprobanteBusquedaPorNumeroComprobante);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorNumeroComprobante(numero_comprobanteBusquedaPorNumeroComprobante);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("BusquedaPorNumeroComprobante",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("BusquedaPorNumeroComprobante",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorRucInformante")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorRucInformante(rucBusquedaPorRucInformante);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsBusquedaPorRucInformante(finalQueryGlobal,pagination,rucBusquedaPorRucInformante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorRucInformante(rucBusquedaPorRucInformante);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorRucInformante(rucBusquedaPorRucInformante);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsBusquedaPorRucInformante(finalQueryGlobal,pagination,rucBusquedaPorRucInformante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorRucInformante(rucBusquedaPorRucInformante);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceBusquedaPorRucInformante(rucBusquedaPorRucInformante);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("BusquedaPorRucInformante",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("BusquedaPorRucInformante",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdAsientoContable",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdAsientoContable",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdCliente",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdCliente",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdModulo",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdModulo",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodoImportExport")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdPeriodoImportExport(id_periodo_import_exportFK_IdPeriodoImportExport);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdPeriodoImportExport(finalQueryGlobal,pagination,id_periodo_import_exportFK_IdPeriodoImportExport);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdPeriodoImportExport(id_periodo_import_exportFK_IdPeriodoImportExport);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdPeriodoImportExport(id_periodo_import_exportFK_IdPeriodoImportExport);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdPeriodoImportExport(finalQueryGlobal,pagination,id_periodo_import_exportFK_IdPeriodoImportExport);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdPeriodoImportExport(id_periodo_import_exportFK_IdPeriodoImportExport);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdPeriodoImportExport(id_periodo_import_exportFK_IdPeriodoImportExport);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdPeriodoImportExport",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdPeriodoImportExport",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoBanco")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoBanco(id_tipo_bancoFK_IdTipoBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoBanco(finalQueryGlobal,pagination,id_tipo_bancoFK_IdTipoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoBanco(id_tipo_bancoFK_IdTipoBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoBanco(id_tipo_bancoFK_IdTipoBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoBanco(finalQueryGlobal,pagination,id_tipo_bancoFK_IdTipoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoBanco(id_tipo_bancoFK_IdTipoBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoBanco(id_tipo_bancoFK_IdTipoBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoBanco",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoBanco",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoComprobante")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobante(id_tipo_comprobanteFK_IdTipoComprobante);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoComprobante(finalQueryGlobal,pagination,id_tipo_comprobanteFK_IdTipoComprobante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobante(id_tipo_comprobanteFK_IdTipoComprobante);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobante(id_tipo_comprobanteFK_IdTipoComprobante);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoComprobante(finalQueryGlobal,pagination,id_tipo_comprobanteFK_IdTipoComprobante);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobante(id_tipo_comprobanteFK_IdTipoComprobante);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobante(id_tipo_comprobanteFK_IdTipoComprobante);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoComprobante",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoComprobante",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoComprobanteBanco")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobanteBanco(id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoComprobanteBanco(finalQueryGlobal,pagination,id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobanteBanco(id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobanteBanco(id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoComprobanteBanco(finalQueryGlobal,pagination,id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobanteBanco(id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoComprobanteBanco(id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoComprobanteBanco",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoComprobanteBanco",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoIce")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIce(id_tipo_iceFK_IdTipoIce);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoIce(finalQueryGlobal,pagination,id_tipo_iceFK_IdTipoIce);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIce(id_tipo_iceFK_IdTipoIce);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIce(id_tipo_iceFK_IdTipoIce);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoIce(finalQueryGlobal,pagination,id_tipo_iceFK_IdTipoIce);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIce(id_tipo_iceFK_IdTipoIce);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIce(id_tipo_iceFK_IdTipoIce);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoIce",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoIce",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoImportacion")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoImportacion(id_tipo_importacionFK_IdTipoImportacion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoImportacion(finalQueryGlobal,pagination,id_tipo_importacionFK_IdTipoImportacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoImportacion(id_tipo_importacionFK_IdTipoImportacion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoImportacion(id_tipo_importacionFK_IdTipoImportacion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoImportacion(finalQueryGlobal,pagination,id_tipo_importacionFK_IdTipoImportacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoImportacion(id_tipo_importacionFK_IdTipoImportacion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoImportacion(id_tipo_importacionFK_IdTipoImportacion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoImportacion",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoImportacion",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoIva")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIva(id_tipo_ivaFK_IdTipoIva);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoIva(finalQueryGlobal,pagination,id_tipo_ivaFK_IdTipoIva);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIva(id_tipo_ivaFK_IdTipoIva);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIva(id_tipo_ivaFK_IdTipoIva);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoIva(finalQueryGlobal,pagination,id_tipo_ivaFK_IdTipoIva);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIva(id_tipo_ivaFK_IdTipoIva);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoIva(id_tipo_ivaFK_IdTipoIva);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoIva",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoIva",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTributario")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTipoTributario",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTipoTributario",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccionConta")) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTransaccionConta(id_transaccion_contaFK_IdTransaccionConta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					importarexportarLogic.getImportarExportarsFK_IdTransaccionConta(finalQueryGlobal,pagination,id_transaccion_contaFK_IdTransaccionConta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTransaccionConta(id_transaccion_contaFK_IdTransaccionConta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTransaccionConta(id_transaccion_contaFK_IdTransaccionConta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=importarexportarLogic.getImportarExportars()==null||importarexportarLogic.getImportarExportars().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=importarexportars==null|| importarexportars.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarsAux=new ArrayList<ImportarExportar>();
						importarexportarsAux.addAll(importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarsAux=new ArrayList<ImportarExportar>();
							importarexportarsAux.addAll(importarexportars);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							importarexportarLogic.getImportarExportarsFK_IdTransaccionConta(finalQueryGlobal,pagination,id_transaccion_contaFK_IdTransaccionConta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTransaccionConta(id_transaccion_contaFK_IdTransaccionConta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ImportarExportarConstantesFunciones.getDetalleIndiceFK_IdTransaccionConta(id_transaccion_contaFK_IdTransaccionConta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteImportarExportars("FK_IdTransaccionConta",importarexportarLogic.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteImportarExportars("FK_IdTransaccionConta",importarexportars);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
						importarexportarLogic.getImportarExportars().addAll(importarexportarsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportars=new ArrayList<ImportarExportar>();
							importarexportars.addAll(importarexportarsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesImportarExportar();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessImportarExportar();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=importarexportarLogic.getImportarExportars().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=importarexportars.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=importarexportarLogic.getImportarExportars().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=importarexportars.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ImportarExportar importarexportar) {
		Boolean permite=true;
		
		if(this.importarexportar.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ImportarExportarConstantesFunciones.getOrderByListaImportarExportar();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ImportarExportarConstantesFunciones.getOrderByListaImportarExportar();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ImportarExportar importarexportar:importarexportarLogic.getImportarExportars()) {
				if(importarexportar.getsType().equals(Constantes2.S_TOTALES)) {
					importarexportarTotales=importarexportar;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ImportarExportar importarexportar:this.importarexportars) {
				if(importarexportar.getsType().equals(Constantes2.S_TOTALES)) {
					importarexportarTotales=importarexportar;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.importarexportarAux=new ImportarExportar();
			this.importarexportarAux.setsType(Constantes2.S_TOTALES);
			this.importarexportarAux.setIsNew(false);
			this.importarexportarAux.setIsChanged(false);
			this.importarexportarAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ImportarExportarConstantesFunciones.TotalizarValoresFilaImportarExportar(this.importarexportarLogic.getImportarExportars(),this.importarexportarAux);
				
				this.importarexportarLogic.getImportarExportars().add(this.importarexportarAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ImportarExportarConstantesFunciones.TotalizarValoresFilaImportarExportar(this.importarexportars,this.importarexportarAux);
				
				this.importarexportars.add(this.importarexportarAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		importarexportarTotales=new ImportarExportar();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.importarexportarLogic.getImportarExportars().remove(importarexportarTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.importarexportars.remove(importarexportarTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		importarexportarTotales=new ImportarExportar();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ImportarExportar importarexportar:importarexportarLogic.getImportarExportars()) {
				if(importarexportar.getsType().equals(Constantes2.S_TOTALES)) {
					importarexportarTotales=importarexportar;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ImportarExportarConstantesFunciones.TotalizarValoresFilaImportarExportar(this.importarexportarLogic.getImportarExportars(),importarexportarTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ImportarExportar importarexportar:this.importarexportars) {
				if(importarexportar.getsType().equals(Constantes2.S_TOTALES)) {
					importarexportarTotales=importarexportar;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ImportarExportarConstantesFunciones.TotalizarValoresFilaImportarExportar(this.importarexportars,importarexportarTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosImportarExportar() {
		this.isPermisoTodoImportarExportar=false;
		this.isPermisoNuevoImportarExportar=false;
		this.isPermisoActualizarImportarExportar=false;
		this.isPermisoActualizarOriginalImportarExportar=false;
		this.isPermisoEliminarImportarExportar=false;
		this.isPermisoGuardarCambiosImportarExportar=false;
		this.isPermisoConsultaImportarExportar=false;
		this.isPermisoBusquedaImportarExportar=false;
		this.isPermisoReporteImportarExportar=false;		
		this.isPermisoOrdenImportarExportar=false;		
		this.isPermisoPaginacionMedioImportarExportar=false;		
		this.isPermisoPaginacionAltoImportarExportar=false;
		this.isPermisoPaginacionTodoImportarExportar=false;
		this.isPermisoCopiarImportarExportar=false;		
		this.isPermisoVerFormImportarExportar=false;		
		this.isPermisoDuplicarImportarExportar=false;		
		this.isPermisoOrdenImportarExportar=false;		
	}
	
	public void setPermisosUsuarioImportarExportar(Boolean isPermiso) {
		this.isPermisoTodoImportarExportar=isPermiso;
		this.isPermisoNuevoImportarExportar=isPermiso;
		this.isPermisoActualizarImportarExportar=isPermiso;
		this.isPermisoActualizarOriginalImportarExportar=isPermiso;
		this.isPermisoEliminarImportarExportar=isPermiso;
		this.isPermisoGuardarCambiosImportarExportar=isPermiso;
		this.isPermisoConsultaImportarExportar=isPermiso;
		this.isPermisoBusquedaImportarExportar=isPermiso;
		this.isPermisoReporteImportarExportar=isPermiso;
		this.isPermisoOrdenImportarExportar=isPermiso;		
		this.isPermisoPaginacionMedioImportarExportar=isPermiso;		
		this.isPermisoPaginacionAltoImportarExportar=isPermiso;		
		this.isPermisoPaginacionTodoImportarExportar=isPermiso;		
		this.isPermisoCopiarImportarExportar=isPermiso;		
		this.isPermisoVerFormImportarExportar=isPermiso;		
		this.isPermisoDuplicarImportarExportar=isPermiso;
		this.isPermisoOrdenImportarExportar=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioImportarExportar(Boolean isPermiso) {
		//this.isPermisoTodoImportarExportar=isPermiso;
		this.isPermisoNuevoImportarExportar=isPermiso;
		this.isPermisoActualizarImportarExportar=isPermiso;
		this.isPermisoActualizarOriginalImportarExportar=isPermiso;
		this.isPermisoEliminarImportarExportar=isPermiso;
		this.isPermisoGuardarCambiosImportarExportar=isPermiso;
		//this.isPermisoConsultaImportarExportar=isPermiso;
		//this.isPermisoBusquedaImportarExportar=isPermiso;
		//this.isPermisoReporteImportarExportar=isPermiso;
		//this.isPermisoOrdenImportarExportar=isPermiso;		
		//this.isPermisoPaginacionMedioImportarExportar=isPermiso;		
		//this.isPermisoPaginacionAltoImportarExportar=isPermiso;		
		//this.isPermisoPaginacionTodoImportarExportar=isPermiso;		
		//this.isPermisoCopiarImportarExportar=isPermiso;		
		//this.isPermisoDuplicarImportarExportar=isPermiso;
		//this.isPermisoOrdenImportarExportar=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioImportarExportarClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ImportarExportarJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebImportarExportar(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioImportarExportarClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioImportarExportarClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionImportarExportarClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioImportarExportarClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioImportarExportar() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ImportarExportarJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ImportarExportarConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoImportarExportar=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarImportarExportar=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalImportarExportar=this.isPermisoActualizarImportarExportar;
			this.isPermisoEliminarImportarExportar=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosImportarExportar=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaImportarExportar=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaImportarExportar=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoImportarExportar=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteImportarExportar=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenImportarExportar=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioImportarExportar=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoImportarExportar=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoImportarExportar=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarImportarExportar=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormImportarExportar=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarImportarExportar=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenImportarExportar=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosImportarExportar.setToolTipText(this.jTableDatosImportarExportar.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioImportarExportar(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioImportarExportar(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ImportarExportarJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ImportarExportarJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioImportarExportar() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyImportarExportarListas()throws Exception {
		try	{						
			
				this.modulosForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.periodoimportexportsForeignKey=new ArrayList();
				this.transaccioncontasForeignKey=new ArrayList();
				this.tipoimportacionsForeignKey=new ArrayList();
				this.tipocomprobantesForeignKey=new ArrayList();
				this.tipotributariosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.tipoivasForeignKey=new ArrayList();
				this.tipoicesForeignKey=new ArrayList();
				this.tipobancosForeignKey=new ArrayList();
				this.tipocomprobantebancosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyImportarExportarListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ImportarExportarJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyImportarExportarListas(false);
			} else {
			
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoImportExportListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionContaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoImportacionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoComprobanteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoIceListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoComprobanteBancoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoImportExportListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodoimportexportsForeignKey==null||this.periodoimportexportsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoImportExportConstantesFunciones.getArrayColumnasGlobalesPeriodoImportExport(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoImportExportConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoImportExportConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodoImportExportsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionContaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccioncontasForeignKey==null||this.transaccioncontasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionContaConstantesFunciones.getArrayColumnasGlobalesTransaccionConta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionContaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionContaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionContasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoImportacionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoimportacionsForeignKey==null||this.tipoimportacionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoImportacionConstantesFunciones.getArrayColumnasGlobalesTipoImportacion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoImportacionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoImportacionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoImportacionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoComprobanteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocomprobantesForeignKey==null||this.tipocomprobantesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoComprobanteConstantesFunciones.getArrayColumnasGlobalesTipoComprobante(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoComprobanteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoComprobanteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoComprobantesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTributarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIvaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoivasForeignKey==null||this.tipoivasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoIvaConstantesFunciones.getArrayColumnasGlobalesTipoIva(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIvaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoIvaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoIvasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIceListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoicesForeignKey==null||this.tipoicesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoIceConstantesFunciones.getArrayColumnasGlobalesTipoIce(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIceConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoIceConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoIcesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipobancosForeignKey==null||this.tipobancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoBancoConstantesFunciones.getArrayColumnasGlobalesTipoBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoBancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoBancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoComprobanteBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocomprobantebancosForeignKey==null||this.tipocomprobantebancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoComprobanteConstantesFunciones.getArrayColumnasGlobalesTipoComprobante(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoComprobanteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoComprobanteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoComprobanteBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyImportarExportarListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ImportarExportarParameterReturnGeneral importarexportarReturnGeneral=new ImportarExportarParameterReturnGeneral();
						
			


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_moduloImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_moduloImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_asiento_contableImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_asiento_contableImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalPeriodoImportExport="";

				if(((this.periodoimportexportsForeignKey==null||this.periodoimportexportsForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_periodo_import_exportImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_periodo_import_exportImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionPeriodoImportExport()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoImportExportConstantesFunciones.getArrayColumnasGlobalesPeriodoImportExport(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodoImportExport=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoImportExportConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodoImportExport=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodoImportExport, "");
						finalQueryGlobalPeriodoImportExport+=PeriodoImportExportConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodoImportExportsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodoImportExport=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidPeriodoImportExportActual();
					}
				} else {
					finalQueryGlobalPeriodoImportExport="NONE";
				}


				String finalQueryGlobalTransaccionConta="";

				if(((this.transaccioncontasForeignKey==null||this.transaccioncontasForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_transaccion_contaImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_transaccion_contaImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionConta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionContaConstantesFunciones.getArrayColumnasGlobalesTransaccionConta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransaccionConta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionContaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccionConta=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccionConta, "");
						finalQueryGlobalTransaccionConta+=TransaccionContaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionContasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccionConta=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTransaccionContaActual();
					}
				} else {
					finalQueryGlobalTransaccionConta="NONE";
				}


				String finalQueryGlobalTipoImportacion="";

				if(((this.tipoimportacionsForeignKey==null||this.tipoimportacionsForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_importacionImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_importacionImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoImportacion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoImportacionConstantesFunciones.getArrayColumnasGlobalesTipoImportacion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoImportacion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoImportacionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoImportacion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoImportacion, "");
						finalQueryGlobalTipoImportacion+=TipoImportacionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoImportacionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoImportacion=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoImportacionActual();
					}
				} else {
					finalQueryGlobalTipoImportacion="NONE";
				}


				String finalQueryGlobalTipoComprobante="";

				if(((this.tipocomprobantesForeignKey==null||this.tipocomprobantesForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_comprobanteImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_comprobanteImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobante()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoComprobanteConstantesFunciones.getArrayColumnasGlobalesTipoComprobante(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoComprobante=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoComprobanteConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoComprobante=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoComprobante, "");
						finalQueryGlobalTipoComprobante+=TipoComprobanteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoComprobantesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoComprobante=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoComprobanteActual();
					}
				} else {
					finalQueryGlobalTipoComprobante="NONE";
				}


				String finalQueryGlobalTipoTributario="";

				if(((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_tributarioImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_tributarioImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTributario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTributario=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTributario, "");
						finalQueryGlobalTipoTributario+=TipoTributarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTributario=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoTributarioActual();
					}
				} else {
					finalQueryGlobalTipoTributario="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_clienteImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_clienteImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoIva="";

				if(((this.tipoivasForeignKey==null||this.tipoivasForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_ivaImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_ivaImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIva()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoIvaConstantesFunciones.getArrayColumnasGlobalesTipoIva(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoIva=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIvaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoIva=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoIva, "");
						finalQueryGlobalTipoIva+=TipoIvaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoIvasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoIva=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoIvaActual();
					}
				} else {
					finalQueryGlobalTipoIva="NONE";
				}


				String finalQueryGlobalTipoIce="";

				if(((this.tipoicesForeignKey==null||this.tipoicesForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_iceImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_iceImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIce()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoIceConstantesFunciones.getArrayColumnasGlobalesTipoIce(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoIce=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIceConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoIce=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoIce, "");
						finalQueryGlobalTipoIce+=TipoIceConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoIcesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoIce=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoIceActual();
					}
				} else {
					finalQueryGlobalTipoIce="NONE";
				}


				String finalQueryGlobalTipoBanco="";

				if(((this.tipobancosForeignKey==null||this.tipobancosForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_bancoImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_bancoImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoBancoConstantesFunciones.getArrayColumnasGlobalesTipoBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoBancoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoBanco, "");
						finalQueryGlobalTipoBanco+=TipoBancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoBanco=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoBancoActual();
					}
				} else {
					finalQueryGlobalTipoBanco="NONE";
				}


				String finalQueryGlobalTipoComprobanteBanco="";

				if(((this.tipocomprobantebancosForeignKey==null||this.tipocomprobantebancosForeignKey.size()<=0) && this.importarexportarConstantesFunciones.cargarid_tipo_comprobante_bancoImportarExportar)
					 || (this.esRecargarFks && this.importarexportarConstantesFunciones.cargarid_tipo_comprobante_bancoImportarExportar)) {

					if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobanteBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoComprobanteConstantesFunciones.getArrayColumnasGlobalesTipoComprobante(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoComprobanteBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoComprobanteConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoComprobanteBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoComprobanteBanco, "");
						finalQueryGlobalTipoComprobanteBanco+=TipoComprobanteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoComprobanteBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoComprobanteBanco=" WHERE " + ConstantesSql.ID + "="+importarexportarSessionBean.getlidTipoComprobanteBancoActual();
					}
				} else {
					finalQueryGlobalTipoComprobanteBanco="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				importarexportarReturnGeneral=importarexportarLogic.cargarCombosLoteForeignKeyImportarExportar(finalQueryGlobalModulo,finalQueryGlobalAsientoContable,finalQueryGlobalPeriodoImportExport,finalQueryGlobalTransaccionConta,finalQueryGlobalTipoImportacion,finalQueryGlobalTipoComprobante,finalQueryGlobalTipoTributario,finalQueryGlobalCliente,finalQueryGlobalTipoIva,finalQueryGlobalTipoIce,finalQueryGlobalTipoBanco,finalQueryGlobalTipoComprobanteBanco);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=importarexportarReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=importarexportarReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalPeriodoImportExport.equals("NONE")) {
				this.periodoimportexportsForeignKey=importarexportarReturnGeneral.getperiodoimportexportsForeignKey();
			}

			if(!finalQueryGlobalTransaccionConta.equals("NONE")) {
				this.transaccioncontasForeignKey=importarexportarReturnGeneral.gettransaccioncontasForeignKey();
			}

			if(!finalQueryGlobalTipoImportacion.equals("NONE")) {
				this.tipoimportacionsForeignKey=importarexportarReturnGeneral.gettipoimportacionsForeignKey();
			}

			if(!finalQueryGlobalTipoComprobante.equals("NONE")) {
				this.tipocomprobantesForeignKey=importarexportarReturnGeneral.gettipocomprobantesForeignKey();
			}

			if(!finalQueryGlobalTipoTributario.equals("NONE")) {
				this.tipotributariosForeignKey=importarexportarReturnGeneral.gettipotributariosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=importarexportarReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTipoIva.equals("NONE")) {
				this.tipoivasForeignKey=importarexportarReturnGeneral.gettipoivasForeignKey();
			}

			if(!finalQueryGlobalTipoIce.equals("NONE")) {
				this.tipoicesForeignKey=importarexportarReturnGeneral.gettipoicesForeignKey();
			}

			if(!finalQueryGlobalTipoBanco.equals("NONE")) {
				this.tipobancosForeignKey=importarexportarReturnGeneral.gettipobancosForeignKey();
			}

			if(!finalQueryGlobalTipoComprobanteBanco.equals("NONE")) {
				this.tipocomprobantebancosForeignKey=importarexportarReturnGeneral.gettipocomprobantebancosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyImportarExportar()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyPeriodoImportExport();
			this.addItemDefectoCombosForeignKeyTransaccionConta();
			this.addItemDefectoCombosForeignKeyTipoImportacion();
			this.addItemDefectoCombosForeignKeyTipoComprobante();
			this.addItemDefectoCombosForeignKeyTipoTributario();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTipoIva();
			this.addItemDefectoCombosForeignKeyTipoIce();
			this.addItemDefectoCombosForeignKeyTipoBanco();
			this.addItemDefectoCombosForeignKeyTipoComprobanteBanco();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {
			if(this.importarexportarSessionBean==null) {
				this.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodoImportExport()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionPeriodoImportExport()) {
				PeriodoImportExport periodoimportexport=new PeriodoImportExport();
				PeriodoImportExportConstantesFunciones.setPeriodoImportExportDescripcion(periodoimportexport,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodoimportexport.setId(null);

				if(!PeriodoImportExportConstantesFunciones.ExisteEnLista(this.periodoimportexportsForeignKey,periodoimportexport,true)) {

					this.periodoimportexportsForeignKey.add(0,periodoimportexport);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccionConta()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTransaccionConta()) {
				TransaccionConta transaccionconta=new TransaccionConta();
				TransaccionContaConstantesFunciones.setTransaccionContaDescripcion(transaccionconta,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccionconta.setId(null);

				if(!TransaccionContaConstantesFunciones.ExisteEnLista(this.transaccioncontasForeignKey,transaccionconta,true)) {

					this.transaccioncontasForeignKey.add(0,transaccionconta);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoImportacion()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoImportacion()) {
				TipoImportacion tipoimportacion=new TipoImportacion();
				TipoImportacionConstantesFunciones.setTipoImportacionDescripcion(tipoimportacion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoimportacion.setId(null);

				if(!TipoImportacionConstantesFunciones.ExisteEnLista(this.tipoimportacionsForeignKey,tipoimportacion,true)) {

					this.tipoimportacionsForeignKey.add(0,tipoimportacion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoComprobante()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobante()) {
				TipoComprobante tipocomprobante=new TipoComprobante();
				TipoComprobanteConstantesFunciones.setTipoComprobanteDescripcion(tipocomprobante,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocomprobante.setId(null);

				if(!TipoComprobanteConstantesFunciones.ExisteEnLista(this.tipocomprobantesForeignKey,tipocomprobante,true)) {

					this.tipocomprobantesForeignKey.add(0,tipocomprobante);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTributario()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				TipoTributario tipotributario=new TipoTributario();
				TipoTributarioConstantesFunciones.setTipoTributarioDescripcion(tipotributario,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotributario.setId(null);

				if(!TipoTributarioConstantesFunciones.ExisteEnLista(this.tipotributariosForeignKey,tipotributario,true)) {

					this.tipotributariosForeignKey.add(0,tipotributario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoIva()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIva()) {
				TipoIva tipoiva=new TipoIva();
				TipoIvaConstantesFunciones.setTipoIvaDescripcion(tipoiva,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoiva.setId(null);

				if(!TipoIvaConstantesFunciones.ExisteEnLista(this.tipoivasForeignKey,tipoiva,true)) {

					this.tipoivasForeignKey.add(0,tipoiva);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoIce()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoIce()) {
				TipoIce tipoice=new TipoIce();
				TipoIceConstantesFunciones.setTipoIceDescripcion(tipoice,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoice.setId(null);

				if(!TipoIceConstantesFunciones.ExisteEnLista(this.tipoicesForeignKey,tipoice,true)) {

					this.tipoicesForeignKey.add(0,tipoice);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoBanco()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoBanco()) {
				TipoBanco tipobanco=new TipoBanco();
				TipoBancoConstantesFunciones.setTipoBancoDescripcion(tipobanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipobanco.setId(null);

				if(!TipoBancoConstantesFunciones.ExisteEnLista(this.tipobancosForeignKey,tipobanco,true)) {

					this.tipobancosForeignKey.add(0,tipobanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoComprobanteBanco()throws Exception {
		try {

			if(!this.importarexportarSessionBean.getisBusquedaDesdeForeignKeySesionTipoComprobanteBanco()) {
				TipoComprobante tipocomprobantebanco=new TipoComprobante();
				TipoComprobanteConstantesFunciones.setTipoComprobanteDescripcion(tipocomprobantebanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocomprobantebanco.setId(null);

				if(!TipoComprobanteConstantesFunciones.ExisteEnLista(this.tipocomprobantebancosForeignKey,tipocomprobantebanco,true)) {

					this.tipocomprobantebancosForeignKey.add(0,tipocomprobantebanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyImportarExportar()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyImportarExportar(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyImportarExportar()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
			
			
				this.importarexportar.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.importarexportar.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyImportarExportar();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyImportarExportar(ImportarExportar importarexportar)throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(importarexportar.getid_asiento_contable(),false,"Formulario");
			this.setActualPeriodoImportExportForeignKey(importarexportar.getid_periodo_import_export(),false,"Formulario");
			this.setActualTransaccionContaForeignKey(importarexportar.getid_transaccion_conta(),false,"Formulario");
			this.setActualTipoImportacionForeignKey(importarexportar.getid_tipo_importacion(),false,"Formulario");
			this.setActualTipoComprobanteForeignKey(importarexportar.getid_tipo_comprobante(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(importarexportar.getid_tipo_tributario(),false,"Formulario");
			this.setActualClienteForeignKey(importarexportar.getid_cliente(),false,"Formulario");
			this.setActualTipoIvaForeignKey(importarexportar.getid_tipo_iva(),false,"Formulario");
			this.setActualTipoIceForeignKey(importarexportar.getid_tipo_ice(),false,"Formulario");
			this.setActualTipoBancoForeignKey(importarexportar.getid_tipo_banco(),false,"Formulario");
			this.setActualTipoComprobanteBancoForeignKey(importarexportar.getid_tipo_comprobante_banco(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyImportarExportar(ImportarExportar importarexportar,String sTipoEvento)throws Exception {	
		try {
			
			

				if(importarexportar.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableImportarExportar")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(importarexportar.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				if(importarexportar.getCliente()!=null && !sTipoEvento.equals("id_clienteImportarExportar")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(importarexportar.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyImportarExportar()throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(this.importarexportarConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualPeriodoImportExportForeignKey(this.importarexportarConstantesFunciones.getid_periodo_import_export(),false,"Formulario");
			this.setActualTransaccionContaForeignKey(this.importarexportarConstantesFunciones.getid_transaccion_conta(),false,"Formulario");
			this.setActualTipoImportacionForeignKey(this.importarexportarConstantesFunciones.getid_tipo_importacion(),false,"Formulario");
			this.setActualTipoComprobanteForeignKey(this.importarexportarConstantesFunciones.getid_tipo_comprobante(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(this.importarexportarConstantesFunciones.getid_tipo_tributario(),false,"Formulario");
			this.setActualClienteForeignKey(this.importarexportarConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoIvaForeignKey(this.importarexportarConstantesFunciones.getid_tipo_iva(),false,"Formulario");
			this.setActualTipoIceForeignKey(this.importarexportarConstantesFunciones.getid_tipo_ice(),false,"Formulario");
			this.setActualTipoBancoForeignKey(this.importarexportarConstantesFunciones.getid_tipo_banco(),false,"Formulario");
			this.setActualTipoComprobanteBancoForeignKey(this.importarexportarConstantesFunciones.getid_tipo_comprobante_banco(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyImportarExportar()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyImportarExportar()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyImportarExportar()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroImportarExportar()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyImportarExportar()throws Exception {
		try {
			

			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFramePeriodoImportExportsForeignKey("Todos");
			this.cargarCombosFrameTransaccionContasForeignKey("Todos");
			this.cargarCombosFrameTipoImportacionsForeignKey("Todos");
			this.cargarCombosFrameTipoComprobantesForeignKey("Todos");
			this.cargarCombosFrameTipoTributariosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTipoIvasForeignKey("Todos");
			this.cargarCombosFrameTipoIcesForeignKey("Todos");
			this.cargarCombosFrameTipoBancosForeignKey("Todos");
			this.cargarCombosFrameTipoComprobanteBancosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyImportarExportar(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodoImportExportsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionContasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoImportacionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoComprobantesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoIvasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoIcesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoComprobanteBancosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyImportarExportar()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.getItemCount()>0) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
























	
	

	public ImportarExportarBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ImportarExportarBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ImportarExportarBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.importarexportarSessionBean=new ImportarExportarSessionBean(); 
		this.importarexportarConstantesFunciones=new ImportarExportarConstantesFunciones(); 
		this.importarexportarBean=new ImportarExportar();//(this.importarexportarConstantesFunciones); 		
		this.importarexportarReturnGeneral=new ImportarExportarParameterReturnGeneral(); 
		
		this.importarexportarSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.importarexportarSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ImportarExportarBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ImportarExportarBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ImportarExportarBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessImportarExportar(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.importarexportarConstantesFunciones=new ImportarExportarConstantesFunciones(); 
			this.importarexportarBean=new ImportarExportar();//this.importarexportarConstantesFunciones); 			
			this.importarexportarReturnGeneral=new ImportarExportarParameterReturnGeneral(); 
		
			ImportarExportarBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Importar Exportar Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.importarexportar=new ImportarExportar();
			this.importarexportars = new ArrayList<ImportarExportar>();
			this.importarexportarsAux = new ArrayList<ImportarExportar>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic=new ImportarExportarLogic();
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			//this.importarexportarSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.importarexportarSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormImportarExportar);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoImportarExportar);	
					}
					
					if(this.jInternalFrameImportacionImportarExportar!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionImportarExportar);							
					}
					*/
				}
				
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByImportarExportar!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByImportarExportar);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormImportarExportar!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormImportarExportar);
				this.jInternalFrameDetalleFormImportarExportar.setVisible(false);
				this.jInternalFrameDetalleFormImportarExportar.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoImportarExportar);
					this.jInternalFrameReporteDinamicoImportarExportar.setVisible(false);
					this.jInternalFrameReporteDinamicoImportarExportar.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionImportarExportar!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionImportarExportar);
					this.jInternalFrameImportacionImportarExportar.setVisible(false);
					this.jInternalFrameImportacionImportarExportar.setSelected(false);
				}
				
				*/
			}
			
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByImportarExportar!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByImportarExportar);
					this.jInternalFrameOrderByImportarExportar.setVisible(false);
					this.jInternalFrameOrderByImportarExportar.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idImportarExportarActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ImportarExportarConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.importarexportarReturnGeneral=new ImportarExportarParameterReturnGeneral();
			
			this.importarexportarParameterGeneral=new ImportarExportarParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.importarexportarLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ImportarExportarJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ImportarExportarConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.importarexportarSessionBean.getEsGuardarRelacionado(),this.importarexportarSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ImportarExportarConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.importarexportarSessionBean.getEsGuardarRelacionado(),this.importarexportarSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaDuplicarImportarExportar=true;
			this.isVisibilidadCeldaCopiarImportarExportar=true;
			this.isVisibilidadCeldaVerFormImportarExportar=true;
			this.isVisibilidadCeldaOrdenImportarExportar=true;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=false;
			this.isVisibilidadCeldaGuardarImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			
			
			this.isVisibilidadBusquedaPorNumeroComprobante=true;
			this.isVisibilidadBusquedaPorRucInformante=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdPeriodoImportExport=true;
			this.isVisibilidadFK_IdTipoBanco=true;
			this.isVisibilidadFK_IdTipoComprobante=true;
			this.isVisibilidadFK_IdTipoComprobanteBanco=true;
			this.isVisibilidadFK_IdTipoIce=true;
			this.isVisibilidadFK_IdTipoImportacion=true;
			this.isVisibilidadFK_IdTipoIva=true;
			this.isVisibilidadFK_IdTipoTributario=true;
			this.isVisibilidadFK_IdTransaccionConta=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosImportarExportar();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioImportarExportar(false);
			
			this.setPermisosUsuarioImportarExportar();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.importarexportarSessionBean.getEsGuardarRelacionado() 
				|| (this.importarexportarSessionBean.getEsGuardarRelacionado() && this.importarexportarSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioImportarExportarClasesRelacionadas();
			}
			
			if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioImportarExportarClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosImportarExportar();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualImportarExportar();
			}
			
			if(!this.isPermisoBusquedaImportarExportar) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasImportarExportar.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioImportarExportar,this.isPermisoPaginacionMedioImportarExportar,this.isPermisoPaginacionTodoImportarExportar);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ImportarExportarConstantesFunciones.getTiposSeleccionarImportarExportar());
				
				this.tiposColumnasSelect=ImportarExportarConstantesFunciones.getTiposSeleccionarImportarExportar(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioImportarExportar();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioImportarExportar(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioImportarExportar(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesImportarExportar() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.moduloLogic=new ModuloLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.periodoimportexportLogic=new PeriodoImportExportLogic();
			this.transaccioncontaLogic=new TransaccionContaLogic();
			this.tipoimportacionLogic=new TipoImportacionLogic();
			this.tipocomprobanteLogic=new TipoComprobanteLogic();
			this.tipotributarioLogic=new TipoTributarioLogic();
			this.clienteLogic=new ClienteLogic();
			this.tipoivaLogic=new TipoIvaLogic();
			this.tipoiceLogic=new TipoIceLogic();
			this.tipobancoLogic=new TipoBancoLogic();
			this.tipocomprobantebancoLogic=new TipoComprobanteLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				importarexportarImplementable= (ImportarExportarImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ImportarExportarConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				importarexportarImplementableHome= (ImportarExportarImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ImportarExportarConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.importarexportars= new ArrayList<ImportarExportar>();
			this.importarexportarsEliminados= new ArrayList<ImportarExportar>();
						
			this.isEsNuevoImportarExportar=false;
			this.esParaAccionDesdeFormularioImportarExportar=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idAsientoContableActual=0L;
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.periodoimportexportsForeignKey=new ArrayList<PeriodoImportExport>() ;
			this.transaccioncontasForeignKey=new ArrayList<TransaccionConta>() ;
			this.tipoimportacionsForeignKey=new ArrayList<TipoImportacion>() ;
			this.tipocomprobantesForeignKey=new ArrayList<TipoComprobante>() ;
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.tipoivasForeignKey=new ArrayList<TipoIva>() ;
			this.tipoicesForeignKey=new ArrayList<TipoIce>() ;
			this.tipobancosForeignKey=new ArrayList<TipoBanco>() ;
			this.tipocomprobantebancosForeignKey=new ArrayList<TipoComprobante>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyImportarExportar(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroImportarExportar();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ImportarExportarBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ImportarExportarConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesImportarExportar("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingImportarExportar(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioImportarExportar();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioImportarExportar();
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasImportarExportar.getTabCount(); i++) {
					this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessImportarExportar(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ImportarExportar: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectImportarExportar() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesImportarExportar")) {
				iIndex=this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessImportarExportar();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyImportarExportar(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyImportarExportar(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyImportarExportar(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyImportarExportarListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyImportarExportar();
		
		this.cargarCombosFrameForeignKeyImportarExportar();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyImportarExportar();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyImportarExportar();
		}
	}
	
	

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoImportExport(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPeriodoImportExportListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPeriodoImportExport();
				this.cargarCombosFramePeriodoImportExportsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPeriodoImportExport(this.periodoimportexportsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionConta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionContaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccionConta();
				this.cargarCombosFrameTransaccionContasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccionConta(this.transaccioncontasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoImportacion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoImportacionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoImportacion();
				this.cargarCombosFrameTipoImportacionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoImportacion(this.tipoimportacionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoComprobante(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoComprobanteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoComprobante();
				this.cargarCombosFrameTipoComprobantesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoComprobante(this.tipocomprobantesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTributario(this.tipotributariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIva(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoIva();
				this.cargarCombosFrameTipoIvasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoIva(this.tipoivasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIce(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoIceListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoIce();
				this.cargarCombosFrameTipoIcesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoIce(this.tipoicesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoBanco();
				this.cargarCombosFrameTipoBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoBanco(this.tipobancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoComprobanteBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoComprobanteBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoComprobanteBanco();
				this.cargarCombosFrameTipoComprobanteBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoComprobanteBanco(this.tipocomprobantebancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoImportarExportarActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			
			if(jTableDatosImportarExportar.getRowCount()>=1) {
				jTableDatosImportarExportar.removeRowSelectionInterval(0, jTableDatosImportarExportar.getRowCount()-1);						
			}
			
			this.isEsNuevoImportarExportar=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoImportarExportar(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesImportarExportar(true);			
			//this.importarexportar=new ImportarExportar();
			//this.importarexportar.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesImportarExportar(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualImportarExportar() ;
			
			if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleImportarExportar(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.importarexportar);	
			this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);				
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ImportarExportar: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarImportarExportarActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosImportarExportar.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosImportarExportar.getSelectedRows().length;			
			}
			
			importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoImportarExportar--;			
				//ImportarExportar importarexportarAux= new ImportarExportar();			
				//importarexportarAux.setId(this.iIdNuevoImportarExportar);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ImportarExportar importarexportarOrigen=new ImportarExportar();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ImportarExportar importarexportarOrigen : importarexportarsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							importarexportarOrigen =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							importarexportarOrigen =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaImportarExportar();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.importarexportar.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosImportarExportar(importarexportarOrigen,this.importarexportar,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.importarexportarLogic.getImportarExportars().add(this.importarexportarAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.importarexportars.add(this.importarexportarAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaImportarExportar(false);
				
				this.jTableDatosImportarExportar.setRowSelectionInterval(this.getIndiceNuevoImportarExportar(), this.getIndiceNuevoImportarExportar());
				
				int iLastRow =  this.jTableDatosImportarExportar.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosImportarExportar.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosImportarExportar.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaImportarExportar(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();									
		
			ImportarExportar importarexportarOrigen=new ImportarExportar();
			ImportarExportar importarexportarDestino=new ImportarExportar();
				
			importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosImportarExportar.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || importarexportarsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosImportarExportar.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarOrigen =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						importarexportarOrigen =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						importarexportarDestino =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						importarexportarDestino =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				importarexportarOrigen =importarexportarsSeleccionados.get(0);
				importarexportarDestino =importarexportarsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosImportarExportar(importarexportarOrigen,importarexportarDestino,true,false);
				
				importarexportarDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(importarexportarDestino,importarexportarLogic.getImportarExportars());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(importarexportarDestino,importarexportars);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaImportarExportar(false);
				
				//this.jTableDatosImportarExportar.setRowSelectionInterval(this.getIndiceNuevoImportarExportar(), this.getIndiceNuevoImportarExportar());
				
				int iLastRow =  this.jTableDatosImportarExportar.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosImportarExportar.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosImportarExportar.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaImportarExportar(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormImportarExportar.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesImportarExportar.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasImportarExportar.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesImportarExportar.setVisible(!isVisible);
			this.jPanelPaginacionImportarExportar.setVisible(!isVisible);
			this.jPanelAccionesImportarExportar.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameImportarExportar();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoImportarExportar();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionImportarExportar();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByImportarExportar();
			
			this.abrirFrameOrderByImportarExportar();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByImportarExportar();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleImportarExportar(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormImportarExportar);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormImportarExportar.isMaximum()) {
					this.jInternalFrameDetalleFormImportarExportar.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormImportarExportar.setSize(this.jInternalFrameDetalleFormImportarExportar.iWidthFormulario,this.jInternalFrameDetalleFormImportarExportar.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormImportarExportar.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormImportarExportar.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormImportarExportar.isMaximum()) {
						this.jInternalFrameDetalleFormImportarExportar.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormImportarExportar.jContentPaneDetalleImportarExportar.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormImportarExportar.jContentPaneDetalleImportarExportar.getWidth(),ImportarExportarConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormImportarExportar.jContentPaneDetalleImportarExportar.getWidth(),ImportarExportarConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormImportarExportar.jContentPaneDetalleImportarExportar.getWidth(),ImportarExportarConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormImportarExportar.setVisible(true);
	        this.jInternalFrameDetalleFormImportarExportar.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByImportarExportar() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByImportarExportar==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByImportarExportar=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByImportarExportar,false,this);
				} else {
					this.jInternalFrameOrderByImportarExportar=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByImportarExportar,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByImportarExportar);
				this.jInternalFrameOrderByImportarExportar.setVisible(false);
				this.jInternalFrameOrderByImportarExportar.setSelected(false);
				
				this.jInternalFrameOrderByImportarExportar.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByImportarExportar"));
				
				this.inicializarActualizarBindingTablaOrderByImportarExportar();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionImportarExportar() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionImportarExportar==null) {
				
				this.jInternalFrameImportacionImportarExportar=new ImportacionJInternalFrame(ImportarExportarConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionImportarExportar);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionImportarExportar);
				this.jInternalFrameImportacionImportarExportar.setVisible(false);
				this.jInternalFrameImportacionImportarExportar.setSelected(false);


				this.jInternalFrameImportacionImportarExportar.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionImportarExportar"));
				this.jInternalFrameImportacionImportarExportar.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionImportarExportar"));
				this.jInternalFrameImportacionImportarExportar.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionImportarExportar"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoImportarExportar() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoImportarExportar==null) {
				this.jInternalFrameReporteDinamicoImportarExportar=new ReporteDinamicoJInternalFrame(ImportarExportarConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoImportarExportar);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoImportarExportar);
				this.jInternalFrameReporteDinamicoImportarExportar.setVisible(false);
				this.jInternalFrameReporteDinamicoImportarExportar.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoImportarExportar"));
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoImportarExportar"));
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoImportarExportar"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualImportarExportar();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	
		
					
	public void cerrarFrameDetalleImportarExportar() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormImportarExportar);
			
	       	this.jInternalFrameDetalleFormImportarExportar.setVisible(false);
	        this.jInternalFrameDetalleFormImportarExportar.setSelected(false);
			
			//this.jInternalFrameDetalleFormImportarExportar.dispose();
			//this.jInternalFrameDetalleFormImportarExportar=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoImportarExportar() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoImportarExportar.setVisible(true);
	        this.jInternalFrameReporteDinamicoImportarExportar.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionImportarExportar() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionImportarExportar.setVisible(true);
	        this.jInternalFrameImportacionImportarExportar.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	
	
	/*
	public void abrirFrameOrderByImportarExportar() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByImportarExportar.setVisible(true);
	        this.jInternalFrameOrderByImportarExportar.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByImportarExportar() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByImportarExportar.setVisible(false);
	        this.jInternalFrameOrderByImportarExportar.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoImportarExportar() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoImportarExportar.setVisible(false);
	        this.jInternalFrameReporteDinamicoImportarExportar.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionImportarExportar() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionImportarExportar.setVisible(false);
	        this.jInternalFrameImportacionImportarExportar.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	
	
	public void jButtonModificarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarImportarExportar(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarImportarExportar(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesImportarExportar(true);
			//this.isEsNuevoImportarExportar=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesImportarExportar("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesImportarExportar(false) ;
			
			if(importarexportarSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleImportarExportar(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualImportarExportar(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaImportarExportarActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarImportarExportar(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesImportarExportar(true);
			//this.isEsNuevoImportarExportar=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.importarexportar.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesImportarExportar("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesImportarExportar(false) ;
			
			if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleImportarExportar(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualImportarExportar(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("AsientoContable")) {
				if(!this.importarexportarConstantesFunciones.cargarid_asiento_contableImportarExportar) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingImportarExportar(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.importarexportarConstantesFunciones.cargarid_clienteImportarExportar) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingImportarExportar(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPeriodoImportExport(List<PeriodoImportExport> periodoimportexportsForeignKey)throws Exception{
		TableColumn tableColumnPeriodoImportExport=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT));
		TableCellEditor tableCellEditorPeriodoImportExport =tableColumnPeriodoImportExport.getCellEditor();

		PeriodoImportExportTableCell periodoimportexportTableCellFk=(PeriodoImportExportTableCell)tableCellEditorPeriodoImportExport;

		if(periodoimportexportTableCellFk!=null) {
			periodoimportexportTableCellFk.setperiodoimportexportsForeignKey(periodoimportexportsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//periodoimportexportTableCellFk.setRowActual(intSelectedRow);
			//periodoimportexportTableCellFk.setperiodoimportexportsForeignKeyActual(periodoimportexportsForeignKey);
		//}


		if(periodoimportexportTableCellFk!=null) {
			periodoimportexportTableCellFk.RecargarPeriodoImportExportsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccionConta(List<TransaccionConta> transaccioncontasForeignKey)throws Exception{
		TableColumn tableColumnTransaccionConta=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA));
		TableCellEditor tableCellEditorTransaccionConta =tableColumnTransaccionConta.getCellEditor();

		TransaccionContaTableCell transaccioncontaTableCellFk=(TransaccionContaTableCell)tableCellEditorTransaccionConta;

		if(transaccioncontaTableCellFk!=null) {
			transaccioncontaTableCellFk.settransaccioncontasForeignKey(transaccioncontasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccioncontaTableCellFk.setRowActual(intSelectedRow);
			//transaccioncontaTableCellFk.settransaccioncontasForeignKeyActual(transaccioncontasForeignKey);
		//}


		if(transaccioncontaTableCellFk!=null) {
			transaccioncontaTableCellFk.RecargarTransaccionContasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoImportacion(List<TipoImportacion> tipoimportacionsForeignKey)throws Exception{
		TableColumn tableColumnTipoImportacion=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION));
		TableCellEditor tableCellEditorTipoImportacion =tableColumnTipoImportacion.getCellEditor();

		TipoImportacionTableCell tipoimportacionTableCellFk=(TipoImportacionTableCell)tableCellEditorTipoImportacion;

		if(tipoimportacionTableCellFk!=null) {
			tipoimportacionTableCellFk.settipoimportacionsForeignKey(tipoimportacionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoimportacionTableCellFk.setRowActual(intSelectedRow);
			//tipoimportacionTableCellFk.settipoimportacionsForeignKeyActual(tipoimportacionsForeignKey);
		//}


		if(tipoimportacionTableCellFk!=null) {
			tipoimportacionTableCellFk.RecargarTipoImportacionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoComprobante(List<TipoComprobante> tipocomprobantesForeignKey)throws Exception{
		TableColumn tableColumnTipoComprobante=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE));
		TableCellEditor tableCellEditorTipoComprobante =tableColumnTipoComprobante.getCellEditor();

		TipoComprobanteTableCell tipocomprobanteTableCellFk=(TipoComprobanteTableCell)tableCellEditorTipoComprobante;

		if(tipocomprobanteTableCellFk!=null) {
			tipocomprobanteTableCellFk.settipocomprobantesForeignKey(tipocomprobantesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocomprobanteTableCellFk.setRowActual(intSelectedRow);
			//tipocomprobanteTableCellFk.settipocomprobantesForeignKeyActual(tipocomprobantesForeignKey);
		//}


		if(tipocomprobanteTableCellFk!=null) {
			tipocomprobanteTableCellFk.RecargarTipoComprobantesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTributario(List<TipoTributario> tipotributariosForeignKey)throws Exception{
		TableColumn tableColumnTipoTributario=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));
		TableCellEditor tableCellEditorTipoTributario =tableColumnTipoTributario.getCellEditor();

		TipoTributarioTableCell tipotributarioTableCellFk=(TipoTributarioTableCell)tableCellEditorTipoTributario;

		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.settipotributariosForeignKey(tipotributariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotributarioTableCellFk.setRowActual(intSelectedRow);
			//tipotributarioTableCellFk.settipotributariosForeignKeyActual(tipotributariosForeignKey);
		//}


		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.RecargarTipoTributariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoIva(List<TipoIva> tipoivasForeignKey)throws Exception{
		TableColumn tableColumnTipoIva=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA));
		TableCellEditor tableCellEditorTipoIva =tableColumnTipoIva.getCellEditor();

		TipoIvaTableCell tipoivaTableCellFk=(TipoIvaTableCell)tableCellEditorTipoIva;

		if(tipoivaTableCellFk!=null) {
			tipoivaTableCellFk.settipoivasForeignKey(tipoivasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoivaTableCellFk.setRowActual(intSelectedRow);
			//tipoivaTableCellFk.settipoivasForeignKeyActual(tipoivasForeignKey);
		//}


		if(tipoivaTableCellFk!=null) {
			tipoivaTableCellFk.RecargarTipoIvasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoIce(List<TipoIce> tipoicesForeignKey)throws Exception{
		TableColumn tableColumnTipoIce=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOICE));
		TableCellEditor tableCellEditorTipoIce =tableColumnTipoIce.getCellEditor();

		TipoIceTableCell tipoiceTableCellFk=(TipoIceTableCell)tableCellEditorTipoIce;

		if(tipoiceTableCellFk!=null) {
			tipoiceTableCellFk.settipoicesForeignKey(tipoicesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoiceTableCellFk.setRowActual(intSelectedRow);
			//tipoiceTableCellFk.settipoicesForeignKeyActual(tipoicesForeignKey);
		//}


		if(tipoiceTableCellFk!=null) {
			tipoiceTableCellFk.RecargarTipoIcesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoBanco(List<TipoBanco> tipobancosForeignKey)throws Exception{
		TableColumn tableColumnTipoBanco=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO));
		TableCellEditor tableCellEditorTipoBanco =tableColumnTipoBanco.getCellEditor();

		TipoBancoTableCell tipobancoTableCellFk=(TipoBancoTableCell)tableCellEditorTipoBanco;

		if(tipobancoTableCellFk!=null) {
			tipobancoTableCellFk.settipobancosForeignKey(tipobancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipobancoTableCellFk.setRowActual(intSelectedRow);
			//tipobancoTableCellFk.settipobancosForeignKeyActual(tipobancosForeignKey);
		//}


		if(tipobancoTableCellFk!=null) {
			tipobancoTableCellFk.RecargarTipoBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoComprobanteBanco(List<TipoComprobante> tipocomprobantebancosForeignKey)throws Exception{
		TableColumn tableColumnTipoComprobanteBanco=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO));
		TableCellEditor tableCellEditorTipoComprobanteBanco =tableColumnTipoComprobanteBanco.getCellEditor();

		TipoComprobanteTableCell tipocomprobanteTableCellFk=(TipoComprobanteTableCell)tableCellEditorTipoComprobanteBanco;

		if(tipocomprobanteTableCellFk!=null) {
			tipocomprobanteTableCellFk.settipocomprobantesForeignKey(tipocomprobantebancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocomprobanteTableCellFk.setRowActual(intSelectedRow);
			//tipocomprobanteTableCellFk.settipocomprobantesForeignKeyActual(tipocomprobantebancosForeignKey);
		//}


		if(tipocomprobanteTableCellFk!=null) {
			tipocomprobanteTableCellFk.RecargarTipoComprobantesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesImportarExportar(false);
			
			//if(!this.isEsNuevoImportarExportar) {								
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				
			}
			
			if(this.permiteMantenimiento(this.importarexportar)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoImportarExportar=true;
					this.inicializarActualizarBindingTablaImportarExportar(false);
					this.isEsNuevoImportarExportar=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoImportarExportar=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoImportarExportar=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesImportarExportar(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualImportarExportar(false);
				
				this.habilitarDeshabilitarControlesImportarExportar(false);
			
												
				
				if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleImportarExportar();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoImportarExportarActionPerformed(evt,importarexportarSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualImportarExportar(this.importarexportar,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,importarexportarSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.importarexportar.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarImportarExportarActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				this.importarexportar.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				this.importarexportar.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.importarexportar)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ImportarExportarModel) this.jTableDatosImportarExportar.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoImportarExportar=true;
				this.inicializarActualizarBindingTablaImportarExportar(false);
				this.isEsNuevoImportarExportar=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesImportarExportar(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualImportarExportar(false);
				
				this.habilitarDeshabilitarControlesImportarExportar(false);
				
				
				
				if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleImportarExportar();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarImportarExportarActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosImportarExportar.getRowCount()>=1) {
				jTableDatosImportarExportar.removeRowSelectionInterval(0, jTableDatosImportarExportar.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesImportarExportar(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaImportarExportar(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesImportarExportar(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualImportarExportar(false) ;
			
			this.isEsNuevoImportarExportar=false;
			
			if(ImportarExportarJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleImportarExportar();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingImportarExportar(false);
				
				//SI ES MANUAL
				if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualImportarExportar();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoImportarExportar--;			
			//ImportarExportar importarexportarAux= new ImportarExportar();			
			//importarexportarAux.setId(this.iIdNuevoImportarExportar);
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaImportarExportar();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
			
			this.importarexportar.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.importarexportarLogic.getImportarExportars().add(this.importarexportarAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.importarexportars.add(this.importarexportarAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaImportarExportar(false);
			
			this.jTableDatosImportarExportar.setRowSelectionInterval(this.getIndiceNuevoImportarExportar(), this.getIndiceNuevoImportarExportar());
			
			int iLastRow =  this.jTableDatosImportarExportar.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosImportarExportar.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosImportarExportar.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaImportarExportar(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingImportarExportar(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingImportarExportar(false);
			
			//SI ES MANUAL
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualImportarExportar();
			}
			
			//this.abrirFrameTreeImportarExportar();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionImportarExportarActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Importar ExportarS ?", "MANTENIMIENTO DE Importar Exportar", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionImportarExportar.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralImportarExportar();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.importarexportarReturnGeneral=importarexportarLogic.procesarImportacionImportarExportarsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.importarexportarParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarImportarExportarReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionImportarExportarActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionImportarExportar.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionImportarExportar.setFileImportacion(this.jInternalFrameImportacionImportarExportar.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionImportarExportar.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionImportarExportar.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionImportarExportar.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionImportarExportar.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		

		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ImportarExportarBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ImportarExportarBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ImportarExportarConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cInformante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cInformante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cInformante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cInformante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_PeriodoImportExport_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_PeriodoImportExport_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_PeriodoImportExport_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_PeriodoImportExport_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TransaccionConta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TransaccionConta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TransaccionConta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TransaccionConta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoImportacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoImportacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoImportacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoImportacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cumentoTransporte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cumentoTransporte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cumentoTransporte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cumentoTransporte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroReferenciaComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroReferenciaComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroReferenciaComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroReferenciaComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTributario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTributario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTributario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTributario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoFiscal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoFiscal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoFiscal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoFiscal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_ESJURIDICO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Juridico_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Juridico_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Juridico_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Juridico_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_BASE0:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_se0_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_se0_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_se0_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_se0_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoTotalCif_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoTotalCif_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoTotalCif_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoTotalCif_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOICE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_BASEGENERAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_seGeneral_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_seGeneral_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_seGeneral_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_seGeneral_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoComprobanteBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoComprobanteBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoComprobanteBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoComprobanteBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_CONCONVENIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nConvenio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nConvenio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nConvenio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nConvenio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDevolucion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDevolucion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDevolucion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDevolucion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSerieComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSerieComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSerieComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSerieComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroAutorizacionComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroAutorizacionComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroAutorizacionComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroAutorizacionComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSecuencialFuente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSecuencialFuente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSecuencialFuente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSecuencialFuente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ImportarExportarConstantesFunciones.LABEL_VALORFOB:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorFob_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorFob_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorFob_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorFob_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoImportarExportar.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ImportarExportarConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE:
					sNombreCampoCategoria="ruc";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT:
					sNombreCampoCategoria="id_periodo_import_export";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA:
					sNombreCampoCategoria="id_transaccion_conta";
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION:
					sNombreCampoCategoria="id_tipo_importacion";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE:
					sNombreCampoCategoria="id_tipo_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE:
					sNombreCampoCategoria="documento_transporte";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE:
					sNombreCampoCategoria="numero_referencia_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoria="id_tipo_tributario";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL:
					sNombreCampoCategoria="codigo_fiscal";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case ImportarExportarConstantesFunciones.LABEL_ESJURIDICO:
					sNombreCampoCategoria="es_juridico";
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASE0:
					sNombreCampoCategoria="base0";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF:
					sNombreCampoCategoria="monto_total_cif";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOIVA:
					sNombreCampoCategoria="monto_iva";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA:
					sNombreCampoCategoria="id_tipo_iva";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOICE:
					sNombreCampoCategoria="monto_ice";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOICE:
					sNombreCampoCategoria="id_tipo_ice";
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASEGENERAL:
					sNombreCampoCategoria="base_general";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO:
					sNombreCampoCategoria="id_tipo_banco";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO:
					sNombreCampoCategoria="id_tipo_comprobante_banco";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONCONVENIO:
					sNombreCampoCategoria="con_convenio";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION:
					sNombreCampoCategoria="con_devolucion";
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE:
					sNombreCampoCategoria="numero_serie_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE:
					sNombreCampoCategoria="numero_autorizacion_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE:
					sNombreCampoCategoria="numero_secuencial_fuente";
					break;

				case ImportarExportarConstantesFunciones.LABEL_VALORFOB:
					sNombreCampoCategoria="valor_fob";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ImportarExportarConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE:
					sNombreCampoCategoriaValor="ruc";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT:
					sNombreCampoCategoriaValor="id_periodo_import_export";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA:
					sNombreCampoCategoriaValor="id_transaccion_conta";
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION:
					sNombreCampoCategoriaValor="id_tipo_importacion";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE:
					sNombreCampoCategoriaValor="id_tipo_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE:
					sNombreCampoCategoriaValor="documento_transporte";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE:
					sNombreCampoCategoriaValor="numero_referencia_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoriaValor="id_tipo_tributario";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL:
					sNombreCampoCategoriaValor="codigo_fiscal";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case ImportarExportarConstantesFunciones.LABEL_ESJURIDICO:
					sNombreCampoCategoriaValor="es_juridico";
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASE0:
					sNombreCampoCategoriaValor="base0";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF:
					sNombreCampoCategoriaValor="monto_total_cif";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOIVA:
					sNombreCampoCategoriaValor="monto_iva";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA:
					sNombreCampoCategoriaValor="id_tipo_iva";
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOICE:
					sNombreCampoCategoriaValor="monto_ice";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOICE:
					sNombreCampoCategoriaValor="id_tipo_ice";
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASEGENERAL:
					sNombreCampoCategoriaValor="base_general";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO:
					sNombreCampoCategoriaValor="id_tipo_banco";
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO:
					sNombreCampoCategoriaValor="id_tipo_comprobante_banco";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONCONVENIO:
					sNombreCampoCategoriaValor="con_convenio";
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION:
					sNombreCampoCategoriaValor="con_devolucion";
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE:
					sNombreCampoCategoriaValor="numero_serie_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_autorizacion_comprobante";
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE:
					sNombreCampoCategoriaValor="numero_secuencial_fuente";
					break;

				case ImportarExportarConstantesFunciones.LABEL_VALORFOB:
					sNombreCampoCategoriaValor="valor_fob";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ImportarExportarConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento C.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc Informa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo_import_export");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion_conta");
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Importacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_importacion");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_comprobante");
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Comp. PreImp",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Doc. Transporte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"documento_transporte");
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Ref. Comp.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_referencia_comprobante");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sustento Tribut.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_tributario");
					break;

				case ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Identif. Fiscal Prov.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_fiscal");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case ImportarExportarConstantesFunciones.LABEL_ESJURIDICO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Juridico",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_juridico");
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASE0:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base 0%",sNombreCampoCategoria,sNombreCampoCategoriaValor,"base0");
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Total Cif",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_total_cif");
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_iva");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_iva");
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_ice");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_ice");
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASEGENERAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base Gr.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"base_general");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_banco");
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Comprob",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_comprobante_banco");
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONCONVENIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Convenio Int.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_convenio");
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Devolucion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_devolucion");
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Serie Comp.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_serie_comprobante");
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Aut. Comp.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_autorizacion_comprobante");
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No. Sec. Comp.Fue/Dui/Das",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial_fuente");
					break;

				case ImportarExportarConstantesFunciones.LABEL_VALORFOB:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor FOB",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_fob");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoImportarExportarActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ImportarExportars");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ImportarExportarConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getperiodoimportexport_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettransaccionconta_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipoimportacion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipocomprobante_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getdocumento_transporte());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getnumero_referencia_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipotributario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getcodigo_fiscal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_ESJURIDICO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getes_juridico());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASE0:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASE0);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getbase0());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getmonto_total_cif());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOIVA);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getmonto_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipoiva_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_MONTOICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOICE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getmonto_ice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOICE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipoice_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_BASEGENERAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getbase_general());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipobanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.gettipocomprobantebanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONCONVENIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getcon_convenio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getcon_devolucion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getnumero_serie_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getnumero_autorizacion_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getnumero_secuencial_fuente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ImportarExportarConstantesFunciones.LABEL_VALORFOB:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_VALORFOB);
					iRow++;

					for(ImportarExportar importarexportar:importarexportarsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(importarexportar.getvalor_fob());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelImportarExportar(row);				
			//	iRow++;
			//}				
			
			//for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelImportarExportar(importarexportarAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingImportarExportar(false);
			
			//SI ES MANUAL
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualImportarExportar();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingImportarExportar(false);
			
			//SI ES MANUAL
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualImportarExportar();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesImportarExportarActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingImportarExportar(false);
			
			//SI ES MANUAL
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualImportarExportar();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaImportarExportar() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosImportarExportar.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosImportarExportar.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosImportarExportar.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosImportarExportar.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosImportarExportar.setMinimumSize(dimensionMinimum);
		this.jTableDatosImportarExportar.setMaximumSize(dimensionMaximum);
		this.jTableDatosImportarExportar.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingImportarExportar(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingImportarExportar(esInicializar,true);
	}
	
	public void inicializarActualizarBindingImportarExportar(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaImportarExportar(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesImportarExportar(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasImportarExportar(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesImportarExportar(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesImportarExportar(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualImportarExportar() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaImportarExportar();
		
		this.inicializarActualizarBindingBotonesManualImportarExportar(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualImportarExportar();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesImportarExportar() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualImportarExportar(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualImportarExportar(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosImportarExportar.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosImportarExportar.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteImportarExportar.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormImportarExportar!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionNuevoImportarExportar.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionSinCerrarImportarExportar.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionSinMensajeImportarExportar.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosImportarExportar.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosImportarExportar.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteImportarExportar.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormImportarExportar!=null) {
				this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionNuevoImportarExportar.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionSinCerrarImportarExportar.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormImportarExportar.jCheckBoxPostAccionSinMensajeImportarExportar.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionImportarExportar.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionImportarExportar.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesImportarExportar.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesImportarExportar.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesImportarExportar.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarImportarExportar.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesImportarExportar.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesImportarExportar.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralImportarExportar.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesImportarExportar(Boolean esInicializar) throws Exception {
		try	{	
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualImportarExportar(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesImportarExportar() throws Exception {
		try	{
			if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualImportarExportar();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleImportarExportar() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualImportarExportar() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesImportarExportar.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesImportarExportar.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesImportarExportar.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionImportarExportar.addItem(reporte);
			}
			
			
			if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionImportarExportar.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionImportarExportar.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesImportarExportar.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesImportarExportar.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarImportarExportar.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarImportarExportar.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarImportarExportar.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualImportarExportar();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualImportarExportar() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
				this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
				this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
				
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoImportarExportar.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ImportarExportarConstantesFunciones.getTiposSeleccionarImportarExportar(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ImportarExportarConstantesFunciones.getTiposSeleccionarImportarExportar(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ImportarExportarConstantesFunciones.getTiposSeleccionarImportarExportar(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoImportarExportar.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoImportarExportar.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualImportarExportar()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.numero_comprobanteBusquedaPorNumeroComprobante=this.jTextFieldnumero_comprobanteBusquedaPorNumeroComprobanteImportarExportar.getText();
		this.rucBusquedaPorRucInformante=this.jTextFieldrucBusquedaPorRucInformanteImportarExportar.getText();
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteImportarExportar.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.getSelectedItem()!=null){this.id_periodo_import_exportFK_IdPeriodoImportExport=((PeriodoImportExport)this.jComboBoxid_periodo_import_exportFK_IdPeriodoImportExportImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.getSelectedItem()!=null){this.id_tipo_bancoFK_IdTipoBanco=((TipoBanco)this.jComboBoxid_tipo_bancoFK_IdTipoBancoImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.getSelectedItem()!=null){this.id_tipo_comprobanteFK_IdTipoComprobante=((TipoComprobante)this.jComboBoxid_tipo_comprobanteFK_IdTipoComprobanteImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.getSelectedItem()!=null){this.id_tipo_comprobante_bancoFK_IdTipoComprobanteBanco=((TipoComprobante)this.jComboBoxid_tipo_comprobante_bancoFK_IdTipoComprobanteBancoImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.getSelectedItem()!=null){this.id_tipo_iceFK_IdTipoIce=((TipoIce)this.jComboBoxid_tipo_iceFK_IdTipoIceImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.getSelectedItem()!=null){this.id_tipo_importacionFK_IdTipoImportacion=((TipoImportacion)this.jComboBoxid_tipo_importacionFK_IdTipoImportacionImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.getSelectedItem()!=null){this.id_tipo_ivaFK_IdTipoIva=((TipoIva)this.jComboBoxid_tipo_ivaFK_IdTipoIvaImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.getSelectedItem()!=null){this.id_tipo_tributarioFK_IdTipoTributario=((TipoTributario)this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioImportarExportar.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.getSelectedItem()!=null){this.id_transaccion_contaFK_IdTransaccionConta=((TransaccionConta)this.jComboBoxid_transaccion_contaFK_IdTransaccionContaImportarExportar.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasImportarExportar(Boolean esInicializar) throws Exception {				
		if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualImportarExportar();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaImportarExportar() throws Exception {
		this.inicializarActualizarBindingTablaImportarExportar(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByImportarExportar() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosImportarExportarOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportarOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	
	public void inicializarActualizarBindingTablaImportarExportar(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=importarexportarLogic.getImportarExportars().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=importarexportars.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosImportarExportar.setModel(new ImportarExportarModel(this.importarexportarLogic.getImportarExportars(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosImportarExportar.setModel(new ImportarExportarModel(this.importarexportars,this));
			}
			//ARCHITECTURE
			
							
			/*
			
			if(this.jInternalFrameOrderByImportarExportar!=null && this.jInternalFrameOrderByImportarExportar.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByImportarExportar();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ImportarExportarConstantesFunciones.SCLASSWEBTITULO,importarexportarConstantesFunciones.resaltarSeleccionarImportarExportar,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ImportarExportarConstantesFunciones.SCLASSWEBTITULO,importarexportarConstantesFunciones.resaltarSeleccionarImportarExportar,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_ID));

		if(this.importarexportarConstantesFunciones.mostraridImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltaridImportarExportar,this.importarexportarConstantesFunciones.activaridImportarExportar,iSizeTabla,this,true,"idImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltaridImportarExportar,this.importarexportarConstantesFunciones.activaridImportarExportar,this,true,"idImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDMODULO));

		if(this.importarexportarConstantesFunciones.mostrarid_moduloImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.importarexportarConstantesFunciones.resaltarid_moduloImportarExportar,this,this.importarexportarConstantesFunciones.activarid_moduloImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.importarexportarConstantesFunciones.resaltarid_moduloImportarExportar,this,this.importarexportarConstantesFunciones.activarid_moduloImportarExportar,false,"id_moduloImportarExportar","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.importarexportarConstantesFunciones.mostrarid_asiento_contableImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.importarexportarConstantesFunciones.resaltarid_asiento_contableImportarExportar,this,this.importarexportarConstantesFunciones.activarid_asiento_contableImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.importarexportarConstantesFunciones.resaltarid_asiento_contableImportarExportar,this,this.importarexportarConstantesFunciones.activarid_asiento_contableImportarExportar,true,"id_asiento_contableImportarExportar","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE));

		if(this.importarexportarConstantesFunciones.mostrarrucImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarrucImportarExportar,this.importarexportarConstantesFunciones.activarrucImportarExportar,iSizeTabla,this,true,"rucImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarrucImportarExportar,this.importarexportarConstantesFunciones.activarrucImportarExportar,this,true,"rucImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT));

		if(this.importarexportarConstantesFunciones.mostrarid_periodo_import_exportImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PeriodoImportExportTableCell(this.periodoimportexportsForeignKey,this.importarexportarConstantesFunciones.resaltarid_periodo_import_exportImportarExportar,this,this.importarexportarConstantesFunciones.activarid_periodo_import_exportImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoImportExportTableCell(this.periodoimportexportsForeignKey,this.importarexportarConstantesFunciones.resaltarid_periodo_import_exportImportarExportar,this,this.importarexportarConstantesFunciones.activarid_periodo_import_exportImportarExportar,true,"id_periodo_import_exportImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA));

		if(this.importarexportarConstantesFunciones.mostrarid_transaccion_contaImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionContaTableCell(this.transaccioncontasForeignKey,this.importarexportarConstantesFunciones.resaltarid_transaccion_contaImportarExportar,this,this.importarexportarConstantesFunciones.activarid_transaccion_contaImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionContaTableCell(this.transaccioncontasForeignKey,this.importarexportarConstantesFunciones.resaltarid_transaccion_contaImportarExportar,this,this.importarexportarConstantesFunciones.activarid_transaccion_contaImportarExportar,true,"id_transaccion_contaImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_FECHA));

		if(this.importarexportarConstantesFunciones.mostrarfechaImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.importarexportarConstantesFunciones.resaltarfechaImportarExportar,this.importarexportarConstantesFunciones.activarfechaImportarExportar,iSizeTabla,this,true,"fechaImportarExportar","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.importarexportarConstantesFunciones.resaltarfechaImportarExportar,this.importarexportarConstantesFunciones.activarfechaImportarExportar,this,true,"fechaImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_importacionImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoImportacionTableCell(this.tipoimportacionsForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_importacionImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_importacionImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoImportacionTableCell(this.tipoimportacionsForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_importacionImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_importacionImportarExportar,true,"id_tipo_importacionImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobanteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoComprobanteTableCell(this.tipocomprobantesForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_comprobanteImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_comprobanteImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoComprobanteTableCell(this.tipocomprobantesForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_comprobanteImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_comprobanteImportarExportar,true,"id_tipo_comprobanteImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE));

		if(this.importarexportarConstantesFunciones.mostrarnumero_comprobanteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarnumero_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_comprobanteImportarExportar,iSizeTabla,this,true,"numero_comprobanteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarnumero_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_comprobanteImportarExportar,this,true,"numero_comprobanteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE));

		if(this.importarexportarConstantesFunciones.mostrardocumento_transporteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltardocumento_transporteImportarExportar,this.importarexportarConstantesFunciones.activardocumento_transporteImportarExportar,iSizeTabla,this,true,"documento_transporteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltardocumento_transporteImportarExportar,this.importarexportarConstantesFunciones.activardocumento_transporteImportarExportar,this,true,"documento_transporteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE));

		if(this.importarexportarConstantesFunciones.mostrarnumero_referencia_comprobanteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarnumero_referencia_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_referencia_comprobanteImportarExportar,iSizeTabla,this,true,"numero_referencia_comprobanteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarnumero_referencia_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_referencia_comprobanteImportarExportar,this,true,"numero_referencia_comprobanteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_tributarioImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_tributarioImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_tributarioImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_tributarioImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_tributarioImportarExportar,true,"id_tipo_tributarioImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL));

		if(this.importarexportarConstantesFunciones.mostrarcodigo_fiscalImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarcodigo_fiscalImportarExportar,this.importarexportarConstantesFunciones.activarcodigo_fiscalImportarExportar,iSizeTabla,this,true,"codigo_fiscalImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarcodigo_fiscalImportarExportar,this.importarexportarConstantesFunciones.activarcodigo_fiscalImportarExportar,this,true,"codigo_fiscalImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDCLIENTE));

		if(this.importarexportarConstantesFunciones.mostrarid_clienteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.importarexportarConstantesFunciones.resaltarid_clienteImportarExportar,this,this.importarexportarConstantesFunciones.activarid_clienteImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.importarexportarConstantesFunciones.resaltarid_clienteImportarExportar,this,this.importarexportarConstantesFunciones.activarid_clienteImportarExportar,true,"id_clienteImportarExportar","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_ESJURIDICO));

		if(this.importarexportarConstantesFunciones.mostrares_juridicoImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_ESJURIDICO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.importarexportarConstantesFunciones.resaltares_juridicoImportarExportar,this.importarexportarConstantesFunciones.activares_juridicoImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.importarexportarConstantesFunciones.resaltares_juridicoImportarExportar,this.importarexportarConstantesFunciones.activares_juridicoImportarExportar,this,true,"es_juridicoImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_BASE0));

		if(this.importarexportarConstantesFunciones.mostrarbase0ImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_BASE0,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarbase0ImportarExportar,this.importarexportarConstantesFunciones.activarbase0ImportarExportar,iSizeTabla,this,true,"base0ImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarbase0ImportarExportar,this.importarexportarConstantesFunciones.activarbase0ImportarExportar,this,true,"base0ImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF));

		if(this.importarexportarConstantesFunciones.mostrarmonto_total_cifImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarmonto_total_cifImportarExportar,this.importarexportarConstantesFunciones.activarmonto_total_cifImportarExportar,iSizeTabla,this,true,"monto_total_cifImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarmonto_total_cifImportarExportar,this.importarexportarConstantesFunciones.activarmonto_total_cifImportarExportar,this,true,"monto_total_cifImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_MONTOIVA));

		if(this.importarexportarConstantesFunciones.mostrarmonto_ivaImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_MONTOIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarmonto_ivaImportarExportar,this.importarexportarConstantesFunciones.activarmonto_ivaImportarExportar,iSizeTabla,this,true,"monto_ivaImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarmonto_ivaImportarExportar,this.importarexportarConstantesFunciones.activarmonto_ivaImportarExportar,this,true,"monto_ivaImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_ivaImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoIvaTableCell(this.tipoivasForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_ivaImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_ivaImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoIvaTableCell(this.tipoivasForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_ivaImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_ivaImportarExportar,true,"id_tipo_ivaImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_MONTOICE));

		if(this.importarexportarConstantesFunciones.mostrarmonto_iceImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_MONTOICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarmonto_iceImportarExportar,this.importarexportarConstantesFunciones.activarmonto_iceImportarExportar,iSizeTabla,this,true,"monto_iceImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarmonto_iceImportarExportar,this.importarexportarConstantesFunciones.activarmonto_iceImportarExportar,this,true,"monto_iceImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOICE));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_iceImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOICE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoIceTableCell(this.tipoicesForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_iceImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_iceImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoIceTableCell(this.tipoicesForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_iceImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_iceImportarExportar,true,"id_tipo_iceImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_BASEGENERAL));

		if(this.importarexportarConstantesFunciones.mostrarbase_generalImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_BASEGENERAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarbase_generalImportarExportar,this.importarexportarConstantesFunciones.activarbase_generalImportarExportar,iSizeTabla,this,true,"base_generalImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarbase_generalImportarExportar,this.importarexportarConstantesFunciones.activarbase_generalImportarExportar,this,true,"base_generalImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_bancoImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoBancoTableCell(this.tipobancosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_bancoImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_bancoImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoBancoTableCell(this.tipobancosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_bancoImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_bancoImportarExportar,true,"id_tipo_bancoImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO));

		if(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobante_bancoImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoComprobanteTableCell(this.tipocomprobantebancosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_comprobante_bancoImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_comprobante_bancoImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new TipoComprobanteTableCell(this.tipocomprobantebancosForeignKey,this.importarexportarConstantesFunciones.resaltarid_tipo_comprobante_bancoImportarExportar,this,this.importarexportarConstantesFunciones.activarid_tipo_comprobante_bancoImportarExportar,true,"id_tipo_comprobante_bancoImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_CONCONVENIO));

		if(this.importarexportarConstantesFunciones.mostrarcon_convenioImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_CONCONVENIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.importarexportarConstantesFunciones.resaltarcon_convenioImportarExportar,this.importarexportarConstantesFunciones.activarcon_convenioImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.importarexportarConstantesFunciones.resaltarcon_convenioImportarExportar,this.importarexportarConstantesFunciones.activarcon_convenioImportarExportar,this,true,"con_convenioImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION));

		if(this.importarexportarConstantesFunciones.mostrarcon_devolucionImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.importarexportarConstantesFunciones.resaltarcon_devolucionImportarExportar,this.importarexportarConstantesFunciones.activarcon_devolucionImportarExportar,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.importarexportarConstantesFunciones.resaltarcon_devolucionImportarExportar,this.importarexportarConstantesFunciones.activarcon_devolucionImportarExportar,this,true,"con_devolucionImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_FECHAEMISION));

		if(this.importarexportarConstantesFunciones.mostrarfecha_emisionImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.importarexportarConstantesFunciones.resaltarfecha_emisionImportarExportar,this.importarexportarConstantesFunciones.activarfecha_emisionImportarExportar,iSizeTabla,this,true,"fecha_emisionImportarExportar","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.importarexportarConstantesFunciones.resaltarfecha_emisionImportarExportar,this.importarexportarConstantesFunciones.activarfecha_emisionImportarExportar,this,true,"fecha_emisionImportarExportar","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE));

		if(this.importarexportarConstantesFunciones.mostrarnumero_serie_comprobanteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarnumero_serie_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_serie_comprobanteImportarExportar,iSizeTabla,this,true,"numero_serie_comprobanteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarnumero_serie_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_serie_comprobanteImportarExportar,this,true,"numero_serie_comprobanteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE));

		if(this.importarexportarConstantesFunciones.mostrarnumero_autorizacion_comprobanteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarnumero_autorizacion_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_autorizacion_comprobanteImportarExportar,iSizeTabla,this,true,"numero_autorizacion_comprobanteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarnumero_autorizacion_comprobanteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_autorizacion_comprobanteImportarExportar,this,true,"numero_autorizacion_comprobanteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE));

		if(this.importarexportarConstantesFunciones.mostrarnumero_secuencial_fuenteImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.importarexportarConstantesFunciones.resaltarnumero_secuencial_fuenteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_secuencial_fuenteImportarExportar,iSizeTabla,this,true,"numero_secuencial_fuenteImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarnumero_secuencial_fuenteImportarExportar,this.importarexportarConstantesFunciones.activarnumero_secuencial_fuenteImportarExportar,this,true,"numero_secuencial_fuenteImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,ImportarExportarConstantesFunciones.LABEL_VALORFOB));

		if(this.importarexportarConstantesFunciones.mostrarvalor_fobImportarExportar && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ImportarExportarConstantesFunciones.LABEL_VALORFOB,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.importarexportarConstantesFunciones.resaltarvalor_fobImportarExportar,this.importarexportarConstantesFunciones.activarvalor_fobImportarExportar,iSizeTabla,this,true,"valor_fobImportarExportar","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.importarexportarConstantesFunciones.resaltarvalor_fobImportarExportar,this.importarexportarConstantesFunciones.activarvalor_fobImportarExportar,this,true,"valor_fobImportarExportar","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ImportarExportarPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.importarexportarSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosImportarExportar.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosImportarExportar.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarImportarExportar && this.isPermisoGuardarCambiosImportarExportar) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.importarexportarSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosImportarExportar.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosImportarExportar.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarImportarExportar && this.isPermisoGuardarCambiosImportarExportar) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarImportarExportar && this.isPermisoGuardarCambiosImportarExportar) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosImportarExportar.moveColumn(this.jTableDatosImportarExportar.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosImportarExportar.moveColumn(this.jTableDatosImportarExportar.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosImportarExportar.moveColumn(this.jTableDatosImportarExportar.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosImportarExportar.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosImportarExportar.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosImportarExportar,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosImportarExportar.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosImportarExportar.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosImportarExportar.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosImportarExportar.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosImportarExportar.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=importarexportarLogic.getImportarExportars().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=importarexportars.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosImportarExportar.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosImportarExportar.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosImportarExportar();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoImportarExportar=false;
					
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
				if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormImportarExportar==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosImportarExportar.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.importarexportar.getsType().equals("DUPLICADO")
				   || this.importarexportar.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoImportarExportar=true;
				
				} else {
					this.isEsNuevoImportarExportar=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					if(this.importarexportar.getId()>=0 && !this.importarexportar.getIsNew()) {						
						this.isEsNuevoImportarExportar=false;
						
					} else {
						this.isEsNuevoImportarExportar=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoImportarExportar(esRelaciones);						
				
				this.seleccionarImportarExportar(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.importarexportar.getId()<0) {
					this.isEsNuevoImportarExportar=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarImportarExportar(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarImportarExportar(evt,rowIndex);
				}	
				
				if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ImportarExportar: " + this.dDif); 
					}
				}								
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarImportarExportar(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.importarexportar)) {
					if(this.importarexportar.getId()>0) {
						this.importarexportar.setIsDeleted(true);
						
						this.importarexportarsEliminados.add(this.importarexportar);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.importarexportarLogic.getImportarExportars().remove(this.importarexportar);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.importarexportars.remove(this.importarexportar);				
					}
					
					
					((ImportarExportarModel) this.jTableDatosImportarExportar.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaImportarExportar(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarImportarExportar(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoImportarExportar) {
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosImportarExportar.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosImportarExportar.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioImportarExportar(this.importarexportar);
				}
				
				//ARCHITECTURE
				try {
					

					//Modulo
					if(!this.importarexportarConstantesFunciones.cargarid_moduloImportarExportar || this.importarexportarConstantesFunciones.event_dependid_moduloImportarExportar) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.importarexportar.getid_modulo());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(importarexportar.getModulo()!=null) {
							this.modulosForeignKey.add(importarexportar.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.importarexportar.getid_modulo(),false,"Formulario");

					//AsientoContable
					if(!this.importarexportarConstantesFunciones.cargarid_asiento_contableImportarExportar || this.importarexportarConstantesFunciones.event_dependid_asiento_contableImportarExportar) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.importarexportar.getid_asiento_contable());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(importarexportar.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(importarexportar.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.importarexportar.getid_asiento_contable(),false,"Formulario");

					//PeriodoImportExport
					if(!this.importarexportarConstantesFunciones.cargarid_periodo_import_exportImportarExportar || this.importarexportarConstantesFunciones.event_dependid_periodo_import_exportImportarExportar) {
						//this.cargarCombosPeriodoImportExportsForeignKeyLista(" where id="+this.importarexportar.getid_periodo_import_export());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.periodoimportexportsForeignKey=new ArrayList<PeriodoImportExport>();

						if(importarexportar.getPeriodoImportExport()!=null) {
							this.periodoimportexportsForeignKey.add(importarexportar.getPeriodoImportExport());
						}

						this.addItemDefectoCombosForeignKeyPeriodoImportExport();
						this.cargarCombosFramePeriodoImportExportsForeignKey("Todos");
					}
					this.setActualPeriodoImportExportForeignKey(this.importarexportar.getid_periodo_import_export(),false,"Formulario");

					//TransaccionConta
					if(!this.importarexportarConstantesFunciones.cargarid_transaccion_contaImportarExportar || this.importarexportarConstantesFunciones.event_dependid_transaccion_contaImportarExportar) {
						//this.cargarCombosTransaccionContasForeignKeyLista(" where id="+this.importarexportar.getid_transaccion_conta());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.transaccioncontasForeignKey=new ArrayList<TransaccionConta>();

						if(importarexportar.getTransaccionConta()!=null) {
							this.transaccioncontasForeignKey.add(importarexportar.getTransaccionConta());
						}

						this.addItemDefectoCombosForeignKeyTransaccionConta();
						this.cargarCombosFrameTransaccionContasForeignKey("Todos");
					}
					this.setActualTransaccionContaForeignKey(this.importarexportar.getid_transaccion_conta(),false,"Formulario");

					//TipoImportacion
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_importacionImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_importacionImportarExportar) {
						//this.cargarCombosTipoImportacionsForeignKeyLista(" where id="+this.importarexportar.getid_tipo_importacion());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipoimportacionsForeignKey=new ArrayList<TipoImportacion>();

						if(importarexportar.getTipoImportacion()!=null) {
							this.tipoimportacionsForeignKey.add(importarexportar.getTipoImportacion());
						}

						this.addItemDefectoCombosForeignKeyTipoImportacion();
						this.cargarCombosFrameTipoImportacionsForeignKey("Todos");
					}
					this.setActualTipoImportacionForeignKey(this.importarexportar.getid_tipo_importacion(),false,"Formulario");

					//TipoComprobante
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_comprobanteImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_comprobanteImportarExportar) {
						//this.cargarCombosTipoComprobantesForeignKeyLista(" where id="+this.importarexportar.getid_tipo_comprobante());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipocomprobantesForeignKey=new ArrayList<TipoComprobante>();

						if(importarexportar.getTipoComprobante()!=null) {
							this.tipocomprobantesForeignKey.add(importarexportar.getTipoComprobante());
						}

						this.addItemDefectoCombosForeignKeyTipoComprobante();
						this.cargarCombosFrameTipoComprobantesForeignKey("Todos");
					}
					this.setActualTipoComprobanteForeignKey(this.importarexportar.getid_tipo_comprobante(),false,"Formulario");

					//TipoTributario
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_tributarioImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_tributarioImportarExportar) {
						//this.cargarCombosTipoTributariosForeignKeyLista(" where id="+this.importarexportar.getid_tipo_tributario());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

						if(importarexportar.getTipoTributario()!=null) {
							this.tipotributariosForeignKey.add(importarexportar.getTipoTributario());
						}

						this.addItemDefectoCombosForeignKeyTipoTributario();
						this.cargarCombosFrameTipoTributariosForeignKey("Todos");
					}
					this.setActualTipoTributarioForeignKey(this.importarexportar.getid_tipo_tributario(),false,"Formulario");

					//Cliente
					if(!this.importarexportarConstantesFunciones.cargarid_clienteImportarExportar || this.importarexportarConstantesFunciones.event_dependid_clienteImportarExportar) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.importarexportar.getid_cliente());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(importarexportar.getCliente()!=null) {
							this.clientesForeignKey.add(importarexportar.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.importarexportar.getid_cliente(),false,"Formulario");

					//TipoIva
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_ivaImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_ivaImportarExportar) {
						//this.cargarCombosTipoIvasForeignKeyLista(" where id="+this.importarexportar.getid_tipo_iva());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipoivasForeignKey=new ArrayList<TipoIva>();

						if(importarexportar.getTipoIva()!=null) {
							this.tipoivasForeignKey.add(importarexportar.getTipoIva());
						}

						this.addItemDefectoCombosForeignKeyTipoIva();
						this.cargarCombosFrameTipoIvasForeignKey("Todos");
					}
					this.setActualTipoIvaForeignKey(this.importarexportar.getid_tipo_iva(),false,"Formulario");

					//TipoIce
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_iceImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_iceImportarExportar) {
						//this.cargarCombosTipoIcesForeignKeyLista(" where id="+this.importarexportar.getid_tipo_ice());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipoicesForeignKey=new ArrayList<TipoIce>();

						if(importarexportar.getTipoIce()!=null) {
							this.tipoicesForeignKey.add(importarexportar.getTipoIce());
						}

						this.addItemDefectoCombosForeignKeyTipoIce();
						this.cargarCombosFrameTipoIcesForeignKey("Todos");
					}
					this.setActualTipoIceForeignKey(this.importarexportar.getid_tipo_ice(),false,"Formulario");

					//TipoBanco
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_bancoImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_bancoImportarExportar) {
						//this.cargarCombosTipoBancosForeignKeyLista(" where id="+this.importarexportar.getid_tipo_banco());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipobancosForeignKey=new ArrayList<TipoBanco>();

						if(importarexportar.getTipoBanco()!=null) {
							this.tipobancosForeignKey.add(importarexportar.getTipoBanco());
						}

						this.addItemDefectoCombosForeignKeyTipoBanco();
						this.cargarCombosFrameTipoBancosForeignKey("Todos");
					}
					this.setActualTipoBancoForeignKey(this.importarexportar.getid_tipo_banco(),false,"Formulario");

					//TipoComprobanteBanco
					if(!this.importarexportarConstantesFunciones.cargarid_tipo_comprobante_bancoImportarExportar || this.importarexportarConstantesFunciones.event_dependid_tipo_comprobante_bancoImportarExportar) {
						//this.cargarCombosTipoComprobanteBancosForeignKeyLista(" where id="+this.importarexportar.getid_tipo_comprobante_banco());
									//this.inicializarActualizarBindingImportarExportar(false,false);
						this.tipocomprobantebancosForeignKey=new ArrayList<TipoComprobante>();

						if(importarexportar.getTipoComprobanteBanco()!=null) {
							this.tipocomprobantebancosForeignKey.add(importarexportar.getTipoComprobanteBanco());
						}

						this.addItemDefectoCombosForeignKeyTipoComprobanteBanco();
						this.cargarCombosFrameTipoComprobanteBancosForeignKey("Todos");
					}
					this.setActualTipoComprobanteBancoForeignKey(this.importarexportar.getid_tipo_comprobante_banco(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesImportarExportar("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesImportarExportar(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualImportarExportar() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoImportarExportar(ImportarExportar importarexportar) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoImportarExportar(importarexportar,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoImportarExportar(ImportarExportar importarexportar,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioImportarExportar(importarexportar);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyImportarExportar(importarexportar,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyImportarExportar(importarexportar);
	}
	
	public void setVariablesObjetoActualToFormularioImportarExportar(ImportarExportar importarexportar) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setText(importarexportar.getId().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setText(importarexportar.getruc());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setDate(importarexportar.getfecha());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setText(importarexportar.getnumero_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setText(importarexportar.getdocumento_transporte());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setText(importarexportar.getnumero_referencia_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setText(importarexportar.getcodigo_fiscal());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setSelected(importarexportar.getes_juridico());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setText(importarexportar.getbase0().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setText(importarexportar.getmonto_total_cif().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setText(importarexportar.getmonto_iva().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setText(importarexportar.getmonto_ice().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setText(importarexportar.getbase_general().toString());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setSelected(importarexportar.getcon_convenio());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setSelected(importarexportar.getcon_devolucion());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setDate(importarexportar.getfecha_emision());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setText(importarexportar.getnumero_serie_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setText(importarexportar.getnumero_autorizacion_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setText(importarexportar.getnumero_secuencial_fuente());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setText(importarexportar.getvalor_fob().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ImportarExportar importarexportarLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,importarexportarLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ImportarExportar importarexportarLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				importarexportarLocal=this.importarexportar;
			} else {
				importarexportarLocal=this.importarexportarAnterior;
			}
		}
		
		if(this.permiteMantenimiento(importarexportarLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoImportarExportar(importarexportarLocal,true);
					
					if(importarexportarSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(importarexportarLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(importarexportarLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoImportarExportar(ImportarExportar importarexportar,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualImportarExportar(importarexportar,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(importarexportar);
	}
	
	public void setVariablesFormularioToObjetoActualImportarExportar(ImportarExportar importarexportar,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualImportarExportar(importarexportar,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualImportarExportar(ImportarExportar importarexportar,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.getText()==null || this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.getText()=="" || this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.getText()=="Id") {
				this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setText("0");
			}

			if(conColumnasBase) {importarexportar.setId(Long.parseLong(this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelIdImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setruc(this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelrucImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setfecha(this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelfechaImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setnumero_comprobante(this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_comprobanteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setdocumento_transporte(this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabeldocumento_transporteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setnumero_referencia_comprobante(this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_referencia_comprobanteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setcodigo_fiscal(this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcodigo_fiscalImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setes_juridico(this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_ESJURIDICO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabeles_juridicoImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setbase0(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_BASE0+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelbase0ImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setmonto_total_cif(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_total_cifImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setmonto_iva(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_MONTOIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_ivaImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setmonto_ice(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_MONTOICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelmonto_iceImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setbase_general(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_BASEGENERAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelbase_generalImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setcon_convenio(this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_CONCONVENIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_convenioImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setcon_devolucion(this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelcon_devolucionImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setfecha_emision(this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelfecha_emisionImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setnumero_serie_comprobante(this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_serie_comprobanteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setnumero_autorizacion_comprobante(this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_autorizacion_comprobanteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setnumero_secuencial_fuente(this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelnumero_secuencial_fuenteImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			importarexportar.setvalor_fob(Double.parseDouble(this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ImportarExportarConstantesFunciones.LABEL_VALORFOB+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormImportarExportar.jLabelvalor_fobImportarExportar,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualImportarExportar(ImportarExportar importarexportarBean,ImportarExportar importarexportar,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && importarexportarBean.getid_asiento_contable()!=null && !importarexportarBean.getid_asiento_contable().equals(-1L))) {importarexportar.setid_asiento_contable(importarexportarBean.getid_asiento_contable());}
			if(conDefault || (!conDefault && importarexportarBean.getid_periodo_import_export()!=null && !importarexportarBean.getid_periodo_import_export().equals(-1L))) {importarexportar.setid_periodo_import_export(importarexportarBean.getid_periodo_import_export());}
			if(conDefault || (!conDefault && importarexportarBean.getid_transaccion_conta()!=null && !importarexportarBean.getid_transaccion_conta().equals(-1L))) {importarexportar.setid_transaccion_conta(importarexportarBean.getid_transaccion_conta());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_importacion()!=null && !importarexportarBean.getid_tipo_importacion().equals(-1L))) {importarexportar.setid_tipo_importacion(importarexportarBean.getid_tipo_importacion());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_comprobante()!=null && !importarexportarBean.getid_tipo_comprobante().equals(-1L))) {importarexportar.setid_tipo_comprobante(importarexportarBean.getid_tipo_comprobante());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_tributario()!=null && !importarexportarBean.getid_tipo_tributario().equals(-1L))) {importarexportar.setid_tipo_tributario(importarexportarBean.getid_tipo_tributario());}
			if(conDefault || (!conDefault && importarexportarBean.getid_cliente()!=null && !importarexportarBean.getid_cliente().equals(-1L))) {importarexportar.setid_cliente(importarexportarBean.getid_cliente());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_iva()!=null && !importarexportarBean.getid_tipo_iva().equals(-1L))) {importarexportar.setid_tipo_iva(importarexportarBean.getid_tipo_iva());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_ice()!=null && !importarexportarBean.getid_tipo_ice().equals(-1L))) {importarexportar.setid_tipo_ice(importarexportarBean.getid_tipo_ice());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_banco()!=null && !importarexportarBean.getid_tipo_banco().equals(-1L))) {importarexportar.setid_tipo_banco(importarexportarBean.getid_tipo_banco());}
			if(conDefault || (!conDefault && importarexportarBean.getid_tipo_comprobante_banco()!=null && !importarexportarBean.getid_tipo_comprobante_banco().equals(-1L))) {importarexportar.setid_tipo_comprobante_banco(importarexportarBean.getid_tipo_comprobante_banco());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosImportarExportar(ImportarExportar importarexportarOrigen,ImportarExportar importarexportar,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && importarexportarOrigen.getId()!=null && !importarexportarOrigen.getId().equals(0L))) {importarexportar.setId(importarexportarOrigen.getId());}}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_asiento_contable()!=null && !importarexportarOrigen.getid_asiento_contable().equals(-1L))) {importarexportar.setid_asiento_contable(importarexportarOrigen.getid_asiento_contable());}
			if(conDefault || (!conDefault && importarexportarOrigen.getruc()!=null && !importarexportarOrigen.getruc().equals(""))) {importarexportar.setruc(importarexportarOrigen.getruc());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_periodo_import_export()!=null && !importarexportarOrigen.getid_periodo_import_export().equals(-1L))) {importarexportar.setid_periodo_import_export(importarexportarOrigen.getid_periodo_import_export());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_transaccion_conta()!=null && !importarexportarOrigen.getid_transaccion_conta().equals(-1L))) {importarexportar.setid_transaccion_conta(importarexportarOrigen.getid_transaccion_conta());}
			if(conDefault || (!conDefault && importarexportarOrigen.getfecha()!=null && !importarexportarOrigen.getfecha().equals(new Date()))) {importarexportar.setfecha(importarexportarOrigen.getfecha());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_importacion()!=null && !importarexportarOrigen.getid_tipo_importacion().equals(-1L))) {importarexportar.setid_tipo_importacion(importarexportarOrigen.getid_tipo_importacion());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_comprobante()!=null && !importarexportarOrigen.getid_tipo_comprobante().equals(-1L))) {importarexportar.setid_tipo_comprobante(importarexportarOrigen.getid_tipo_comprobante());}
			if(conDefault || (!conDefault && importarexportarOrigen.getnumero_comprobante()!=null && !importarexportarOrigen.getnumero_comprobante().equals(""))) {importarexportar.setnumero_comprobante(importarexportarOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && importarexportarOrigen.getdocumento_transporte()!=null && !importarexportarOrigen.getdocumento_transporte().equals(""))) {importarexportar.setdocumento_transporte(importarexportarOrigen.getdocumento_transporte());}
			if(conDefault || (!conDefault && importarexportarOrigen.getnumero_referencia_comprobante()!=null && !importarexportarOrigen.getnumero_referencia_comprobante().equals(""))) {importarexportar.setnumero_referencia_comprobante(importarexportarOrigen.getnumero_referencia_comprobante());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_tributario()!=null && !importarexportarOrigen.getid_tipo_tributario().equals(-1L))) {importarexportar.setid_tipo_tributario(importarexportarOrigen.getid_tipo_tributario());}
			if(conDefault || (!conDefault && importarexportarOrigen.getcodigo_fiscal()!=null && !importarexportarOrigen.getcodigo_fiscal().equals(""))) {importarexportar.setcodigo_fiscal(importarexportarOrigen.getcodigo_fiscal());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_cliente()!=null && !importarexportarOrigen.getid_cliente().equals(-1L))) {importarexportar.setid_cliente(importarexportarOrigen.getid_cliente());}
			if(conDefault || (!conDefault && importarexportarOrigen.getes_juridico()!=null && !importarexportarOrigen.getes_juridico().equals(false))) {importarexportar.setes_juridico(importarexportarOrigen.getes_juridico());}
			if(conDefault || (!conDefault && importarexportarOrigen.getbase0()!=null && !importarexportarOrigen.getbase0().equals(0.0))) {importarexportar.setbase0(importarexportarOrigen.getbase0());}
			if(conDefault || (!conDefault && importarexportarOrigen.getmonto_total_cif()!=null && !importarexportarOrigen.getmonto_total_cif().equals(0.0))) {importarexportar.setmonto_total_cif(importarexportarOrigen.getmonto_total_cif());}
			if(conDefault || (!conDefault && importarexportarOrigen.getmonto_iva()!=null && !importarexportarOrigen.getmonto_iva().equals(0.0))) {importarexportar.setmonto_iva(importarexportarOrigen.getmonto_iva());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_iva()!=null && !importarexportarOrigen.getid_tipo_iva().equals(-1L))) {importarexportar.setid_tipo_iva(importarexportarOrigen.getid_tipo_iva());}
			if(conDefault || (!conDefault && importarexportarOrigen.getmonto_ice()!=null && !importarexportarOrigen.getmonto_ice().equals(0.0))) {importarexportar.setmonto_ice(importarexportarOrigen.getmonto_ice());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_ice()!=null && !importarexportarOrigen.getid_tipo_ice().equals(-1L))) {importarexportar.setid_tipo_ice(importarexportarOrigen.getid_tipo_ice());}
			if(conDefault || (!conDefault && importarexportarOrigen.getbase_general()!=null && !importarexportarOrigen.getbase_general().equals(0.0))) {importarexportar.setbase_general(importarexportarOrigen.getbase_general());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_banco()!=null && !importarexportarOrigen.getid_tipo_banco().equals(-1L))) {importarexportar.setid_tipo_banco(importarexportarOrigen.getid_tipo_banco());}
			if(conDefault || (!conDefault && importarexportarOrigen.getid_tipo_comprobante_banco()!=null && !importarexportarOrigen.getid_tipo_comprobante_banco().equals(-1L))) {importarexportar.setid_tipo_comprobante_banco(importarexportarOrigen.getid_tipo_comprobante_banco());}
			if(conDefault || (!conDefault && importarexportarOrigen.getcon_convenio()!=null && !importarexportarOrigen.getcon_convenio().equals(false))) {importarexportar.setcon_convenio(importarexportarOrigen.getcon_convenio());}
			if(conDefault || (!conDefault && importarexportarOrigen.getcon_devolucion()!=null && !importarexportarOrigen.getcon_devolucion().equals(false))) {importarexportar.setcon_devolucion(importarexportarOrigen.getcon_devolucion());}
			if(conDefault || (!conDefault && importarexportarOrigen.getfecha_emision()!=null && !importarexportarOrigen.getfecha_emision().equals(new Date()))) {importarexportar.setfecha_emision(importarexportarOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && importarexportarOrigen.getnumero_serie_comprobante()!=null && !importarexportarOrigen.getnumero_serie_comprobante().equals(""))) {importarexportar.setnumero_serie_comprobante(importarexportarOrigen.getnumero_serie_comprobante());}
			if(conDefault || (!conDefault && importarexportarOrigen.getnumero_autorizacion_comprobante()!=null && !importarexportarOrigen.getnumero_autorizacion_comprobante().equals(""))) {importarexportar.setnumero_autorizacion_comprobante(importarexportarOrigen.getnumero_autorizacion_comprobante());}
			if(conDefault || (!conDefault && importarexportarOrigen.getnumero_secuencial_fuente()!=null && !importarexportarOrigen.getnumero_secuencial_fuente().equals(""))) {importarexportar.setnumero_secuencial_fuente(importarexportarOrigen.getnumero_secuencial_fuente());}
			if(conDefault || (!conDefault && importarexportarOrigen.getvalor_fob()!=null && !importarexportarOrigen.getvalor_fob().equals(0.0))) {importarexportar.setvalor_fob(importarexportarOrigen.getvalor_fob());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioImportarExportar(ImportarExportar importarexportar) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setText(importarexportar.getId().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setText(importarexportar.getruc());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setDate(importarexportar.getfecha());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setText(importarexportar.getnumero_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setText(importarexportar.getdocumento_transporte());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setText(importarexportar.getnumero_referencia_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setText(importarexportar.getcodigo_fiscal());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setSelected(importarexportar.getes_juridico());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setText(importarexportar.getbase0().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setText(importarexportar.getmonto_total_cif().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setText(importarexportar.getmonto_iva().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setText(importarexportar.getmonto_ice().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setText(importarexportar.getbase_general().toString());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setSelected(importarexportar.getcon_convenio());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setSelected(importarexportar.getcon_devolucion());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setDate(importarexportar.getfecha_emision());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setText(importarexportar.getnumero_serie_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setText(importarexportar.getnumero_autorizacion_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setText(importarexportar.getnumero_secuencial_fuente());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setText(importarexportar.getvalor_fob().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioImportarExportar(ImportarExportarBean importarexportarBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setText(importarexportarBean.getId().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setText(importarexportarBean.getruc());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setDate(importarexportarBean.getfecha());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setText(importarexportarBean.getnumero_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setText(importarexportarBean.getdocumento_transporte());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setText(importarexportarBean.getnumero_referencia_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setText(importarexportarBean.getcodigo_fiscal());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setSelected(importarexportarBean.getes_juridico());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setText(importarexportarBean.getbase0().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setText(importarexportarBean.getmonto_total_cif().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setText(importarexportarBean.getmonto_iva().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setText(importarexportarBean.getmonto_ice().toString());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setText(importarexportarBean.getbase_general().toString());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setSelected(importarexportarBean.getcon_convenio());
			this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setSelected(importarexportarBean.getcon_devolucion());
			this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setDate(importarexportarBean.getfecha_emision());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setText(importarexportarBean.getnumero_serie_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setText(importarexportarBean.getnumero_autorizacion_comprobante());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setText(importarexportarBean.getnumero_secuencial_fuente());
			this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setText(importarexportarBean.getvalor_fob().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanImportarExportar(ImportarExportarParameterReturnGeneral importarexportarReturnGeneral,ImportarExportarBean importarexportarBean,Boolean conDefault) throws Exception { 
		try {
			ImportarExportar importarexportarLocal=new ImportarExportar();
			
			importarexportarLocal=importarexportarReturnGeneral.getImportarExportar();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && importarexportarLocal.getId()!=null && !importarexportarLocal.getId().equals(0L))) {importarexportarBean.setId(importarexportarLocal.getId());}}
			if(conDefault || (!conDefault && importarexportarLocal.getid_asiento_contable()!=null && !importarexportarLocal.getid_asiento_contable().equals(-1L))) {importarexportarBean.setid_asiento_contable(importarexportarLocal.getid_asiento_contable());}
			if(conDefault || (!conDefault && importarexportarLocal.getruc()!=null && !importarexportarLocal.getruc().equals(""))) {importarexportarBean.setruc(importarexportarLocal.getruc());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_periodo_import_export()!=null && !importarexportarLocal.getid_periodo_import_export().equals(-1L))) {importarexportarBean.setid_periodo_import_export(importarexportarLocal.getid_periodo_import_export());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_transaccion_conta()!=null && !importarexportarLocal.getid_transaccion_conta().equals(-1L))) {importarexportarBean.setid_transaccion_conta(importarexportarLocal.getid_transaccion_conta());}
			if(conDefault || (!conDefault && importarexportarLocal.getfecha()!=null && !importarexportarLocal.getfecha().equals(new Date()))) {importarexportarBean.setfecha(importarexportarLocal.getfecha());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_importacion()!=null && !importarexportarLocal.getid_tipo_importacion().equals(-1L))) {importarexportarBean.setid_tipo_importacion(importarexportarLocal.getid_tipo_importacion());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_comprobante()!=null && !importarexportarLocal.getid_tipo_comprobante().equals(-1L))) {importarexportarBean.setid_tipo_comprobante(importarexportarLocal.getid_tipo_comprobante());}
			if(conDefault || (!conDefault && importarexportarLocal.getnumero_comprobante()!=null && !importarexportarLocal.getnumero_comprobante().equals(""))) {importarexportarBean.setnumero_comprobante(importarexportarLocal.getnumero_comprobante());}
			if(conDefault || (!conDefault && importarexportarLocal.getdocumento_transporte()!=null && !importarexportarLocal.getdocumento_transporte().equals(""))) {importarexportarBean.setdocumento_transporte(importarexportarLocal.getdocumento_transporte());}
			if(conDefault || (!conDefault && importarexportarLocal.getnumero_referencia_comprobante()!=null && !importarexportarLocal.getnumero_referencia_comprobante().equals(""))) {importarexportarBean.setnumero_referencia_comprobante(importarexportarLocal.getnumero_referencia_comprobante());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_tributario()!=null && !importarexportarLocal.getid_tipo_tributario().equals(-1L))) {importarexportarBean.setid_tipo_tributario(importarexportarLocal.getid_tipo_tributario());}
			if(conDefault || (!conDefault && importarexportarLocal.getcodigo_fiscal()!=null && !importarexportarLocal.getcodigo_fiscal().equals(""))) {importarexportarBean.setcodigo_fiscal(importarexportarLocal.getcodigo_fiscal());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_cliente()!=null && !importarexportarLocal.getid_cliente().equals(-1L))) {importarexportarBean.setid_cliente(importarexportarLocal.getid_cliente());}
			if(conDefault || (!conDefault && importarexportarLocal.getes_juridico()!=null && !importarexportarLocal.getes_juridico().equals(false))) {importarexportarBean.setes_juridico(importarexportarLocal.getes_juridico());}
			if(conDefault || (!conDefault && importarexportarLocal.getbase0()!=null && !importarexportarLocal.getbase0().equals(0.0))) {importarexportarBean.setbase0(importarexportarLocal.getbase0());}
			if(conDefault || (!conDefault && importarexportarLocal.getmonto_total_cif()!=null && !importarexportarLocal.getmonto_total_cif().equals(0.0))) {importarexportarBean.setmonto_total_cif(importarexportarLocal.getmonto_total_cif());}
			if(conDefault || (!conDefault && importarexportarLocal.getmonto_iva()!=null && !importarexportarLocal.getmonto_iva().equals(0.0))) {importarexportarBean.setmonto_iva(importarexportarLocal.getmonto_iva());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_iva()!=null && !importarexportarLocal.getid_tipo_iva().equals(-1L))) {importarexportarBean.setid_tipo_iva(importarexportarLocal.getid_tipo_iva());}
			if(conDefault || (!conDefault && importarexportarLocal.getmonto_ice()!=null && !importarexportarLocal.getmonto_ice().equals(0.0))) {importarexportarBean.setmonto_ice(importarexportarLocal.getmonto_ice());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_ice()!=null && !importarexportarLocal.getid_tipo_ice().equals(-1L))) {importarexportarBean.setid_tipo_ice(importarexportarLocal.getid_tipo_ice());}
			if(conDefault || (!conDefault && importarexportarLocal.getbase_general()!=null && !importarexportarLocal.getbase_general().equals(0.0))) {importarexportarBean.setbase_general(importarexportarLocal.getbase_general());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_banco()!=null && !importarexportarLocal.getid_tipo_banco().equals(-1L))) {importarexportarBean.setid_tipo_banco(importarexportarLocal.getid_tipo_banco());}
			if(conDefault || (!conDefault && importarexportarLocal.getid_tipo_comprobante_banco()!=null && !importarexportarLocal.getid_tipo_comprobante_banco().equals(-1L))) {importarexportarBean.setid_tipo_comprobante_banco(importarexportarLocal.getid_tipo_comprobante_banco());}
			if(conDefault || (!conDefault && importarexportarLocal.getcon_convenio()!=null && !importarexportarLocal.getcon_convenio().equals(false))) {importarexportarBean.setcon_convenio(importarexportarLocal.getcon_convenio());}
			if(conDefault || (!conDefault && importarexportarLocal.getcon_devolucion()!=null && !importarexportarLocal.getcon_devolucion().equals(false))) {importarexportarBean.setcon_devolucion(importarexportarLocal.getcon_devolucion());}
			if(conDefault || (!conDefault && importarexportarLocal.getfecha_emision()!=null && !importarexportarLocal.getfecha_emision().equals(new Date()))) {importarexportarBean.setfecha_emision(importarexportarLocal.getfecha_emision());}
			if(conDefault || (!conDefault && importarexportarLocal.getnumero_serie_comprobante()!=null && !importarexportarLocal.getnumero_serie_comprobante().equals(""))) {importarexportarBean.setnumero_serie_comprobante(importarexportarLocal.getnumero_serie_comprobante());}
			if(conDefault || (!conDefault && importarexportarLocal.getnumero_autorizacion_comprobante()!=null && !importarexportarLocal.getnumero_autorizacion_comprobante().equals(""))) {importarexportarBean.setnumero_autorizacion_comprobante(importarexportarLocal.getnumero_autorizacion_comprobante());}
			if(conDefault || (!conDefault && importarexportarLocal.getnumero_secuencial_fuente()!=null && !importarexportarLocal.getnumero_secuencial_fuente().equals(""))) {importarexportarBean.setnumero_secuencial_fuente(importarexportarLocal.getnumero_secuencial_fuente());}
			if(conDefault || (!conDefault && importarexportarLocal.getvalor_fob()!=null && !importarexportarLocal.getvalor_fob().equals(0.0))) {importarexportarBean.setvalor_fob(importarexportarLocal.getvalor_fob());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxImportarExportarGenerico(Long idImportarExportarSeleccionado,JComboBox jComboBoxImportarExportar,List<ImportarExportar> importarexportarsLocal)throws Exception {
		try {
			ImportarExportar  importarexportarTemp=null;

			for(ImportarExportar importarexportarAux:importarexportarsLocal) {
				if(importarexportarAux.getId()!=null && importarexportarAux.getId().equals(idImportarExportarSeleccionado)) {
					importarexportarTemp=importarexportarAux;
					break;
				}
			}

			jComboBoxImportarExportar.setSelectedItem(importarexportarTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxImportarExportarGenerico(JComboBox jComboBoxImportarExportar,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxImportarExportar.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxImportarExportar.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxImportarExportar.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxImportarExportar.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxImportarExportar.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxImportarExportar.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxImportarExportar.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxImportarExportar.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxImportarExportar.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxImportarExportar.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			importarexportar=(ImportarExportar) importarexportarLogic.getImportarExportars().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			importarexportar =(ImportarExportar) importarexportars.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("PeriodoImportExport")) {
			//sDescripcion=this.getActualPeriodoImportExportForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.getperiodoimportexport_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoImportExportForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.getperiodoimportexport_descripcion();
			}
		}

		if(sTipo.equals("TransaccionConta")) {
			//sDescripcion=this.getActualTransaccionContaForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettransaccionconta_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionContaForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettransaccionconta_descripcion();
			}
		}

		if(sTipo.equals("TipoImportacion")) {
			//sDescripcion=this.getActualTipoImportacionForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipoimportacion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoImportacionForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipoimportacion_descripcion();
			}
		}

		if(sTipo.equals("TipoComprobante")) {
			//sDescripcion=this.getActualTipoComprobanteForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipocomprobante_descripcion();
			} else {
				//sDescripcion=this.getActualTipoComprobanteForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipocomprobante_descripcion();
			}
		}

		if(sTipo.equals("TipoTributario")) {
			//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipotributario_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipotributario_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.getcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoIva")) {
			//sDescripcion=this.getActualTipoIvaForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipoiva_descripcion();
			} else {
				//sDescripcion=this.getActualTipoIvaForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipoiva_descripcion();
			}
		}

		if(sTipo.equals("TipoIce")) {
			//sDescripcion=this.getActualTipoIceForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipoice_descripcion();
			} else {
				//sDescripcion=this.getActualTipoIceForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipoice_descripcion();
			}
		}

		if(sTipo.equals("TipoBanco")) {
			//sDescripcion=this.getActualTipoBancoForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipobanco_descripcion();
			} else {
				//sDescripcion=this.getActualTipoBancoForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipobanco_descripcion();
			}
		}

		if(sTipo.equals("TipoComprobanteBanco")) {
			//sDescripcion=this.getActualTipoComprobanteBancoForeignKeyDescripcion((Long)value);
			if(!importarexportar.getIsNew() && !importarexportar.getIsChanged() && !importarexportar.getIsDeleted()) {
				sDescripcion=importarexportar.gettipocomprobantebanco_descripcion();
			} else {
				//sDescripcion=this.getActualTipoComprobanteBancoForeignKeyDescripcion((Long)value);
				sDescripcion=importarexportar.gettipocomprobantebanco_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ImportarExportar importarexportarRow=new ImportarExportar();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			importarexportarRow=(ImportarExportar) importarexportarLogic.getImportarExportars().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			importarexportarRow=(ImportarExportar) importarexportars.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualImportarExportar(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar));			
			this.jButtonDuplicarImportarExportar.setVisible((this.isVisibilidadCeldaDuplicarImportarExportar && this.isPermisoDuplicarImportarExportar));			
			this.jButtonCopiarImportarExportar.setVisible((this.isVisibilidadCeldaCopiarImportarExportar && this.isPermisoCopiarImportarExportar));
			this.jButtonVerFormImportarExportar.setVisible((this.isVisibilidadCeldaVerFormImportarExportar && this.isPermisoVerFormImportarExportar));
			/*
			this.jButtonAbrirOrderByImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));			
			*/
			this.jButtonNuevoRelacionesImportarExportar.setVisible((this.isVisibilidadCeldaNuevoRelacionesImportarExportar && this.isPermisoNuevoImportarExportar));			
			this.jButtonNuevoGuardarCambiosImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar && this.isPermisoGuardarCambiosImportarExportar));
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonModificarImportarExportar.setVisible((this.isVisibilidadCeldaModificarImportarExportar && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.setVisible((this.isVisibilidadCeldaActualizarImportarExportar && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.setVisible((this.isVisibilidadCeldaEliminarImportarExportar && this.isPermisoEliminarImportarExportar));
			this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.setVisible(this.isVisibilidadCeldaCancelarImportarExportar);							
			this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.setVisible((this.isVisibilidadCeldaGuardarImportarExportar && this.isPermisoGuardarCambiosImportarExportar));			
			
			}
						
			this.jButtonGuardarCambiosTablaImportarExportar.setVisible((this.isVisibilidadCeldaGuardarCambiosImportarExportar && this.isPermisoGuardarCambiosImportarExportar));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar));						
			this.jButtonDuplicarToolBarImportarExportar.setVisible((this.isVisibilidadCeldaDuplicarImportarExportar && this.isPermisoDuplicarImportarExportar));						
			this.jButtonCopiarToolBarImportarExportar.setVisible((this.isVisibilidadCeldaCopiarImportarExportar && this.isPermisoCopiarImportarExportar));			
			this.jButtonVerFormToolBarImportarExportar.setVisible((this.isVisibilidadCeldaVerFormImportarExportar && this.isPermisoVerFormImportarExportar));			
			this.jButtonAbrirOrderByToolBarImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));
			this.jButtonNuevoRelacionesToolBarImportarExportar.setVisible((this.isVisibilidadCeldaNuevoRelacionesImportarExportar && this.isPermisoNuevoImportarExportar));			
			this.jButtonNuevoGuardarCambiosToolBarImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar && this.isPermisoGuardarCambiosImportarExportar));			
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonModificarToolBarImportarExportar.setVisible((this.isVisibilidadCeldaModificarImportarExportar && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarToolBarImportarExportar.setVisible((this.isVisibilidadCeldaActualizarImportarExportar  && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarToolBarImportarExportar.setVisible((this.isVisibilidadCeldaEliminarImportarExportar && this.isPermisoEliminarImportarExportar));
			this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarToolBarImportarExportar.setVisible(this.isVisibilidadCeldaCancelarImportarExportar);				
			this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosToolBarImportarExportar.setVisible((this.isVisibilidadCeldaGuardarImportarExportar && this.isPermisoGuardarCambiosImportarExportar));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarImportarExportar.setVisible((this.isVisibilidadCeldaGuardarCambiosImportarExportar && this.isPermisoGuardarCambiosImportarExportar));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar));			
			this.jMenuItemDuplicarImportarExportar.setVisible((this.isVisibilidadCeldaDuplicarImportarExportar && this.isPermisoDuplicarImportarExportar));			
			this.jMenuItemCopiarImportarExportar.setVisible((this.isVisibilidadCeldaCopiarImportarExportar && this.isPermisoCopiarImportarExportar));			
			this.jMenuItemVerFormImportarExportar.setVisible((this.isVisibilidadCeldaVerFormImportarExportar && this.isPermisoVerFormImportarExportar));			
			this.jMenuItemAbrirOrderByImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));			
			//this.jMenuItemMostrarOcultarImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));
			this.jMenuItemDetalleAbrirOrderByImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));			
			//this.jMenuItemDetalleMostrarOcultarImportarExportar.setVisible((this.isVisibilidadCeldaOrdenImportarExportar && this.isPermisoOrdenImportarExportar));			
			this.jMenuItemNuevoRelacionesImportarExportar.setVisible((this.isVisibilidadCeldaNuevoRelacionesImportarExportar && this.isPermisoNuevoImportarExportar));			
			this.jMenuItemNuevoGuardarCambiosImportarExportar.setVisible((this.isVisibilidadCeldaNuevoImportarExportar && this.isPermisoNuevoImportarExportar && this.isPermisoGuardarCambiosImportarExportar));									
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemModificarImportarExportar.setVisible((this.isVisibilidadCeldaModificarImportarExportar && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemActualizarImportarExportar.setVisible((this.isVisibilidadCeldaActualizarImportarExportar && this.isPermisoActualizarImportarExportar));	
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemEliminarImportarExportar.setVisible((this.isVisibilidadCeldaEliminarImportarExportar && this.isPermisoEliminarImportarExportar));
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemCancelarImportarExportar.setVisible(this.isVisibilidadCeldaCancelarImportarExportar);				
			}
			
			this.jMenuItemGuardarCambiosImportarExportar.setVisible((this.isVisibilidadCeldaGuardarImportarExportar && this.isPermisoGuardarCambiosImportarExportar));						
			this.jMenuItemGuardarCambiosTablaImportarExportar.setVisible((this.isVisibilidadCeldaGuardarCambiosImportarExportar && this.isPermisoGuardarCambiosImportarExportar));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoImportarExportar=this.jButtonNuevoImportarExportar.isVisible();
			this.isVisibilidadCeldaDuplicarImportarExportar=this.jButtonDuplicarImportarExportar.isVisible();
			this.isVisibilidadCeldaCopiarImportarExportar=this.jButtonCopiarImportarExportar.isVisible();
			this.isVisibilidadCeldaVerFormImportarExportar=this.jButtonVerFormImportarExportar.isVisible();
			/*
			this.isVisibilidadCeldaOrdenImportarExportar=this.jButtonAbrirOrderByImportarExportar.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=this.jButtonNuevoRelacionesImportarExportar.isVisible();
			this.isVisibilidadCeldaModificarImportarExportar=this.jButtonModificarImportarExportar.isVisible();
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.isVisibilidadCeldaActualizarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.isVisible();
			this.isVisibilidadCeldaEliminarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.isVisible();
			this.isVisibilidadCeldaCancelarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.isVisible();
			this.isVisibilidadCeldaGuardarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=this.jButtonGuardarCambiosTablaImportarExportar.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoImportarExportar=this.jButtonNuevoToolBarImportarExportar.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=this.jButtonNuevoRelacionesToolBarImportarExportar.isVisible();
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.isVisibilidadCeldaModificarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonModificarToolBarImportarExportar.isVisible();
			this.isVisibilidadCeldaActualizarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarToolBarImportarExportar.isVisible();
			this.isVisibilidadCeldaEliminarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarToolBarImportarExportar.isVisible();
			this.isVisibilidadCeldaCancelarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarToolBarImportarExportar.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarImportarExportar=this.jButtonGuardarCambiosToolBarImportarExportar.isVisible();
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=this.jButtonGuardarCambiosTablaToolBarImportarExportar.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoImportarExportar=this.jMenuItemNuevoImportarExportar.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=this.jMenuItemNuevoRelacionesImportarExportar.isVisible();
			
			if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.isVisibilidadCeldaModificarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jMenuItemModificarImportarExportar.isVisible();
			this.isVisibilidadCeldaActualizarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jMenuItemActualizarImportarExportar.isVisible();
			this.isVisibilidadCeldaEliminarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jMenuItemEliminarImportarExportar.isVisible();
			this.isVisibilidadCeldaCancelarImportarExportar=this.jInternalFrameDetalleFormImportarExportar.jMenuItemCancelarImportarExportar.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarImportarExportar=this.jMenuItemGuardarCambiosImportarExportar.isVisible();
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=this.jMenuItemGuardarCambiosTablaImportarExportar.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesImportarExportar(Boolean esInicializar) {
		if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {			
			if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
				//if(this.importarexportarSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesImportarExportar();
			}
			
			this.inicializarActualizarBindingBotonesManualImportarExportar(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualImportarExportar() {
		this.jButtonNuevoImportarExportar.setVisible(this.isPermisoNuevoImportarExportar);			
		this.jButtonDuplicarImportarExportar.setVisible(this.isPermisoDuplicarImportarExportar);			
		this.jButtonCopiarImportarExportar.setVisible(this.isPermisoCopiarImportarExportar);			
		this.jButtonVerFormImportarExportar.setVisible(this.isPermisoVerFormImportarExportar);			
		/*
		this.jButtonAbrirOrderByImportarExportar.setVisible(this.isPermisoOrdenImportarExportar);					
		*/
		this.jButtonNuevoRelacionesImportarExportar.setVisible(this.isPermisoNuevoImportarExportar);			
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonModificarImportarExportar.setVisible(this.isPermisoActualizarImportarExportar);	
			this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.setVisible(this.isPermisoActualizarImportarExportar);	
			this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.setVisible(this.isPermisoEliminarImportarExportar);
			this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.setVisible(this.isVisibilidadCeldaCancelarImportarExportar);						
			this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.setVisible(this.isPermisoGuardarCambiosImportarExportar);							
		}
		
		this.jButtonGuardarCambiosTablaImportarExportar.setVisible(this.isPermisoActualizarImportarExportar);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleImportarExportar() {
		this.jInternalFrameDetalleFormImportarExportar.jButtonModificarImportarExportar.setVisible(this.isPermisoActualizarImportarExportar);	
		this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.setVisible(this.isPermisoActualizarImportarExportar);	
		this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.setVisible(this.isPermisoEliminarImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.setVisible(this.isVisibilidadCeldaCancelarImportarExportar);							
		this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.setVisible((this.isVisibilidadCeldaGuardarImportarExportar && this.isPermisoGuardarCambiosImportarExportar));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosImportarExportar() {
		if(ImportarExportarJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualImportarExportar();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesImportarExportar() {
	}
	
	public void jTableDatosImportarExportarListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarImportarExportar(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.importarexportar.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebImportarExportar(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderImportarExportar.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.importarexportar.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableImportarExportarActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderImportarExportar=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosImportarExportar.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderImportarExportar.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebImportarExportar(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderImportarExportar.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.importarexportar.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.importarexportar.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodo_import_exportImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodoimportexport=true;

			idTienePermisoperiodoimportexport=this.tienePermisosUsuarioEnPaginaWebImportarExportar(PeriodoImportExportConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodoimportexport) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.periodoimportexportBeanSwingJInternalFrame=new PeriodoImportExportBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoimportexportBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoimportexportBeanSwingJInternalFrame.getPeriodoImportExportLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_periodo_import_export()!=null) {
					this.periodoimportexportBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoimportexportBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_periodo_import_export());
					this.periodoimportexportBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoimportexportBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoimportexportBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodoImportExport();
				}

				JInternalFrameBase jinternalFrame =this.periodoimportexportBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBorderperiodoimportexport=(TitledBorder)this.periodoimportexportBeanSwingJInternalFrame.jScrollPanelDatosPeriodoImportExport.getBorder();

				titledBorderperiodoimportexport.setTitle(titledBorderImportarExportar.getTitle() + " -> Periodo Importar Exportar");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodo_import_exportImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_periodo_import_export()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo_import_export = "+this.importarexportar.getid_periodo_import_export().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccion_contaImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccionconta=true;

			idTienePermisotransaccionconta=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TransaccionContaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccionconta) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.transaccioncontaBeanSwingJInternalFrame=new TransaccionContaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccioncontaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccioncontaBeanSwingJInternalFrame.getTransaccionContaLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_transaccion_conta()!=null) {
					this.transaccioncontaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccioncontaBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_transaccion_conta());
					this.transaccioncontaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccioncontaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccioncontaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccionConta();
				}

				JInternalFrameBase jinternalFrame =this.transaccioncontaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertransaccionconta=(TitledBorder)this.transaccioncontaBeanSwingJInternalFrame.jScrollPanelDatosTransaccionConta.getBorder();

				titledBordertransaccionconta.setTitle(titledBorderImportarExportar.getTitle() + " -> Transaccion Contablilidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccion_contaImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_transaccion_conta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion_conta = "+this.importarexportar.getid_transaccion_conta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.importarexportar.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_importacionImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoimportacion=true;

			idTienePermisotipoimportacion=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoImportacionConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoimportacion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipoimportacionBeanSwingJInternalFrame=new TipoImportacionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoimportacionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoimportacionBeanSwingJInternalFrame.getTipoImportacionLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_importacion()!=null) {
					this.tipoimportacionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoimportacionBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_importacion());
					this.tipoimportacionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoimportacionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoimportacionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoImportacion();
				}

				JInternalFrameBase jinternalFrame =this.tipoimportacionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipoimportacion=(TitledBorder)this.tipoimportacionBeanSwingJInternalFrame.jScrollPanelDatosTipoImportacion.getBorder();

				titledBordertipoimportacion.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Importacion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_importacionImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_importacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_importacion = "+this.importarexportar.getid_tipo_importacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_comprobanteImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocomprobante=true;

			idTienePermisotipocomprobante=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoComprobanteConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocomprobante) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipocomprobanteBeanSwingJInternalFrame=new TipoComprobanteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocomprobanteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocomprobanteBeanSwingJInternalFrame.getTipoComprobanteLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_comprobante()!=null) {
					this.tipocomprobanteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocomprobanteBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_comprobante());
					this.tipocomprobanteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocomprobanteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocomprobanteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoComprobante();
				}

				JInternalFrameBase jinternalFrame =this.tipocomprobanteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipocomprobante=(TitledBorder)this.tipocomprobanteBeanSwingJInternalFrame.jScrollPanelDatosTipoComprobante.getBorder();

				titledBordertipocomprobante.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Comprobante");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_comprobanteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_comprobante = "+this.importarexportar.getid_tipo_comprobante().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.importarexportar.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondocumento_transporteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getdocumento_transporte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where documento_transporte like '%"+this.importarexportar.getdocumento_transporte()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_referencia_comprobanteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getnumero_referencia_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_referencia_comprobante like '%"+this.importarexportar.getnumero_referencia_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_tributarioImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotributario=true;

			idTienePermisotipotributario=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoTributarioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotributario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipotributarioBeanSwingJInternalFrame=new TipoTributarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotributarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotributarioBeanSwingJInternalFrame.getTipoTributarioLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_tributario()!=null) {
					this.tipotributarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotributarioBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_tributario());
					this.tipotributarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTributario();
				}

				JInternalFrameBase jinternalFrame =this.tipotributarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipotributario=(TitledBorder)this.tipotributarioBeanSwingJInternalFrame.jScrollPanelDatosTipoTributario.getBorder();

				titledBordertipotributario.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Tributario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_tributarioImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_tributario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_tributario = "+this.importarexportar.getid_tipo_tributario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_fiscalImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getcodigo_fiscal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_fiscal like '%"+this.importarexportar.getcodigo_fiscal()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteImportarExportarActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderImportarExportar=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosImportarExportar.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderImportarExportar.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebImportarExportar(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderImportarExportar.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.importarexportar.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_juridicoImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getes_juridico()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_juridico = "+this.importarexportar.getes_juridico().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbase0ImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getbase0()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where base0 = "+this.importarexportar.getbase0().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_total_cifImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getmonto_total_cif()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_total_cif = "+this.importarexportar.getmonto_total_cif().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_ivaImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getmonto_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_iva = "+this.importarexportar.getmonto_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_ivaImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoiva=true;

			idTienePermisotipoiva=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoIvaConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoiva) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipoivaBeanSwingJInternalFrame=new TipoIvaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoivaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoivaBeanSwingJInternalFrame.getTipoIvaLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_iva()!=null) {
					this.tipoivaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoivaBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_iva());
					this.tipoivaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoivaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoivaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoIva();
				}

				JInternalFrameBase jinternalFrame =this.tipoivaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipoiva=(TitledBorder)this.tipoivaBeanSwingJInternalFrame.jScrollPanelDatosTipoIva.getBorder();

				titledBordertipoiva.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Iva");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_ivaImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_iva = "+this.importarexportar.getid_tipo_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_iceImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getmonto_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_ice = "+this.importarexportar.getmonto_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_iceImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoice=true;

			idTienePermisotipoice=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoIceConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoice) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipoiceBeanSwingJInternalFrame=new TipoIceBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoiceBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoiceBeanSwingJInternalFrame.getTipoIceLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_ice()!=null) {
					this.tipoiceBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoiceBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_ice());
					this.tipoiceBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoiceBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoiceBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoIce();
				}

				JInternalFrameBase jinternalFrame =this.tipoiceBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipoice=(TitledBorder)this.tipoiceBeanSwingJInternalFrame.jScrollPanelDatosTipoIce.getBorder();

				titledBordertipoice.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Ice");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_iceImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_ice = "+this.importarexportar.getid_tipo_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbase_generalImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getbase_general()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where base_general = "+this.importarexportar.getbase_general().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_bancoImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipobanco=true;

			idTienePermisotipobanco=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoBancoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipobancoBeanSwingJInternalFrame=new TipoBancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipobancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipobancoBeanSwingJInternalFrame.getTipoBancoLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_banco()!=null) {
					this.tipobancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipobancoBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_banco());
					this.tipobancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipobancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipobancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoBanco();
				}

				JInternalFrameBase jinternalFrame =this.tipobancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipobanco=(TitledBorder)this.tipobancoBeanSwingJInternalFrame.jScrollPanelDatosTipoBanco.getBorder();

				titledBordertipobanco.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_bancoImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_banco = "+this.importarexportar.getid_tipo_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_comprobante_bancoImportarExportarUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocomprobantebanco=true;

			idTienePermisotipocomprobantebanco=this.tienePermisosUsuarioEnPaginaWebImportarExportar(TipoComprobanteConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocomprobantebanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosImportarExportar.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosImportarExportar.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);

				this.tipocomprobantebancoBeanSwingJInternalFrame=new TipoComprobanteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocomprobantebancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocomprobantebancoBeanSwingJInternalFrame.getTipoComprobanteLogic().setConnexion(this.importarexportarLogic.getConnexion());

				if(this.importarexportar.getid_tipo_comprobante_banco()!=null) {
					this.tipocomprobantebancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocomprobantebancoBeanSwingJInternalFrame.setIdActual(this.importarexportar.getid_tipo_comprobante_banco());
					this.tipocomprobantebancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocomprobantebancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocomprobantebancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoComprobante();
				}

				JInternalFrameBase jinternalFrame =this.tipocomprobantebancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderImportarExportar=(TitledBorder)this.jScrollPanelDatosImportarExportar.getBorder();
				TitledBorder titledBordertipocomprobantebanco=(TitledBorder)this.tipocomprobantebancoBeanSwingJInternalFrame.jScrollPanelDatosTipoComprobante.getBorder();

				titledBordertipocomprobantebanco.setTitle(titledBorderImportarExportar.getTitle() + " -> Tipo Comprobante");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.importarexportarLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_comprobante_bancoImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getid_tipo_comprobante_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_comprobante_banco = "+this.importarexportar.getid_tipo_comprobante_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_convenioImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getcon_convenio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_convenio = "+this.importarexportar.getcon_convenio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_devolucionImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getcon_devolucion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_devolucion = "+this.importarexportar.getcon_devolucion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.importarexportar.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_serie_comprobanteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getnumero_serie_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_serie_comprobante like '%"+this.importarexportar.getnumero_serie_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_autorizacion_comprobanteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getnumero_autorizacion_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_autorizacion_comprobante like '%"+this.importarexportar.getnumero_autorizacion_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencial_fuenteImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getnumero_secuencial_fuente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial_fuente like '%"+this.importarexportar.getnumero_secuencial_fuente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_fobImportarExportarBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.getimportarexportar(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.importarexportar==null) {
						this.importarexportar = new ImportarExportar();
					}

					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);
				}

				if(this.importarexportar.getvalor_fob()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_fob = "+this.importarexportar.getvalor_fob().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingImportarExportar(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameImportarExportar() {
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
			this.jInternalFrameDetalleFormImportarExportar.setVisible(false);	    			
			this.jInternalFrameDetalleFormImportarExportar.dispose();
			this.jInternalFrameDetalleFormImportarExportar=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
			this.jInternalFrameReporteDinamicoImportarExportar.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoImportarExportar.dispose();
			this.jInternalFrameReporteDinamicoImportarExportar=null;
		}
		
		if(this.jInternalFrameImportacionImportarExportar!=null) {
			this.jInternalFrameImportacionImportarExportar.setVisible(false);	    			
			this.jInternalFrameImportacionImportarExportar.dispose();
			this.jInternalFrameImportacionImportarExportar=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessImportarExportar();
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			
			if(sTipo.equals("NuevoImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarImportarExportar")) {
				jButtonDuplicarImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarImportarExportar")) {
				jButtonCopiarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("VerFormImportarExportar")) {
				jButtonVerFormImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarImportarExportar")) {
				jButtonDuplicarImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarImportarExportar")) {
				jButtonDuplicarImportarExportarActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarImportarExportar")) {
				jButtonModificarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarImportarExportar")) {
				jButtonModificarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarImportarExportar")) {
				jButtonModificarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("ActualizarImportarExportar")) {
				jButtonActualizarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarImportarExportar")) {
				jButtonActualizarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarImportarExportar")) {
				jButtonActualizarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("EliminarImportarExportar")) {
				jButtonEliminarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarImportarExportar")) {
				jButtonEliminarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarImportarExportar")) {
				jButtonEliminarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("CancelarImportarExportar")) {
				jButtonCancelarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarImportarExportar")) {
				jButtonCancelarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarImportarExportar")) {
				jButtonCancelarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("CerrarImportarExportar")) {
				jButtonCerrarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarImportarExportar")) {
				jButtonCerrarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarImportarExportar")) {
				jButtonCerrarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarImportarExportar")) {
				jButtonMostrarOcultarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarImportarExportar")) {
				jButtonCancelarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarImportarExportar")) {
				jButtonCopiarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarImportarExportar")) {
				jButtonVerFormImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarImportarExportar")) {
				jButtonCopiarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormImportarExportar")) {
				jButtonVerFormImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionImportarExportar")) {
				jButtonRecargarInformacionImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarImportarExportar")) {
				jButtonRecargarInformacionImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionImportarExportar")) {
				jButtonRecargarInformacionImportarExportarActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresImportarExportar")) {
				jButtonAnterioresImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarImportarExportar")) {
				jButtonAnterioresImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreImportarExportar")) {
				jButtonAnterioresImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("SiguientesImportarExportar")) {
				jButtonSiguientesImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarImportarExportar")) {
				jButtonSiguientesImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesImportarExportar")) {
				jButtonSiguientesImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByImportarExportar") || sTipo.equals("MenuItemDetalleAbrirOrderByImportarExportar")) {
				jButtonAbrirOrderByImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarImportarExportar") || sTipo.equals("MenuItemDetalleMostrarOcultarImportarExportar")) {
				jButtonMostrarOcultarImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosImportarExportar")) {
				jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarImportarExportar")) {
				jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosImportarExportar")) {
				jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoImportarExportar")) {
				jButtonCerrarReporteDinamicoImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoImportarExportar")) {
				jButtonGenerarReporteDinamicoImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoImportarExportar")) {
				/*
				jButtonGenerarExcelReporteDinamicoImportarExportarActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionImportarExportar")) {
				jButtonCerrarImportacionImportarExportarActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionImportarExportar")) {
				/*
				jButtonGenerarImportacionImportarExportarActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionImportarExportar")) {
				/*
				jButtonAbrirImportacionImportarExportarActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesImportarExportar")) {
				jComboBoxTiposAccionesImportarExportarActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesImportarExportar")) {
				jComboBoxTiposRelacionesImportarExportarActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioImportarExportar")) {
				jComboBoxTiposAccionesImportarExportarActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarImportarExportar")) {
				/*
				jComboBoxTiposSeleccionarImportarExportarActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralImportarExportar")) {
				jTextFieldValorCampoGeneralImportarExportarActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByImportarExportar")) {
				jButtonAbrirOrderByImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarImportarExportar")) {
				jButtonAbrirOrderByImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByImportarExportar")) {
				jButtonCerrarOrderByImportarExportarActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idImportarExportarBusqueda")) {
				this.jButtonidImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloImportarExportarUpdate")) {
				this.jButtonid_moduloImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloImportarExportarBusqueda")) {
				this.jButtonid_moduloImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportar")) {
				this.jButtonid_asiento_contableImportarExportarActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportarUpdate")) {
				this.jButtonid_asiento_contableImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportarBusqueda")) {
				this.jButtonid_asiento_contableImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucImportarExportarBusqueda")) {
				this.jButtonrucImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodo_import_exportImportarExportarUpdate")) {
				this.jButtonid_periodo_import_exportImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodo_import_exportImportarExportarBusqueda")) {
				this.jButtonid_periodo_import_exportImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_contaImportarExportarUpdate")) {
				this.jButtonid_transaccion_contaImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_contaImportarExportarBusqueda")) {
				this.jButtonid_transaccion_contaImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaImportarExportarBusqueda")) {
				this.jButtonfechaImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_importacionImportarExportarUpdate")) {
				this.jButtonid_tipo_importacionImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_importacionImportarExportarBusqueda")) {
				this.jButtonid_tipo_importacionImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_comprobanteImportarExportarUpdate")) {
				this.jButtonid_tipo_comprobanteImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_comprobanteImportarExportarBusqueda")) {
				this.jButtonid_tipo_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("documento_transporteImportarExportarBusqueda")) {
				this.jButtondocumento_transporteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_referencia_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_referencia_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioImportarExportarUpdate")) {
				this.jButtonid_tipo_tributarioImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioImportarExportarBusqueda")) {
				this.jButtonid_tipo_tributarioImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_fiscalImportarExportarBusqueda")) {
				this.jButtoncodigo_fiscalImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteImportarExportar")) {
				this.jButtonid_clienteImportarExportarActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteImportarExportarUpdate")) {
				this.jButtonid_clienteImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteImportarExportarBusqueda")) {
				this.jButtonid_clienteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_juridicoImportarExportarBusqueda")) {
				this.jButtones_juridicoImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base0ImportarExportarBusqueda")) {
				this.jButtonbase0ImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_total_cifImportarExportarBusqueda")) {
				this.jButtonmonto_total_cifImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_ivaImportarExportarBusqueda")) {
				this.jButtonmonto_ivaImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_ivaImportarExportarUpdate")) {
				this.jButtonid_tipo_ivaImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_ivaImportarExportarBusqueda")) {
				this.jButtonid_tipo_ivaImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_iceImportarExportarBusqueda")) {
				this.jButtonmonto_iceImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_iceImportarExportarUpdate")) {
				this.jButtonid_tipo_iceImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_iceImportarExportarBusqueda")) {
				this.jButtonid_tipo_iceImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base_generalImportarExportarBusqueda")) {
				this.jButtonbase_generalImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_bancoImportarExportarUpdate")) {
				this.jButtonid_tipo_bancoImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_bancoImportarExportarBusqueda")) {
				this.jButtonid_tipo_bancoImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_comprobante_bancoImportarExportarUpdate")) {
				this.jButtonid_tipo_comprobante_bancoImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_comprobante_bancoImportarExportarBusqueda")) {
				this.jButtonid_tipo_comprobante_bancoImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_convenioImportarExportarBusqueda")) {
				this.jButtoncon_convenioImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_devolucionImportarExportarBusqueda")) {
				this.jButtoncon_devolucionImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionImportarExportarBusqueda")) {
				this.jButtonfecha_emisionImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serie_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_serie_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacion_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_autorizacion_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencial_fuenteImportarExportarBusqueda")) {
				this.jButtonnumero_secuencial_fuenteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_fobImportarExportarBusqueda")) {
				this.jButtonvalor_fobImportarExportarBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableImportarExportar")) {
				this.jButtonid_asiento_contableImportarExportarActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteImportarExportar")) {
				this.jButtonid_clienteImportarExportarActionPerformed(evt);
			}
			
			
			;
			
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessImportarExportar();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ImportarExportar importarexportarLocal=null;
			
			if(!this.getEsControlTabla()) {
				importarexportarLocal=this.importarexportar;
			} else {
				importarexportarLocal=this.importarexportarAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
							
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
								
						
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
								
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
			
			this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
							
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
			
			this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
								
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
			
			this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosImportarExportar")) {
					jCheckBoxSeleccionarTodosImportarExportarItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosImportarExportar")) {
					jCheckBoxSeleccionadosImportarExportarItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarImportarExportar")) {
					
				}
				
				


				
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
												
				
				


				
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaImportarExportarActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.importarexportar);
				
				this.actualizarInformacion("INFO_PADRE",false,this.importarexportar);
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ImportarExportar.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ImportarExportar.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaImportarExportarActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.importarexportarAnterior =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarImportarExportar")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosImportarExportarListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosImportarExportar.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.importarexportar =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.importarexportar =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.importarexportar);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarImportarExportar")) {
				
				}
				
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarImportarExportar")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosImportarExportar.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarImportarExportar")) {
			
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessImportarExportar();
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			if(sTipo.equals("NuevoImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarImportarExportar")) {
				jButtonDuplicarImportarExportarActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarImportarExportar")) {
				jButtonCopiarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormImportarExportar")) {
				jButtonVerFormImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesImportarExportar")) {
				jButtonNuevoImportarExportarActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarImportarExportar")) {
				jButtonModificarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarImportarExportar")) {
				jButtonActualizarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarImportarExportar")) {
				jButtonEliminarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarImportarExportar")) {
				jButtonCancelarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportarExportar")) {
				jButtonCerrarImportarExportarActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosImportarExportar")) {
				jButtonGuardarCambiosImportarExportarActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosImportarExportar")) {
				jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByImportarExportar")) {
				jButtonAbrirOrderByImportarExportarActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionImportarExportar")) {
				jButtonRecargarInformacionImportarExportarActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresImportarExportar")) {
				jButtonAnterioresImportarExportarActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesImportarExportar")) {
				jButtonSiguientesImportarExportarActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idImportarExportarBusqueda")) {
				this.jButtonidImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloImportarExportarUpdate")) {
				this.jButtonid_moduloImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloImportarExportarBusqueda")) {
				this.jButtonid_moduloImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportar")) {
				this.jButtonid_asiento_contableImportarExportarActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportarUpdate")) {
				this.jButtonid_asiento_contableImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableImportarExportarBusqueda")) {
				this.jButtonid_asiento_contableImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucImportarExportarBusqueda")) {
				this.jButtonrucImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodo_import_exportImportarExportarUpdate")) {
				this.jButtonid_periodo_import_exportImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodo_import_exportImportarExportarBusqueda")) {
				this.jButtonid_periodo_import_exportImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccion_contaImportarExportarUpdate")) {
				this.jButtonid_transaccion_contaImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccion_contaImportarExportarBusqueda")) {
				this.jButtonid_transaccion_contaImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaImportarExportarBusqueda")) {
				this.jButtonfechaImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_importacionImportarExportarUpdate")) {
				this.jButtonid_tipo_importacionImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_importacionImportarExportarBusqueda")) {
				this.jButtonid_tipo_importacionImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_comprobanteImportarExportarUpdate")) {
				this.jButtonid_tipo_comprobanteImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_comprobanteImportarExportarBusqueda")) {
				this.jButtonid_tipo_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("documento_transporteImportarExportarBusqueda")) {
				this.jButtondocumento_transporteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_referencia_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_referencia_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioImportarExportarUpdate")) {
				this.jButtonid_tipo_tributarioImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioImportarExportarBusqueda")) {
				this.jButtonid_tipo_tributarioImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_fiscalImportarExportarBusqueda")) {
				this.jButtoncodigo_fiscalImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteImportarExportar")) {
				this.jButtonid_clienteImportarExportarActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteImportarExportarUpdate")) {
				this.jButtonid_clienteImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteImportarExportarBusqueda")) {
				this.jButtonid_clienteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_juridicoImportarExportarBusqueda")) {
				this.jButtones_juridicoImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base0ImportarExportarBusqueda")) {
				this.jButtonbase0ImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_total_cifImportarExportarBusqueda")) {
				this.jButtonmonto_total_cifImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_ivaImportarExportarBusqueda")) {
				this.jButtonmonto_ivaImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_ivaImportarExportarUpdate")) {
				this.jButtonid_tipo_ivaImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_ivaImportarExportarBusqueda")) {
				this.jButtonid_tipo_ivaImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_iceImportarExportarBusqueda")) {
				this.jButtonmonto_iceImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_iceImportarExportarUpdate")) {
				this.jButtonid_tipo_iceImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_iceImportarExportarBusqueda")) {
				this.jButtonid_tipo_iceImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("base_generalImportarExportarBusqueda")) {
				this.jButtonbase_generalImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_bancoImportarExportarUpdate")) {
				this.jButtonid_tipo_bancoImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_bancoImportarExportarBusqueda")) {
				this.jButtonid_tipo_bancoImportarExportarBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_comprobante_bancoImportarExportarUpdate")) {
				this.jButtonid_tipo_comprobante_bancoImportarExportarUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_comprobante_bancoImportarExportarBusqueda")) {
				this.jButtonid_tipo_comprobante_bancoImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_convenioImportarExportarBusqueda")) {
				this.jButtoncon_convenioImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_devolucionImportarExportarBusqueda")) {
				this.jButtoncon_devolucionImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionImportarExportarBusqueda")) {
				this.jButtonfecha_emisionImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serie_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_serie_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacion_comprobanteImportarExportarBusqueda")) {
				this.jButtonnumero_autorizacion_comprobanteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencial_fuenteImportarExportarBusqueda")) {
				this.jButtonnumero_secuencial_fuenteImportarExportarBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_fobImportarExportarBusqueda")) {
				this.jButtonvalor_fobImportarExportarBusquedaActionPerformed(evt);
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessImportarExportar();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameImportarExportar")) {
				closingInternalFrameImportarExportar();
				
			} else if(sTipo.equals("jButtonCancelarImportarExportar")) {
				JInternalFrameBase jInternalFrameDetalleFormImportarExportar = (JInternalFrameBase)evt.getSource();
	            	
	            ImportarExportarBeanSwingJInternalFrame jInternalFrameParent=(ImportarExportarBeanSwingJInternalFrame)jInternalFrameDetalleFormImportarExportar.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarImportarExportarActionPerformed(null);
			}
			
			ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.importarexportar,new Object(),this.importarexportarParameterGeneral,this.importarexportarReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormImportarExportar(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormImportarExportar(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormImportarExportar(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.importarexportar)) {
			if(!esControlTabla) {
				if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);			
				}
				
				if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualImportarExportar(this.importarexportar,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.importarexportarReturnGeneral=importarexportarLogic.procesarEventosImportarExportarsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.importarexportarLogic.getImportarExportars(),this.importarexportar,this.importarexportarParameterGeneral,this.isEsNuevoImportarExportar,classes);//this.importarexportarLogic.getImportarExportar()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanImportarExportar(this.importarexportarReturnGeneral,this.importarexportarBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanImportarExportar(classes,this.importarexportarReturnGeneral,this.importarexportarBean,false);
					}
						
					if(this.importarexportarReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyImportarExportar(this.importarexportarReturnGeneral.getImportarExportar());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioImportarExportar(this.importarexportarReturnGeneral.getImportarExportar());	
					}
						
					if(this.importarexportarReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioImportarExportar(this.importarexportarReturnGeneral.getImportarExportar(),classes);//this.importarexportarBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioImportarExportar(this.importarexportar,classes);//this.importarexportarBean);									
				}
			
				if(ImportarExportarJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualImportarExportar(this.importarexportar,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysImportarExportar(this.importarexportar);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.importarexportarAnterior!=null) {
						this.importarexportar=this.importarexportarAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.importarexportarReturnGeneral=importarexportarLogic.procesarEventosImportarExportarsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.importarexportarLogic.getImportarExportars(),this.importarexportar,this.importarexportarParameterGeneral,this.isEsNuevoImportarExportar,classes);//this.importarexportarLogic.getImportarExportar()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.importarexportarSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.importarexportarSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.importarexportarReturnGeneral.getImportarExportar(),importarexportarLogic.getImportarExportars());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.importarexportarReturnGeneral.getImportarExportar(),this.importarexportars);
				}
				//ARCHITECTURE
				
				//this.jTableDatosImportarExportar.repaint();
				
				//((AbstractTableModel) this.jTableDatosImportarExportar.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosImportarExportar();
			}
		}
	}
	
	public void actualizarVisualTableDatosImportarExportar() throws Exception {
		
		ImportarExportarModel importarexportarModel=(ImportarExportarModel)this.jTableDatosImportarExportar.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			importarexportarModel.importarexportars=this.importarexportarLogic.getImportarExportars();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			importarexportarModel.importarexportars=this.importarexportars;
		}
		
		
		((ImportarExportarModel) this.jTableDatosImportarExportar.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaImportarExportar() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getimportarexportarAnterior(),this.importarexportarLogic.getImportarExportars());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getimportarexportarAnterior(),this.importarexportars);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosImportarExportar();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioImportarExportar(ImportarExportar importarexportar,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.importarexportar,new Object(),generalEntityParameterGeneral,this.importarexportarReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.importarexportarSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ImportarExportarConstantesFunciones.getClassesRelationshipsOfImportarExportar(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ImportarExportarConstantesFunciones.getClassesRelationshipsFromStringsOfImportarExportar(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormImportarExportar(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ImportarExportarBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.importarexportar,new Object(),generalEntityParameterGeneral,this.importarexportarReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioImportarExportar(ImportarExportarBean importarexportarBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanImportarExportar(ArrayList<Classe> classes,ImportarExportarReturnGeneral importarexportarReturnGeneral,ImportarExportarBean importarexportarBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualImportarExportar(ImportarExportar importarexportar,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.importarexportar)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormImportarExportar = new ImportarExportarDetalleFormJInternalFrame(jDesktopPane,this.importarexportarSessionBean.getConGuardarRelaciones(),this.importarexportarSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.setVisible(false);
		this.jInternalFrameDetalleFormImportarExportar.setSelected(false);						
		
		this.jInternalFrameDetalleFormImportarExportar.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormImportarExportar.importarexportarLogic=this.importarexportarLogic;
		
		this.cargarCombosFrameForeignKeyImportarExportar("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleImportarExportar();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleImportarExportar();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyImportarExportar("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyImportarExportar();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormImportarExportar.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarImportarExportar"));
		
		this.jInternalFrameDetalleFormImportarExportar.jButtonModificarImportarExportar.addActionListener(new ButtonActionListener(this,"ModificarImportarExportar"));

		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonModificarToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"ModificarToolBarImportarExportar"));
					
		this.jInternalFrameDetalleFormImportarExportar.jMenuItemModificarImportarExportar.addActionListener(new ButtonActionListener(this,"MenuItemModificarImportarExportar"));		
		
		*/
		
		this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.addActionListener (new ButtonActionListener(this,"ActualizarImportarExportar"));
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"ActualizarToolBarImportarExportar"));
						
		this.jInternalFrameDetalleFormImportarExportar.jMenuItemActualizarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemActualizarImportarExportar"));		
		
		*/
		
		this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.addActionListener (new ButtonActionListener(this,"EliminarImportarExportar"));
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"EliminarToolBarImportarExportar"));
								
		this.jInternalFrameDetalleFormImportarExportar.jMenuItemEliminarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemEliminarImportarExportar"));		
		
		*/
		
		this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.addActionListener (new ButtonActionListener(this,"CancelarImportarExportar"));
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"CancelarToolBarImportarExportar"));
					
		this.jInternalFrameDetalleFormImportarExportar.jMenuItemCancelarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemCancelarImportarExportar"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jMenuItemDetalleCerrarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarImportarExportar"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarImportarExportar"));
		*/
		
		/*
		this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarImportarExportar"));
		*/
		
		
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioImportarExportar"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonidImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"idImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarBusqueda"));
		//jButtonid_asiento_contableImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportar.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonrucImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"rucImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfechaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fechaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtondocumento_transporteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"documento_transporteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_referencia_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_referencia_comprobanteImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncodigo_fiscalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"codigo_fiscalImportarExportarBusqueda"));
		//jButtonid_clienteImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportar.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtones_juridicoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"es_juridicoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase0ImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base0ImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_total_cifImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_total_cifImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_ivaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_iceImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase_generalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base_generalImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_convenioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_convenioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_devolucionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_devolucionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfecha_emisionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_serie_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_serie_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_autorizacion_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacion_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_secuencial_fuenteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencial_fuenteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonvalor_fobImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"valor_fobImportarExportarBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesImportarExportar"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameImportarExportar"));
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarImportarExportar"));
		}
		
		this.jTableDatosImportarExportar.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarImportarExportar"));
		
		this.jTableDatosImportarExportar.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarImportarExportar"));
		
		this.jButtonNuevoImportarExportar.addActionListener(new ButtonActionListener(this,"NuevoImportarExportar"));
		
		this.jButtonDuplicarImportarExportar.addActionListener(new ButtonActionListener(this,"DuplicarImportarExportar"));
		
		this.jButtonCopiarImportarExportar.addActionListener(new ButtonActionListener(this,"CopiarImportarExportar"));
		
		this.jButtonVerFormImportarExportar.addActionListener(new ButtonActionListener(this,"VerFormImportarExportar"));
		
		/*
		this.jButtonNuevoToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"NuevoToolBarImportarExportar"));
			
		this.jButtonDuplicarToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"DuplicarToolBarImportarExportar"));
			
		this.jMenuItemNuevoImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemNuevoImportarExportar"));
			
		this.jMenuItemDuplicarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarImportarExportar"));		
		*/
		
		this.jButtonNuevoRelacionesImportarExportar.addActionListener (new ButtonActionListener(this,"NuevoRelacionesImportarExportar"));
		
		/*
		this.jButtonNuevoRelacionesToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarImportarExportar"));
			
		this.jMenuItemNuevoRelacionesImportarExportar.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesImportarExportar"));		
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonModificarImportarExportar.addActionListener(new ButtonActionListener(this,"ModificarImportarExportar"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonModificarToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"ModificarToolBarImportarExportar"));
			
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemModificarImportarExportar.addActionListener(new ButtonActionListener(this,"MenuItemModificarImportarExportar"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarImportarExportar.addActionListener (new ButtonActionListener(this,"ActualizarImportarExportar"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonActualizarToolBarImportarExportar.addActionListener(new ButtonActionListener(this,"ActualizarToolBarImportarExportar"));
				
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemActualizarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemActualizarImportarExportar"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarImportarExportar.addActionListener (new ButtonActionListener(this,"EliminarImportarExportar"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonEliminarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"EliminarToolBarImportarExportar"));
						
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemEliminarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemEliminarImportarExportar"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarImportarExportar.addActionListener (new ButtonActionListener(this,"CancelarImportarExportar"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonCancelarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"CancelarToolBarImportarExportar"));
			
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemCancelarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemCancelarImportarExportar"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarImportarExportar"));		
		*/
		
		this.jButtonCerrarImportarExportar.addActionListener (new ButtonActionListener(this,"CerrarImportarExportar"));
		
		/*
		this.jButtonCerrarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"CerrarToolBarImportarExportar"));
			
		this.jMenuItemCerrarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemCerrarImportarExportar"));
			
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jMenuItemDetalleCerrarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarImportarExportar"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosImportarExportar"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarImportarExportar"));
		}
		
		this.jButtonCopiarToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"CopiarToolBarImportarExportar"));
			
		this.jButtonVerFormToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"VerFormToolBarImportarExportar"));
		
		this.jMenuItemGuardarCambiosImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosImportarExportar"));
			
		this.jMenuItemCopiarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemCopiarImportarExportar"));		
		
		this.jMenuItemVerFormImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemVerFormImportarExportar"));		
		*/
		
		this.jButtonGuardarCambiosTablaImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaImportarExportar"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarImportarExportar"));
			
		this.jMenuItemGuardarCambiosTablaImportarExportar.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaImportarExportar"));		
		*/
		
		/*
		this.jButtonRecargarInformacionImportarExportar.addActionListener (new ButtonActionListener(this,"RecargarInformacionImportarExportar"));
					
		this.jButtonRecargarInformacionToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarImportarExportar"));
		
		this.jMenuItemRecargarInformacionImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionImportarExportar"));		
		*/
		
		
		this.jButtonAnterioresImportarExportar.addActionListener (new ButtonActionListener(this,"AnterioresImportarExportar"));
		
		/*
		this.jButtonAnterioresToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"AnterioresToolBarImportarExportar"));
		
		this.jMenuItemAnterioresImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresImportarExportar"));		
		*/
		
		this.jButtonSiguientesImportarExportar.addActionListener (new ButtonActionListener(this,"SiguientesImportarExportar"));
		
		/*
		this.jButtonSiguientesToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"SiguientesToolBarImportarExportar"));
			
		this.jMenuItemSiguientesImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesImportarExportar"));
			
		this.jMenuItemAbrirOrderByImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByImportarExportar"));
			
		this.jMenuItemMostrarOcultarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarImportarExportar"));
			
		this.jMenuItemDetalleAbrirOrderByImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByImportarExportar"));
			
		this.jMenuItemDetalleMostarOcultarImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarImportarExportar"));		
		*/
		
		this.jButtonNuevoGuardarCambiosImportarExportar.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosImportarExportar"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarImportarExportar"));
			
		this.jMenuItemNuevoGuardarCambiosImportarExportar.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosImportarExportar"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosImportarExportar.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosImportarExportar"));

		this.jCheckBoxSeleccionadosImportarExportar.addItemListener(new CheckBoxItemListener(this,"SeleccionadosImportarExportar"));
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioImportarExportar"));
		}
		
		/*
		this.jComboBoxTiposRelacionesImportarExportar.addActionListener (new ButtonActionListener(this,"TiposRelacionesImportarExportar"));
			
		this.jComboBoxTiposAccionesImportarExportar.addActionListener (new ButtonActionListener(this,"TiposAccionesImportarExportar"));
					
		this.jComboBoxTiposSeleccionarImportarExportar.addActionListener (new ButtonActionListener(this,"TiposSeleccionarImportarExportar"));
			
		this.jTextFieldValorCampoGeneralImportarExportar.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralImportarExportar"));		
		*/
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonidImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"idImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarBusqueda"));
		//jButtonid_asiento_contableImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportar.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonrucImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"rucImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfechaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fechaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtondocumento_transporteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"documento_transporteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_referencia_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_referencia_comprobanteImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncodigo_fiscalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"codigo_fiscalImportarExportarBusqueda"));
		//jButtonid_clienteImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportar.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtones_juridicoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"es_juridicoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase0ImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base0ImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_total_cifImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_total_cifImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_ivaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_iceImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase_generalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base_generalImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_convenioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_convenioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_devolucionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_devolucionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfecha_emisionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_serie_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_serie_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_autorizacion_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacion_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_secuencial_fuenteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencial_fuenteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonvalor_fobImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"valor_fobImportarExportarBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonBusquedaPorNumeroComprobanteImportarExportar.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroComprobanteImportarExportar"));

			this.jButtonBusquedaPorRucInformanteImportarExportar.addActionListener(new ButtonActionListener(this,"BusquedaPorRucInformanteImportarExportar"));

			this.jButtonFK_IdAsientoContableImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableImportarExportar"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableImportarExportar.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportar"));

			this.jButtonFK_IdClienteImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdClienteImportarExportar"));

			this.jButtonBuscarFK_IdClienteid_clienteImportarExportar.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportar"));

			this.jButtonFK_IdPeriodoImportExportImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdPeriodoImportExportImportarExportar"));

			this.jButtonFK_IdTipoBancoImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoBancoImportarExportar"));

			this.jButtonFK_IdTipoComprobanteImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoComprobanteImportarExportar"));

			this.jButtonFK_IdTipoComprobanteBancoImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoComprobanteBancoImportarExportar"));

			this.jButtonFK_IdTipoIceImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoIceImportarExportar"));

			this.jButtonFK_IdTipoImportacionImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoImportacionImportarExportar"));

			this.jButtonFK_IdTipoIvaImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoIvaImportarExportar"));

			this.jButtonFK_IdTipoTributarioImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioImportarExportar"));

			this.jButtonFK_IdTransaccionContaImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionContaImportarExportar"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoImportarExportar!=null) {
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoImportarExportar"));
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoImportarExportar"));
				this.jInternalFrameReporteDinamicoImportarExportar.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoImportarExportar"));
			}
			
			//this.jButtonCerrarReporteDinamicoImportarExportar.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoImportarExportar"));				
			//this.jButtonGenerarReporteDinamicoImportarExportar.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoImportarExportar"));
			//this.jButtonGenerarExcelReporteDinamicoImportarExportar.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoImportarExportar"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionImportarExportar!=null) {
				this.jInternalFrameImportacionImportarExportar.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionImportarExportar"));
				this.jInternalFrameImportacionImportarExportar.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionImportarExportar"));
				this.jInternalFrameImportacionImportarExportar.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionImportarExportar"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByImportarExportar.addActionListener (new ButtonActionListener(this,"AbrirOrderByImportarExportar"));
			
			this.jButtonAbrirOrderByToolBarImportarExportar.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarImportarExportar"));			
			
			if(this.jInternalFrameOrderByImportarExportar!=null) {
				this.jInternalFrameOrderByImportarExportar.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByImportarExportar"));				
			}
			*/
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormImportarExportar!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormImportarExportar.jTabbedPaneRelacionesImportarExportar.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesImportarExportar"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameImportarExportar();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormImportarExportar.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormImportarExportar = (JInternalFrameBase)event.getSource();
	            	
	            ImportarExportarBeanSwingJInternalFrame jInternalFrameParent=(ImportarExportarBeanSwingJInternalFrame)jInternalFrameDetalleFormImportarExportar.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarImportarExportarActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosImportarExportar.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosImportarExportarListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosImportarExportar.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosImportarExportar.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoImportarExportar";
		inputMap = this.jButtonNuevoImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoImportarExportarActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoImportarExportarActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesImportarExportar";
		inputMap = this.jButtonNuevoRelacionesImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoImportarExportarActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarImportarExportar";
		inputMap = this.jButtonModificarImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarImportarExportar";
		inputMap = this.jButtonActualizarImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarImportarExportar";
		inputMap = this.jButtonEliminarImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarImportarExportar";
		inputMap = this.jButtonCancelarImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarImportarExportar";
		inputMap = this.jButtonCerrarImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosImportarExportar";
		inputMap = this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormImportarExportar.jButtonGuardarCambiosImportarExportar.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosImportarExportarActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosImportarExportar.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosImportarExportarItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesImportarExportar.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesImportarExportarActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarImportarExportar.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarImportarExportarActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralImportarExportar.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralImportarExportarActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonidImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"idImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_moduloImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloImportarExportarBusqueda"));
		//jButtonid_asiento_contableImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportar.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonrucImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"rucImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_periodo_import_exportImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_periodo_import_exportImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_transaccion_contaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccion_contaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfechaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fechaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_importacionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_importacionImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtondocumento_transporteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"documento_transporteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_referencia_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_referencia_comprobanteImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_tributarioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncodigo_fiscalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"codigo_fiscalImportarExportarBusqueda"));
		//jButtonid_clienteImportarExportar.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteImportarExportarActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportar.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportar"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtones_juridicoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"es_juridicoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase0ImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base0ImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_total_cifImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_total_cifImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_ivaImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_ivaImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_ivaImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonmonto_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"monto_iceImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_iceImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iceImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonbase_generalImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"base_generalImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_bancoImportarExportarBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonid_tipo_comprobante_bancoImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_comprobante_bancoImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_convenioImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_convenioImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtoncon_devolucionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"con_devolucionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonfecha_emisionImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_serie_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_serie_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_autorizacion_comprobanteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacion_comprobanteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonnumero_secuencial_fuenteImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencial_fuenteImportarExportarBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormImportarExportar.jButtonvalor_fobImportarExportarBusqueda.addActionListener(new ButtonActionListener(this,"valor_fobImportarExportarBusqueda"));
		
		
		this.jButtonBusquedaPorNumeroComprobanteImportarExportar.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroComprobanteImportarExportar"));

		this.jButtonBusquedaPorRucInformanteImportarExportar.addActionListener(new ButtonActionListener(this,"BusquedaPorRucInformanteImportarExportar"));

		this.jButtonFK_IdAsientoContableImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableImportarExportar"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableImportarExportar.addActionListener(new ButtonActionListener(this,"id_asiento_contableImportarExportar"));

		this.jButtonFK_IdClienteImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdClienteImportarExportar"));

		this.jButtonBuscarFK_IdClienteid_clienteImportarExportar.addActionListener(new ButtonActionListener(this,"id_clienteImportarExportar"));

		this.jButtonFK_IdPeriodoImportExportImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdPeriodoImportExportImportarExportar"));

		this.jButtonFK_IdTipoBancoImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoBancoImportarExportar"));

		this.jButtonFK_IdTipoComprobanteImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoComprobanteImportarExportar"));

		this.jButtonFK_IdTipoComprobanteBancoImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoComprobanteBancoImportarExportar"));

		this.jButtonFK_IdTipoIceImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoIceImportarExportar"));

		this.jButtonFK_IdTipoImportacionImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoImportacionImportarExportar"));

		this.jButtonFK_IdTipoIvaImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoIvaImportarExportar"));

		this.jButtonFK_IdTipoTributarioImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioImportarExportar"));

		this.jButtonFK_IdTransaccionContaImportarExportar.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionContaImportarExportar"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionImportarExportar.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionImportarExportarActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarImportarExportarActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarImportarExportar.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosImportarExportar(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
					importarexportarAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ImportarExportar importarexportarAux:importarexportars) {
					importarexportarAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosImportarExportarItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingImportarExportar(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
						importarexportarAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ImportarExportar importarexportarAux:importarexportars) {
						importarexportarAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
					
						if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO)) {
							existe=true;
							importarexportarAux.setes_juridico(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO)) {
							existe=true;
							importarexportarAux.setcon_convenio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION)) {
							existe=true;
							importarexportarAux.setcon_devolucion(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ImportarExportar importarexportarAux:importarexportars) {
						
						if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO)) {
							existe=true;
							importarexportarAux.setes_juridico(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO)) {
							existe=true;
							importarexportarAux.setcon_convenio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION)) {
							existe=true;
							importarexportarAux.setcon_devolucion(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaImportarExportar(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosImportarExportar.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosImportarExportar.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosImportarExportarItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingImportarExportar(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosImportarExportar.getSelectedRows();
			
			ImportarExportar importarexportarLocal=new ImportarExportar();
			
			//this.seleccionarTodosImportarExportar(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					importarexportarLocal =(ImportarExportar) this.importarexportarLogic.getImportarExportars().toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					importarexportarLocal =(ImportarExportar) this.importarexportars.toArray()[this.jTableDatosImportarExportar.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				importarexportarLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
						importarexportarAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ImportarExportar importarexportarAux:importarexportars) {
						importarexportarAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaImportarExportar(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosImportarExportar.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosImportarExportar.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosImportarExportar,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualImportarExportarItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarImportarExportarParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralImportarExportarActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingImportarExportar(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralImportarExportar.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ImportarExportar importarexportarAux:this.importarexportarLogic.getImportarExportars()) {
				
						if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE)) {
							existe=true;
							importarexportarAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							importarexportarAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE)) {
							existe=true;
							importarexportarAux.setdocumento_transporte(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_referencia_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL)) {
							existe=true;
							importarexportarAux.setcodigo_fiscal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_BASE0)) {
							existe=true;
							importarexportarAux.setbase0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF)) {
							existe=true;
							importarexportarAux.setmonto_total_cif(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOIVA)) {
							existe=true;
							importarexportarAux.setmonto_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOICE)) {
							existe=true;
							importarexportarAux.setmonto_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL)) {
							existe=true;
							importarexportarAux.setbase_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							importarexportarAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_serie_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_autorizacion_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE)) {
							existe=true;
							importarexportarAux.setnumero_secuencial_fuente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_VALORFOB)) {
							existe=true;
							importarexportarAux.setvalor_fob(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ImportarExportar importarexportarAux:importarexportars) {
					
						if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE)) {
							existe=true;
							importarexportarAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							importarexportarAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE)) {
							existe=true;
							importarexportarAux.setdocumento_transporte(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_referencia_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL)) {
							existe=true;
							importarexportarAux.setcodigo_fiscal(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_BASE0)) {
							existe=true;
							importarexportarAux.setbase0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF)) {
							existe=true;
							importarexportarAux.setmonto_total_cif(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOIVA)) {
							existe=true;
							importarexportarAux.setmonto_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_MONTOICE)) {
							existe=true;
							importarexportarAux.setmonto_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL)) {
							existe=true;
							importarexportarAux.setbase_general(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							importarexportarAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_serie_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE)) {
							existe=true;
							importarexportarAux.setnumero_autorizacion_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE)) {
							existe=true;
							importarexportarAux.setnumero_secuencial_fuente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_VALORFOB)) {
							existe=true;
							importarexportarAux.setvalor_fob(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaImportarExportar(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesImportarExportarActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingImportarExportar(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioImportarExportar=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesImportarExportar.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteImportarExportar) {				
					conSplash=true;//false;										
					
					//this.startProcessImportarExportar(conSplash);
				
					this.generarReporteImportarExportarsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoImportarExportarsSeleccionados();
				//this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoImportarExportarsSeleccionados(false);
				//this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoImportarExportarsSeleccionados(true);
				//this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessImportarExportar();
				
				this.exportarImportarExportarsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionImportarExportars();
				//this.importarImportarExportars();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessImportarExportar();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelImportarExportarsSeleccionados();
				//this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Importar Exportar", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessImportarExportar();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoImportarExportar)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyImportarExportar(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
				}	
			} 			
			else if(ImportarExportarBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteImportarExportar) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessImportarExportar(conSplash);
					
						//this.actualizarParametrosGeneralImportarExportar();
						
						this.generarReporteProcesoAccionImportarExportarsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ImportarExportarBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Importar ExportarS SELECCIONADOS?", "MANTENIMIENTO DE Importar Exportar", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessImportarExportar();
				
						this.actualizarParametrosGeneralImportarExportar();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.importarexportarReturnGeneral=importarexportarLogic.procesarAccionImportarExportarsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.importarexportarLogic.getImportarExportars(),this.importarexportarParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarImportarExportarReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralImportarExportar();
					
					ImportarExportarBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarImportarExportarReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesImportarExportar.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormImportarExportar.jComboBoxTiposAccionesFormularioImportarExportar.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessImportarExportar(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesImportarExportarActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessImportarExportar();
			
			if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
			ImportarExportar importarexportar=new ImportarExportar();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingImportarExportar(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesImportarExportar.getSelectedItem();
			*/
			
			
			
			importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
			//this.sTipoAccion;
			
			if(importarexportarsSeleccionados.size()==1) {
				for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
					importarexportar=importarexportarAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessImportarExportar();
			
      		//this.finishProcessImportarExportar(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarImportarExportarReturnGeneral() throws Exception {
		if(this.importarexportarReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.importarexportarReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.importarexportarReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.importarexportarReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.importarexportarReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.importarexportarReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingImportarExportar(false);
		}
		
		if(this.importarexportarReturnGeneral.getConRetornoLista() || this.importarexportarReturnGeneral.getConRetornoObjeto()) {
			if(this.importarexportarReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.importarexportarLogic.setImportarExportars(this.importarexportarReturnGeneral.getImportarExportars());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.importarexportarReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.importarexportarLogic.setImportarExportar(this.importarexportarReturnGeneral.getImportarExportar());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingImportarExportar(false);
		}
	}
	
	public void actualizarParametrosGeneralImportarExportar() throws Exception {
		
		
	}
	
	public ArrayList<ImportarExportar> getImportarExportarsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioImportarExportar) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ImportarExportar importarexportarAux:importarexportarLogic.getImportarExportars()) {
					if(importarexportarAux.getIsSelected()) {
						importarexportarsSeleccionados.add(importarexportarAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ImportarExportar importarexportarAux:this.importarexportars) {
					if(importarexportarAux.getIsSelected()) {
						importarexportarsSeleccionados.add(importarexportarAux);				
					}
				}
			}
			
			if(importarexportarsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						importarexportarsSeleccionados.addAll(this.importarexportarLogic.getImportarExportars());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						importarexportarsSeleccionados.addAll(this.importarexportars);				
					}
				}
			}
		} else {
			importarexportarsSeleccionados.add(this.importarexportar);
		}
		
		return importarexportarsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteImportarExportarsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalImportarExportarsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoImportarExportarsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoImportarExportarsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoImportarExportarsSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Importar Exportar",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados);
		
	}	
	
	public void generarReporteNormalImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionImportarExportarsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoImportarExportar();
		*/
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoImportarExportar();
		*/
		
		//this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados ,importarexportarImplementable,importarexportarImplementableHome);
	}
	
	public void mostrarImportacionImportarExportars() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionImportarExportar();
		
		this.abrirFrameImportacionImportarExportar();		
		*/
			
		//this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados ,importarexportarImplementable,importarexportarImplementableHome);
	}
	
	public void importarImportarExportars() throws Exception {		
	
	}
	
	public void exportarImportarExportarsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelImportarExportarsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoImportarExportarsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlImportarExportarsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Importar Exportar",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarImportarExportar(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarImportarExportar(importarexportarAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//importarexportarAux.setsDetalleGeneralEntityReporte(importarexportarAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarImportarExportar(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_ESJURIDICO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_BASE0;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_MONTOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_MONTOICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_BASEGENERAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_CONCONVENIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ImportarExportarConstantesFunciones.LABEL_VALORFOB;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarImportarExportar(ImportarExportar importarexportar,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=importarexportar.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getperiodoimportexport_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettransaccionconta_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipoimportacion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipocomprobante_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getdocumento_transporte();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getnumero_referencia_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipotributario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getcodigo_fiscal();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getes_juridico().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getbase0().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getmonto_total_cif().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getmonto_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipoiva_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getmonto_ice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipoice_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getbase_general().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipobanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.gettipocomprobantebanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getcon_convenio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getcon_devolucion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getnumero_serie_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getnumero_autorizacion_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getnumero_secuencial_fuente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=importarexportar.getvalor_fob().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ImportarExportars");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelImportarExportar(row);				
				iRow++;
			}				
			
			for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelImportarExportar(importarexportarAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlImportarExportarsSeleccionados() throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();		
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"importarexportar.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("importarexportars");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("importarexportar");
			//elementRoot.appendChild(element);
		
			for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
				element = document.createElement("importarexportar");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlImportarExportar(importarexportarAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Importar Exportar",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelImportarExportar(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASE0);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOTOTALCIF);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_MONTOICE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOICE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_BASEGENERAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(ImportarExportarConstantesFunciones.LABEL_VALORFOB);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelImportarExportar(ImportarExportar importarexportar,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getperiodoimportexport_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettransaccionconta_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipoimportacion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipocomprobante_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getdocumento_transporte());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getnumero_referencia_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipotributario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getcodigo_fiscal());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getes_juridico());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getbase0());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getmonto_total_cif());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getmonto_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipoiva_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getmonto_ice());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipoice_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getbase_general());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipobanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.gettipocomprobantebanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getcon_convenio());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getcon_devolucion());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getnumero_serie_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getnumero_autorizacion_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getnumero_secuencial_fuente());
		cell = row.createCell(iColumn++);cell.setCellValue(importarexportar.getvalor_fob());				
	}
	
	public void setFilaDatosExportarXmlImportarExportar(ImportarExportar importarexportar,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ImportarExportarConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(importarexportar.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ImportarExportarConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(importarexportar.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementmodulo_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(importarexportar.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementasientocontable_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(importarexportar.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementruc = document.createElement(ImportarExportarConstantesFunciones.RUCINFORMANTE);
		elementruc.appendChild(document.createTextNode(importarexportar.getruc().trim()));
		element.appendChild(elementruc);

		Element elementperiodoimportexport_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDPERIODOIMPORTEXPORT);
		elementperiodoimportexport_descripcion.appendChild(document.createTextNode(importarexportar.getperiodoimportexport_descripcion()));
		element.appendChild(elementperiodoimportexport_descripcion);

		Element elementtransaccionconta_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTRANSACCIONCONTA);
		elementtransaccionconta_descripcion.appendChild(document.createTextNode(importarexportar.gettransaccionconta_descripcion()));
		element.appendChild(elementtransaccionconta_descripcion);

		Element elementfecha = document.createElement(ImportarExportarConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(importarexportar.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementtipoimportacion_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOIMPORTACION);
		elementtipoimportacion_descripcion.appendChild(document.createTextNode(importarexportar.gettipoimportacion_descripcion()));
		element.appendChild(elementtipoimportacion_descripcion);

		Element elementtipocomprobante_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOCOMPROBANTE);
		elementtipocomprobante_descripcion.appendChild(document.createTextNode(importarexportar.gettipocomprobante_descripcion()));
		element.appendChild(elementtipocomprobante_descripcion);

		Element elementnumero_comprobante = document.createElement(ImportarExportarConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(importarexportar.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementdocumento_transporte = document.createElement(ImportarExportarConstantesFunciones.DOCUMENTOTRANSPORTE);
		elementdocumento_transporte.appendChild(document.createTextNode(importarexportar.getdocumento_transporte().trim()));
		element.appendChild(elementdocumento_transporte);

		Element elementnumero_referencia_comprobante = document.createElement(ImportarExportarConstantesFunciones.NUMEROREFERENCIACOMPROBANTE);
		elementnumero_referencia_comprobante.appendChild(document.createTextNode(importarexportar.getnumero_referencia_comprobante().trim()));
		element.appendChild(elementnumero_referencia_comprobante);

		Element elementtipotributario_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOTRIBUTARIO);
		elementtipotributario_descripcion.appendChild(document.createTextNode(importarexportar.gettipotributario_descripcion()));
		element.appendChild(elementtipotributario_descripcion);

		Element elementcodigo_fiscal = document.createElement(ImportarExportarConstantesFunciones.CODIGOFISCAL);
		elementcodigo_fiscal.appendChild(document.createTextNode(importarexportar.getcodigo_fiscal().trim()));
		element.appendChild(elementcodigo_fiscal);

		Element elementcliente_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(importarexportar.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementes_juridico = document.createElement(ImportarExportarConstantesFunciones.ESJURIDICO);
		elementes_juridico.appendChild(document.createTextNode(importarexportar.getes_juridico().toString().trim()));
		element.appendChild(elementes_juridico);

		Element elementbase0 = document.createElement(ImportarExportarConstantesFunciones.BASE0);
		elementbase0.appendChild(document.createTextNode(importarexportar.getbase0().toString().trim()));
		element.appendChild(elementbase0);

		Element elementmonto_total_cif = document.createElement(ImportarExportarConstantesFunciones.MONTOTOTALCIF);
		elementmonto_total_cif.appendChild(document.createTextNode(importarexportar.getmonto_total_cif().toString().trim()));
		element.appendChild(elementmonto_total_cif);

		Element elementmonto_iva = document.createElement(ImportarExportarConstantesFunciones.MONTOIVA);
		elementmonto_iva.appendChild(document.createTextNode(importarexportar.getmonto_iva().toString().trim()));
		element.appendChild(elementmonto_iva);

		Element elementtipoiva_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOIVA);
		elementtipoiva_descripcion.appendChild(document.createTextNode(importarexportar.gettipoiva_descripcion()));
		element.appendChild(elementtipoiva_descripcion);

		Element elementmonto_ice = document.createElement(ImportarExportarConstantesFunciones.MONTOICE);
		elementmonto_ice.appendChild(document.createTextNode(importarexportar.getmonto_ice().toString().trim()));
		element.appendChild(elementmonto_ice);

		Element elementtipoice_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOICE);
		elementtipoice_descripcion.appendChild(document.createTextNode(importarexportar.gettipoice_descripcion()));
		element.appendChild(elementtipoice_descripcion);

		Element elementbase_general = document.createElement(ImportarExportarConstantesFunciones.BASEGENERAL);
		elementbase_general.appendChild(document.createTextNode(importarexportar.getbase_general().toString().trim()));
		element.appendChild(elementbase_general);

		Element elementtipobanco_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOBANCO);
		elementtipobanco_descripcion.appendChild(document.createTextNode(importarexportar.gettipobanco_descripcion()));
		element.appendChild(elementtipobanco_descripcion);

		Element elementtipocomprobantebanco_descripcion = document.createElement(ImportarExportarConstantesFunciones.IDTIPOCOMPROBANTEBANCO);
		elementtipocomprobantebanco_descripcion.appendChild(document.createTextNode(importarexportar.gettipocomprobantebanco_descripcion()));
		element.appendChild(elementtipocomprobantebanco_descripcion);

		Element elementcon_convenio = document.createElement(ImportarExportarConstantesFunciones.CONCONVENIO);
		elementcon_convenio.appendChild(document.createTextNode(importarexportar.getcon_convenio().toString().trim()));
		element.appendChild(elementcon_convenio);

		Element elementcon_devolucion = document.createElement(ImportarExportarConstantesFunciones.CONDEVOLUCION);
		elementcon_devolucion.appendChild(document.createTextNode(importarexportar.getcon_devolucion().toString().trim()));
		element.appendChild(elementcon_devolucion);

		Element elementfecha_emision = document.createElement(ImportarExportarConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(importarexportar.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementnumero_serie_comprobante = document.createElement(ImportarExportarConstantesFunciones.NUMEROSERIECOMPROBANTE);
		elementnumero_serie_comprobante.appendChild(document.createTextNode(importarexportar.getnumero_serie_comprobante().trim()));
		element.appendChild(elementnumero_serie_comprobante);

		Element elementnumero_autorizacion_comprobante = document.createElement(ImportarExportarConstantesFunciones.NUMEROAUTORIZACIONCOMPROBANTE);
		elementnumero_autorizacion_comprobante.appendChild(document.createTextNode(importarexportar.getnumero_autorizacion_comprobante().trim()));
		element.appendChild(elementnumero_autorizacion_comprobante);

		Element elementnumero_secuencial_fuente = document.createElement(ImportarExportarConstantesFunciones.NUMEROSECUENCIALFUENTE);
		elementnumero_secuencial_fuente.appendChild(document.createTextNode(importarexportar.getnumero_secuencial_fuente().trim()));
		element.appendChild(elementnumero_secuencial_fuente);

		Element elementvalor_fob = document.createElement(ImportarExportarConstantesFunciones.VALORFOB);
		elementvalor_fob.appendChild(document.createTextNode(importarexportar.getvalor_fob().toString().trim()));
		element.appendChild(elementvalor_fob);
	}
	
	public void generarReporteGroupGenericoImportarExportarsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ImportarExportar> importarexportarsSeleccionados=new ArrayList<ImportarExportar>();
		
		importarexportarsSeleccionados=this.getImportarExportarsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoImportarExportar(importarexportarsSeleccionados);
		
		this.generarReporteImportarExportars("Todos",importarexportarsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoImportarExportar(ArrayList<ImportarExportar> importarexportarsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ImportarExportar importarexportarAux:importarexportarsSeleccionados) {
				importarexportarAux.setsDetalleGeneralEntityReporte(importarexportarAux.toString());
			
				if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_RUCINFORMANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDPERIODOIMPORTEXPORT)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getperiodoimportexport_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTRANSACCIONCONTA)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettransaccionconta_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(importarexportarAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOIMPORTACION)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipoimportacion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipocomprobante_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_DOCUMENTOTRANSPORTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getdocumento_transporte());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROREFERENCIACOMPROBANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getnumero_referencia_comprobante());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOTRIBUTARIO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipotributario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CODIGOFISCAL)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getcodigo_fiscal());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_ESJURIDICO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(importarexportarAux.getes_juridico()));
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOIVA)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipoiva_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOICE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipoice_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOBANCO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipobanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_IDTIPOCOMPROBANTEBANCO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.gettipocomprobantebanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONCONVENIO)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(importarexportarAux.getcon_convenio()));
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_CONDEVOLUCION)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(importarexportarAux.getcon_devolucion()));
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(importarexportarAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSERIECOMPROBANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getnumero_serie_comprobante());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROAUTORIZACIONCOMPROBANTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getnumero_autorizacion_comprobante());
				}
				 else if(sTipoSeleccionar.equals(ImportarExportarConstantesFunciones.LABEL_NUMEROSECUENCIALFUENTE)) {
					existe=true;
					importarexportarAux.setsDescripcionGeneralEntityReporte1(importarexportarAux.getnumero_secuencial_fuente());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ImportarExportarConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesImportarExportar(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoImportarExportar=true;
				this.isVisibilidadCeldaNuevoRelacionesImportarExportar=true;
				this.isVisibilidadCeldaGuardarCambiosImportarExportar=true;
			}
			
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=true;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=true;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=true;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=true;
			this.isVisibilidadCeldaEliminarImportarExportar=true;
			this.isVisibilidadCeldaCancelarImportarExportar=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=true;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=true;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoImportarExportar=true;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=true;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=true;
			this.isVisibilidadCeldaModificarImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=true;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
			this.isVisibilidadCeldaModificarImportarExportar=true;
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
			this.isVisibilidadCeldaCancelarImportarExportar=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				} else {
					this.isVisibilidadCeldaGuardarImportarExportar=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ImportarExportarJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoImportarExportar=true;
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=true;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=true;
		} else {
			this.actualizarEstadoPanelsImportarExportar(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarImportarExportar=false;
			//this.isVisibilidadCeldaVerFormImportarExportar=false;
			this.isVisibilidadCeldaDuplicarImportarExportar=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!importarexportarSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
		} else {
			this.isVisibilidadCeldaNuevoImportarExportar=false;
			this.isVisibilidadCeldaGuardarCambiosImportarExportar=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(importarexportarSessionBean.getEsGuardarRelacionado()) {
			if(!importarexportarSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;												
			}
			
			this.jButtonCerrarImportarExportar.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesImportarExportar=false;
		}
		
		if(!this.permiteMantenimiento(this.importarexportar)) {
			this.isVisibilidadCeldaActualizarImportarExportar=false;
			this.isVisibilidadCeldaEliminarImportarExportar=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesImportarExportar() {
	}
	
	public void actualizarEstadoPanelsImportarExportar(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(true);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(false);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(false);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(false);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(true);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(true);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionImportarExportar!=null) {
				this.jScrollPanelDatosEdicionImportarExportar.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosImportarExportar!=null) {
				this.jScrollPanelDatosImportarExportar.setVisible(true);
			}
			
			if(this.jPanelPaginacionImportarExportar!=null) {
				this.jPanelPaginacionImportarExportar.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.importarexportarSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasImportarExportar!=null) {
					this.jTabbedPaneBusquedasImportarExportar.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.importarexportarSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasImportarExportar!=null) {
				this.jTabbedPaneBusquedasImportarExportar.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesImportarExportar!=null) {
				this.jPanelParametrosReportesImportarExportar.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodoImportExport(Boolean isParaPeriodoImportExport){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoImportExportNegation=!isParaPeriodoImportExport;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaPeriodoImportExport;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaPeriodoImportExportNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTransaccionConta(Boolean isParaTransaccionConta){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionContaNegation=!isParaTransaccionConta;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTransaccionContaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTransaccionContaNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTransaccionContaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTransaccionConta;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoImportacion(Boolean isParaTipoImportacion){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoImportacionNegation=!isParaTipoImportacion;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoImportacionNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoImportacionNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoImportacion;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoImportacionNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoComprobante(Boolean isParaTipoComprobante){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoComprobanteNegation=!isParaTipoComprobante;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoComprobante;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoComprobanteNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoTributario(Boolean isParaTipoTributario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTributarioNegation=!isParaTipoTributario;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoTributarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoTributarioNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTributario;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoIva(Boolean isParaTipoIva){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoIvaNegation=!isParaTipoIva;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoIvaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoIvaNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoIva;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoIvaNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoIce(Boolean isParaTipoIce){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoIceNegation=!isParaTipoIce;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoIceNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoIceNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoIce;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoIceNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoBanco(Boolean isParaTipoBanco){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoBancoNegation=!isParaTipoBanco;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoBancoNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoBanco;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoBancoNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoComprobanteBanco(Boolean isParaTipoComprobanteBanco){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoComprobanteBancoNegation=!isParaTipoComprobanteBanco;

			this.isVisibilidadBusquedaPorNumeroComprobante=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorNumeroComprobanteImportarExportar);}

			this.isVisibilidadBusquedaPorRucInformante=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadBusquedaPorRucInformante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelBusquedaPorRucInformanteImportarExportar);}

			this.isVisibilidadFK_IdAsientoContable=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdAsientoContableImportarExportar);}

			this.isVisibilidadFK_IdCliente=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdClienteImportarExportar);}

			this.isVisibilidadFK_IdPeriodoImportExport=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdPeriodoImportExport) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdPeriodoImportExportImportarExportar);}

			this.isVisibilidadFK_IdTipoBanco=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobante=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoComprobante) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteImportarExportar);}

			this.isVisibilidadFK_IdTipoComprobanteBanco=isParaTipoComprobanteBanco;
			if(!this.isVisibilidadFK_IdTipoComprobanteBanco) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoComprobanteBancoImportarExportar);}

			this.isVisibilidadFK_IdTipoIce=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoIce) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIceImportarExportar);}

			this.isVisibilidadFK_IdTipoImportacion=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoImportacion) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoImportacionImportarExportar);}

			this.isVisibilidadFK_IdTipoIva=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoIva) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoIvaImportarExportar);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTipoTributarioImportarExportar);}

			this.isVisibilidadFK_IdTransaccionConta=isParaTipoComprobanteBancoNegation;
			if(!this.isVisibilidadFK_IdTransaccionConta) {this.jTabbedPaneBusquedasImportarExportar.remove(jPanelFK_IdTransaccionContaImportarExportar);}
		}
		*/
	}
	
	
	
	

	public String registrarSesionImportarExportarParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(importarexportarSessionBean==null) {
				importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(importarexportarSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.importarexportarFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(ImportarExportarConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionImportarExportar(true);
			//asientocontableSessionBean.setlidImportarExportarActual(this.idImportarExportarActual);

			importarexportarSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyImportarExportar(true);
			importarexportarSessionBean.setlIdImportarExportarActualForeignKey(this.idImportarExportarActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionImportarExportarParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(importarexportarSessionBean==null) {
				importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(importarexportarSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.importarexportarFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(ImportarExportarConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionImportarExportar(true);
			//clienteSessionBean.setlidImportarExportarActual(this.idImportarExportarActual);

			importarexportarSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyImportarExportar(true);
			importarexportarSessionBean.setlIdImportarExportarActualForeignKey(this.idImportarExportarActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ImportarExportarSessionBean importarexportarSessionBean=new ImportarExportarSessionBean();
		
		if(this.importarexportarSessionBean==null) {
			this.importarexportarSessionBean=new ImportarExportarSessionBean();
		}
		
		this.importarexportarSessionBean.setsUltimaBusquedaImportarExportar(this.getsAccionBusqueda());
		this.importarexportarSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.importarexportarSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroComprobante")) {
			importarexportarSessionBean.setnumero_comprobante(this.getnumero_comprobanteBusquedaPorNumeroComprobante());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorRucInformante")) {
			importarexportarSessionBean.setruc(this.getrucBusquedaPorRucInformante());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			importarexportarSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			importarexportarSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			importarexportarSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodoImportExport")) {
			importarexportarSessionBean.setid_periodo_import_export(this.getid_periodo_import_exportFK_IdPeriodoImportExport());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoBanco")) {
			importarexportarSessionBean.setid_tipo_banco(this.getid_tipo_bancoFK_IdTipoBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoComprobante")) {
			importarexportarSessionBean.setid_tipo_comprobante(this.getid_tipo_comprobanteFK_IdTipoComprobante());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoComprobanteBanco")) {
			importarexportarSessionBean.setid_tipo_comprobante_banco(this.getid_tipo_comprobante_bancoFK_IdTipoComprobanteBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoIce")) {
			importarexportarSessionBean.setid_tipo_ice(this.getid_tipo_iceFK_IdTipoIce());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoImportacion")) {
			importarexportarSessionBean.setid_tipo_importacion(this.getid_tipo_importacionFK_IdTipoImportacion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoIva")) {
			importarexportarSessionBean.setid_tipo_iva(this.getid_tipo_ivaFK_IdTipoIva());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
			importarexportarSessionBean.setid_tipo_tributario(this.getid_tipo_tributarioFK_IdTipoTributario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccionConta")) {
			importarexportarSessionBean.setid_transaccion_conta(this.getid_transaccion_contaFK_IdTransaccionConta());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ImportarExportarSessionBean importarexportarSessionBean=new ImportarExportarSessionBean();
		
		if(this.importarexportarSessionBean==null) {
			this.importarexportarSessionBean=new ImportarExportarSessionBean();
		}
		
		if(this.importarexportarSessionBean.getsUltimaBusquedaImportarExportar()!=null&&!this.importarexportarSessionBean.getsUltimaBusquedaImportarExportar().equals("")) {
			this.setsAccionBusqueda(importarexportarSessionBean.getsUltimaBusquedaImportarExportar());
			this.setiNumeroPaginacion(importarexportarSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(importarexportarSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroComprobante")) {
				this.setnumero_comprobanteBusquedaPorNumeroComprobante(importarexportarSessionBean.getnumero_comprobante());
				importarexportarSessionBean.setnumero_comprobante("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorRucInformante")) {
				this.setrucBusquedaPorRucInformante(importarexportarSessionBean.getruc());
				importarexportarSessionBean.setruc("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(importarexportarSessionBean.getid_asiento_contable());
				importarexportarSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(importarexportarSessionBean.getid_cliente());
				importarexportarSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(importarexportarSessionBean.getid_modulo());
				importarexportarSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodoImportExport")) {
				this.setid_periodo_import_exportFK_IdPeriodoImportExport(importarexportarSessionBean.getid_periodo_import_export());
				importarexportarSessionBean.setid_periodo_import_export(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoBanco")) {
				this.setid_tipo_bancoFK_IdTipoBanco(importarexportarSessionBean.getid_tipo_banco());
				importarexportarSessionBean.setid_tipo_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoComprobante")) {
				this.setid_tipo_comprobanteFK_IdTipoComprobante(importarexportarSessionBean.getid_tipo_comprobante());
				importarexportarSessionBean.setid_tipo_comprobante(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoComprobanteBanco")) {
				this.setid_tipo_comprobante_bancoFK_IdTipoComprobanteBanco(importarexportarSessionBean.getid_tipo_comprobante_banco());
				importarexportarSessionBean.setid_tipo_comprobante_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoIce")) {
				this.setid_tipo_iceFK_IdTipoIce(importarexportarSessionBean.getid_tipo_ice());
				importarexportarSessionBean.setid_tipo_ice(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoImportacion")) {
				this.setid_tipo_importacionFK_IdTipoImportacion(importarexportarSessionBean.getid_tipo_importacion());
				importarexportarSessionBean.setid_tipo_importacion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoIva")) {
				this.setid_tipo_ivaFK_IdTipoIva(importarexportarSessionBean.getid_tipo_iva());
				importarexportarSessionBean.setid_tipo_iva(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
				this.setid_tipo_tributarioFK_IdTipoTributario(importarexportarSessionBean.getid_tipo_tributario());
				importarexportarSessionBean.setid_tipo_tributario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccionConta")) {
				this.setid_transaccion_contaFK_IdTransaccionConta(importarexportarSessionBean.getid_transaccion_conta());
				importarexportarSessionBean.setid_transaccion_conta(-1L);
			}
		}
		
		this.importarexportarSessionBean.setsUltimaBusquedaImportarExportar("");
		this.importarexportarSessionBean.setiNumeroPaginacion(ImportarExportarConstantesFunciones.INUMEROPAGINACION);
		this.importarexportarSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaImportarExportar(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioImportarExportar() {
		this.updateBorderResaltarBusquedasFormularioImportarExportar();
		this.updateVisibilidadBusquedasFormularioImportarExportar();
		this.updateHabilitarBusquedasFormularioImportarExportar();
	}
	
	public void updateBorderResaltarBusquedasFormularioImportarExportar() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasImportarExportar.getComponents().length>0) {
	

		if(this.importarexportarConstantesFunciones.resaltarBusquedaPorNumeroComprobanteImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorNumeroComprobanteImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarBusquedaPorNumeroComprobanteImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarBusquedaPorRucInformanteImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorRucInformanteImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarBusquedaPorRucInformanteImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdAsientoContableImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdAsientoContableImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdAsientoContableImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdClienteImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdClienteImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdClienteImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdPeriodoImportExportImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdPeriodoImportExportImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdPeriodoImportExportImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoBancoImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoBancoImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoBancoImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteBancoImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteBancoImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteBancoImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIceImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIceImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIceImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoImportacionImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoImportacionImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoImportacionImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIvaImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIvaImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIvaImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTipoTributarioImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoTributarioImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoTributarioImportarExportar);
			}
		}

		if(this.importarexportarConstantesFunciones.resaltarFK_IdTransaccionContaImportarExportar!=null) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTransaccionContaImportarExportar);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTransaccionContaImportarExportar);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioImportarExportar() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasImportarExportar.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorNumeroComprobanteImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarBusquedaPorNumeroComprobanteImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarBusquedaPorNumeroComprobanteImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorRucInformanteImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarBusquedaPorRucInformanteImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarBusquedaPorRucInformanteImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdAsientoContableImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdAsientoContableImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdAsientoContableImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdClienteImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdClienteImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdClienteImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdPeriodoImportExportImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdPeriodoImportExportImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdPeriodoImportExportImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoBancoImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoBancoImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoBancoImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoComprobanteImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoComprobanteImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteBancoImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoComprobanteBancoImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoComprobanteBancoImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIceImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoIceImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoIceImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoImportacionImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoImportacionImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoImportacionImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIvaImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoIvaImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoIvaImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoTributarioImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTipoTributarioImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTipoTributarioImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTransaccionContaImportarExportar);
			jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.importarexportarConstantesFunciones.mostrarFK_IdTransaccionContaImportarExportar);
			if(!this.importarexportarConstantesFunciones.mostrarFK_IdTransaccionContaImportarExportar && index>-1) {
				this.jTabbedPaneBusquedasImportarExportar.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioImportarExportar() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasImportarExportar.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorNumeroComprobanteImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarBusquedaPorNumeroComprobanteImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarBusquedaPorNumeroComprobanteImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorRucInformanteImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarBusquedaPorRucInformanteImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarBusquedaPorRucInformanteImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdAsientoContableImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdAsientoContableImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdAsientoContableImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdClienteImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdClienteImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdClienteImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdPeriodoImportExportImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdPeriodoImportExportImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdPeriodoImportExportImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoBancoImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoBancoImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoBancoImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoComprobanteImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoComprobanteImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteBancoImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoComprobanteBancoImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoComprobanteBancoImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIceImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoIceImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoIceImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoImportacionImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoImportacionImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoImportacionImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIvaImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoIvaImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoIvaImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoTributarioImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTipoTributarioImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTipoTributarioImportarExportar);
			}

			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTransaccionContaImportarExportar);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.importarexportarConstantesFunciones.activarFK_IdTransaccionContaImportarExportar);
				this.jTabbedPaneBusquedasImportarExportar.setEnabledAt(index,this.importarexportarConstantesFunciones.activarFK_IdTransaccionContaImportarExportar);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaImportarExportar(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorNumeroComprobante")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorNumeroComprobanteImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarBusquedaPorNumeroComprobanteImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarBusquedaPorNumeroComprobanteImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorRucInformante")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelBusquedaPorRucInformanteImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarBusquedaPorRucInformanteImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarBusquedaPorRucInformanteImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdAsientoContableImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdAsientoContableImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdAsientoContableImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdClienteImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdClienteImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdClienteImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPeriodoImportExport")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdPeriodoImportExportImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdPeriodoImportExportImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdPeriodoImportExportImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoBanco")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoBancoImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoBancoImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoBancoImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoComprobante")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoComprobanteImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoComprobanteBanco")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoComprobanteBancoImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoComprobanteBancoImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoComprobanteBancoImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoIce")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIceImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoIceImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIceImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoImportacion")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoImportacionImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoImportacionImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoImportacionImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoIva")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoIvaImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoIvaImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoIvaImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTributario")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTipoTributarioImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTipoTributarioImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTipoTributarioImportarExportar);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccionConta")) {
			index= this.jTabbedPaneBusquedasImportarExportar.indexOfComponent(this.jPanelFK_IdTransaccionContaImportarExportar);

			this.jTabbedPaneBusquedasImportarExportar.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasImportarExportar.getComponent(index);

			this.importarexportarConstantesFunciones.setResaltarFK_IdTransaccionContaImportarExportar(resaltar);

			jPanel.setBorder(this.importarexportarConstantesFunciones.resaltarFK_IdTransaccionContaImportarExportar);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarImportarExportar.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioImportarExportar() throws Exception {

		if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioImportarExportar();
		this.updateVisibilidadResaltarControlesFormularioImportarExportar();
		this.updateHabilitarResaltarControlesFormularioImportarExportar();
		
	}
	
	public void updateBorderResaltarControlesFormularioImportarExportar() throws Exception {
		if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.importarexportarConstantesFunciones.resaltaridImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltaridImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_moduloImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_moduloImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_asiento_contableImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_asiento_contableImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarrucImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarrucImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_periodo_import_exportImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_periodo_import_exportImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_transaccion_contaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_transaccion_contaImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarfechaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarfechaImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_importacionImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_importacionImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_comprobanteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarnumero_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarnumero_comprobanteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltardocumento_transporteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltardocumento_transporteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarnumero_referencia_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarnumero_referencia_comprobanteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_tributarioImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_tributarioImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarcodigo_fiscalImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarcodigo_fiscalImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_clienteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_clienteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltares_juridicoImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setBorderPainted(true);this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltares_juridicoImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarbase0ImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarbase0ImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarmonto_total_cifImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarmonto_total_cifImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarmonto_ivaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarmonto_ivaImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_ivaImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_ivaImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarmonto_iceImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarmonto_iceImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_iceImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_iceImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarbase_generalImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarbase_generalImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_bancoImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_bancoImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarid_tipo_comprobante_bancoImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarid_tipo_comprobante_bancoImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarcon_convenioImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setBorderPainted(true);this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarcon_convenioImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarcon_devolucionImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setBorderPainted(true);this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarcon_devolucionImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarfecha_emisionImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarfecha_emisionImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarnumero_serie_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarnumero_serie_comprobanteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarnumero_autorizacion_comprobanteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarnumero_autorizacion_comprobanteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarnumero_secuencial_fuenteImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarnumero_secuencial_fuenteImportarExportar);}
		if(this.importarexportarConstantesFunciones.resaltarvalor_fobImportarExportar!=null && this.jInternalFrameDetalleFormImportarExportar!=null) {this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setBorder(this.importarexportarConstantesFunciones.resaltarvalor_fobImportarExportar);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioImportarExportar() throws Exception {		
		if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
	
		//this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostraridImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelidImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostraridImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_moduloImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_moduloImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_moduloImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_asiento_contableImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_asiento_contableImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_asiento_contableImportarExportar);
			this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_asiento_contableImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarrucImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelrucImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarrucImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_periodo_import_exportImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_periodo_import_exportImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_periodo_import_exportImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_transaccion_contaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_transaccion_contaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_transaccion_contaImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarfechaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelfechaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarfechaImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_importacionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_importacionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_importacionImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobanteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelnumero_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_comprobanteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrardocumento_transporteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPaneldocumento_transporteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrardocumento_transporteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_referencia_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelnumero_referencia_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_referencia_comprobanteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_tributarioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_tributarioImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_tributarioImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcodigo_fiscalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelcodigo_fiscalImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcodigo_fiscalImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_clienteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_clienteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_clienteImportarExportar);
			this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_clienteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrares_juridicoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPaneles_juridicoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrares_juridicoImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarbase0ImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelbase0ImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarbase0ImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_total_cifImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelmonto_total_cifImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_total_cifImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelmonto_ivaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_ivaImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_ivaImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_ivaImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelmonto_iceImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarmonto_iceImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_iceImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_iceImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarbase_generalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelbase_generalImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarbase_generalImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_bancoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_bancoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_bancoImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobante_bancoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelid_tipo_comprobante_bancoImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarid_tipo_comprobante_bancoImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcon_convenioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelcon_convenioImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcon_convenioImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcon_devolucionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelcon_devolucionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarcon_devolucionImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarfecha_emisionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelfecha_emisionImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarfecha_emisionImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_serie_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelnumero_serie_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_serie_comprobanteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_autorizacion_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelnumero_autorizacion_comprobanteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_autorizacion_comprobanteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_secuencial_fuenteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelnumero_secuencial_fuenteImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarnumero_secuencial_fuenteImportarExportar);
		//this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarvalor_fobImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jPanelvalor_fobImportarExportar.setVisible(this.importarexportarConstantesFunciones.mostrarvalor_fobImportarExportar);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioImportarExportar() throws Exception {
		if(this.jInternalFrameDetalleFormImportarExportar==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormImportarExportar!=null) {
	
		this.jInternalFrameDetalleFormImportarExportar.jLabelidImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activaridImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_moduloImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_moduloImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_asiento_contableImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_asiento_contableImportarExportar);
			this.jInternalFrameDetalleFormImportarExportar.jButtonid_asiento_contableImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_asiento_contableImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldrucImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarrucImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_periodo_import_exportImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_periodo_import_exportImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_transaccion_contaImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_transaccion_contaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jDateChooserfechaImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarfechaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_importacionImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_importacionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobanteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_comprobanteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarnumero_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFielddocumento_transporteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activardocumento_transporteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_referencia_comprobanteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarnumero_referencia_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_tributarioImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_tributarioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldcodigo_fiscalImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarcodigo_fiscalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_clienteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_clienteImportarExportar);
			this.jInternalFrameDetalleFormImportarExportar.jButtonid_clienteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_clienteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxes_juridicoImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activares_juridicoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase0ImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarbase0ImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_total_cifImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarmonto_total_cifImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_ivaImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarmonto_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_ivaImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_ivaImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldmonto_iceImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarmonto_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_iceImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_iceImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldbase_generalImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarbase_generalImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_bancoImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_bancoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jComboBoxid_tipo_comprobante_bancoImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarid_tipo_comprobante_bancoImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_convenioImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarcon_convenioImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jCheckBoxcon_devolucionImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarcon_devolucionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jDateChooserfecha_emisionImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarfecha_emisionImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_serie_comprobanteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarnumero_serie_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_autorizacion_comprobanteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarnumero_autorizacion_comprobanteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldnumero_secuencial_fuenteImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarnumero_secuencial_fuenteImportarExportar);
		this.jInternalFrameDetalleFormImportarExportar.jTextFieldvalor_fobImportarExportar.setEnabled(this.importarexportarConstantesFunciones.activarvalor_fobImportarExportar);
		}
	}
	
		
}