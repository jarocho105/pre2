/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.FacturaProveedorServicioConstantesFunciones;
import com.bydan.erp.contabilidad.util.FacturaProveedorServicioParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.FacturaProveedorServicioParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.FacturaProveedorServicioBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class FacturaProveedorServicioBeanSwingJInternalFrame extends FacturaProveedorServicioJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(FacturaProveedorServicioBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<FacturaProveedorServicio> facturaproveedorservicioValidator = new ClassValidator<FacturaProveedorServicio>(FacturaProveedorServicio.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public FacturaProveedorServicio facturaproveedorservicio;	
	public FacturaProveedorServicio facturaproveedorservicioAux;
	public FacturaProveedorServicio facturaproveedorservicioAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public FacturaProveedorServicio facturaproveedorservicioTotales;
	public Long idFacturaProveedorServicioActual;
	public Long iIdNuevoFacturaProveedorServicio=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTipoDocumento="";

	public List<TipoDocumento> tipodocumentosForeignKey;

	public List<TipoDocumento> gettipodocumentosForeignKey() {
		return tipodocumentosForeignKey;
	}

	public void settipodocumentosForeignKey(List<TipoDocumento> tipodocumentosForeignKey) {
		this.tipodocumentosForeignKey = tipodocumentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDocumento tipodocumentoForeignKey;

	public TipoDocumento gettipodocumentoForeignKey() {
		return tipodocumentoForeignKey;
	}

	public void settipodocumentoForeignKey(TipoDocumento tipodocumentoForeignKey) {
		this.tipodocumentoForeignKey = tipodocumentoForeignKey;
	}

	public String sFinalQueryComboEmpleadoSolicita="";

	public List<Empleado> empleadosolicitasForeignKey;

	public List<Empleado> getempleadosolicitasForeignKey() {
		return empleadosolicitasForeignKey;
	}

	public void setempleadosolicitasForeignKey(List<Empleado> empleadosolicitasForeignKey) {
		this.empleadosolicitasForeignKey = empleadosolicitasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadosolicitaForeignKey;

	public Empleado getempleadosolicitaForeignKey() {
		return empleadosolicitaForeignKey;
	}

	public void setempleadosolicitaForeignKey(Empleado empleadosolicitaForeignKey) {
		this.empleadosolicitaForeignKey = empleadosolicitaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboTipoTributario="";

	public List<TipoTributario> tipotributariosForeignKey;

	public List<TipoTributario> gettipotributariosForeignKey() {
		return tipotributariosForeignKey;
	}

	public void settipotributariosForeignKey(List<TipoTributario> tipotributariosForeignKey) {
		this.tipotributariosForeignKey = tipotributariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTributario tipotributarioForeignKey;

	public TipoTributario gettipotributarioForeignKey() {
		return tipotributarioForeignKey;
	}

	public void settipotributarioForeignKey(TipoTributario tipotributarioForeignKey) {
		this.tipotributarioForeignKey = tipotributarioForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboTipoRetencionFuente1="";

	public List<TipoRetencion> tiporetencionfuente1sForeignKey;

	public List<TipoRetencion> gettiporetencionfuente1sForeignKey() {
		return tiporetencionfuente1sForeignKey;
	}

	public void settiporetencionfuente1sForeignKey(List<TipoRetencion> tiporetencionfuente1sForeignKey) {
		this.tiporetencionfuente1sForeignKey = tiporetencionfuente1sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionfuente1ForeignKey;

	public TipoRetencion gettiporetencionfuente1ForeignKey() {
		return tiporetencionfuente1ForeignKey;
	}

	public void settiporetencionfuente1ForeignKey(TipoRetencion tiporetencionfuente1ForeignKey) {
		this.tiporetencionfuente1ForeignKey = tiporetencionfuente1ForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIva1="";

	public List<TipoRetencion> tiporetencioniva1sForeignKey;

	public List<TipoRetencion> gettiporetencioniva1sForeignKey() {
		return tiporetencioniva1sForeignKey;
	}

	public void settiporetencioniva1sForeignKey(List<TipoRetencion> tiporetencioniva1sForeignKey) {
		this.tiporetencioniva1sForeignKey = tiporetencioniva1sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencioniva1ForeignKey;

	public TipoRetencion gettiporetencioniva1ForeignKey() {
		return tiporetencioniva1ForeignKey;
	}

	public void settiporetencioniva1ForeignKey(TipoRetencion tiporetencioniva1ForeignKey) {
		this.tiporetencioniva1ForeignKey = tiporetencioniva1ForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoFiscalServicios="";

	public List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey;

	public List<CuentaContable> getcuentacontablecreditofiscalserviciossForeignKey() {
		return cuentacontablecreditofiscalserviciossForeignKey;
	}

	public void setcuentacontablecreditofiscalserviciossForeignKey(List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey) {
		this.cuentacontablecreditofiscalserviciossForeignKey = cuentacontablecreditofiscalserviciossForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditofiscalserviciosForeignKey;

	public CuentaContable getcuentacontablecreditofiscalserviciosForeignKey() {
		return cuentacontablecreditofiscalserviciosForeignKey;
	}

	public void setcuentacontablecreditofiscalserviciosForeignKey(CuentaContable cuentacontablecreditofiscalserviciosForeignKey) {
		this.cuentacontablecreditofiscalserviciosForeignKey = cuentacontablecreditofiscalserviciosForeignKey;
	}

	public String sFinalQueryComboTipoMovimiento="";

	public List<TipoMovimiento> tipomovimientosForeignKey;

	public List<TipoMovimiento> gettipomovimientosForeignKey() {
		return tipomovimientosForeignKey;
	}

	public void settipomovimientosForeignKey(List<TipoMovimiento> tipomovimientosForeignKey) {
		this.tipomovimientosForeignKey = tipomovimientosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimiento tipomovimientoForeignKey;

	public TipoMovimiento gettipomovimientoForeignKey() {
		return tipomovimientoForeignKey;
	}

	public void settipomovimientoForeignKey(TipoMovimiento tipomovimientoForeignKey) {
		this.tipomovimientoForeignKey = tipomovimientoForeignKey;
	}

	public String sFinalQueryComboTipoMovimientoModulo="";

	public List<TipoMovimientoModulo> tipomovimientomodulosForeignKey;

	public List<TipoMovimientoModulo> gettipomovimientomodulosForeignKey() {
		return tipomovimientomodulosForeignKey;
	}

	public void settipomovimientomodulosForeignKey(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey) {
		this.tipomovimientomodulosForeignKey = tipomovimientomodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimientoModulo tipomovimientomoduloForeignKey;

	public TipoMovimientoModulo gettipomovimientomoduloForeignKey() {
		return tipomovimientomoduloForeignKey;
	}

	public void settipomovimientomoduloForeignKey(TipoMovimientoModulo tipomovimientomoduloForeignKey) {
		this.tipomovimientomoduloForeignKey = tipomovimientomoduloForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idEmpleadoSolicitaActual=0L;

	public Long getidEmpleadoSolicitaActual() {
		return idEmpleadoSolicitaActual;
	}

	public void setidEmpleadoSolicitaActual(Long idEmpleadoSolicitaActual) {
		this.idEmpleadoSolicitaActual= idEmpleadoSolicitaActual;
	}
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoFacturaProveedorServicio;
	public Boolean isPermisoNuevoFacturaProveedorServicio;
	public Boolean isPermisoActualizarFacturaProveedorServicio;
	public Boolean isPermisoActualizarOriginalFacturaProveedorServicio;
	public Boolean isPermisoEliminarFacturaProveedorServicio;
	public Boolean isPermisoGuardarCambiosFacturaProveedorServicio;
	public Boolean isPermisoConsultaFacturaProveedorServicio;
	public Boolean isPermisoBusquedaFacturaProveedorServicio;
	public Boolean isPermisoReporteFacturaProveedorServicio;
	public Boolean isPermisoPaginacionMedioFacturaProveedorServicio;
	public Boolean isPermisoPaginacionAltoFacturaProveedorServicio;
	public Boolean isPermisoPaginacionTodoFacturaProveedorServicio;
	public Boolean isPermisoCopiarFacturaProveedorServicio;
	public Boolean isPermisoVerFormFacturaProveedorServicio;
	public Boolean isPermisoDuplicarFacturaProveedorServicio;
	public Boolean isPermisoOrdenFacturaProveedorServicio;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioReturnGeneral;
	public FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoFacturaProveedorServicio=false;
	public Boolean esParaAccionDesdeFormularioFacturaProveedorServicio=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected FacturaProveedorServicioSessionBeanAdditional facturaproveedorservicioSessionBeanAdditional=null;
	
	public FacturaProveedorServicioSessionBeanAdditional getFacturaProveedorServicioSessionBeanAdditional() {
		return this.facturaproveedorservicioSessionBeanAdditional;
	}
	
	public void setFacturaProveedorServicioSessionBeanAdditional(FacturaProveedorServicioSessionBeanAdditional facturaproveedorservicioSessionBeanAdditional) {
		try {
			this.facturaproveedorservicioSessionBeanAdditional=facturaproveedorservicioSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected FacturaProveedorServicioBeanSwingJInternalFrameAdditional facturaproveedorservicioBeanSwingJInternalFrameAdditional=null;
	//public class FacturaProveedorServicioBeanSwingJInternalFrame
	
	public FacturaProveedorServicioBeanSwingJInternalFrameAdditional getFacturaProveedorServicioBeanSwingJInternalFrameAdditional() {
		return this.facturaproveedorservicioBeanSwingJInternalFrameAdditional;
	}
	
	public void setFacturaProveedorServicioBeanSwingJInternalFrameAdditional(FacturaProveedorServicioBeanSwingJInternalFrameAdditional facturaproveedorservicioBeanSwingJInternalFrameAdditional) {
		try {
			this.facturaproveedorservicioBeanSwingJInternalFrameAdditional=facturaproveedorservicioBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public FacturaProveedorServicioLogic facturaproveedorservicioLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public FacturaProveedorServicio facturaproveedorservicioBean;
	public FacturaProveedorServicioConstantesFunciones facturaproveedorservicioConstantesFunciones;
	//public FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public ModuloLogic moduloLogic;
	public TransaccionLogic transaccionLogic;
	public FacturaLogic facturaLogic;
	public ClienteLogic clienteLogic;
	public TipoDocumentoLogic tipodocumentoLogic;
	public EmpleadoLogic empleadosolicitaLogic;
	public EmpleadoLogic empleadoLogic;
	public TipoTributarioLogic tipotributarioLogic;
	public MonedaLogic monedaLogic;
	public TipoRetencionLogic tiporetencionfuente1Logic;
	public TipoRetencionLogic tiporetencioniva1Logic;
	public CuentaContableLogic cuentacontablecreditofiscalserviciosLogic;
	public TipoMovimientoLogic tipomovimientoLogic;
	public TipoMovimientoModuloLogic tipomovimientomoduloLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	
	//PARAMETROS
	
	
	//public List<FacturaProveedorServicio> facturaproveedorservicios;	
	//public List<FacturaProveedorServicio> facturaproveedorserviciosEliminados;
	//public List<FacturaProveedorServicio> facturaproveedorserviciosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaDuplicarFacturaProveedorServicio=true;
	public Boolean isVisibilidadCeldaCopiarFacturaProveedorServicio=true;
	public Boolean isVisibilidadCeldaVerFormFacturaProveedorServicio=true;
	public Boolean isVisibilidadCeldaOrdenFacturaProveedorServicio=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaModificarFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaCancelarFacturaProveedorServicio=false;
	public Boolean isVisibilidadCeldaGuardarFacturaProveedorServicio=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpleadoSolicita=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoDocumento=false;
	public Boolean isVisibilidadFK_IdTipoMovimiento=false;
	public Boolean isVisibilidadFK_IdTipoMovimientoModulo=false;
	public Boolean isVisibilidadFK_IdTipoRetencionFuente1=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIva1=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTipoTributario=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	
	public Long getiIdNuevoFacturaProveedorServicio() {
		return this.iIdNuevoFacturaProveedorServicio;
	}

	public void setiIdNuevoFacturaProveedorServicio(Long iIdNuevoFacturaProveedorServicio) {
		this.iIdNuevoFacturaProveedorServicio = iIdNuevoFacturaProveedorServicio;
	}
	
	public Long getidFacturaProveedorServicioActual() {
		return this.idFacturaProveedorServicioActual;
	}

	public void setidFacturaProveedorServicioActual(Long idFacturaProveedorServicioActual) {
		this.idFacturaProveedorServicioActual = idFacturaProveedorServicioActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public FacturaProveedorServicio getfacturaproveedorservicio() {
		return this.facturaproveedorservicio;
	}

	public void setfacturaproveedorservicio(FacturaProveedorServicio facturaproveedorservicio) {
		this.facturaproveedorservicio = facturaproveedorservicio;
	}
	
	public FacturaProveedorServicio getfacturaproveedorservicioAux() {
		return this.facturaproveedorservicioAux;
	}

	public void setfacturaproveedorservicioAux(FacturaProveedorServicio facturaproveedorservicioAux) {
		this.facturaproveedorservicioAux = facturaproveedorservicioAux;
	}				
	
	public FacturaProveedorServicio getfacturaproveedorservicioAnterior() {
		return this.facturaproveedorservicioAnterior;
	}

	public void setfacturaproveedorservicioAnterior(FacturaProveedorServicio facturaproveedorservicioAnterior) {
		this.facturaproveedorservicioAnterior = facturaproveedorservicioAnterior;
	}	
	
	public FacturaProveedorServicio getfacturaproveedorservicioTotales() {
		return this.facturaproveedorservicioTotales;
	}

	public void setfacturaproveedorservicioTotales(FacturaProveedorServicio facturaproveedorservicioTotales) {
		this.facturaproveedorservicioTotales = facturaproveedorservicioTotales;
	}	
	
	public FacturaProveedorServicio getfacturaproveedorservicioBean() {
		return this.facturaproveedorservicioBean;
	}

	public void setfacturaproveedorservicioBean(FacturaProveedorServicio facturaproveedorservicioBean) {
		this.facturaproveedorservicioBean = facturaproveedorservicioBean;
	}	
	
	public FacturaProveedorServicioParameterReturnGeneral getfacturaproveedorservicioReturnGeneral() {
		return this.facturaproveedorservicioReturnGeneral;
	}

	public void setfacturaproveedorservicioReturnGeneral(FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioReturnGeneral) {
		this.facturaproveedorservicioReturnGeneral = facturaproveedorservicioReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios=-1L;

	public Long getid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios() {
		return this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios;
	}

	public void setid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios(Long id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios) {
		this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios = id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=null;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empleado_solicitaFK_IdEmpleadoSolicita=-1L;

	public Long getid_empleado_solicitaFK_IdEmpleadoSolicita() {
		return this.id_empleado_solicitaFK_IdEmpleadoSolicita;
	}

	public void setid_empleado_solicitaFK_IdEmpleadoSolicita(Long id_empleado_solicitaFK_IdEmpleadoSolicita) {
		this.id_empleado_solicitaFK_IdEmpleadoSolicita = id_empleado_solicitaFK_IdEmpleadoSolicita;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_facturaFK_IdFactura=null;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_documentoFK_IdTipoDocumento=-1L;

	public Long getid_tipo_documentoFK_IdTipoDocumento() {
		return this.id_tipo_documentoFK_IdTipoDocumento;
	}

	public void setid_tipo_documentoFK_IdTipoDocumento(Long id_tipo_documentoFK_IdTipoDocumento) {
		this.id_tipo_documentoFK_IdTipoDocumento = id_tipo_documentoFK_IdTipoDocumento;
	}

	public Long id_tipo_movimientoFK_IdTipoMovimiento=null;

	public Long getid_tipo_movimientoFK_IdTipoMovimiento() {
		return this.id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public void setid_tipo_movimientoFK_IdTipoMovimiento(Long id_tipo_movimientoFK_IdTipoMovimiento) {
		this.id_tipo_movimientoFK_IdTipoMovimiento = id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=null;

	public Long getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo() {
		return this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public void setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo) {
		this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo = id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public Long id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1=-1L;

	public Long getid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1() {
		return this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1;
	}

	public void setid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1(Long id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1) {
		this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1 = id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1;
	}

	public Long id_tipo_retencion_iva1FK_IdTipoRetencionIva1=-1L;

	public Long getid_tipo_retencion_iva1FK_IdTipoRetencionIva1() {
		return this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1;
	}

	public void setid_tipo_retencion_iva1FK_IdTipoRetencionIva1(Long id_tipo_retencion_iva1FK_IdTipoRetencionIva1) {
		this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1 = id_tipo_retencion_iva1FK_IdTipoRetencionIva1;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_tipo_tributarioFK_IdTipoTributario=null;

	public Long getid_tipo_tributarioFK_IdTipoTributario() {
		return this.id_tipo_tributarioFK_IdTipoTributario;
	}

	public void setid_tipo_tributarioFK_IdTipoTributario(Long id_tipo_tributarioFK_IdTipoTributario) {
		this.id_tipo_tributarioFK_IdTipoTributario = id_tipo_tributarioFK_IdTipoTributario;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public FacturaProveedorServicioLogic getFacturaProveedorServicioLogic()	{		
		return facturaproveedorservicioLogic;
	}

	public void setFacturaProveedorServicioLogic(FacturaProveedorServicioLogic facturaproveedorservicioLogic) {
		this.facturaproveedorservicioLogic = facturaproveedorservicioLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoFacturaProveedorServicio() {
		return isEsNuevoFacturaProveedorServicio;
	}

	public void setIsEsNuevoFacturaProveedorServicio(Boolean isEsNuevoFacturaProveedorServicio) {
		this.isEsNuevoFacturaProveedorServicio = isEsNuevoFacturaProveedorServicio;
	}

	public Boolean getEsParaAccionDesdeFormularioFacturaProveedorServicio() {
		return esParaAccionDesdeFormularioFacturaProveedorServicio;
	}
	
	public void setEsParaAccionDesdeFormularioFacturaProveedorServicio(Boolean esParaAccionDesdeFormularioFacturaProveedorServicio) {
		this.esParaAccionDesdeFormularioFacturaProveedorServicio = esParaAccionDesdeFormularioFacturaProveedorServicio;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Anio anioNulo = new Anio();

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.aniosForeignKey.add(0, anioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Factura facturaNulo = new Factura();

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.facturasForeignKey.add(0, facturaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDocumentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDocumentoLogic tipodocumentoLogic=new TipoDocumentoLogic();

			//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

					tipodocumentoLogic.getTodosTipoDocumentosWithConnection(sFinalQuery,new Pagination());

					this.tipodocumentosForeignKey=tipodocumentoLogic.getTipoDocumentos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDocumento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodocumentoLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoDocumentoActual());
					this.tipodocumentosForeignKey.add(tipodocumentoLogic.getTipoDocumento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadoSolicitasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosolicitasForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadosolicitaLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosolicitasForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleadoSolicita(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidEmpleadoSolicitaActual());
					this.empleadosolicitasForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTributariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTributario tipotributarioNulo = new TipoTributario();

			TipoTributarioLogic tipotributarioLogic=new TipoTributarioLogic();

			//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

					tipotributarioLogic.getTodosTipoTributariosWithConnection(sFinalQuery,new Pagination());

					this.tipotributariosForeignKey=tipotributarioLogic.getTipoTributarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipotributariosForeignKey.add(0, tipotributarioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTributario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotributarioLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoTributarioActual());
					this.tipotributariosForeignKey.add(tipotributarioLogic.getTipoTributario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionFuente1sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionfuente1Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionfuente1sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionFuente1(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoRetencionFuente1Actual());
					this.tiporetencionfuente1sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIva1sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencioniva1Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencioniva1sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIva1(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoRetencionIva1Actual());
					this.tiporetencioniva1sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditofiscalserviciosLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditofiscalserviciossForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoFiscalServicios(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidCuentaContableCreditoFiscalServiciosActual());
					this.cuentacontablecreditofiscalserviciossForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoLogic tipomovimientoLogic=new TipoMovimientoLogic();

			//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

					tipomovimientoLogic.getTodosTipoMovimientosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientosForeignKey=tipomovimientoLogic.getTipoMovimientos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimiento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientoLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoMovimientoActual());
					this.tipomovimientosForeignKey.add(tipomovimientoLogic.getTipoMovimiento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientoModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoModuloLogic tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();

			//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

					tipomovimientomoduloLogic.getTodosTipoMovimientoModulosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientomodulosForeignKey=tipomovimientomoduloLogic.getTipoMovimientoModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimientoModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientomoduloLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoMovimientoModuloActual());
					this.tipomovimientomodulosForeignKey.add(tipomovimientomoduloLogic.getTipoMovimientoModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(facturaproveedorservicioSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaFacturaProveedorServicio.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaFacturaProveedorServicioGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaFacturaProveedorServicioGenerico!=null && jComboBoxid_empresaFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_empresaFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalFacturaProveedorServicio.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalFacturaProveedorServicioGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalFacturaProveedorServicioGenerico!=null && jComboBoxid_sucursalFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_sucursalFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioFacturaProveedorServicioGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioFacturaProveedorServicioGenerico!=null && jComboBoxid_ejercicioFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoFacturaProveedorServicio.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoFacturaProveedorServicioGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoFacturaProveedorServicioGenerico!=null && jComboBoxid_periodoFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_periodoFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioFacturaProveedorServicio.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioFacturaProveedorServicioGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioFacturaProveedorServicioGenerico!=null && jComboBoxid_anioFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_anioFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesFacturaProveedorServicio.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesFacturaProveedorServicioGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesFacturaProveedorServicioGenerico!=null && jComboBoxid_mesFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_mesFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloFacturaProveedorServicio.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloFacturaProveedorServicioGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloFacturaProveedorServicioGenerico!=null && jComboBoxid_moduloFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_moduloFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionFacturaProveedorServicio.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio!=null) {
						jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionFacturaProveedorServicioGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionFacturaProveedorServicioGenerico!=null && jComboBoxid_transaccionFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_transaccionFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaFacturaProveedorServicio.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaFacturaProveedorServicioGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaFacturaProveedorServicioGenerico!=null && jComboBoxid_facturaFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_facturaFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteFacturaProveedorServicio.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio!=null) {
						jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio!=null) {
							//jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteFacturaProveedorServicioGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteFacturaProveedorServicioGenerico!=null && jComboBoxid_clienteFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_clienteFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDocumentoForeignKey(Long idTipoDocumentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodocumentoTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoDocumento(tipodocumentoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedItem(tipodocumentoTemp);
					}
				} else {
					//jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedItem(tipodocumentoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodocumentoTemp!=null && jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio!=null) {
						jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.setSelectedItem(tipodocumentoTemp);
					} else {
						if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.setSelectedItem(tipodocumentoTemp);
							if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDocumentoForeignKeyDescripcion(Long idTipoDocumentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}


			sDescripcion=TipoDocumentoConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDocumentoForeignKeyGenerico(Long idTipoDocumentoSeleccionado,JComboBox jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(tipodocumentoTemp!=null) {
				jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico.setSelectedItem(tipodocumentoTemp);
			} else {
				if(jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoSolicitaForeignKey(Long idEmpleadoSolicitaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadosolicitaTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setEmpleadoSolicita(empleadosolicitaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedItem(empleadosolicitaTemp);
					}
				} else {
					//jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedItem(empleadosolicitaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoSolicitaForeignKeyDescripcion(Long idEmpleadoSolicitaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadosolicitaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoSolicitaForeignKeyGenerico(Long idEmpleadoSolicitaSeleccionado,JComboBox jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}

			if(empleadosolicitaTemp!=null) {
				jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico.setSelectedItem(empleadosolicitaTemp);
			} else {
				if(jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico!=null && jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoFacturaProveedorServicio.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoFacturaProveedorServicioGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoFacturaProveedorServicioGenerico!=null && jComboBoxid_empleadoFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_empleadoFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTributarioForeignKey(Long idTipoTributarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotributarioTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoTributario(tipotributarioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedItem(tipotributarioTemp);
					}
				} else {
					//jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedItem(tipotributarioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotributarioTemp!=null && jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio!=null) {
						jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.setSelectedItem(tipotributarioTemp);
					} else {
						if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.setSelectedItem(tipotributarioTemp);
							if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTributarioForeignKeyDescripcion(Long idTipoTributarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}


			sDescripcion=TipoTributarioConstantesFunciones.getTipoTributarioDescripcion(tipotributarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTributarioForeignKeyGenerico(Long idTipoTributarioSeleccionado,JComboBox jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(tipotributarioTemp!=null) {
				jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico.setSelectedItem(tipotributarioTemp);
			} else {
				if(jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaFacturaProveedorServicio.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaFacturaProveedorServicioGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaFacturaProveedorServicioGenerico!=null && jComboBoxid_monedaFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_monedaFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionFuente1ForeignKey(Long idTipoRetencionFuente1Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionfuente1Temp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoRetencionFuente1(tiporetencionfuente1Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuente1") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionfuente1Temp!=null && jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio!=null) {
						jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1Temp);
					} else {
						if(jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1Temp);
							if(jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionFuente1ForeignKeyDescripcion(Long idTipoRetencionFuente1Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionfuente1Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionFuente1ForeignKeyGenerico(Long idTipoRetencionFuente1Seleccionado,JComboBox jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}

			if(tiporetencionfuente1Temp!=null) {
				jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico.setSelectedItem(tiporetencionfuente1Temp);
			} else {
				if(jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIva1ForeignKey(Long idTipoRetencionIva1Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencioniva1Temp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoRetencionIva1(tiporetencioniva1Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva1") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencioniva1Temp!=null && jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio!=null) {
						jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1Temp);
					} else {
						if(jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1Temp);
							if(jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIva1ForeignKeyDescripcion(Long idTipoRetencionIva1Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencioniva1Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIva1ForeignKeyGenerico(Long idTipoRetencionIva1Seleccionado,JComboBox jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}

			if(tiporetencioniva1Temp!=null) {
				jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico.setSelectedItem(tiporetencioniva1Temp);
			} else {
				if(jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoFiscalServiciosForeignKey(Long idCuentaContableCreditoFiscalServiciosSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditofiscalserviciosTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setCuentaContableCreditoFiscalServicios(cuentacontablecreditofiscalserviciosTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditofiscalserviciosTemp!=null && jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio!=null) {
						jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					} else {
						if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio!=null) {
							//jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
							if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion(Long idCuentaContableCreditoFiscalServiciosSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditofiscalserviciosTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoFiscalServiciosForeignKeyGenerico(Long idCuentaContableCreditoFiscalServiciosSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}

			if(cuentacontablecreditofiscalserviciosTemp!=null) {
				jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico!=null && jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoForeignKey(Long idTipoMovimientoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientoTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoMovimiento(tipomovimientoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedItem(tipomovimientoTemp);
					}
				} else {
					//jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedItem(tipomovimientoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoForeignKeyDescripcion(Long idTipoMovimientoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoForeignKeyGenerico(Long idTipoMovimientoSeleccionado,JComboBox jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(tipomovimientoTemp!=null) {
				jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico.setSelectedItem(tipomovimientoTemp);
			} else {
				if(jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoModuloForeignKey(Long idTipoMovimientoModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientomoduloTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoMovimientoModulo(tipomovimientomoduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedItem(tipomovimientomoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedItem(tipomovimientomoduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipomovimientomoduloTemp!=null && jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio!=null) {
						jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.setSelectedItem(tipomovimientomoduloTemp);
					} else {
						if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.setSelectedItem(tipomovimientomoduloTemp);
							if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoModuloForeignKeyDescripcion(Long idTipoMovimientoModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoModuloConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoModuloForeignKeyGenerico(Long idTipoMovimientoModuloSeleccionado,JComboBox jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(tipomovimientomoduloTemp!=null) {
				jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico.setSelectedItem(tipomovimientomoduloTemp);
			} else {
				if(jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.facturaproveedorservicio!=null) {
						this.facturaproveedorservicio.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico!=null && jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_empresaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaFacturaProveedorServicioGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				facturaproveedorservicio.setid_empresa(empresaAux.getId());
				facturaproveedorservicio.setempresa_descripcion(FacturaProveedorServicioConstantesFunciones.getEmpresaDescripcion(empresaAux));
				facturaproveedorservicio.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_sucursalFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalFacturaProveedorServicioGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				facturaproveedorservicio.setid_sucursal(sucursalAux.getId());
				facturaproveedorservicio.setsucursal_descripcion(FacturaProveedorServicioConstantesFunciones.getSucursalDescripcion(sucursalAux));
				facturaproveedorservicio.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_ejercicioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioFacturaProveedorServicioGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				facturaproveedorservicio.setid_ejercicio(ejercicioAux.getId());
				facturaproveedorservicio.setejercicio_descripcion(FacturaProveedorServicioConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				facturaproveedorservicio.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_periodoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoFacturaProveedorServicioGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				facturaproveedorservicio.setid_periodo(periodoAux.getId());
				facturaproveedorservicio.setperiodo_descripcion(FacturaProveedorServicioConstantesFunciones.getPeriodoDescripcion(periodoAux));
				facturaproveedorservicio.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_anioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioFacturaProveedorServicioGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				facturaproveedorservicio.setid_anio(anioAux.getId());
				facturaproveedorservicio.setanio_descripcion(FacturaProveedorServicioConstantesFunciones.getAnioDescripcion(anioAux));
				facturaproveedorservicio.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_mesFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesFacturaProveedorServicioGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				facturaproveedorservicio.setid_mes(mesAux.getId());
				facturaproveedorservicio.setmes_descripcion(FacturaProveedorServicioConstantesFunciones.getMesDescripcion(mesAux));
				facturaproveedorservicio.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloFacturaProveedorServicioGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				facturaproveedorservicio.setid_modulo(moduloAux.getId());
				facturaproveedorservicio.setmodulo_descripcion(FacturaProveedorServicioConstantesFunciones.getModuloDescripcion(moduloAux));
				facturaproveedorservicio.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_transaccionFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionFacturaProveedorServicioGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				facturaproveedorservicio.setid_transaccion(transaccionAux.getId());
				facturaproveedorservicio.settransaccion_descripcion(FacturaProveedorServicioConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				facturaproveedorservicio.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_facturaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaFacturaProveedorServicioGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(facturaAux!=null) {
				facturaproveedorservicio.setid_factura(facturaAux.getId());
				facturaproveedorservicio.setfactura_descripcion(FacturaProveedorServicioConstantesFunciones.getFacturaDescripcion(facturaAux));
				facturaproveedorservicio.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_clienteFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteFacturaProveedorServicioGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				facturaproveedorservicio.setid_cliente(clienteAux.getId());
				facturaproveedorservicio.setcliente_descripcion(FacturaProveedorServicioConstantesFunciones.getClienteDescripcion(clienteAux));
				facturaproveedorservicio.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDocumentoForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoAux=new TipoDocumento();

			if(jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico==null) {
				tipodocumentoAux=(TipoDocumento)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.getSelectedItem();
			} else {
				tipodocumentoAux=(TipoDocumento)jComboBoxid_tipo_documentoFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tipodocumentoAux!=null && tipodocumentoAux.getId()!=null) {
				facturaproveedorservicio.setid_tipo_documento(tipodocumentoAux.getId());
				facturaproveedorservicio.settipodocumento_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoAux));
				facturaproveedorservicio.setTipoDocumento(tipodocumentoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoSolicitaForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleado_solicitaFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				facturaproveedorservicio.setid_empleado_solicita(empleadoAux.getId());
				facturaproveedorservicio.setempleadosolicita_descripcion(FacturaProveedorServicioConstantesFunciones.getEmpleadoSolicitaDescripcion(empleadoAux));
				facturaproveedorservicio.setEmpleadoSolicita(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_empleadoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoFacturaProveedorServicioGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(empleadoAux!=null) {
				facturaproveedorservicio.setid_empleado(empleadoAux.getId());
				facturaproveedorservicio.setempleado_descripcion(FacturaProveedorServicioConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				facturaproveedorservicio.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTributarioForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioAux=new TipoTributario();

			if(jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico==null) {
				tipotributarioAux=(TipoTributario)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.getSelectedItem();
			} else {
				tipotributarioAux=(TipoTributario)jComboBoxid_tipo_tributarioFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tipotributarioAux!=null) {
				facturaproveedorservicio.setid_tipo_tributario(tipotributarioAux.getId());
				facturaproveedorservicio.settipotributario_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoTributarioDescripcion(tipotributarioAux));
				facturaproveedorservicio.setTipoTributario(tipotributarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_monedaFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaFacturaProveedorServicioGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				facturaproveedorservicio.setid_moneda(monedaAux.getId());
				facturaproveedorservicio.setmoneda_descripcion(FacturaProveedorServicioConstantesFunciones.getMonedaDescripcion(monedaAux));
				facturaproveedorservicio.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionFuente1ForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedorservicio.setid_tipo_retencion_fuente1(tiporetencionAux.getId());
				facturaproveedorservicio.settiporetencionfuente1_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoRetencionFuente1Descripcion(tiporetencionAux));
				facturaproveedorservicio.setTipoRetencionFuente1(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIva1ForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_iva1FacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedorservicio.setid_tipo_retencion_iva1(tiporetencionAux.getId());
				facturaproveedorservicio.settiporetencioniva1_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoRetencionIva1Descripcion(tiporetencionAux));
				facturaproveedorservicio.setTipoRetencionIva1(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoFiscalServiciosForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				facturaproveedorservicio.setid_cuenta_contable_credito_fiscal_servicios(cuentacontableAux.getId());
				facturaproveedorservicio.setcuentacontablecreditofiscalservicios_descripcion(FacturaProveedorServicioConstantesFunciones.getCuentaContableCreditoFiscalServiciosDescripcion(cuentacontableAux));
				facturaproveedorservicio.setCuentaContableCreditoFiscalServicios(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoAux=new TipoMovimiento();

			if(jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico==null) {
				tipomovimientoAux=(TipoMovimiento)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.getSelectedItem();
			} else {
				tipomovimientoAux=(TipoMovimiento)jComboBoxid_tipo_movimientoFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tipomovimientoAux!=null) {
				facturaproveedorservicio.setid_tipo_movimiento(tipomovimientoAux.getId());
				facturaproveedorservicio.settipomovimiento_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoAux));
				facturaproveedorservicio.setTipoMovimiento(tipomovimientoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoModuloForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloAux=new TipoMovimientoModulo();

			if(jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico==null) {
				tipomovimientomoduloAux=(TipoMovimientoModulo)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.getSelectedItem();
			} else {
				tipomovimientomoduloAux=(TipoMovimientoModulo)jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tipomovimientomoduloAux!=null) {
				facturaproveedorservicio.setid_tipo_movimiento_modulo(tipomovimientomoduloAux.getId());
				facturaproveedorservicio.settipomovimientomodulo_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloAux));
				facturaproveedorservicio.setTipoMovimientoModulo(tipomovimientomoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(FacturaProveedorServicio facturaproveedorservicio,JComboBox jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicioGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				facturaproveedorservicio.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				facturaproveedorservicio.settipotransaccionmodulo_descripcion(FacturaProveedorServicioConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				facturaproveedorservicio.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.addItem(transaccion);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.addItem(cliente);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDocumentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDocumento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.addItem(tipodocumento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.addItem(tipodocumento);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadoSolicitasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.removeAllItems();

							for(Empleado empleadosolicita:this.empleadosolicitasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.addItem(empleadosolicita);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.addItem(empleado);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTributariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTributario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.addItem(tipotributario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.addItem(tipotributario);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionFuente1sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.removeAllItems();

							for(TipoRetencion tiporetencionfuente1:this.tiporetencionfuente1sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.addItem(tiporetencionfuente1);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuente1") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.removeAllItems();

							for(TipoRetencion tiporetencionfuente1:this.tiporetencionfuente1sForeignKey) {
								this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.addItem(tiporetencionfuente1);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIva1sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.removeAllItems();

							for(TipoRetencion tiporetencioniva1:this.tiporetencioniva1sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.addItem(tiporetencioniva1);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva1") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.removeAllItems();

							for(TipoRetencion tiporetencioniva1:this.tiporetencioniva1sForeignKey) {
								this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.addItem(tiporetencioniva1);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalservicios:this.cuentacontablecreditofiscalserviciossForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.addItem(cuentacontablecreditofiscalservicios);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalservicios:this.cuentacontablecreditofiscalserviciossForeignKey) {
								this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.addItem(cuentacontablecreditofiscalservicios);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimiento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.removeAllItems();

							for(TipoMovimiento tipomovimiento:this.tipomovimientosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.addItem(tipomovimiento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientoModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimientoModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.addItem(tipomovimientomodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.addItem(tipomovimientomodulo);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { 
					}

					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.addItem(tipotransaccionmodulo);
							}
						}

						if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDocumentoForeignKey(TipoDocumento tipodocumento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedItem(tipodocumento);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.setSelectedItem(tipodocumento);
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoSolicitaForeignKey(Empleado empleadosolicita,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedItem(empleadosolicita);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTributarioForeignKey(TipoTributario tipotributario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedItem(tipotributario);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.setSelectedItem(tipotributario);
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionFuente1ForeignKey(TipoRetencion tiporetencionfuente1,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.setSelectedItem(tiporetencionfuente1);
						} else {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIva1ForeignKey(TipoRetencion tiporetencioniva1,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.setSelectedItem(tiporetencioniva1);
						} else {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoFiscalServiciosForeignKey(CuentaContable cuentacontablecreditofiscalservicios,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalservicios);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.setSelectedItem(cuentacontablecreditofiscalservicios);
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoForeignKey(TipoMovimiento tipomovimiento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedItem(tipomovimiento);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoModuloForeignKey(TipoMovimientoModulo tipomovimientomodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedItem(tipomovimientomodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.setSelectedItem(tipomovimientomodulo);
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesFacturaProveedorServicio() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			FacturaProveedorServicioConstantesFunciones.refrescarForeignKeysDescripcionesFacturaProveedorServicio(this.facturaproveedorservicioLogic.getFacturaProveedorServicios());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			FacturaProveedorServicioConstantesFunciones.refrescarForeignKeysDescripcionesFacturaProveedorServicio(this.facturaproveedorservicios);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(TipoDocumento.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(TipoTributario.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoRetencion.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(TipoMovimiento.class));
		classes.add(new Classe(TipoMovimientoModulo.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//facturaproveedorservicioLogic.setFacturaProveedorServicios(this.facturaproveedorservicios);
			facturaproveedorservicioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public FacturaProveedorServicioParameterReturnGeneral getFacturaProveedorServicioParameterGeneral() {
		return this.facturaproveedorservicioParameterGeneral;
	}
	
	public void setFacturaProveedorServicioParameterGeneral(FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioParameterGeneral) {
		this.facturaproveedorservicioParameterGeneral = facturaproveedorservicioParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoFacturaProveedorServicio() {
		return isPermisoTodoFacturaProveedorServicio;
	}

	public void setIsPermisoTodoFacturaProveedorServicio(Boolean isPermisoTodoFacturaProveedorServicio) {
		this.isPermisoTodoFacturaProveedorServicio = isPermisoTodoFacturaProveedorServicio;
	}

	public Boolean getIsPermisoNuevoFacturaProveedorServicio() {
		return isPermisoNuevoFacturaProveedorServicio;
	}

	public void setIsPermisoNuevoFacturaProveedorServicio(Boolean isPermisoNuevoFacturaProveedorServicio) {
		this.isPermisoNuevoFacturaProveedorServicio = isPermisoNuevoFacturaProveedorServicio;
	}

	public Boolean getIsPermisoActualizarFacturaProveedorServicio() {
		return isPermisoActualizarFacturaProveedorServicio;
	}

	public void setIsPermisoActualizarFacturaProveedorServicio(Boolean isPermisoActualizarFacturaProveedorServicio) {
		this.isPermisoActualizarFacturaProveedorServicio = isPermisoActualizarFacturaProveedorServicio;
	}

	public Boolean getIsPermisoEliminarFacturaProveedorServicio() {
		return isPermisoEliminarFacturaProveedorServicio;
	}

	public void setIsPermisoEliminarFacturaProveedorServicio(Boolean isPermisoEliminarFacturaProveedorServicio) {
		this.isPermisoEliminarFacturaProveedorServicio = isPermisoEliminarFacturaProveedorServicio;
	}

	public Boolean getIsPermisoGuardarCambiosFacturaProveedorServicio() {
		return isPermisoGuardarCambiosFacturaProveedorServicio;
	}

	public void setIsPermisoGuardarCambiosFacturaProveedorServicio(Boolean isPermisoGuardarCambiosFacturaProveedorServicio) {
		this.isPermisoGuardarCambiosFacturaProveedorServicio = isPermisoGuardarCambiosFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoConsultaFacturaProveedorServicio() {
		return isPermisoConsultaFacturaProveedorServicio;
	}

	public void setIsPermisoConsultaFacturaProveedorServicio(Boolean isPermisoConsultaFacturaProveedorServicio) {
		this.isPermisoConsultaFacturaProveedorServicio = isPermisoConsultaFacturaProveedorServicio;
	}

	public Boolean getIsPermisoBusquedaFacturaProveedorServicio() {
		return isPermisoBusquedaFacturaProveedorServicio;
	}

	public void setIsPermisoBusquedaFacturaProveedorServicio(Boolean isPermisoBusquedaFacturaProveedorServicio) {
		this.isPermisoBusquedaFacturaProveedorServicio = isPermisoBusquedaFacturaProveedorServicio;
	}

	public Boolean getIsPermisoReporteFacturaProveedorServicio() {
		return isPermisoReporteFacturaProveedorServicio;
	}

	public void setIsPermisoReporteFacturaProveedorServicio(Boolean isPermisoReporteFacturaProveedorServicio) {
		this.isPermisoReporteFacturaProveedorServicio = isPermisoReporteFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoPaginacionMedioFacturaProveedorServicio() {
		return isPermisoPaginacionMedioFacturaProveedorServicio;
	}

	public void setIsPermisoPaginacionMedioFacturaProveedorServicio(Boolean isPermisoPaginacionMedioFacturaProveedorServicio) {
		this.isPermisoPaginacionMedioFacturaProveedorServicio = isPermisoPaginacionMedioFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoPaginacionTodoFacturaProveedorServicio() {
		return isPermisoPaginacionTodoFacturaProveedorServicio;
	}

	public void setIsPermisoPaginacionTodoFacturaProveedorServicio(Boolean isPermisoPaginacionTodoFacturaProveedorServicio) {
		this.isPermisoPaginacionTodoFacturaProveedorServicio = isPermisoPaginacionTodoFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoPaginacionAltoFacturaProveedorServicio() {
		return isPermisoPaginacionAltoFacturaProveedorServicio;
	}

	public void setIsPermisoPaginacionAltoFacturaProveedorServicio(Boolean isPermisoPaginacionAltoFacturaProveedorServicio) {
		this.isPermisoPaginacionAltoFacturaProveedorServicio = isPermisoPaginacionAltoFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoCopiarFacturaProveedorServicio() {
		return isPermisoCopiarFacturaProveedorServicio;
	}

	public void setIsPermisoCopiarFacturaProveedorServicio(Boolean isPermisoCopiarFacturaProveedorServicio) {
		this.isPermisoCopiarFacturaProveedorServicio = isPermisoCopiarFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoVerFormFacturaProveedorServicio() {
		return isPermisoVerFormFacturaProveedorServicio;
	}

	public void setIsPermisoVerFormFacturaProveedorServicio(Boolean isPermisoVerFormFacturaProveedorServicio) {
		this.isPermisoVerFormFacturaProveedorServicio = isPermisoVerFormFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoDuplicarFacturaProveedorServicio() {
		return isPermisoDuplicarFacturaProveedorServicio;
	}

	public void setIsPermisoDuplicarFacturaProveedorServicio(Boolean isPermisoDuplicarFacturaProveedorServicio) {
		this.isPermisoDuplicarFacturaProveedorServicio = isPermisoDuplicarFacturaProveedorServicio;
	}
	
	public Boolean getIsPermisoOrdenFacturaProveedorServicio() {
		return isPermisoOrdenFacturaProveedorServicio;
	}

	public void setIsPermisoOrdenFacturaProveedorServicio(Boolean isPermisoOrdenFacturaProveedorServicio) {
		this.isPermisoOrdenFacturaProveedorServicio = isPermisoOrdenFacturaProveedorServicio;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoFacturaProveedorServicio() {
		return isVisibilidadCeldaNuevoFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaNuevoFacturaProveedorServicio(Boolean isVisibilidadCeldaNuevoFacturaProveedorServicio) {
		this.isVisibilidadCeldaNuevoFacturaProveedorServicio = isVisibilidadCeldaNuevoFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarFacturaProveedorServicio() {
		return isVisibilidadCeldaDuplicarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaDuplicarFacturaProveedorServicio(Boolean isVisibilidadCeldaDuplicarFacturaProveedorServicio) {
		this.isVisibilidadCeldaDuplicarFacturaProveedorServicio = isVisibilidadCeldaDuplicarFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarFacturaProveedorServicio() {
		return isVisibilidadCeldaCopiarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaCopiarFacturaProveedorServicio(Boolean isVisibilidadCeldaCopiarFacturaProveedorServicio) {
		this.isVisibilidadCeldaCopiarFacturaProveedorServicio = isVisibilidadCeldaCopiarFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormFacturaProveedorServicio() {
		return isVisibilidadCeldaVerFormFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaVerFormFacturaProveedorServicio(Boolean isVisibilidadCeldaVerFormFacturaProveedorServicio) {
		this.isVisibilidadCeldaVerFormFacturaProveedorServicio = isVisibilidadCeldaVerFormFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenFacturaProveedorServicio() {
		return isVisibilidadCeldaOrdenFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaOrdenFacturaProveedorServicio(Boolean isVisibilidadCeldaOrdenFacturaProveedorServicio) {
		this.isVisibilidadCeldaOrdenFacturaProveedorServicio = isVisibilidadCeldaOrdenFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio() {
		return isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio(Boolean isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio) {
		this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio = isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaModificarFacturaProveedorServicio() {
		return isVisibilidadCeldaModificarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaModificarFacturaProveedorServicio(Boolean isVisibilidadCeldaModificarFacturaProveedorServicio) {
		this.isVisibilidadCeldaModificarFacturaProveedorServicio = isVisibilidadCeldaModificarFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarFacturaProveedorServicio() {
		return isVisibilidadCeldaActualizarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaActualizarFacturaProveedorServicio(Boolean isVisibilidadCeldaActualizarFacturaProveedorServicio) {
		this.isVisibilidadCeldaActualizarFacturaProveedorServicio = isVisibilidadCeldaActualizarFacturaProveedorServicio;
	}

	public Boolean getIsVisibilidadCeldaEliminarFacturaProveedorServicio() {
		return isVisibilidadCeldaEliminarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaEliminarFacturaProveedorServicio(Boolean isVisibilidadCeldaEliminarFacturaProveedorServicio) {
		this.isVisibilidadCeldaEliminarFacturaProveedorServicio = isVisibilidadCeldaEliminarFacturaProveedorServicio;
	}

	public Boolean getIsVisibilidadCeldaCancelarFacturaProveedorServicio() {
		return isVisibilidadCeldaCancelarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaCancelarFacturaProveedorServicio(Boolean isVisibilidadCeldaCancelarFacturaProveedorServicio) {
		this.isVisibilidadCeldaCancelarFacturaProveedorServicio = isVisibilidadCeldaCancelarFacturaProveedorServicio;
	}

	public Boolean getIsVisibilidadCeldaGuardarFacturaProveedorServicio() {
		return isVisibilidadCeldaGuardarFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaGuardarFacturaProveedorServicio(Boolean isVisibilidadCeldaGuardarFacturaProveedorServicio) {
		this.isVisibilidadCeldaGuardarFacturaProveedorServicio = isVisibilidadCeldaGuardarFacturaProveedorServicio;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosFacturaProveedorServicio() {
		return isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio;
	}

	public void setIsVisibilidadCeldaGuardarCambiosFacturaProveedorServicio(Boolean isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio) {
		this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio = isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio;
	}
		
	public FacturaProveedorServicioSessionBean getfacturaproveedorservicioSessionBean() {
		return this.facturaproveedorservicioSessionBean;
	}
	
	public void setfacturaproveedorservicioSessionBean(FacturaProveedorServicioSessionBean facturaproveedorservicioSessionBean) {
		this.facturaproveedorservicioSessionBean=facturaproveedorservicioSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFiscalServicios() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFiscalServicios(Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {
		this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isVisibilidadFK_IdCuentaContableCreditoFiscalServicios;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpleadoSolicita() {
		return this.isVisibilidadFK_IdEmpleadoSolicita;
	}

	public void setisVisibilidadFK_IdEmpleadoSolicita(Boolean isVisibilidadFK_IdEmpleadoSolicita) {
		this.isVisibilidadFK_IdEmpleadoSolicita=isVisibilidadFK_IdEmpleadoSolicita;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoDocumento() {
		return this.isVisibilidadFK_IdTipoDocumento;
	}

	public void setisVisibilidadFK_IdTipoDocumento(Boolean isVisibilidadFK_IdTipoDocumento) {
		this.isVisibilidadFK_IdTipoDocumento=isVisibilidadFK_IdTipoDocumento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimiento() {
		return this.isVisibilidadFK_IdTipoMovimiento;
	}

	public void setisVisibilidadFK_IdTipoMovimiento(Boolean isVisibilidadFK_IdTipoMovimiento) {
		this.isVisibilidadFK_IdTipoMovimiento=isVisibilidadFK_IdTipoMovimiento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimientoModulo() {
		return this.isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public void setisVisibilidadFK_IdTipoMovimientoModulo(Boolean isVisibilidadFK_IdTipoMovimientoModulo) {
		this.isVisibilidadFK_IdTipoMovimientoModulo=isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionFuente1() {
		return this.isVisibilidadFK_IdTipoRetencionFuente1;
	}

	public void setisVisibilidadFK_IdTipoRetencionFuente1(Boolean isVisibilidadFK_IdTipoRetencionFuente1) {
		this.isVisibilidadFK_IdTipoRetencionFuente1=isVisibilidadFK_IdTipoRetencionFuente1;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIva1() {
		return this.isVisibilidadFK_IdTipoRetencionIva1;
	}

	public void setisVisibilidadFK_IdTipoRetencionIva1(Boolean isVisibilidadFK_IdTipoRetencionIva1) {
		this.isVisibilidadFK_IdTipoRetencionIva1=isVisibilidadFK_IdTipoRetencionIva1;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTipoTributario() {
		return this.isVisibilidadFK_IdTipoTributario;
	}

	public void setisVisibilidadFK_IdTipoTributario(Boolean isVisibilidadFK_IdTipoTributario) {
		this.isVisibilidadFK_IdTipoTributario=isVisibilidadFK_IdTipoTributario;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarSucursalForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarEjercicioForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarPeriodoForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarAnioForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarMesForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarModuloForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTransaccionForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarFacturaForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarClienteForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoDocumentoForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarEmpleadoSolicitaForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarEmpleadoForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoTributarioForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarMonedaForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoRetencionFuente1ForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoRetencionIva1ForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarCuentaContableCreditoFiscalServiciosForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoMovimientoForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoMovimientoModuloForeignKey(facturaproveedorservicio,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(facturaproveedorservicio,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(FacturaProveedorServicio facturaproveedorservicio,FacturaProveedorServicio facturaproveedorservicioAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalFacturaProveedorServicio(facturaproveedorservicio);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		facturaproveedorservicioAux.setId(facturaproveedorservicio.getId());
		facturaproveedorservicioAux.setVersionRow(facturaproveedorservicio.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessFacturaProveedorServicio();
		
			int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = facturaproveedorservicioValidator.getInvalidValues(this.facturaproveedorservicio);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			facturaproveedorservicioLogic.setDatosCliente(datosCliente);
			facturaproveedorservicioLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				facturaproveedorservicioAux=new  FacturaProveedorServicio();
				
				facturaproveedorservicioAux.setIsNew(true);
				facturaproveedorservicioAux.setIsChanged(true);
				
				facturaproveedorservicioAux.setFacturaProveedorServicioOriginal(this.facturaproveedorservicio);
				
				facturaproveedorservicioAux.setId(this.facturaproveedorservicio.getId());	
				facturaproveedorservicioAux.setVersionRow(this.facturaproveedorservicio.getVersionRow());	
				facturaproveedorservicioAux.setid_empresa(this.facturaproveedorservicio.getid_empresa());	
				facturaproveedorservicioAux.setid_sucursal(this.facturaproveedorservicio.getid_sucursal());	
				facturaproveedorservicioAux.setid_ejercicio(this.facturaproveedorservicio.getid_ejercicio());	
				facturaproveedorservicioAux.setid_periodo(this.facturaproveedorservicio.getid_periodo());	
				
				if(this.facturaproveedorservicio.getid_anio()!=null && this.facturaproveedorservicio.getid_anio()>0L) {
					facturaproveedorservicioAux.setid_anio(this.facturaproveedorservicio.getid_anio());
				} else {
					facturaproveedorservicioAux.setid_anio(null);
				}	
				facturaproveedorservicioAux.setid_mes(this.facturaproveedorservicio.getid_mes());	
				facturaproveedorservicioAux.setid_modulo(this.facturaproveedorservicio.getid_modulo());	
				facturaproveedorservicioAux.setid_transaccion(this.facturaproveedorservicio.getid_transaccion());	
				
				if(this.facturaproveedorservicio.getid_factura()!=null && this.facturaproveedorservicio.getid_factura()>0L) {
					facturaproveedorservicioAux.setid_factura(this.facturaproveedorservicio.getid_factura());
				} else {
					facturaproveedorservicioAux.setid_factura(null);
				}	
				facturaproveedorservicioAux.setnumero_factura(this.facturaproveedorservicio.getnumero_factura());	
				facturaproveedorservicioAux.setid_cliente(this.facturaproveedorservicio.getid_cliente());	
				facturaproveedorservicioAux.setruc(this.facturaproveedorservicio.getruc());	
				facturaproveedorservicioAux.setid_tipo_documento(this.facturaproveedorservicio.getid_tipo_documento());	
				facturaproveedorservicioAux.setplazo(this.facturaproveedorservicio.getplazo());	
				facturaproveedorservicioAux.setcon_rise(this.facturaproveedorservicio.getcon_rise());	
				facturaproveedorservicioAux.setfecha_emision(this.facturaproveedorservicio.getfecha_emision());	
				facturaproveedorservicioAux.setfecha_vence(this.facturaproveedorservicio.getfecha_vence());	
				facturaproveedorservicioAux.setid_empleado_solicita(this.facturaproveedorservicio.getid_empleado_solicita());	
				facturaproveedorservicioAux.setid_empleado(this.facturaproveedorservicio.getid_empleado());	
				facturaproveedorservicioAux.setdetalle(this.facturaproveedorservicio.getdetalle());	
				facturaproveedorservicioAux.setnumero_retencion(this.facturaproveedorservicio.getnumero_retencion());	
				facturaproveedorservicioAux.setnumero_autorizacion(this.facturaproveedorservicio.getnumero_autorizacion());	
				facturaproveedorservicioAux.setnumero_serie(this.facturaproveedorservicio.getnumero_serie());	
				
				if(this.facturaproveedorservicio.getid_tipo_tributario()!=null && this.facturaproveedorservicio.getid_tipo_tributario()>0L) {
					facturaproveedorservicioAux.setid_tipo_tributario(this.facturaproveedorservicio.getid_tipo_tributario());
				} else {
					facturaproveedorservicioAux.setid_tipo_tributario(null);
				}	
				facturaproveedorservicioAux.setfecha_validez(this.facturaproveedorservicio.getfecha_validez());	
				facturaproveedorservicioAux.setanexo_factura_inicio(this.facturaproveedorservicio.getanexo_factura_inicio());	
				facturaproveedorservicioAux.setanexo_factura_fin(this.facturaproveedorservicio.getanexo_factura_fin());	
				facturaproveedorservicioAux.setid_moneda(this.facturaproveedorservicio.getid_moneda());	
				facturaproveedorservicioAux.setvalor_servicios0(this.facturaproveedorservicio.getvalor_servicios0());	
				facturaproveedorservicioAux.settotal_iva(this.facturaproveedorservicio.gettotal_iva());	
				facturaproveedorservicioAux.setiva_porcentaje(this.facturaproveedorservicio.getiva_porcentaje());	
				facturaproveedorservicioAux.settotal(this.facturaproveedorservicio.gettotal());	
				facturaproveedorservicioAux.setnumero_mayor(this.facturaproveedorservicio.getnumero_mayor());	
				facturaproveedorservicioAux.setcodigo_asiento(this.facturaproveedorservicio.getcodigo_asiento());	
				facturaproveedorservicioAux.setid_tipo_retencion_fuente1(this.facturaproveedorservicio.getid_tipo_retencion_fuente1());	
				facturaproveedorservicioAux.setid_tipo_retencion_iva1(this.facturaproveedorservicio.getid_tipo_retencion_iva1());	
				facturaproveedorservicioAux.setanexo_numero_autorizacion(this.facturaproveedorservicio.getanexo_numero_autorizacion());	
				facturaproveedorservicioAux.setanexo_numeso_serie(this.facturaproveedorservicio.getanexo_numeso_serie());	
				facturaproveedorservicioAux.setanexo_fecha_validez(this.facturaproveedorservicio.getanexo_fecha_validez());	
				facturaproveedorservicioAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorservicioAux.setdescripcion(this.facturaproveedorservicio.getdescripcion());	
				facturaproveedorservicioAux.setid_tipo_movimiento(this.facturaproveedorservicio.getid_tipo_movimiento());	
				facturaproveedorservicioAux.setid_tipo_movimiento_modulo(this.facturaproveedorservicio.getid_tipo_movimiento_modulo());	
				facturaproveedorservicioAux.setid_tipo_transaccion_modulo(this.facturaproveedorservicio.getid_tipo_transaccion_modulo());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.saveFacturaProveedorServicios();//WithConnection
						//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);
					
					this.refrescarForeignKeysDescripcionesFacturaProveedorServicio();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorservicioLogic.saveFacturaProveedorServicioRelaciones(facturaproveedorservicioAux);//WithConnection
								//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				facturaproveedorservicioAux=new  FacturaProveedorServicio();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado() 
					|| (this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado() && this.facturaproveedorservicio.getId()>=0)) {
						
					facturaproveedorservicioAux.setIsNew(false);
				}
				
				facturaproveedorservicioAux.setIsDeleted(false);
			
				facturaproveedorservicioAux.setId(this.facturaproveedorservicio.getId());	
				facturaproveedorservicioAux.setVersionRow(this.facturaproveedorservicio.getVersionRow());	
				facturaproveedorservicioAux.setid_empresa(this.facturaproveedorservicio.getid_empresa());	
				facturaproveedorservicioAux.setid_sucursal(this.facturaproveedorservicio.getid_sucursal());	
				facturaproveedorservicioAux.setid_ejercicio(this.facturaproveedorservicio.getid_ejercicio());	
				facturaproveedorservicioAux.setid_periodo(this.facturaproveedorservicio.getid_periodo());	
				
				if(this.facturaproveedorservicio.getid_anio()!=null && this.facturaproveedorservicio.getid_anio()>0L) {
					facturaproveedorservicioAux.setid_anio(this.facturaproveedorservicio.getid_anio());
				} else {
					facturaproveedorservicioAux.setid_anio(null);
				}	
				facturaproveedorservicioAux.setid_mes(this.facturaproveedorservicio.getid_mes());	
				facturaproveedorservicioAux.setid_modulo(this.facturaproveedorservicio.getid_modulo());	
				facturaproveedorservicioAux.setid_transaccion(this.facturaproveedorservicio.getid_transaccion());	
				
				if(this.facturaproveedorservicio.getid_factura()!=null && this.facturaproveedorservicio.getid_factura()>0L) {
					facturaproveedorservicioAux.setid_factura(this.facturaproveedorservicio.getid_factura());
				} else {
					facturaproveedorservicioAux.setid_factura(null);
				}	
				facturaproveedorservicioAux.setnumero_factura(this.facturaproveedorservicio.getnumero_factura());	
				facturaproveedorservicioAux.setid_cliente(this.facturaproveedorservicio.getid_cliente());	
				facturaproveedorservicioAux.setruc(this.facturaproveedorservicio.getruc());	
				facturaproveedorservicioAux.setid_tipo_documento(this.facturaproveedorservicio.getid_tipo_documento());	
				facturaproveedorservicioAux.setplazo(this.facturaproveedorservicio.getplazo());	
				facturaproveedorservicioAux.setcon_rise(this.facturaproveedorservicio.getcon_rise());	
				facturaproveedorservicioAux.setfecha_emision(this.facturaproveedorservicio.getfecha_emision());	
				facturaproveedorservicioAux.setfecha_vence(this.facturaproveedorservicio.getfecha_vence());	
				facturaproveedorservicioAux.setid_empleado_solicita(this.facturaproveedorservicio.getid_empleado_solicita());	
				facturaproveedorservicioAux.setid_empleado(this.facturaproveedorservicio.getid_empleado());	
				facturaproveedorservicioAux.setdetalle(this.facturaproveedorservicio.getdetalle());	
				facturaproveedorservicioAux.setnumero_retencion(this.facturaproveedorservicio.getnumero_retencion());	
				facturaproveedorservicioAux.setnumero_autorizacion(this.facturaproveedorservicio.getnumero_autorizacion());	
				facturaproveedorservicioAux.setnumero_serie(this.facturaproveedorservicio.getnumero_serie());	
				
				if(this.facturaproveedorservicio.getid_tipo_tributario()!=null && this.facturaproveedorservicio.getid_tipo_tributario()>0L) {
					facturaproveedorservicioAux.setid_tipo_tributario(this.facturaproveedorservicio.getid_tipo_tributario());
				} else {
					facturaproveedorservicioAux.setid_tipo_tributario(null);
				}	
				facturaproveedorservicioAux.setfecha_validez(this.facturaproveedorservicio.getfecha_validez());	
				facturaproveedorservicioAux.setanexo_factura_inicio(this.facturaproveedorservicio.getanexo_factura_inicio());	
				facturaproveedorservicioAux.setanexo_factura_fin(this.facturaproveedorservicio.getanexo_factura_fin());	
				facturaproveedorservicioAux.setid_moneda(this.facturaproveedorservicio.getid_moneda());	
				facturaproveedorservicioAux.setvalor_servicios0(this.facturaproveedorservicio.getvalor_servicios0());	
				facturaproveedorservicioAux.settotal_iva(this.facturaproveedorservicio.gettotal_iva());	
				facturaproveedorservicioAux.setiva_porcentaje(this.facturaproveedorservicio.getiva_porcentaje());	
				facturaproveedorservicioAux.settotal(this.facturaproveedorservicio.gettotal());	
				facturaproveedorservicioAux.setnumero_mayor(this.facturaproveedorservicio.getnumero_mayor());	
				facturaproveedorservicioAux.setcodigo_asiento(this.facturaproveedorservicio.getcodigo_asiento());	
				facturaproveedorservicioAux.setid_tipo_retencion_fuente1(this.facturaproveedorservicio.getid_tipo_retencion_fuente1());	
				facturaproveedorservicioAux.setid_tipo_retencion_iva1(this.facturaproveedorservicio.getid_tipo_retencion_iva1());	
				facturaproveedorservicioAux.setanexo_numero_autorizacion(this.facturaproveedorservicio.getanexo_numero_autorizacion());	
				facturaproveedorservicioAux.setanexo_numeso_serie(this.facturaproveedorservicio.getanexo_numeso_serie());	
				facturaproveedorservicioAux.setanexo_fecha_validez(this.facturaproveedorservicio.getanexo_fecha_validez());	
				facturaproveedorservicioAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorservicioAux.setdescripcion(this.facturaproveedorservicio.getdescripcion());	
				facturaproveedorservicioAux.setid_tipo_movimiento(this.facturaproveedorservicio.getid_tipo_movimiento());	
				facturaproveedorservicioAux.setid_tipo_movimiento_modulo(this.facturaproveedorservicio.getid_tipo_movimiento_modulo());	
				facturaproveedorservicioAux.setid_tipo_transaccion_modulo(this.facturaproveedorservicio.getid_tipo_transaccion_modulo());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.saveFacturaProveedorServicios();//WithConnection
						//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);
					
					this.refrescarForeignKeysDescripcionesFacturaProveedorServicio();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorservicioLogic.saveFacturaProveedorServicioRelaciones(facturaproveedorservicioAux);//WithConnection
								//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturaproveedorservicio,facturaproveedorservicioAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				facturaproveedorservicioAux=new  FacturaProveedorServicio();
				
				facturaproveedorservicioAux.setIsNew(false);
				facturaproveedorservicioAux.setIsChanged(false);
				
				facturaproveedorservicioAux.setIsDeleted(true);
				
				facturaproveedorservicioAux.setId(this.facturaproveedorservicio.getId());	
				facturaproveedorservicioAux.setVersionRow(this.facturaproveedorservicio.getVersionRow());	
				facturaproveedorservicioAux.setid_empresa(this.facturaproveedorservicio.getid_empresa());	
				facturaproveedorservicioAux.setid_sucursal(this.facturaproveedorservicio.getid_sucursal());	
				facturaproveedorservicioAux.setid_ejercicio(this.facturaproveedorservicio.getid_ejercicio());	
				facturaproveedorservicioAux.setid_periodo(this.facturaproveedorservicio.getid_periodo());	
				
				if(this.facturaproveedorservicio.getid_anio()!=null && this.facturaproveedorservicio.getid_anio()>0L) {
					facturaproveedorservicioAux.setid_anio(this.facturaproveedorservicio.getid_anio());
				} else {
					facturaproveedorservicioAux.setid_anio(null);
				}	
				facturaproveedorservicioAux.setid_mes(this.facturaproveedorservicio.getid_mes());	
				facturaproveedorservicioAux.setid_modulo(this.facturaproveedorservicio.getid_modulo());	
				facturaproveedorservicioAux.setid_transaccion(this.facturaproveedorservicio.getid_transaccion());	
				
				if(this.facturaproveedorservicio.getid_factura()!=null && this.facturaproveedorservicio.getid_factura()>0L) {
					facturaproveedorservicioAux.setid_factura(this.facturaproveedorservicio.getid_factura());
				} else {
					facturaproveedorservicioAux.setid_factura(null);
				}	
				facturaproveedorservicioAux.setnumero_factura(this.facturaproveedorservicio.getnumero_factura());	
				facturaproveedorservicioAux.setid_cliente(this.facturaproveedorservicio.getid_cliente());	
				facturaproveedorservicioAux.setruc(this.facturaproveedorservicio.getruc());	
				facturaproveedorservicioAux.setid_tipo_documento(this.facturaproveedorservicio.getid_tipo_documento());	
				facturaproveedorservicioAux.setplazo(this.facturaproveedorservicio.getplazo());	
				facturaproveedorservicioAux.setcon_rise(this.facturaproveedorservicio.getcon_rise());	
				facturaproveedorservicioAux.setfecha_emision(this.facturaproveedorservicio.getfecha_emision());	
				facturaproveedorservicioAux.setfecha_vence(this.facturaproveedorservicio.getfecha_vence());	
				facturaproveedorservicioAux.setid_empleado_solicita(this.facturaproveedorservicio.getid_empleado_solicita());	
				facturaproveedorservicioAux.setid_empleado(this.facturaproveedorservicio.getid_empleado());	
				facturaproveedorservicioAux.setdetalle(this.facturaproveedorservicio.getdetalle());	
				facturaproveedorservicioAux.setnumero_retencion(this.facturaproveedorservicio.getnumero_retencion());	
				facturaproveedorservicioAux.setnumero_autorizacion(this.facturaproveedorservicio.getnumero_autorizacion());	
				facturaproveedorservicioAux.setnumero_serie(this.facturaproveedorservicio.getnumero_serie());	
				
				if(this.facturaproveedorservicio.getid_tipo_tributario()!=null && this.facturaproveedorservicio.getid_tipo_tributario()>0L) {
					facturaproveedorservicioAux.setid_tipo_tributario(this.facturaproveedorservicio.getid_tipo_tributario());
				} else {
					facturaproveedorservicioAux.setid_tipo_tributario(null);
				}	
				facturaproveedorservicioAux.setfecha_validez(this.facturaproveedorservicio.getfecha_validez());	
				facturaproveedorservicioAux.setanexo_factura_inicio(this.facturaproveedorservicio.getanexo_factura_inicio());	
				facturaproveedorservicioAux.setanexo_factura_fin(this.facturaproveedorservicio.getanexo_factura_fin());	
				facturaproveedorservicioAux.setid_moneda(this.facturaproveedorservicio.getid_moneda());	
				facturaproveedorservicioAux.setvalor_servicios0(this.facturaproveedorservicio.getvalor_servicios0());	
				facturaproveedorservicioAux.settotal_iva(this.facturaproveedorservicio.gettotal_iva());	
				facturaproveedorservicioAux.setiva_porcentaje(this.facturaproveedorservicio.getiva_porcentaje());	
				facturaproveedorservicioAux.settotal(this.facturaproveedorservicio.gettotal());	
				facturaproveedorservicioAux.setnumero_mayor(this.facturaproveedorservicio.getnumero_mayor());	
				facturaproveedorservicioAux.setcodigo_asiento(this.facturaproveedorservicio.getcodigo_asiento());	
				facturaproveedorservicioAux.setid_tipo_retencion_fuente1(this.facturaproveedorservicio.getid_tipo_retencion_fuente1());	
				facturaproveedorservicioAux.setid_tipo_retencion_iva1(this.facturaproveedorservicio.getid_tipo_retencion_iva1());	
				facturaproveedorservicioAux.setanexo_numero_autorizacion(this.facturaproveedorservicio.getanexo_numero_autorizacion());	
				facturaproveedorservicioAux.setanexo_numeso_serie(this.facturaproveedorservicio.getanexo_numeso_serie());	
				facturaproveedorservicioAux.setanexo_fecha_validez(this.facturaproveedorservicio.getanexo_fecha_validez());	
				facturaproveedorservicioAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorservicioAux.setdescripcion(this.facturaproveedorservicio.getdescripcion());	
				facturaproveedorservicioAux.setid_tipo_movimiento(this.facturaproveedorservicio.getid_tipo_movimiento());	
				facturaproveedorservicioAux.setid_tipo_movimiento_modulo(this.facturaproveedorservicio.getid_tipo_movimiento_modulo());	
				facturaproveedorservicioAux.setid_tipo_transaccion_modulo(this.facturaproveedorservicio.getid_tipo_transaccion_modulo());	
				
				if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.facturaproveedorservicioAux.getId()>=0) {	
						this.facturaproveedorserviciosEliminados.add(facturaproveedorservicioAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.saveFacturaProveedorServicios();//WithConnection
						//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorservicioLogic.saveFacturaProveedorServicioRelaciones(facturaproveedorservicioAux);//WithConnection
								//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
								|| this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(facturaproveedorservicioAux,facturaproveedorservicioLogic.getFacturaProveedorServicios());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(facturaproveedorservicioAux,facturaproveedorservicios);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(this.facturaproveedorserviciosEliminados);
					
					facturaproveedorservicioLogic.saveFacturaProveedorServicios();//WithConnection
					//facturaproveedorservicioLogic.getSetVersionRowFacturaProveedorServicios();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesFacturaProveedorServicio();
				
				this.facturaproveedorserviciosEliminados= new ArrayList<FacturaProveedorServicio>();		
			}
			
			if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Factura Proveedor GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.facturaproveedorservicio=facturaproveedorservicioAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessFacturaProveedorServicio();
      	}
		
	}	
	
	public void actualizarRelaciones(FacturaProveedorServicio facturaproveedorservicioLocal) throws Exception {
		
		if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(FacturaProveedorServicio facturaproveedorservicioLocal) throws Exception {	
		if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				facturaproveedorservicioLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				facturaproveedorservicioLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				facturaproveedorservicioLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				facturaproveedorservicioLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				facturaproveedorservicioLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				facturaproveedorservicioLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				facturaproveedorservicioLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				facturaproveedorservicioLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				facturaproveedorservicioLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				facturaproveedorservicioLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDocumentoDetalleFormJInternalFrame.class)) {
				TipoDocumentoBeanSwingJInternalFrame tipodocumentoBeanSwingJInternalFrameLocal=(TipoDocumentoBeanSwingJInternalFrame) ((TipoDocumentoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodocumentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.gettipodocumento(),true);
				tipodocumentoBeanSwingJInternalFrameLocal.actualizarLista(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento,this.tipodocumentosForeignKey);

				tipodocumentoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				facturaproveedorservicioLocal.setTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey("Formulario");
				this.setActualTipoDocumentoForeignKey(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadosolicitaBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadosolicitaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadosolicitaBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadosolicitaBeanSwingJInternalFrameLocal.actualizarLista(empleadosolicitaBeanSwingJInternalFrameLocal.empleado,this.empleadosolicitasForeignKey);

				empleadosolicitaBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadosolicitaBeanSwingJInternalFrameLocal.empleado);

				facturaproveedorservicioLocal.setEmpleadoSolicita(empleadosolicitaBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
				this.cargarCombosFrameEmpleadoSolicitasForeignKey("Formulario");
				this.setActualEmpleadoSolicitaForeignKey(empleadosolicitaBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				facturaproveedorservicioLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTributarioDetalleFormJInternalFrame.class)) {
				TipoTributarioBeanSwingJInternalFrame tipotributarioBeanSwingJInternalFrameLocal=(TipoTributarioBeanSwingJInternalFrame) ((TipoTributarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotributarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.gettipotributario(),true);
				tipotributarioBeanSwingJInternalFrameLocal.actualizarLista(tipotributarioBeanSwingJInternalFrameLocal.tipotributario,this.tipotributariosForeignKey);

				tipotributarioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				facturaproveedorservicioLocal.setTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey("Formulario");
				this.setActualTipoTributarioForeignKey(tipotributarioBeanSwingJInternalFrameLocal.tipotributario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				facturaproveedorservicioLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionfuente1BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionfuente1BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionfuente1BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionfuente1BeanSwingJInternalFrameLocal.actualizarLista(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionfuente1sForeignKey);

				tiporetencionfuente1BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorservicioLocal.setTipoRetencionFuente1(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
				this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Formulario");
				this.setActualTipoRetencionFuente1ForeignKey(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencioniva1BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencioniva1BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencioniva1BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencioniva1BeanSwingJInternalFrameLocal.actualizarLista(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencioniva1sForeignKey);

				tiporetencioniva1BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorservicioLocal.setTipoRetencionIva1(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
				this.cargarCombosFrameTipoRetencionIva1sForeignKey("Formulario");
				this.setActualTipoRetencionIva1ForeignKey(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditofiscalserviciossForeignKey);

				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorservicioLocal.setCuentaContableCreditoFiscalServicios(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
				this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Formulario");
				this.setActualCuentaContableCreditoFiscalServiciosForeignKey(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoDetalleFormJInternalFrame.class)) {
				TipoMovimientoBeanSwingJInternalFrame tipomovimientoBeanSwingJInternalFrameLocal=(TipoMovimientoBeanSwingJInternalFrame) ((TipoMovimientoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.gettipomovimiento(),true);
				tipomovimientoBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento,this.tipomovimientosForeignKey);

				tipomovimientoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				facturaproveedorservicioLocal.setTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey("Formulario");
				this.setActualTipoMovimientoForeignKey(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoModuloDetalleFormJInternalFrame.class)) {
				TipoMovimientoModuloBeanSwingJInternalFrame tipomovimientomoduloBeanSwingJInternalFrameLocal=(TipoMovimientoModuloBeanSwingJInternalFrame) ((TipoMovimientoModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientomoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.gettipomovimientomodulo(),true);
				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo,this.tipomovimientomodulosForeignKey);

				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				facturaproveedorservicioLocal.setTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey("Formulario");
				this.setActualTipoMovimientoModuloForeignKey(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				facturaproveedorservicioLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarFacturaProveedorServicioActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = facturaproveedorservicioValidator.getInvalidValues(this.facturaproveedorservicio);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(FacturaProveedorServicio facturaproveedorservicio,List<FacturaProveedorServicio> facturaproveedorservicios) throws Exception {
		try	{		
			FacturaProveedorServicioConstantesFunciones.actualizarLista(facturaproveedorservicio,facturaproveedorservicios,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(FacturaProveedorServicio facturaproveedorservicio,List<FacturaProveedorServicio> facturaproveedorservicios) throws Exception {
		try	{			
			FacturaProveedorServicioConstantesFunciones.actualizarSelectedLista(facturaproveedorservicio,facturaproveedorservicios);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<FacturaProveedorServicio> facturaproveedorserviciosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				facturaproveedorserviciosLocal=this.facturaproveedorservicioLogic.getFacturaProveedorServicios();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				facturaproveedorserviciosLocal=this.facturaproveedorservicios;
			}
			//ARCHITECTURE
		
			for(FacturaProveedorServicio facturaproveedorservicioLocal:facturaproveedorserviciosLocal) {
				if(this.permiteMantenimiento(facturaproveedorservicioLocal) && facturaproveedorservicioLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+FacturaProveedorServicioConstantesFunciones.getFacturaProveedorServicioLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empresaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_sucursalFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_ejercicioFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_periodoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_anioFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_mesFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_moduloFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_transaccionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_facturaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.NUMEROFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_facturaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_clienteFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelrucFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_documentoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.PLAZO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelplazoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.CONRISE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelcon_riseFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_emisionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.FECHAVENCE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_venceFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDEMPLEADOSOLICITA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empleado_solicitaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empleadoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.DETALLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeldetalleFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.NUMERORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_retencionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.NUMEROAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_autorizacionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.NUMEROSERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_serieFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPOTRIBUTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_tributarioFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.FECHAVALIDEZ)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_validezFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.ANEXOFACTURAINICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_inicioFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.ANEXOFACTURAFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_finFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_monedaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.VALORSERVICIOS0)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelvalor_servicios0FacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeltotal_ivaFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IVAPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeliva_porcentajeFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeltotalFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.NUMEROMAYOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_mayorFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.CODIGOASIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelcodigo_asientoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPORETENCIONFUENTE1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_retencion_fuente1FacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPORETENCIONIVA1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_retencion_iva1FacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.ANEXONUMEROAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_numero_autorizacionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.ANEXONUMESOSERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_numeso_serieFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.ANEXOFECHAVALIDEZ)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_fecha_validezFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDCUENTACONTABLECREDITOFISCALSERVICIOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeldescripcionFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPOMOVIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_movimientoFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPOMOVIMIENTOMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_movimiento_moduloFacturaProveedorServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorServicioConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_transaccion_moduloFacturaProveedorServicio,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empresaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_sucursalFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_ejercicioFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_periodoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_anioFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_mesFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_moduloFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_transaccionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_facturaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_facturaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_clienteFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelrucFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_documentoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelplazoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelcon_riseFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_emisionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_venceFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empleado_solicitaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_empleadoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeldetalleFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_retencionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_autorizacionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_serieFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_tributarioFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_validezFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_inicioFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_finFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_monedaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelvalor_servicios0FacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeltotal_ivaFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeliva_porcentajeFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeltotalFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_mayorFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelcodigo_asientoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_retencion_fuente1FacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_retencion_iva1FacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_numero_autorizacionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_numeso_serieFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_fecha_validezFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeldescripcionFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_movimientoFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_movimiento_moduloFacturaProveedorServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelid_tipo_transaccion_moduloFacturaProveedorServicio,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoFacturaProveedorServicio--;	
		
		
		this.facturaproveedorservicioAux=new FacturaProveedorServicio();
		
		this.facturaproveedorservicioAux.setId(this.iIdNuevoFacturaProveedorServicio);
		this.facturaproveedorservicioAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturaproveedorservicioLogic.getFacturaProveedorServicios().add(this.facturaproveedorservicioAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.facturaproveedorservicios.add(this.facturaproveedorservicioAux);
		}
		//ARCHITECTURE
		
		this.facturaproveedorservicio=this.facturaproveedorservicioAux;
		
		if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicio);
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedorServicio(this.facturaproveedorservicio);
		}
				
		//this.setDefaultControlesFacturaProveedorServicio();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyFacturaProveedorServicio();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyFacturaProveedorServicio();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedorServicio();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicioBean,this.facturaproveedorservicio,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
			classes=FacturaProveedorServicioConstantesFunciones.getClassesRelationshipsOfFacturaProveedorServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.procesarEventosFacturaProveedorServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this.facturaproveedorservicio,this.facturaproveedorservicioParameterGeneral,this.isEsNuevoFacturaProveedorServicio,classes);//this.facturaproveedorservicioLogic.getFacturaProveedorServicio()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral,this.facturaproveedorservicioBean,false);
		
		if(this.facturaproveedorservicioReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio());
		}
		
		if(this.facturaproveedorservicioReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio(),classes);//this.facturaproveedorservicioBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyFacturaProveedorServicio();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyFacturaProveedorServicio();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.RecargarFormFacturaProveedorServicio(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
						
			if(facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedorServicio();
			}
			
			this.actualizarVisualTableDatosFacturaProveedorServicio();
			
			this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedorServicio(), this.getIndiceNuevoFacturaProveedorServicio());
			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
						
			this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesFacturaProveedorServicio(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarnumero_facturaFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarrucFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarplazoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarcon_riseFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarfecha_emisionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarfecha_venceFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activardetalleFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarnumero_retencionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarnumero_autorizacionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarnumero_serieFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarfecha_validezFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_inicioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_finFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldvalor_servicios0FacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarvalor_servicios0FacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotal_ivaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activartotal_ivaFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldiva_porcentajeFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activariva_porcentajeFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotalFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activartotalFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_mayorFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarnumero_mayorFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldcodigo_asientoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarcodigo_asientoFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numero_autorizacionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numeso_serieFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activaranexo_numeso_serieFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooseranexo_fecha_validezFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activaranexo_fecha_validezFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadescripcionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activardescripcionFacturaProveedorServicio);	
		//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_empresaFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_sucursalFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_ejercicioFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_periodoFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_anioFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_mesFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_transaccionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_facturaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_clienteFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_documentoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_empleado_solicitaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_empleadoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_tributarioFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_monedaFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimientoFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimiento_moduloFacturaProveedorServicio);//
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setEnabled(isHabilitar && this.facturaproveedorservicioConstantesFunciones.activarid_tipo_transaccion_moduloFacturaProveedorServicio);
	};
	
	public void setDefaultControlesFacturaProveedorServicio() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoFacturaProveedorServicio(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.facturaproveedorservicioSessionBean.setConGuardarRelaciones(true);			
			this.facturaproveedorservicioSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.setVisible(true);
			
					
		} else {
			//this.facturaproveedorservicioSessionBean.setConGuardarRelaciones(false);			
			this.facturaproveedorservicioSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoFacturaProveedorServicio() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				if(facturaproveedorservicioAux.getId().equals(this.iIdNuevoFacturaProveedorServicio)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicios) {
				if(facturaproveedorservicioAux.getId().equals(this.iIdNuevoFacturaProveedorServicio)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				if(facturaproveedorservicioAux.getId().equals(facturaproveedorservicio.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicios) {
				if(facturaproveedorservicioAux.getId().equals(facturaproveedorservicio.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicioOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				if(facturaproveedorservicioAux.getFacturaProveedorServicioOriginal().getId().equals(facturaproveedorservicioOriginal.getId())) {
					existe=true;
					facturaproveedorservicioOriginal.setId(facturaproveedorservicioAux.getId());
					facturaproveedorservicioOriginal.setVersionRow(facturaproveedorservicioAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicios) {
				if(facturaproveedorservicioAux.getFacturaProveedorServicioOriginal().getId().equals(facturaproveedorservicioOriginal.getId())) {
					existe=true;
					facturaproveedorservicioOriginal.setId(facturaproveedorservicioAux.getId());
					facturaproveedorservicioOriginal.setVersionRow(facturaproveedorservicioAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosFacturaProveedorServicio(Boolean esParaCancelar) throws Exception {
		facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
		facturaproveedorservicioAux=new FacturaProveedorServicio();
		
		if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
					if(facturaproveedorservicioAux.getId()<0) {
						facturaproveedorserviciosAux.add(facturaproveedorservicioAux);
					}		
				}
				this.iIdNuevoFacturaProveedorServicio=0L;
				this.facturaproveedorservicioLogic.getFacturaProveedorServicios().removeAll(facturaproveedorserviciosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicios) {
					if(facturaproveedorservicioAux.getId()<0) {
						facturaproveedorserviciosAux.add(facturaproveedorservicioAux);
					}		
				}
				this.iIdNuevoFacturaProveedorServicio=0L;
				this.facturaproveedorservicios.removeAll(facturaproveedorserviciosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoFacturaProveedorServicio 
					&& this.facturaproveedorservicioLogic.getFacturaProveedorServicios().size()>0
					) {
					facturaproveedorservicioAux=this.facturaproveedorservicioLogic.getFacturaProveedorServicios().get(this.facturaproveedorservicioLogic.getFacturaProveedorServicios().size() - 1);
				
					if(facturaproveedorservicioAux.getId()<0) {
						this.facturaproveedorservicioLogic.getFacturaProveedorServicios().remove(facturaproveedorservicioAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoFacturaProveedorServicio && this.facturaproveedorservicios.size()>0) {
					facturaproveedorservicioAux=this.facturaproveedorservicios.get(this.facturaproveedorservicios.size() - 1);
				
					if(facturaproveedorservicioAux.getId()<0) {
						this.facturaproveedorservicios.remove(facturaproveedorservicioAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoFacturaProveedorServicio(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(facturaproveedorservicio.getId()<0) {
				this.facturaproveedorservicioLogic.getFacturaProveedorServicios().remove(this.facturaproveedorservicio);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(facturaproveedorservicio.getId()<0) {
				this.facturaproveedorservicios.remove(this.facturaproveedorservicio);
			}
		}			
	}
	
	public void setEstadosInicialesFacturaProveedorServicio(List<FacturaProveedorServicio> facturaproveedorserviciosAux) throws Exception {
		FacturaProveedorServicioConstantesFunciones.setEstadosInicialesFacturaProveedorServicio(facturaproveedorserviciosAux);
	}
	
	public void setEstadosInicialesFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicioAux) throws Exception {
		FacturaProveedorServicioConstantesFunciones.setEstadosInicialesFacturaProveedorServicio(facturaproveedorservicioAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarFacturaProveedorServicioActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarFacturaProveedorServicioActual()) {
				if(!this.isEsNuevoFacturaProveedorServicio) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoFacturaProveedorServicio=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarFacturaProveedorServicioActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Factura Proveedor ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(FacturaProveedorServicio facturaproveedorservicio) throws Exception {
		FacturaProveedorServicioConstantesFunciones.seleccionarAsignar(this.facturaproveedorservicio,facturaproveedorservicio);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarFacturaProveedorServicio=this.isPermisoActualizarOriginalFacturaProveedorServicio;
			
			
			this.seleccionarAsignar(facturaproveedorservicio);
			
			

			idFacturaActual=facturaproveedorservicio.getid_factura();
			this.seleccionarFacturaActual();

			idClienteActual=facturaproveedorservicio.getid_cliente();
			this.seleccionarClienteActual();

			idEmpleadoSolicitaActual=facturaproveedorservicio.getid_empleado_solicita();
			this.seleccionarEmpleadoSolicitaActual();

			idEmpleadoActual=facturaproveedorservicio.getid_empleado();
			this.seleccionarEmpleadoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaProveedorServicioConstantesFunciones.quitarEspaciosFacturaProveedorServicio(this.facturaproveedorservicio,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.facturaproveedorservicioSessionBean.setsFuncionBusquedaRapida(this.facturaproveedorservicioSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoSolicitaActual() throws Exception {
		try	{
			Empleado empleadosolicitaAux=new Empleado();

			if(this.idEmpleadoSolicitaActual != null && this.idEmpleadoSolicitaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadosolicitaLogic.getEntityWithConnection(this.idEmpleadoSolicitaActual);
					empleadosolicitaAux= empleadosolicitaLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosolicitasForeignKey=new ArrayList<Empleado>();
				empleadosolicitasForeignKey.add(empleadosolicitaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoFacturaProveedorServicio) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosFacturaProveedorServicio(esParaCancelar);				
				this.cancelarNuevoFacturaProveedorServicio(esParaCancelar);								
			}
			
			this.facturaproveedorservicio=new FacturaProveedorServicio();
			
			this.inicializarFacturaProveedorServicio();
			
			this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarFacturaProveedorServicio() throws Exception {
		try {
			FacturaProveedorServicioConstantesFunciones.inicializarFacturaProveedorServicio(this.facturaproveedorservicio);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.facturaproveedorservicioLogic.getFacturaProveedorServicios().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteFacturaProveedorServicios(String sAccionBusqueda,List<FacturaProveedorServicio> facturaproveedorserviciosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="FacturaProveedorServicio"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="FacturaProveedorServicioMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("FacturaProveedorServicioMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="FacturaProveedorServicio"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Factura Proveedors");		
		parameters.put("busquedapor", FacturaProveedorServicioConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceFacturaProveedorServicio=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			FacturaProveedorServicioConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			FacturaProveedorServicioConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceFacturaProveedorServicio=new JRBeanArrayDataSource(FacturaProveedorServicioJInternalFrame.TraerFacturaProveedorServicioBeans(facturaproveedorserviciosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceFacturaProveedorServicio);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+FacturaProveedorServicioConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+FacturaProveedorServicioConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(FacturaProveedorServicioBean.TraerFacturaProveedorServicioBeans(facturaproveedorserviciosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoFacturaProveedorServicioActionPerformed(null);
					//this.generarExcelReporteFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesFacturaProveedorServicios(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorserviciosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteFacturaProveedorServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedorServicio> facturaproveedorserviciosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedorServicios");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaProveedorServicio("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(FacturaProveedorServicio facturaproveedorservicio : facturaproveedorserviciosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			FacturaProveedorServicioConstantesFunciones.generarExcelReporteDataFacturaProveedorServicio("NORMAL",row,workbook,facturaproveedorservicio,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderFacturaProveedorServicio(String sTipo,Row row,Workbook workbook) {
		
		FacturaProveedorServicioConstantesFunciones.generarExcelReporteHeaderFacturaProveedorServicio(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalFacturaProveedorServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedorServicio> facturaproveedorserviciosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedorServicios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(FacturaProveedorServicio facturaproveedorservicio : facturaproveedorserviciosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(FacturaProveedorServicioConstantesFunciones.getFacturaProveedorServicioDescripcion(facturaproveedorservicio));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getnumero_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettipodocumento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getplazo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(facturaproveedorservicio.getcon_rise()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getfecha_vence());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getempleadosolicita_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getdetalle());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getnumero_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getnumero_autorizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getnumero_serie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettipotributario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getfecha_validez());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanexo_factura_inicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanexo_factura_fin());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getvalor_servicios0());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getiva_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getnumero_mayor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getcodigo_asiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettiporetencionfuente1_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettiporetencioniva1_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanexo_numero_autorizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanexo_numeso_serie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getanexo_fecha_validez());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettipomovimiento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettipomovimientomodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedorservicio.gettipotransaccionmodulo_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesFacturaProveedorServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedorServicio> facturaproveedorserviciosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<FacturaProveedorServicio> facturaproveedorserviciosRespaldo=null;
		
		classes=FacturaProveedorServicioConstantesFunciones.getClassesRelationshipsOfFacturaProveedorServicio(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.facturaproveedorservicioLogic.setDatosCliente(this.datosCliente);
		this.facturaproveedorservicioLogic.setDatosDeep(this.datosDeep);
		this.facturaproveedorservicioLogic.setIsConDeep(true);
		
		facturaproveedorserviciosRespaldo=this.facturaproveedorservicioLogic.getFacturaProveedorServicios();
		
		this.facturaproveedorservicioLogic.setFacturaProveedorServicios(facturaproveedorserviciosParaReportes);	
		this.facturaproveedorservicioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		facturaproveedorserviciosParaReportes=this.facturaproveedorservicioLogic.getFacturaProveedorServicios();
		this.facturaproveedorservicioLogic.setFacturaProveedorServicios(facturaproveedorserviciosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedorServicios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaProveedorServicio("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(FacturaProveedorServicio facturaproveedorservicio : facturaproveedorserviciosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderFacturaProveedorServicio("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			FacturaProveedorServicioConstantesFunciones.generarExcelReporteDataFacturaProveedorServicio("NORMAL",row,workbook,facturaproveedorservicio,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(FacturaProveedorServicioConstantesFunciones.getFacturaProveedorServicioDescripcion(facturaproveedorservicio));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessFacturaProveedorServicio() throws Exception {		
		this.startProcessFacturaProveedorServicio(true);
	}
	
	public void startProcessFacturaProveedorServicio(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasFacturaProveedorServicio ,this.jPanelParametrosReportesFacturaProveedorServicio, this.jScrollPanelDatosFacturaProveedorServicio,this.jPanelPaginacionFacturaProveedorServicio, this.jScrollPanelDatosEdicionFacturaProveedorServicio, this.jPanelAccionesFacturaProveedorServicio,this.jPanelAccionesFormularioFacturaProveedorServicio,this.jmenuBarFacturaProveedorServicio,this.jmenuBarDetalleFacturaProveedorServicio,this.jTtoolBarFacturaProveedorServicio,this.jTtoolBarDetalleFacturaProveedorServicio);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaProveedorServicio=this.jTabbedPaneBusquedasFacturaProveedorServicio; 
		
		final JPanel jPanelParametrosReportesFacturaProveedorServicio=this.jPanelParametrosReportesFacturaProveedorServicio;
		//final JScrollPane jScrollPanelDatosFacturaProveedorServicio=this.jScrollPanelDatosFacturaProveedorServicio;
		final JTable jTableDatosFacturaProveedorServicio=this.jTableDatosFacturaProveedorServicio;		
		final JPanel jPanelPaginacionFacturaProveedorServicio=this.jPanelPaginacionFacturaProveedorServicio;
		//final JScrollPane jScrollPanelDatosEdicionFacturaProveedorServicio=this.jScrollPanelDatosEdicionFacturaProveedorServicio;
		final JPanel jPanelAccionesFacturaProveedorServicio=this.jPanelAccionesFacturaProveedorServicio;
		
		JPanel jPanelCamposAuxiliarFacturaProveedorServicio=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarFacturaProveedorServicio=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			jPanelCamposAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelCamposFacturaProveedorServicio;
			jPanelAccionesFormularioAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelAccionesFormularioFacturaProveedorServicio;
		}
		
		final JPanel jPanelCamposFacturaProveedorServicio=jPanelCamposAuxiliarFacturaProveedorServicio;
		final JPanel jPanelAccionesFormularioFacturaProveedorServicio=jPanelAccionesFormularioAuxiliarFacturaProveedorServicio;
		
		
		final JMenuBar jmenuBarFacturaProveedorServicio=this.jmenuBarFacturaProveedorServicio;
		final JToolBar jTtoolBarFacturaProveedorServicio=this.jTtoolBarFacturaProveedorServicio;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarFacturaProveedorServicio=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaProveedorServicio=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			jmenuBarDetalleAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jmenuBarDetalleFacturaProveedorServicio;
			jTtoolBarDetalleAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jTtoolBarDetalleFacturaProveedorServicio;
		}
		
		final JMenuBar jmenuBarDetalleFacturaProveedorServicio=jmenuBarDetalleAuxiliarFacturaProveedorServicio;
		final JToolBar jTtoolBarDetalleFacturaProveedorServicio=jTtoolBarDetalleAuxiliarFacturaProveedorServicio;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaProveedorServicio;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaProveedorServicio;
			processRunnable.jTableDatos=jTableDatosFacturaProveedorServicio;
			processRunnable.jPanelCampos=jPanelCamposFacturaProveedorServicio;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaProveedorServicio;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaProveedorServicio;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaProveedorServicio;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaProveedorServicio;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaProveedorServicio;
			processRunnable.jTtoolBar=jTtoolBarFacturaProveedorServicio;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaProveedorServicio;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaProveedorServicio ,jPanelParametrosReportesFacturaProveedorServicio,jTableDatosFacturaProveedorServicio, /*jScrollPanelDatosFacturaProveedorServicio,*/jPanelCamposFacturaProveedorServicio,jPanelPaginacionFacturaProveedorServicio, /*jScrollPanelDatosEdicionFacturaProveedorServicio,*/ jPanelAccionesFacturaProveedorServicio,jPanelAccionesFormularioFacturaProveedorServicio,jmenuBarFacturaProveedorServicio,jmenuBarDetalleFacturaProveedorServicio,jTtoolBarFacturaProveedorServicio,jTtoolBarDetalleFacturaProveedorServicio);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaProveedorServicio ,jPanelParametrosReportesFacturaProveedorServicio, jScrollPanelDatosFacturaProveedorServicio,jPanelPaginacionFacturaProveedorServicio, jScrollPanelDatosEdicionFacturaProveedorServicio, jPanelAccionesFacturaProveedorServicio,jPanelAccionesFormularioFacturaProveedorServicio,jmenuBarFacturaProveedorServicio,jmenuBarDetalleFacturaProveedorServicio,jTtoolBarFacturaProveedorServicio,jTtoolBarDetalleFacturaProveedorServicio);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessFacturaProveedorServicio() {// throws Exception 
		this.finishProcessFacturaProveedorServicio(true);
	}
	
	public void finishProcessFacturaProveedorServicio(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasFacturaProveedorServicio ,this.jPanelParametrosReportesFacturaProveedorServicio, this.jScrollPanelDatosFacturaProveedorServicio,this.jPanelPaginacionFacturaProveedorServicio, this.jScrollPanelDatosEdicionFacturaProveedorServicio, this.jPanelAccionesFacturaProveedorServicio,this.jPanelAccionesFormularioFacturaProveedorServicio,this.jmenuBarFacturaProveedorServicio,this.jmenuBarDetalleFacturaProveedorServicio,this.jTtoolBarFacturaProveedorServicio,this.jTtoolBarDetalleFacturaProveedorServicio);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaProveedorServicio=this.jTabbedPaneBusquedasFacturaProveedorServicio; 
		
		final JPanel jPanelParametrosReportesFacturaProveedorServicio=this.jPanelParametrosReportesFacturaProveedorServicio;
		//final JScrollPane jScrollPanelDatosFacturaProveedorServicio=this.jScrollPanelDatosFacturaProveedorServicio;
		final JTable jTableDatosFacturaProveedorServicio=this.jTableDatosFacturaProveedorServicio;		
		final JPanel jPanelPaginacionFacturaProveedorServicio=this.jPanelPaginacionFacturaProveedorServicio;
		//final JScrollPane jScrollPanelDatosEdicionFacturaProveedorServicio=this.jScrollPanelDatosEdicionFacturaProveedorServicio;
		final JPanel jPanelAccionesFacturaProveedorServicio=this.jPanelAccionesFacturaProveedorServicio;
		
		JPanel jPanelCamposAuxiliarFacturaProveedorServicio=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarFacturaProveedorServicio=new JPanel();
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			jPanelCamposAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelCamposFacturaProveedorServicio;
			jPanelAccionesFormularioAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelAccionesFormularioFacturaProveedorServicio;
		}
		
		final JPanel jPanelCamposFacturaProveedorServicio=jPanelCamposAuxiliarFacturaProveedorServicio;
		final JPanel jPanelAccionesFormularioFacturaProveedorServicio=jPanelAccionesFormularioAuxiliarFacturaProveedorServicio;
		
		
		final JMenuBar jmenuBarFacturaProveedorServicio=this.jmenuBarFacturaProveedorServicio;		
		final JToolBar jTtoolBarFacturaProveedorServicio=this.jTtoolBarFacturaProveedorServicio;
				
		JMenuBar jmenuBarDetalleAuxiliarFacturaProveedorServicio=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaProveedorServicio=new JToolBar();
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			jmenuBarDetalleAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jmenuBarDetalleFacturaProveedorServicio;
			jTtoolBarDetalleAuxiliarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jTtoolBarDetalleFacturaProveedorServicio;		
		}
		
		final JMenuBar jmenuBarDetalleFacturaProveedorServicio=jmenuBarDetalleAuxiliarFacturaProveedorServicio;
		final JToolBar jTtoolBarDetalleFacturaProveedorServicio=jTtoolBarDetalleAuxiliarFacturaProveedorServicio;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaProveedorServicio;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaProveedorServicio;
			processRunnable.jTableDatos=jTableDatosFacturaProveedorServicio;
			processRunnable.jPanelCampos=jPanelCamposFacturaProveedorServicio;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaProveedorServicio;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaProveedorServicio;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaProveedorServicio;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaProveedorServicio;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaProveedorServicio;
			processRunnable.jTtoolBar=jTtoolBarFacturaProveedorServicio;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaProveedorServicio;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasFacturaProveedorServicio ,jPanelParametrosReportesFacturaProveedorServicio, jTableDatosFacturaProveedorServicio,/*jScrollPanelDatosFacturaProveedorServicio,*/jPanelCamposFacturaProveedorServicio,jPanelPaginacionFacturaProveedorServicio, /*jScrollPanelDatosEdicionFacturaProveedorServicio,*/ jPanelAccionesFacturaProveedorServicio,jPanelAccionesFormularioFacturaProveedorServicio,jmenuBarFacturaProveedorServicio,jmenuBarDetalleFacturaProveedorServicio,jTtoolBarFacturaProveedorServicio,jTtoolBarDetalleFacturaProveedorServicio));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesFacturaProveedorServicio(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarFacturaProveedorServicio(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuFacturaProveedorServicio(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarFacturaProveedorServicio(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarFacturaProveedorServicio,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFacturaProveedorServicio,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuFacturaProveedorServicio(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarFacturaProveedorServicio,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFacturaProveedorServicio,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.facturaproveedorservicioConstantesFunciones.getsFinalQueryFacturaProveedorServicio();
		String  finalQueryPaginacionTodos=this.facturaproveedorservicioConstantesFunciones.getsFinalQueryFacturaProveedorServicio();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=FacturaProveedorServicioConstantesFunciones.getArrayColumnasGlobalesNoFacturaProveedorServicio(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=FacturaProveedorServicioConstantesFunciones.getArrayColumnasGlobalesFacturaProveedorServicio(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			//SE CAMBIA FUNCIONALIDAD DE MODULO POR ALGUNO PRIORITARIO
			Modulo moduloActualAux=new Modulo();
			
			moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,!esBusqueda,esBusqueda,arrColumnasGlobales,FacturaProveedorServicioConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.facturaproveedorserviciosEliminados= new ArrayList<FacturaProveedorServicio>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessFacturaProveedorServicio();
		
				///*FacturaProveedorServicioSessionBean*/this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			
			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=FacturaProveedorServicioConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=FacturaProveedorServicioConstantesFunciones.getClassesForeignKeysOfFacturaProveedorServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/facturaproveedorservicio."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			facturaproveedorserviciosAux= new ArrayList<FacturaProveedorServicio>();
			
				
			facturaproveedorservicioLogic.setDatosCliente(this.datosCliente);
			facturaproveedorservicioLogic.setDatosDeep(this.datosDeep);
			facturaproveedorservicioLogic.setIsConDeep(true);
			
			
			facturaproveedorservicioLogic.getFacturaProveedorServicioDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					facturaproveedorservicioLogic.getTodosFacturaProveedorServicios(finalQueryGlobal,pagination);
					
					//facturaproveedorservicioLogic.getTodosFacturaProveedorServiciosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(facturaproveedorservicioLogic.getFacturaProveedorServicios()==null|| facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorserviciosAux= new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux= new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorservicioLogic.getTodosFacturaProveedorServicios(finalQueryGlobal+"",this.pagination);												
							
							//facturaproveedorservicioLogic.getTodosFacturaProveedorServiciosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorservicioLogic.getFacturaProveedorServicios() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());					
							facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idFacturaProveedorServicio=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idFacturaProveedorServicio=this.idActual;
				
				} else if(this.idFacturaProveedorServicioActual!=null && this.idFacturaProveedorServicioActual!=0L) {
					idFacturaProveedorServicio=idFacturaProveedorServicioActual;
				}
				
					
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndicePorId(idFacturaProveedorServicio);
				
				this.facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					facturaproveedorservicioLogic.getEntity(idFacturaProveedorServicio);
					
					//facturaproveedorservicioLogic.getEntityWithConnection(idFacturaProveedorServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
					facturaproveedorservicioLogic.getFacturaProveedorServicios().add(facturaproveedorservicioLogic.getFacturaProveedorServicio());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
					this.facturaproveedorservicios.add(facturaproveedorservicio);
				}
				
				if(facturaproveedorservicioLogic.getFacturaProveedorServicio()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdCliente",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdCliente",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdCuentaContableCreditoFiscalServicios",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdCuentaContableCreditoFiscalServicios",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdEjercicio",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdEjercicio",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdEmpleado",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdEmpleado",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdEmpresa",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdEmpresa",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdModulo",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdModulo",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdPeriodo",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdPeriodo",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdSucursal",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdSucursal",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDocumento")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoDocumento",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoDocumento",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoMovimientoModulo")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoMovimientoModulo",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoMovimientoModulo",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionFuente1")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionFuente1(finalQueryGlobal,pagination,id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionFuente1(finalQueryGlobal,pagination,id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoRetencionFuente1",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoRetencionFuente1",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionIva1")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionIva1(finalQueryGlobal,pagination,id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionIva1(finalQueryGlobal,pagination,id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoRetencionIva1",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoRetencionIva1",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoTransaccionModulo",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoTransaccionModulo",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTributario")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTipoTributario",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTipoTributario",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios()==null||facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedorservicios==null|| facturaproveedorservicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
						facturaproveedorserviciosAux.addAll(facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorserviciosAux=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorserviciosAux.addAll(facturaproveedorservicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorServicioConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedorServicios("FK_IdTransaccion",facturaproveedorservicioLogic.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedorServicios("FK_IdTransaccion",facturaproveedorservicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioLogic.setFacturaProveedorServicios(new ArrayList<FacturaProveedorServicio>());
						facturaproveedorservicioLogic.getFacturaProveedorServicios().addAll(facturaproveedorserviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicios=new ArrayList<FacturaProveedorServicio>();
							facturaproveedorservicios.addAll(facturaproveedorserviciosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesFacturaProveedorServicio();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessFacturaProveedorServicio();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaproveedorservicioLogic.getFacturaProveedorServicios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturaproveedorservicios.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaproveedorservicioLogic.getFacturaProveedorServicios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturaproveedorservicios.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(FacturaProveedorServicio facturaproveedorservicio) {
		Boolean permite=true;
		
		if(this.facturaproveedorservicio.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=FacturaProveedorServicioConstantesFunciones.getOrderByListaFacturaProveedorServicio();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=FacturaProveedorServicioConstantesFunciones.getOrderByListaFacturaProveedorServicio();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				if(facturaproveedorservicio.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorservicioTotales=facturaproveedorservicio;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedorServicio facturaproveedorservicio:this.facturaproveedorservicios) {
				if(facturaproveedorservicio.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorservicioTotales=facturaproveedorservicio;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.facturaproveedorservicioAux=new FacturaProveedorServicio();
			this.facturaproveedorservicioAux.setsType(Constantes2.S_TOTALES);
			this.facturaproveedorservicioAux.setIsNew(false);
			this.facturaproveedorservicioAux.setIsChanged(false);
			this.facturaproveedorservicioAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				FacturaProveedorServicioConstantesFunciones.TotalizarValoresFilaFacturaProveedorServicio(this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this.facturaproveedorservicioAux);
				
				this.facturaproveedorservicioLogic.getFacturaProveedorServicios().add(this.facturaproveedorservicioAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				FacturaProveedorServicioConstantesFunciones.TotalizarValoresFilaFacturaProveedorServicio(this.facturaproveedorservicios,this.facturaproveedorservicioAux);
				
				this.facturaproveedorservicios.add(this.facturaproveedorservicioAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		facturaproveedorservicioTotales=new FacturaProveedorServicio();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturaproveedorservicioLogic.getFacturaProveedorServicios().remove(facturaproveedorservicioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturaproveedorservicios.remove(facturaproveedorservicioTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		facturaproveedorservicioTotales=new FacturaProveedorServicio();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				if(facturaproveedorservicio.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorservicioTotales=facturaproveedorservicio;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaProveedorServicioConstantesFunciones.TotalizarValoresFilaFacturaProveedorServicio(this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),facturaproveedorservicioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedorServicio facturaproveedorservicio:this.facturaproveedorservicios) {
				if(facturaproveedorservicio.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorservicioTotales=facturaproveedorservicio;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaProveedorServicioConstantesFunciones.TotalizarValoresFilaFacturaProveedorServicio(this.facturaproveedorservicios,facturaproveedorservicioTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getFacturaProveedorServiciosFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFiscalServicios";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpleadoSolicita()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleadoSolicita";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoDocumento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDocumento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoMovimiento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimiento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoMovimientoModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimientoModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoRetencionFuente1()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionFuente1";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoRetencionIva1()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIva1";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoTributario()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTributario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorServiciosFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getFacturaProveedorServiciosFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios(String sFinalQuery,Long id_cuenta_contable_credito_fiscal_servicios)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios(sFinalQuery,this.pagination,id_cuenta_contable_credito_fiscal_servicios);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpleadoSolicita(String sFinalQuery,Long id_empleado_solicita)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpleadoSolicita(sFinalQuery,this.pagination,id_empleado_solicita);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoDocumento(String sFinalQuery,Long id_tipo_documento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoDocumento(sFinalQuery,this.pagination,id_tipo_documento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoMovimiento(String sFinalQuery,Long id_tipo_movimiento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoMovimiento(sFinalQuery,this.pagination,id_tipo_movimiento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoMovimientoModulo(String sFinalQuery,Long id_tipo_movimiento_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoMovimientoModulo(sFinalQuery,this.pagination,id_tipo_movimiento_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoRetencionFuente1(String sFinalQuery,Long id_tipo_retencion_fuente1)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionFuente1(sFinalQuery,this.pagination,id_tipo_retencion_fuente1);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoRetencionIva1(String sFinalQuery,Long id_tipo_retencion_iva1)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoRetencionIva1(sFinalQuery,this.pagination,id_tipo_retencion_iva1);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTipoTributario(String sFinalQuery,Long id_tipo_tributario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTipoTributario(sFinalQuery,this.pagination,id_tipo_tributario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorServiciosFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLogic.getFacturaProveedorServiciosFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosFacturaProveedorServicio() {
		this.isPermisoTodoFacturaProveedorServicio=false;
		this.isPermisoNuevoFacturaProveedorServicio=false;
		this.isPermisoActualizarFacturaProveedorServicio=false;
		this.isPermisoActualizarOriginalFacturaProveedorServicio=false;
		this.isPermisoEliminarFacturaProveedorServicio=false;
		this.isPermisoGuardarCambiosFacturaProveedorServicio=false;
		this.isPermisoConsultaFacturaProveedorServicio=false;
		this.isPermisoBusquedaFacturaProveedorServicio=false;
		this.isPermisoReporteFacturaProveedorServicio=false;		
		this.isPermisoOrdenFacturaProveedorServicio=false;		
		this.isPermisoPaginacionMedioFacturaProveedorServicio=false;		
		this.isPermisoPaginacionAltoFacturaProveedorServicio=false;
		this.isPermisoPaginacionTodoFacturaProveedorServicio=false;
		this.isPermisoCopiarFacturaProveedorServicio=false;		
		this.isPermisoVerFormFacturaProveedorServicio=false;		
		this.isPermisoDuplicarFacturaProveedorServicio=false;		
		this.isPermisoOrdenFacturaProveedorServicio=false;		
	}
	
	public void setPermisosUsuarioFacturaProveedorServicio(Boolean isPermiso) {
		this.isPermisoTodoFacturaProveedorServicio=isPermiso;
		this.isPermisoNuevoFacturaProveedorServicio=isPermiso;
		this.isPermisoActualizarFacturaProveedorServicio=isPermiso;
		this.isPermisoActualizarOriginalFacturaProveedorServicio=isPermiso;
		this.isPermisoEliminarFacturaProveedorServicio=isPermiso;
		this.isPermisoGuardarCambiosFacturaProveedorServicio=isPermiso;
		this.isPermisoConsultaFacturaProveedorServicio=isPermiso;
		this.isPermisoBusquedaFacturaProveedorServicio=isPermiso;
		this.isPermisoReporteFacturaProveedorServicio=isPermiso;
		this.isPermisoOrdenFacturaProveedorServicio=isPermiso;		
		this.isPermisoPaginacionMedioFacturaProveedorServicio=isPermiso;		
		this.isPermisoPaginacionAltoFacturaProveedorServicio=isPermiso;		
		this.isPermisoPaginacionTodoFacturaProveedorServicio=isPermiso;		
		this.isPermisoCopiarFacturaProveedorServicio=isPermiso;		
		this.isPermisoVerFormFacturaProveedorServicio=isPermiso;		
		this.isPermisoDuplicarFacturaProveedorServicio=isPermiso;
		this.isPermisoOrdenFacturaProveedorServicio=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioFacturaProveedorServicio(Boolean isPermiso) {
		//this.isPermisoTodoFacturaProveedorServicio=isPermiso;
		this.isPermisoNuevoFacturaProveedorServicio=isPermiso;
		this.isPermisoActualizarFacturaProveedorServicio=isPermiso;
		this.isPermisoActualizarOriginalFacturaProveedorServicio=isPermiso;
		this.isPermisoEliminarFacturaProveedorServicio=isPermiso;
		this.isPermisoGuardarCambiosFacturaProveedorServicio=isPermiso;
		//this.isPermisoConsultaFacturaProveedorServicio=isPermiso;
		//this.isPermisoBusquedaFacturaProveedorServicio=isPermiso;
		//this.isPermisoReporteFacturaProveedorServicio=isPermiso;
		//this.isPermisoOrdenFacturaProveedorServicio=isPermiso;		
		//this.isPermisoPaginacionMedioFacturaProveedorServicio=isPermiso;		
		//this.isPermisoPaginacionAltoFacturaProveedorServicio=isPermiso;		
		//this.isPermisoPaginacionTodoFacturaProveedorServicio=isPermiso;		
		//this.isPermisoCopiarFacturaProveedorServicio=isPermiso;		
		//this.isPermisoDuplicarFacturaProveedorServicio=isPermiso;
		//this.isPermisoOrdenFacturaProveedorServicio=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioFacturaProveedorServicioClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(FacturaProveedorServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioFacturaProveedorServicioClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioFacturaProveedorServicioClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionFacturaProveedorServicioClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioFacturaProveedorServicioClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioFacturaProveedorServicio() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(FacturaProveedorServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoFacturaProveedorServicio=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarFacturaProveedorServicio=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalFacturaProveedorServicio=this.isPermisoActualizarFacturaProveedorServicio;
			this.isPermisoEliminarFacturaProveedorServicio=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosFacturaProveedorServicio=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaFacturaProveedorServicio=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaFacturaProveedorServicio=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoFacturaProveedorServicio=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteFacturaProveedorServicio=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaProveedorServicio=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioFacturaProveedorServicio=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoFacturaProveedorServicio=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoFacturaProveedorServicio=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarFacturaProveedorServicio=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormFacturaProveedorServicio=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarFacturaProveedorServicio=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaProveedorServicio=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosFacturaProveedorServicio.setToolTipText(this.jTableDatosFacturaProveedorServicio.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioFacturaProveedorServicio(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioFacturaProveedorServicio(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(FacturaProveedorServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(FacturaProveedorServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioFacturaProveedorServicio() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyFacturaProveedorServicioListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.tipodocumentosForeignKey=new ArrayList();
				this.empleadosolicitasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.tipotributariosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.tiporetencionfuente1sForeignKey=new ArrayList();
				this.tiporetencioniva1sForeignKey=new ArrayList();
				this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList();
				this.tipomovimientosForeignKey=new ArrayList();
				this.tipomovimientomodulosForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyFacturaProveedorServicioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(FacturaProveedorServicioJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyFacturaProveedorServicioListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoSolicitaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionFuente1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIva1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDocumentoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSolicitaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosolicitasForeignKey==null||this.empleadosolicitasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadoSolicitasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTributarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente1Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionfuente1sForeignKey==null||this.tiporetencionfuente1sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionFuente1sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva1Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencioniva1sForeignKey==null||this.tiporetencioniva1sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIva1sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditofiscalserviciossForeignKey==null||this.cuentacontablecreditofiscalserviciossForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyFacturaProveedorServicioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioReturnGeneral=new FacturaProveedorServicioParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_empresaFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_empresaFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_sucursalFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_sucursalFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_ejercicioFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_ejercicioFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_periodoFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_periodoFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_anioFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_anioFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_mesFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_mesFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_moduloFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_moduloFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_transaccionFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_transaccionFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_facturaFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_facturaFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_clienteFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_clienteFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoDocumento="";

				if(((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_documentoFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_documentoFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTipoDocumento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDocumento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDocumento, "");
						finalQueryGlobalTipoDocumento+=TipoDocumentoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDocumento=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoDocumentoActual();
					}
				} else {
					finalQueryGlobalTipoDocumento="NONE";
				}


				String finalQueryGlobalEmpleadoSolicita="";

				if(((this.empleadosolicitasForeignKey==null||this.empleadosolicitasForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_empleado_solicitaFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_empleado_solicitaFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleadoSolicita=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleadoSolicita=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleadoSolicita, "");
						finalQueryGlobalEmpleadoSolicita+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadoSolicitasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleadoSolicita=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidEmpleadoSolicitaActual();
					}
				} else {
					finalQueryGlobalEmpleadoSolicita="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_empleadoFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_empleadoFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalTipoTributario="";

				if(((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_tributarioFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_tributarioFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTributario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTributario=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTributario, "");
						finalQueryGlobalTipoTributario+=TipoTributarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTributario=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoTributarioActual();
					}
				} else {
					finalQueryGlobalTipoTributario="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_monedaFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_monedaFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalTipoRetencionFuente1="";

				if(((this.tiporetencionfuente1sForeignKey==null||this.tiporetencionfuente1sForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionFuente1=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionFuente1=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionFuente1, "");
						finalQueryGlobalTipoRetencionFuente1+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionFuente1sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionFuente1=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoRetencionFuente1Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionFuente1="NONE";
				}


				String finalQueryGlobalTipoRetencionIva1="";

				if(((this.tiporetencioniva1sForeignKey==null||this.tiporetencioniva1sForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIva1=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIva1=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIva1, "");
						finalQueryGlobalTipoRetencionIva1+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIva1sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIva1=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoRetencionIva1Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionIva1="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoFiscalServicios="";

				if(((this.cuentacontablecreditofiscalserviciossForeignKey==null||this.cuentacontablecreditofiscalserviciossForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoFiscalServicios=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoFiscalServicios=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoFiscalServicios, "");
						finalQueryGlobalCuentaContableCreditoFiscalServicios+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoFiscalServicios=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidCuentaContableCreditoFiscalServiciosActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoFiscalServicios="NONE";
				}


				String finalQueryGlobalTipoMovimiento="";

				if(((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimientoFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimientoFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoMovimiento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimiento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimiento, "");
						finalQueryGlobalTipoMovimiento+=TipoMovimientoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimiento=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoMovimientoActual();
					}
				} else {
					finalQueryGlobalTipoMovimiento="NONE";
				}


				String finalQueryGlobalTipoMovimientoModulo="";

				if(((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTipoMovimientoModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimientoModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimientoModulo, "");
						finalQueryGlobalTipoMovimientoModulo+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimientoModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoMovimientoModuloActual();
					}
				} else {
					finalQueryGlobalTipoMovimientoModulo="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedorServicio)
					 || (this.esRecargarFks && this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedorServicio)) {

					if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorservicioSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.cargarCombosLoteForeignKeyFacturaProveedorServicio(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalModulo,finalQueryGlobalTransaccion,finalQueryGlobalFactura,finalQueryGlobalCliente,finalQueryGlobalTipoDocumento,finalQueryGlobalEmpleadoSolicita,finalQueryGlobalEmpleado,finalQueryGlobalTipoTributario,finalQueryGlobalMoneda,finalQueryGlobalTipoRetencionFuente1,finalQueryGlobalTipoRetencionIva1,finalQueryGlobalCuentaContableCreditoFiscalServicios,finalQueryGlobalTipoMovimiento,finalQueryGlobalTipoMovimientoModulo,finalQueryGlobalTipoTransaccionModulo);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=facturaproveedorservicioReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=facturaproveedorservicioReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=facturaproveedorservicioReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=facturaproveedorservicioReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=facturaproveedorservicioReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=facturaproveedorservicioReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=facturaproveedorservicioReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=facturaproveedorservicioReturnGeneral.gettransaccionsForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=facturaproveedorservicioReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=facturaproveedorservicioReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTipoDocumento.equals("NONE")) {
				this.tipodocumentosForeignKey=facturaproveedorservicioReturnGeneral.gettipodocumentosForeignKey();
			}

			if(!finalQueryGlobalEmpleadoSolicita.equals("NONE")) {
				this.empleadosolicitasForeignKey=facturaproveedorservicioReturnGeneral.getempleadosolicitasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=facturaproveedorservicioReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalTipoTributario.equals("NONE")) {
				this.tipotributariosForeignKey=facturaproveedorservicioReturnGeneral.gettipotributariosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=facturaproveedorservicioReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionFuente1.equals("NONE")) {
				this.tiporetencionfuente1sForeignKey=facturaproveedorservicioReturnGeneral.gettiporetencionfuente1sForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIva1.equals("NONE")) {
				this.tiporetencioniva1sForeignKey=facturaproveedorservicioReturnGeneral.gettiporetencioniva1sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoFiscalServicios.equals("NONE")) {
				this.cuentacontablecreditofiscalserviciossForeignKey=facturaproveedorservicioReturnGeneral.getcuentacontablecreditofiscalserviciossForeignKey();
			}

			if(!finalQueryGlobalTipoMovimiento.equals("NONE")) {
				this.tipomovimientosForeignKey=facturaproveedorservicioReturnGeneral.gettipomovimientosForeignKey();
			}

			if(!finalQueryGlobalTipoMovimientoModulo.equals("NONE")) {
				this.tipomovimientomodulosForeignKey=facturaproveedorservicioReturnGeneral.gettipomovimientomodulosForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=facturaproveedorservicioReturnGeneral.gettipotransaccionmodulosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyFacturaProveedorServicio()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyTransaccion();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTipoDocumento();
			this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyTipoTributario();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
			this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
			this.addItemDefectoCombosForeignKeyTipoMovimiento();
			this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.facturaproveedorservicioSessionBean==null) {
				this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDocumento()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				TipoDocumento tipodocumento=new TipoDocumento();
				TipoDocumentoConstantesFunciones.setTipoDocumentoDescripcion(tipodocumento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodocumento.setId(null);

				if(!TipoDocumentoConstantesFunciones.ExisteEnLista(this.tipodocumentosForeignKey,tipodocumento,true)) {

					this.tipodocumentosForeignKey.add(0,tipodocumento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleadoSolicita()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {
				Empleado empleadosolicita=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleadosolicita,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleadosolicita.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosolicitasForeignKey,empleadosolicita,true)) {

					this.empleadosolicitasForeignKey.add(0,empleadosolicita);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTributario()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				TipoTributario tipotributario=new TipoTributario();
				TipoTributarioConstantesFunciones.setTipoTributarioDescripcion(tipotributario,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotributario.setId(null);

				if(!TipoTributarioConstantesFunciones.ExisteEnLista(this.tipotributariosForeignKey,tipotributario,true)) {

					this.tipotributariosForeignKey.add(0,tipotributario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionFuente1()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {
				TipoRetencion tiporetencionfuente1=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionfuente1,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionfuente1.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionfuente1sForeignKey,tiporetencionfuente1,true)) {

					this.tiporetencionfuente1sForeignKey.add(0,tiporetencionfuente1);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIva1()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {
				TipoRetencion tiporetencioniva1=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencioniva1,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencioniva1.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencioniva1sForeignKey,tiporetencioniva1,true)) {

					this.tiporetencioniva1sForeignKey.add(0,tiporetencioniva1);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {
				CuentaContable cuentacontablecreditofiscalservicios=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditofiscalservicios,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditofiscalservicios.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditofiscalserviciossForeignKey,cuentacontablecreditofiscalservicios,true)) {

					this.cuentacontablecreditofiscalserviciossForeignKey.add(0,cuentacontablecreditofiscalservicios);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimiento()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				TipoMovimiento tipomovimiento=new TipoMovimiento();
				TipoMovimientoConstantesFunciones.setTipoMovimientoDescripcion(tipomovimiento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimiento.setId(null);

				if(!TipoMovimientoConstantesFunciones.ExisteEnLista(this.tipomovimientosForeignKey,tipomovimiento,true)) {

					this.tipomovimientosForeignKey.add(0,tipomovimiento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimientoModulo()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				TipoMovimientoModulo tipomovimientomodulo=new TipoMovimientoModulo();
				TipoMovimientoModuloConstantesFunciones.setTipoMovimientoModuloDescripcion(tipomovimientomodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimientomodulo.setId(null);

				if(!TipoMovimientoModuloConstantesFunciones.ExisteEnLista(this.tipomovimientomodulosForeignKey,tipomovimientomodulo,true)) {

					this.tipomovimientomodulosForeignKey.add(0,tipomovimientomodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.facturaproveedorservicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyFacturaProveedorServicio()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyFacturaProveedorServicio(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyFacturaProveedorServicio()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualModuloForeignKey(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR,false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.facturaproveedorservicio.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedorservicio.setfecha_vence(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedorservicio.setfecha_validez(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedorservicio.setanexo_fecha_validez(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedorServicio();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio)throws Exception {	
		try {
			
			this.setActualTransaccionForeignKey(facturaproveedorservicio.getid_transaccion(),false,"Formulario");
			this.setActualFacturaForeignKey(facturaproveedorservicio.getid_factura(),false,"Formulario");
			this.setActualClienteForeignKey(facturaproveedorservicio.getid_cliente(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(facturaproveedorservicio.getid_tipo_documento(),false,"Formulario");
			this.setActualEmpleadoSolicitaForeignKey(facturaproveedorservicio.getid_empleado_solicita(),false,"Formulario");
			this.setActualEmpleadoForeignKey(facturaproveedorservicio.getid_empleado(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(facturaproveedorservicio.getid_tipo_tributario(),false,"Formulario");
			this.setActualTipoRetencionFuente1ForeignKey(facturaproveedorservicio.getid_tipo_retencion_fuente1(),false,"Formulario");
			this.setActualTipoRetencionIva1ForeignKey(facturaproveedorservicio.getid_tipo_retencion_iva1(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalServiciosForeignKey(facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(facturaproveedorservicio.getid_tipo_movimiento(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(facturaproveedorservicio.getid_tipo_movimiento_modulo(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(facturaproveedorservicio.getid_tipo_transaccion_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,String sTipoEvento)throws Exception {	
		try {
			
			

				if(facturaproveedorservicio.getFactura()!=null && !sTipoEvento.equals("id_facturaFacturaProveedorServicio")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(facturaproveedorservicio.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(facturaproveedorservicio.getCliente()!=null && !sTipoEvento.equals("id_clienteFacturaProveedorServicio")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(facturaproveedorservicio.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(facturaproveedorservicio.getEmpleadoSolicita()!=null && !sTipoEvento.equals("id_empleado_solicitaFacturaProveedorServicio")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosolicitasForeignKey=new ArrayList<Empleado>();
					this.empleadosolicitasForeignKey.add(facturaproveedorservicio.getEmpleadoSolicita());

					this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
					this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
				}

				if(facturaproveedorservicio.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoFacturaProveedorServicio")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(facturaproveedorservicio.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyFacturaProveedorServicio()throws Exception {	
		try {
			
			this.setActualTransaccionForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_transaccion(),false,"Formulario");
			this.setActualFacturaForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualClienteForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_documento(),false,"Formulario");
			this.setActualEmpleadoSolicitaForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_empleado_solicita(),false,"Formulario");
			this.setActualEmpleadoForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_tributario(),false,"Formulario");
			this.setActualTipoRetencionFuente1ForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_retencion_fuente1(),false,"Formulario");
			this.setActualTipoRetencionIva1ForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_retencion_iva1(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalServiciosForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_movimiento(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_movimiento_modulo(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.facturaproveedorservicioConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedorServicio()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyFacturaProveedorServicio()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyFacturaProveedorServicio()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroFacturaProveedorServicio()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyFacturaProveedorServicio()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
			this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameTipoTributariosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIva1sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyFacturaProveedorServicio(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadoSolicitasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionFuente1sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIva1sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyFacturaProveedorServicio()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	










































	
	

	public FacturaProveedorServicioBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public FacturaProveedorServicioBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public FacturaProveedorServicioBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean(); 
		this.facturaproveedorservicioConstantesFunciones=new FacturaProveedorServicioConstantesFunciones(); 
		this.facturaproveedorservicioBean=new FacturaProveedorServicio();//(this.facturaproveedorservicioConstantesFunciones); 		
		this.facturaproveedorservicioReturnGeneral=new FacturaProveedorServicioParameterReturnGeneral(); 
		
		this.facturaproveedorservicioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.facturaproveedorservicioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public FacturaProveedorServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public FacturaProveedorServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public FacturaProveedorServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessFacturaProveedorServicio(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.facturaproveedorservicioConstantesFunciones=new FacturaProveedorServicioConstantesFunciones(); 
			this.facturaproveedorservicioBean=new FacturaProveedorServicio();//this.facturaproveedorservicioConstantesFunciones); 			
			this.facturaproveedorservicioReturnGeneral=new FacturaProveedorServicioParameterReturnGeneral(); 
		
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Factura Proveedor Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.facturaproveedorservicio=new FacturaProveedorServicio();
			this.facturaproveedorservicios = new ArrayList<FacturaProveedorServicio>();
			this.facturaproveedorserviciosAux = new ArrayList<FacturaProveedorServicio>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic=new FacturaProveedorServicioLogic();
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			//this.facturaproveedorservicioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.facturaproveedorservicioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormFacturaProveedorServicio);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaProveedorServicio);	
					}
					
					if(this.jInternalFrameImportacionFacturaProveedorServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaProveedorServicio);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByFacturaProveedorServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByFacturaProveedorServicio);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaProveedorServicio);
				this.jInternalFrameDetalleFormFacturaProveedorServicio.setVisible(false);
				this.jInternalFrameDetalleFormFacturaProveedorServicio.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaProveedorServicio);
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setVisible(false);
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionFacturaProveedorServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionFacturaProveedorServicio);
					this.jInternalFrameImportacionFacturaProveedorServicio.setVisible(false);
					this.jInternalFrameImportacionFacturaProveedorServicio.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByFacturaProveedorServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByFacturaProveedorServicio);
					this.jInternalFrameOrderByFacturaProveedorServicio.setVisible(false);
					this.jInternalFrameOrderByFacturaProveedorServicio.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idFacturaProveedorServicioActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=FacturaProveedorServicioConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.facturaproveedorservicioReturnGeneral=new FacturaProveedorServicioParameterReturnGeneral();
			
			this.facturaproveedorservicioParameterGeneral=new FacturaProveedorServicioParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.facturaproveedorservicioLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(FacturaProveedorServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),this.facturaproveedorservicioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),this.facturaproveedorservicioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaDuplicarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaCopiarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaVerFormFacturaProveedorServicio=true;
			this.isVisibilidadCeldaOrdenFacturaProveedorServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpleadoSolicita=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoDocumento=true;
			this.isVisibilidadFK_IdTipoMovimiento=true;
			this.isVisibilidadFK_IdTipoMovimientoModulo=true;
			this.isVisibilidadFK_IdTipoRetencionFuente1=true;
			this.isVisibilidadFK_IdTipoRetencionIva1=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTipoTributario=true;
			this.isVisibilidadFK_IdTransaccion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosFacturaProveedorServicio();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioFacturaProveedorServicio(false);
			
			this.setPermisosUsuarioFacturaProveedorServicio();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado() 
				|| (this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado() && this.facturaproveedorservicioSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioFacturaProveedorServicioClasesRelacionadas();
			}
			
			if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioFacturaProveedorServicioClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosFacturaProveedorServicio();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualFacturaProveedorServicio();
			}
			
			if(!this.isPermisoBusquedaFacturaProveedorServicio) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioFacturaProveedorServicio,this.isPermisoPaginacionMedioFacturaProveedorServicio,this.isPermisoPaginacionTodoFacturaProveedorServicio);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(FacturaProveedorServicioConstantesFunciones.getTiposSeleccionarFacturaProveedorServicio());
				
				this.tiposColumnasSelect=FacturaProveedorServicioConstantesFunciones.getTiposSeleccionarFacturaProveedorServicio(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioFacturaProveedorServicio();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioFacturaProveedorServicio(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioFacturaProveedorServicio(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedorServicio() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.moduloLogic=new ModuloLogic();
			this.transaccionLogic=new TransaccionLogic();
			this.facturaLogic=new FacturaLogic();
			this.clienteLogic=new ClienteLogic();
			this.tipodocumentoLogic=new TipoDocumentoLogic();
			this.empleadosolicitaLogic=new EmpleadoLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.tipotributarioLogic=new TipoTributarioLogic();
			this.monedaLogic=new MonedaLogic();
			this.tiporetencionfuente1Logic=new TipoRetencionLogic();
			this.tiporetencioniva1Logic=new TipoRetencionLogic();
			this.cuentacontablecreditofiscalserviciosLogic=new CuentaContableLogic();
			this.tipomovimientoLogic=new TipoMovimientoLogic();
			this.tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				facturaproveedorservicioImplementable= (FacturaProveedorServicioImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaProveedorServicioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				facturaproveedorservicioImplementableHome= (FacturaProveedorServicioImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaProveedorServicioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.facturaproveedorservicios= new ArrayList<FacturaProveedorServicio>();
			this.facturaproveedorserviciosEliminados= new ArrayList<FacturaProveedorServicio>();
						
			this.isEsNuevoFacturaProveedorServicio=false;
			this.esParaAccionDesdeFormularioFacturaProveedorServicio=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idFacturaActual=0L;
			this.idClienteActual=0L;
			this.idEmpleadoSolicitaActual=0L;
			this.idEmpleadoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>() ;
			this.empleadosolicitasForeignKey=new ArrayList<Empleado>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>() ;
			this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>() ;
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>() ;
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyFacturaProveedorServicio(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroFacturaProveedorServicio();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=FacturaProveedorServicioConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingFacturaProveedorServicio(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioFacturaProveedorServicio();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioFacturaProveedorServicio();
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasFacturaProveedorServicio.getTabCount(); i++) {
					this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessFacturaProveedorServicio(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga FacturaProveedorServicio: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectFacturaProveedorServicio() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesFacturaProveedorServicio")) {
				iIndex=this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessFacturaProveedorServicio();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyFacturaProveedorServicio(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyFacturaProveedorServicio(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyFacturaProveedorServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyFacturaProveedorServicioListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyFacturaProveedorServicio();
		
		this.cargarCombosFrameForeignKeyFacturaProveedorServicio();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyFacturaProveedorServicio();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyFacturaProveedorServicio();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoDocumento(this.tipodocumentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSolicita(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoSolicitaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
				this.cargarCombosFrameEmpleadoSolicitasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleadoSolicita(this.empleadosolicitasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTributario(this.tipotributariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente1(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionFuente1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
				this.cargarCombosFrameTipoRetencionFuente1sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionFuente1(this.tiporetencionfuente1sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva1(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIva1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
				this.cargarCombosFrameTipoRetencionIva1sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIva1(this.tiporetencioniva1sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalServicios(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
				this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoFiscalServicios(this.cuentacontablecreditofiscalserviciossForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimiento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoMovimiento(this.tipomovimientosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoMovimientoModulo(this.tipomovimientomodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoFacturaProveedorServicioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			
			if(jTableDatosFacturaProveedorServicio.getRowCount()>=1) {
				jTableDatosFacturaProveedorServicio.removeRowSelectionInterval(0, jTableDatosFacturaProveedorServicio.getRowCount()-1);						
			}
			
			this.isEsNuevoFacturaProveedorServicio=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoFacturaProveedorServicio(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesFacturaProveedorServicio(true);			
			//this.facturaproveedorservicio=new FacturaProveedorServicio();
			//this.facturaproveedorservicio.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio() ;
			
			if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedorServicio(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.facturaproveedorservicio);	
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);				
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar FacturaProveedorServicio: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarFacturaProveedorServicioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosFacturaProveedorServicio.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosFacturaProveedorServicio.getSelectedRows().length;			
			}
			
			facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoFacturaProveedorServicio--;			
				//FacturaProveedorServicio facturaproveedorservicioAux= new FacturaProveedorServicio();			
				//facturaproveedorservicioAux.setId(this.iIdNuevoFacturaProveedorServicio);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//FacturaProveedorServicio facturaproveedorservicioOrigen=new FacturaProveedorServicio();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(FacturaProveedorServicio facturaproveedorservicioOrigen : facturaproveedorserviciosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							facturaproveedorservicioOrigen =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorservicioOrigen =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaFacturaProveedorServicio();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.facturaproveedorservicio.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosFacturaProveedorServicio(facturaproveedorservicioOrigen,this.facturaproveedorservicio,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaproveedorservicioLogic.getFacturaProveedorServicios().add(this.facturaproveedorservicioAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicios.add(this.facturaproveedorservicioAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
				
				this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedorServicio(), this.getIndiceNuevoFacturaProveedorServicio());
				
				int iLastRow =  this.jTableDatosFacturaProveedorServicio.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaProveedorServicio.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaProveedorServicio.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();									
		
			FacturaProveedorServicio facturaproveedorservicioOrigen=new FacturaProveedorServicio();
			FacturaProveedorServicio facturaproveedorservicioDestino=new FacturaProveedorServicio();
				
			facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosFacturaProveedorServicio.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || facturaproveedorserviciosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosFacturaProveedorServicio.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioOrigen =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaproveedorservicioOrigen =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorservicioDestino =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaproveedorservicioDestino =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				facturaproveedorservicioOrigen =facturaproveedorserviciosSeleccionados.get(0);
				facturaproveedorservicioDestino =facturaproveedorserviciosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosFacturaProveedorServicio(facturaproveedorservicioOrigen,facturaproveedorservicioDestino,true,false);
				
				facturaproveedorservicioDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaproveedorservicioDestino,facturaproveedorservicioLogic.getFacturaProveedorServicios());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorservicioDestino,facturaproveedorservicios);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
				
				//this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedorServicio(), this.getIndiceNuevoFacturaProveedorServicio());
				
				int iLastRow =  this.jTableDatosFacturaProveedorServicio.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaProveedorServicio.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaProveedorServicio.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesFacturaProveedorServicio.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(!isVisible);
			this.jPanelPaginacionFacturaProveedorServicio.setVisible(!isVisible);
			this.jPanelAccionesFacturaProveedorServicio.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameFacturaProveedorServicio();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoFacturaProveedorServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionFacturaProveedorServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByFacturaProveedorServicio();
			
			this.abrirFrameOrderByFacturaProveedorServicio();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByFacturaProveedorServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleFacturaProveedorServicio(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaProveedorServicio);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormFacturaProveedorServicio.isMaximum()) {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormFacturaProveedorServicio.setSize(this.jInternalFrameDetalleFormFacturaProveedorServicio.iWidthFormulario,this.jInternalFrameDetalleFormFacturaProveedorServicio.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormFacturaProveedorServicio.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormFacturaProveedorServicio.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormFacturaProveedorServicio.isMaximum()) {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jContentPaneDetalleFacturaProveedorServicio.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedorServicio.jContentPaneDetalleFacturaProveedorServicio.getWidth(),FacturaProveedorServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedorServicio.jContentPaneDetalleFacturaProveedorServicio.getWidth(),FacturaProveedorServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedorServicio.jContentPaneDetalleFacturaProveedorServicio.getWidth(),FacturaProveedorServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormFacturaProveedorServicio.setVisible(true);
	        this.jInternalFrameDetalleFormFacturaProveedorServicio.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByFacturaProveedorServicio() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByFacturaProveedorServicio==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByFacturaProveedorServicio=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaProveedorServicio,false,this);
				} else {
					this.jInternalFrameOrderByFacturaProveedorServicio=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaProveedorServicio,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByFacturaProveedorServicio);
				this.jInternalFrameOrderByFacturaProveedorServicio.setVisible(false);
				this.jInternalFrameOrderByFacturaProveedorServicio.setSelected(false);
				
				this.jInternalFrameOrderByFacturaProveedorServicio.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaProveedorServicio"));
				
				this.inicializarActualizarBindingTablaOrderByFacturaProveedorServicio();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionFacturaProveedorServicio() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionFacturaProveedorServicio==null) {
				
				this.jInternalFrameImportacionFacturaProveedorServicio=new ImportacionJInternalFrame(FacturaProveedorServicioConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaProveedorServicio);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionFacturaProveedorServicio);
				this.jInternalFrameImportacionFacturaProveedorServicio.setVisible(false);
				this.jInternalFrameImportacionFacturaProveedorServicio.setSelected(false);


				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaProveedorServicio"));
				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaProveedorServicio"));
				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaProveedorServicio"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoFacturaProveedorServicio() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio==null) {
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio=new ReporteDinamicoJInternalFrame(FacturaProveedorServicioConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaProveedorServicio);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaProveedorServicio);
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setVisible(false);
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedorServicio"));
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedorServicio"));
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedorServicio"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedorServicio();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleFacturaProveedorServicio() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaProveedorServicio);
			
	       	this.jInternalFrameDetalleFormFacturaProveedorServicio.setVisible(false);
	        this.jInternalFrameDetalleFormFacturaProveedorServicio.setSelected(false);
			
			//this.jInternalFrameDetalleFormFacturaProveedorServicio.dispose();
			//this.jInternalFrameDetalleFormFacturaProveedorServicio=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoFacturaProveedorServicio() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setVisible(true);
	        this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionFacturaProveedorServicio() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionFacturaProveedorServicio.setVisible(true);
	        this.jInternalFrameImportacionFacturaProveedorServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByFacturaProveedorServicio() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByFacturaProveedorServicio.setVisible(true);
	        this.jInternalFrameOrderByFacturaProveedorServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByFacturaProveedorServicio() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByFacturaProveedorServicio.setVisible(false);
	        this.jInternalFrameOrderByFacturaProveedorServicio.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoFacturaProveedorServicio() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setVisible(false);
	        this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionFacturaProveedorServicio() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionFacturaProveedorServicio.setVisible(false);
	        this.jInternalFrameImportacionFacturaProveedorServicio.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableCreditoFiscalServicios(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoFiscalServicios";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
						TitledBorder titledBorderCuentaContableCreditoFiscalServicios=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoFiscalServicios.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoFiscalServicios(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarFacturaProveedorServicio(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarFacturaProveedorServicio(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesFacturaProveedorServicio(true);
			//this.isEsNuevoFacturaProveedorServicio=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false) ;
			
			if(facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedorServicio(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaFacturaProveedorServicioActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarFacturaProveedorServicio(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesFacturaProveedorServicio(true);
			//this.isEsNuevoFacturaProveedorServicio=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.facturaproveedorservicio.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false) ;
			
			if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedorServicio(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Factura")) {
				if(!this.facturaproveedorservicioConstantesFunciones.cargarid_facturaFacturaProveedorServicio) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.facturaproveedorservicioConstantesFunciones.cargarid_clienteFacturaProveedorServicio) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("EmpleadoSolicita")) {
				if(!this.facturaproveedorservicioConstantesFunciones.cargarid_empleado_solicitaFacturaProveedorServicio) {
					this.cargarCombosEmpleadoSolicitasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
					this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado_solicita (id);

				this.recargarComboTablaEmpleadoSolicita(this.empleadosolicitasForeignKey);

			}
			
			if(sType.equals("Empleado")) {
				if(!this.facturaproveedorservicioConstantesFunciones.cargarid_empleadoFacturaProveedorServicio) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoDocumento(List<TipoDocumento> tipodocumentosForeignKey)throws Exception{
		TableColumn tableColumnTipoDocumento=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO));
		TableCellEditor tableCellEditorTipoDocumento =tableColumnTipoDocumento.getCellEditor();

		TipoDocumentoTableCell tipodocumentoTableCellFk=(TipoDocumentoTableCell)tableCellEditorTipoDocumento;

		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.settipodocumentosForeignKey(tipodocumentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodocumentoTableCellFk.setRowActual(intSelectedRow);
			//tipodocumentoTableCellFk.settipodocumentosForeignKeyActual(tipodocumentosForeignKey);
		//}


		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.RecargarTipoDocumentosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleadoSolicita(List<Empleado> empleadosolicitasForeignKey)throws Exception{
		TableColumn tableColumnEmpleadoSolicita=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA));
		TableCellEditor tableCellEditorEmpleadoSolicita =tableColumnEmpleadoSolicita.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleadoSolicita;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosolicitasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosolicitasForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTributario(List<TipoTributario> tipotributariosForeignKey)throws Exception{
		TableColumn tableColumnTipoTributario=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));
		TableCellEditor tableCellEditorTipoTributario =tableColumnTipoTributario.getCellEditor();

		TipoTributarioTableCell tipotributarioTableCellFk=(TipoTributarioTableCell)tableCellEditorTipoTributario;

		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.settipotributariosForeignKey(tipotributariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotributarioTableCellFk.setRowActual(intSelectedRow);
			//tipotributarioTableCellFk.settipotributariosForeignKeyActual(tipotributariosForeignKey);
		//}


		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.RecargarTipoTributariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTipoRetencionFuente1(List<TipoRetencion> tiporetencionfuente1sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionFuente1=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1));
		TableCellEditor tableCellEditorTipoRetencionFuente1 =tableColumnTipoRetencionFuente1.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionFuente1;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionfuente1sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionfuente1sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIva1(List<TipoRetencion> tiporetencioniva1sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIva1=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1));
		TableCellEditor tableCellEditorTipoRetencionIva1 =tableColumnTipoRetencionIva1.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionIva1;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencioniva1sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencioniva1sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoFiscalServicios(List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoFiscalServicios=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS));
		TableCellEditor tableCellEditorCuentaContableCreditoFiscalServicios =tableColumnCuentaContableCreditoFiscalServicios.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoFiscalServicios;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditofiscalserviciossForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditofiscalserviciossForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimiento(List<TipoMovimiento> tipomovimientosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimiento=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO));
		TableCellEditor tableCellEditorTipoMovimiento =tableColumnTipoMovimiento.getCellEditor();

		TipoMovimientoTableCell tipomovimientoTableCellFk=(TipoMovimientoTableCell)tableCellEditorTipoMovimiento;

		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.settipomovimientosForeignKey(tipomovimientosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientoTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientoTableCellFk.settipomovimientosForeignKeyActual(tipomovimientosForeignKey);
		//}


		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.RecargarTipoMovimientosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimientoModulo(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimientoModulo=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO));
		TableCellEditor tableCellEditorTipoMovimientoModulo =tableColumnTipoMovimientoModulo.getCellEditor();

		TipoMovimientoModuloTableCell tipomovimientomoduloTableCellFk=(TipoMovimientoModuloTableCell)tableCellEditorTipoMovimientoModulo;

		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKey(tipomovimientomodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientomoduloTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKeyActual(tipomovimientomodulosForeignKey);
		//}


		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.RecargarTipoMovimientoModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado_solicita (Long id) throws Exception {
		this.setActualEmpleadoSolicitaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesFacturaProveedorServicio(false);
			
			//if(!this.isEsNuevoFacturaProveedorServicio) {								
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				
			}
			
			if(this.permiteMantenimiento(this.facturaproveedorservicio)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoFacturaProveedorServicio=true;
					this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
					this.isEsNuevoFacturaProveedorServicio=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoFacturaProveedorServicio=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoFacturaProveedorServicio=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(false);
				
				this.habilitarDeshabilitarControlesFacturaProveedorServicio(false);
			
												
				
				if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleFacturaProveedorServicio();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoFacturaProveedorServicioActionPerformed(evt,facturaproveedorservicioSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualFacturaProveedorServicio(this.facturaproveedorservicio,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,facturaproveedorservicioSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.facturaproveedorservicio.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				this.facturaproveedorservicio.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				this.facturaproveedorservicio.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.facturaproveedorservicio)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((FacturaProveedorServicioModel) this.jTableDatosFacturaProveedorServicio.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoFacturaProveedorServicio=true;
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
				this.isEsNuevoFacturaProveedorServicio=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(false);
				
				this.habilitarDeshabilitarControlesFacturaProveedorServicio(false);
				
				
				
				if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleFacturaProveedorServicio();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosFacturaProveedorServicio.getRowCount()>=1) {
				jTableDatosFacturaProveedorServicio.removeRowSelectionInterval(0, jTableDatosFacturaProveedorServicio.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesFacturaProveedorServicio(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(false) ;
			
			this.isEsNuevoFacturaProveedorServicio=false;
			
			if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleFacturaProveedorServicio();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingFacturaProveedorServicio(false);
				
				//SI ES MANUAL
				if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualFacturaProveedorServicio();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoFacturaProveedorServicio--;			
			//FacturaProveedorServicio facturaproveedorservicioAux= new FacturaProveedorServicio();			
			//facturaproveedorservicioAux.setId(this.iIdNuevoFacturaProveedorServicio);
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaFacturaProveedorServicio();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
			
			this.facturaproveedorservicio.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.facturaproveedorservicioLogic.getFacturaProveedorServicios().add(this.facturaproveedorservicioAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.facturaproveedorservicios.add(this.facturaproveedorservicioAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			
			this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedorServicio(), this.getIndiceNuevoFacturaProveedorServicio());
			
			int iLastRow =  this.jTableDatosFacturaProveedorServicio.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosFacturaProveedorServicio.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosFacturaProveedorServicio.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
			
			//SI ES MANUAL
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedorServicio();
			}
			
			//this.abrirFrameTreeFacturaProveedorServicio();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Factura ProveedorS ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionFacturaProveedorServicio.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralFacturaProveedorServicio();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.procesarImportacionFacturaProveedorServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.facturaproveedorservicioParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarFacturaProveedorServicioReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionFacturaProveedorServicio.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionFacturaProveedorServicio.setFileImportacion(this.jInternalFrameImportacionFacturaProveedorServicio.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionFacturaProveedorServicio.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionFacturaProveedorServicio.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionFacturaProveedorServicio.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionFacturaProveedorServicio.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		

		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("FacturaProveedorServicioBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"FacturaProveedorServicioBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_azo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_azo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_azo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_azo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nRise_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nRise_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nRise_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nRise_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVence_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVence_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVence_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVence_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EmpleadoSolicita_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EmpleadoSolicita_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EmpleadoSolicita_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EmpleadoSolicita_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talle_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talle_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talle_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talle_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSerie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSerie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSerie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSerie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTributario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTributario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTributario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTributario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaValidez_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaValidez_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaValidez_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaValidez_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFacturaInicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFacturaInicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFacturaInicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFacturaInicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFacturaFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFacturaFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFacturaFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFacturaFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorServicios0_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorServicios0_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorServicios0_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorServicios0_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroMayor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroMayor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroMayor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroMayor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoAsiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoAsiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoAsiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoAsiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionFuente1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionFuente1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionFuente1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionFuente1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIva1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIva1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIva1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIva1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoNumeroAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoNumeroAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoNumeroAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoNumeroAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoNumesoSerie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoNumesoSerie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoNumesoSerie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoNumesoSerie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFechaValidez_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFechaValidez_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFechaValidez_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFechaValidez_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoFiscalServicios_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoFiscalServicios_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoFiscalServicios_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoFiscalServicios_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimientoModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimientoModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimientoModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimientoModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoria="numero_factura";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoria="id_tipo_documento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO:
					sNombreCampoCategoria="plazo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE:
					sNombreCampoCategoria="con_rise";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE:
					sNombreCampoCategoria="fecha_vence";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					sNombreCampoCategoria="id_empleado_solicita";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoria="detalle";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoria="numero_retencion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					sNombreCampoCategoria="numero_autorizacion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE:
					sNombreCampoCategoria="numero_serie";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoria="id_tipo_tributario";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ:
					sNombreCampoCategoria="fecha_validez";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					sNombreCampoCategoria="anexo_factura_inicio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					sNombreCampoCategoria="anexo_factura_fin";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0:
					sNombreCampoCategoria="valor_servicios0";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE:
					sNombreCampoCategoria="iva_porcentaje";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoria="numero_mayor";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO:
					sNombreCampoCategoria="codigo_asiento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					sNombreCampoCategoria="id_tipo_retencion_fuente1";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					sNombreCampoCategoria="id_tipo_retencion_iva1";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					sNombreCampoCategoria="anexo_numero_autorizacion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					sNombreCampoCategoria="anexo_numeso_serie";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					sNombreCampoCategoria="anexo_fecha_validez";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					sNombreCampoCategoria="id_cuenta_contable_credito_fiscal_servicios";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoria="id_tipo_movimiento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoria="id_tipo_movimiento_modulo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoriaValor="numero_factura";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoriaValor="id_tipo_documento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO:
					sNombreCampoCategoriaValor="plazo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE:
					sNombreCampoCategoriaValor="con_rise";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE:
					sNombreCampoCategoriaValor="fecha_vence";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					sNombreCampoCategoriaValor="id_empleado_solicita";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoriaValor="detalle";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoriaValor="numero_retencion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					sNombreCampoCategoriaValor="numero_autorizacion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE:
					sNombreCampoCategoriaValor="numero_serie";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoriaValor="id_tipo_tributario";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ:
					sNombreCampoCategoriaValor="fecha_validez";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					sNombreCampoCategoriaValor="anexo_factura_inicio";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					sNombreCampoCategoriaValor="anexo_factura_fin";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0:
					sNombreCampoCategoriaValor="valor_servicios0";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE:
					sNombreCampoCategoriaValor="iva_porcentaje";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoriaValor="numero_mayor";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO:
					sNombreCampoCategoriaValor="codigo_asiento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					sNombreCampoCategoriaValor="id_tipo_retencion_fuente1";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva1";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					sNombreCampoCategoriaValor="anexo_numero_autorizacion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					sNombreCampoCategoriaValor="anexo_numeso_serie";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					sNombreCampoCategoriaValor="anexo_fecha_validez";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_fiscal_servicios";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoriaValor="id_tipo_movimiento";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoriaValor="id_tipo_movimiento_modulo";
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_factura");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_documento");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Plazo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"plazo");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Rise",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_rise");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Vence",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vence");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empl. Solicita",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado_solicita");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empl. Autoriza",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle",sNombreCampoCategoria,sNombreCampoCategoriaValor,"detalle");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_retencion");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_autorizacion");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_serie");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Tributario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_tributario");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Validez",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_validez");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fac Ini",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_factura_inicio");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fac Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_factura_fin");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Servicios0",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_servicios0");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Porcentaje",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_porcentaje");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Mayor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_mayor");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Asiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_asiento");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Retencion Fuente1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_fuente1");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Retencion Iva1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva1");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anexo Numero Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_numero_autorizacion");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anexo Numeso Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_numeso_serie");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anexo Fecha Validez",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_fecha_validez");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Idcuenta Contable Credito Fiscal Servicios",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_fiscal_servicios");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Movimiento Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento_modulo");
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("FacturaProveedorServicios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getnumero_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_RUC);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettipodocumento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getplazo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getcon_rise());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getfecha_vence());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getempleadosolicita_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getdetalle());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getnumero_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getnumero_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getnumero_serie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettipotributario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getfecha_validez());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanexo_factura_inicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanexo_factura_fin());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getvalor_servicios0());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getiva_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getnumero_mayor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getcodigo_asiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettiporetencionfuente1_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettiporetencioniva1_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanexo_numero_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanexo_numeso_serie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getanexo_fecha_validez());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettipomovimiento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettipomovimientomodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(FacturaProveedorServicio facturaproveedorservicio:facturaproveedorserviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedorservicio.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelFacturaProveedorServicio(row);				
			//	iRow++;
			//}				
			
			//for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelFacturaProveedorServicio(facturaproveedorservicioAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
			
			//SI ES MANUAL
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedorServicio();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
			
			//SI ES MANUAL
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaProveedorServicio();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
			
			//SI ES MANUAL
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaProveedorServicio();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaFacturaProveedorServicio() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosFacturaProveedorServicio.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosFacturaProveedorServicio.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosFacturaProveedorServicio.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosFacturaProveedorServicio.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosFacturaProveedorServicio.setMinimumSize(dimensionMinimum);
		this.jTableDatosFacturaProveedorServicio.setMaximumSize(dimensionMaximum);
		this.jTableDatosFacturaProveedorServicio.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingFacturaProveedorServicio(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingFacturaProveedorServicio(esInicializar,true);
	}
	
	public void inicializarActualizarBindingFacturaProveedorServicio(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaFacturaProveedorServicio(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesFacturaProveedorServicio(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasFacturaProveedorServicio(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedorServicio(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesFacturaProveedorServicio(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualFacturaProveedorServicio() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaFacturaProveedorServicio();
		
		this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaProveedorServicio();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedorServicio() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedorServicio(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedorServicio(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosFacturaProveedorServicio.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosFacturaProveedorServicio.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteFacturaProveedorServicio.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionNuevoFacturaProveedorServicio.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionSinCerrarFacturaProveedorServicio.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionSinMensajeFacturaProveedorServicio.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosFacturaProveedorServicio.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosFacturaProveedorServicio.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteFacturaProveedorServicio.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionNuevoFacturaProveedorServicio.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionSinCerrarFacturaProveedorServicio.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxPostAccionSinMensajeFacturaProveedorServicio.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionFacturaProveedorServicio.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionFacturaProveedorServicio.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesFacturaProveedorServicio.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesFacturaProveedorServicio.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesFacturaProveedorServicio.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarFacturaProveedorServicio.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesFacturaProveedorServicio.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesFacturaProveedorServicio.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralFacturaProveedorServicio.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesFacturaProveedorServicio(Boolean esInicializar) throws Exception {
		try	{	
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedorServicio(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedorServicio() throws Exception {
		try	{
			if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaProveedorServicio();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaProveedorServicio() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaProveedorServicio() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesFacturaProveedorServicio.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesFacturaProveedorServicio.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesFacturaProveedorServicio.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionFacturaProveedorServicio.addItem(reporte);
			}
			
			
			if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionFacturaProveedorServicio.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionFacturaProveedorServicio.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesFacturaProveedorServicio.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesFacturaProveedorServicio.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarFacturaProveedorServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarFacturaProveedorServicio.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarFacturaProveedorServicio.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedorServicio();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedorServicio() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
				
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=FacturaProveedorServicioConstantesFunciones.getTiposSeleccionarFacturaProveedorServicio(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=FacturaProveedorServicioConstantesFunciones.getTiposSeleccionarFacturaProveedorServicio(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=FacturaProveedorServicioConstantesFunciones.getTiposSeleccionarFacturaProveedorServicio(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualFacturaProveedorServicio()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.getSelectedItem()!=null){this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios=((CuentaContable)this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_documentoFK_IdTipoDocumento=((TipoDocumento)this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=((TipoMovimientoModulo)this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1=((TipoRetencion)this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1=((TipoRetencion)this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.getSelectedItem()!=null){this.id_tipo_tributarioFK_IdTipoTributario=((TipoTributario)this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedorServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedorServicio.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasFacturaProveedorServicio(Boolean esInicializar) throws Exception {				
		if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaProveedorServicio();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaFacturaProveedorServicio() throws Exception {
		this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByFacturaProveedorServicio() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosFacturaProveedorServicioOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicioOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaFacturaProveedorServicio(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=facturaproveedorservicioLogic.getFacturaProveedorServicios().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=facturaproveedorservicios.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosFacturaProveedorServicio.setModel(new FacturaProveedorServicioModel(this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosFacturaProveedorServicio.setModel(new FacturaProveedorServicioModel(this.facturaproveedorservicios,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByFacturaProveedorServicio!=null && this.jInternalFrameOrderByFacturaProveedorServicio.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByFacturaProveedorServicio();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+FacturaProveedorServicioConstantesFunciones.SCLASSWEBTITULO,facturaproveedorservicioConstantesFunciones.resaltarSeleccionarFacturaProveedorServicio,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+FacturaProveedorServicioConstantesFunciones.SCLASSWEBTITULO,facturaproveedorservicioConstantesFunciones.resaltarSeleccionarFacturaProveedorServicio,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_ID));

		if(this.facturaproveedorservicioConstantesFunciones.mostraridFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaridFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaridFacturaProveedorServicio,iSizeTabla,this,true,"idFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaridFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaridFacturaProveedorServicio,this,true,"idFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_empresaFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empresaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empresaFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empresaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empresaFacturaProveedorServicio,false,"id_empresaFacturaProveedorServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_sucursalFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_sucursalFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_sucursalFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_sucursalFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_sucursalFacturaProveedorServicio,false,"id_sucursalFacturaProveedorServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_ejercicioFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_ejercicioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_ejercicioFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_ejercicioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_ejercicioFacturaProveedorServicio,false,"id_ejercicioFacturaProveedorServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_periodoFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_periodoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_periodoFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_periodoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_periodoFacturaProveedorServicio,false,"id_periodoFacturaProveedorServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_anioFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_anioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_anioFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_anioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_anioFacturaProveedorServicio,true,"id_anioFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDMES));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_mesFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_mesFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_mesFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_mesFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_mesFacturaProveedorServicio,true,"id_mesFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_moduloFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_moduloFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_moduloFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_moduloFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_moduloFacturaProveedorServicio,false,"id_moduloFacturaProveedorServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_transaccionFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_transaccionFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_transaccionFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_transaccionFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_transaccionFacturaProveedorServicio,true,"id_transaccionFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_facturaFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_facturaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_facturaFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_facturaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_facturaFacturaProveedorServicio,true,"id_facturaFacturaProveedorServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_facturaFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_facturaFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_facturaFacturaProveedorServicio,iSizeTabla,this,true,"numero_facturaFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_facturaFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_facturaFacturaProveedorServicio,this,true,"numero_facturaFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_clienteFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_clienteFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_clienteFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_clienteFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_clienteFacturaProveedorServicio,true,"id_clienteFacturaProveedorServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_RUC));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarrucFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarrucFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarrucFacturaProveedorServicio,iSizeTabla,this,true,"rucFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarrucFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarrucFacturaProveedorServicio,this,true,"rucFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_documentoFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_documentoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_documentoFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_documentoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_documentoFacturaProveedorServicio,true,"id_tipo_documentoFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarplazoFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarplazoFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarplazoFacturaProveedorServicio,iSizeTabla,this,true,"plazoFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarplazoFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarplazoFacturaProveedorServicio,this,true,"plazoFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarcon_riseFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarcon_riseFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarcon_riseFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarcon_riseFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarcon_riseFacturaProveedorServicio,this,true,"con_riseFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_emisionFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_emisionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_emisionFacturaProveedorServicio,iSizeTabla,this,true,"fecha_emisionFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_emisionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_emisionFacturaProveedorServicio,this,true,"fecha_emisionFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_venceFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_venceFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_venceFacturaProveedorServicio,iSizeTabla,this,true,"fecha_venceFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_venceFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_venceFacturaProveedorServicio,this,true,"fecha_venceFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosolicitasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empleado_solicitaFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosolicitasForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empleado_solicitaFacturaProveedorServicio,true,"id_empleado_solicitaFacturaProveedorServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleadoFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empleadoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empleadoFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_empleadoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_empleadoFacturaProveedorServicio,true,"id_empleadoFacturaProveedorServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE));

		if(this.facturaproveedorservicioConstantesFunciones.mostrardetalleFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltardetalleFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activardetalleFacturaProveedorServicio,iSizeTabla,this,true,"detalleFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltardetalleFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activardetalleFacturaProveedorServicio,this,true,"detalleFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_retencionFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_retencionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_retencionFacturaProveedorServicio,iSizeTabla,this,true,"numero_retencionFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_retencionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_retencionFacturaProveedorServicio,this,true,"numero_retencionFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_autorizacionFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_autorizacionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_autorizacionFacturaProveedorServicio,iSizeTabla,this,true,"numero_autorizacionFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_autorizacionFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_autorizacionFacturaProveedorServicio,this,true,"numero_autorizacionFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_serieFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_serieFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_serieFacturaProveedorServicio,iSizeTabla,this,true,"numero_serieFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_serieFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarnumero_serieFacturaProveedorServicio,this,true,"numero_serieFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_tributarioFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_tributarioFacturaProveedorServicio,true,"id_tipo_tributarioFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_validezFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_validezFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_validezFacturaProveedorServicio,iSizeTabla,this,true,"fecha_validezFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_validezFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activarfecha_validezFacturaProveedorServicio,this,true,"fecha_validezFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO));

		if(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_inicioFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_inicioFacturaProveedorServicio,iSizeTabla,this,true,"anexo_factura_inicioFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_inicioFacturaProveedorServicio,this,true,"anexo_factura_inicioFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN));

		if(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_finFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_finFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_finFacturaProveedorServicio,iSizeTabla,this,true,"anexo_factura_finFacturaProveedorServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_finFacturaProveedorServicio,this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_finFacturaProveedorServicio,this,true,"anexo_factura_finFacturaProveedorServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO));

		if(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_movimientoFacturaProveedorServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoMovimientoTableCell(this.tipomovimientosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimientoFacturaProveedorServicio,iSizeTabla));
			tableColumn.setCellEditor(new TipoMovimientoTableCell(this.tipomovimientosForeignKey,this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedorServicio,this,this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimientoFacturaProveedorServicio,true,"id_tipo_movimientoFacturaProveedorServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosFacturaProveedorServicio.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosFacturaProveedorServicio.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosFacturaProveedorServicio.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosFacturaProveedorServicio.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosFacturaProveedorServicio.moveColumn(this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosFacturaProveedorServicio.moveColumn(this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosFacturaProveedorServicio.moveColumn(this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosFacturaProveedorServicio.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosFacturaProveedorServicio.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosFacturaProveedorServicio,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosFacturaProveedorServicio.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosFacturaProveedorServicio.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosFacturaProveedorServicio.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=facturaproveedorservicioLogic.getFacturaProveedorServicios().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=facturaproveedorservicios.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosFacturaProveedorServicio.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosFacturaProveedorServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosFacturaProveedorServicio();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoFacturaProveedorServicio=false;
					
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
				if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaProveedorServicio.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.facturaproveedorservicio.getsType().equals("DUPLICADO")
				   || this.facturaproveedorservicio.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoFacturaProveedorServicio=true;
				
				} else {
					this.isEsNuevoFacturaProveedorServicio=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					if(this.facturaproveedorservicio.getId()>=0 && !this.facturaproveedorservicio.getIsNew()) {						
						this.isEsNuevoFacturaProveedorServicio=false;
						
					} else {
						this.isEsNuevoFacturaProveedorServicio=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoFacturaProveedorServicio(esRelaciones);						
				
				this.seleccionarFacturaProveedorServicio(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.facturaproveedorservicio.getId()<0) {
					this.isEsNuevoFacturaProveedorServicio=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarFacturaProveedorServicio(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarFacturaProveedorServicio(evt,rowIndex);
				}	
				
				if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion FacturaProveedorServicio: " + this.dDif); 
					}
				}								
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarFacturaProveedorServicio(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.facturaproveedorservicio)) {
					if(this.facturaproveedorservicio.getId()>0) {
						this.facturaproveedorservicio.setIsDeleted(true);
						
						this.facturaproveedorserviciosEliminados.add(this.facturaproveedorservicio);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaproveedorservicioLogic.getFacturaProveedorServicios().remove(this.facturaproveedorservicio);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicios.remove(this.facturaproveedorservicio);				
					}
					
					
					((FacturaProveedorServicioModel) this.jTableDatosFacturaProveedorServicio.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarFacturaProveedorServicio(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoFacturaProveedorServicio) {
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaProveedorServicio.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaProveedorServicio.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicio);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_empresaFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_empresaFacturaProveedorServicio) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_empresa());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(facturaproveedorservicio.getEmpresa()!=null) {
							this.empresasForeignKey.add(facturaproveedorservicio.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.facturaproveedorservicio.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_sucursalFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_sucursalFacturaProveedorServicio) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_sucursal());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(facturaproveedorservicio.getSucursal()!=null) {
							this.sucursalsForeignKey.add(facturaproveedorservicio.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.facturaproveedorservicio.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_ejercicioFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_ejercicioFacturaProveedorServicio) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_ejercicio());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(facturaproveedorservicio.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(facturaproveedorservicio.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.facturaproveedorservicio.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_periodoFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_periodoFacturaProveedorServicio) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_periodo());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(facturaproveedorservicio.getPeriodo()!=null) {
							this.periodosForeignKey.add(facturaproveedorservicio.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.facturaproveedorservicio.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_anioFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_anioFacturaProveedorServicio) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_anio());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(facturaproveedorservicio.getAnio()!=null) {
							this.aniosForeignKey.add(facturaproveedorservicio.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.facturaproveedorservicio.getid_anio(),false,"Formulario");

					//Mes
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_mesFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_mesFacturaProveedorServicio) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_mes());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(facturaproveedorservicio.getMes()!=null) {
							this.messForeignKey.add(facturaproveedorservicio.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.facturaproveedorservicio.getid_mes(),false,"Formulario");

					//Modulo
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_moduloFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_moduloFacturaProveedorServicio) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_modulo());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(facturaproveedorservicio.getModulo()!=null) {
							this.modulosForeignKey.add(facturaproveedorservicio.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.facturaproveedorservicio.getid_modulo(),false,"Formulario");

					//Transaccion
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_transaccionFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_transaccionFacturaProveedorServicio) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_transaccion());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(facturaproveedorservicio.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(facturaproveedorservicio.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.facturaproveedorservicio.getid_transaccion(),false,"Formulario");

					//Factura
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_facturaFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_facturaFacturaProveedorServicio) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_factura());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(facturaproveedorservicio.getFactura()!=null) {
							this.facturasForeignKey.add(facturaproveedorservicio.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.facturaproveedorservicio.getid_factura(),false,"Formulario");

					//Cliente
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_clienteFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_clienteFacturaProveedorServicio) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_cliente());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(facturaproveedorservicio.getCliente()!=null) {
							this.clientesForeignKey.add(facturaproveedorservicio.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.facturaproveedorservicio.getid_cliente(),false,"Formulario");

					//TipoDocumento
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_documentoFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_documentoFacturaProveedorServicio) {
						//this.cargarCombosTipoDocumentosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_documento());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

						if(facturaproveedorservicio.getTipoDocumento()!=null) {
							this.tipodocumentosForeignKey.add(facturaproveedorservicio.getTipoDocumento());
						}

						this.addItemDefectoCombosForeignKeyTipoDocumento();
						this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
					}
					this.setActualTipoDocumentoForeignKey(this.facturaproveedorservicio.getid_tipo_documento(),false,"Formulario");

					//EmpleadoSolicita
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_empleado_solicitaFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_empleado_solicitaFacturaProveedorServicio) {
						//this.cargarCombosEmpleadoSolicitasForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_empleado_solicita());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.empleadosolicitasForeignKey=new ArrayList<Empleado>();

						if(facturaproveedorservicio.getEmpleadoSolicita()!=null) {
							this.empleadosolicitasForeignKey.add(facturaproveedorservicio.getEmpleadoSolicita());
						}

						this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
						this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
					}
					this.setActualEmpleadoSolicitaForeignKey(this.facturaproveedorservicio.getid_empleado_solicita(),false,"Formulario");

					//Empleado
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_empleadoFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_empleadoFacturaProveedorServicio) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_empleado());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(facturaproveedorservicio.getEmpleado()!=null) {
							this.empleadosForeignKey.add(facturaproveedorservicio.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.facturaproveedorservicio.getid_empleado(),false,"Formulario");

					//TipoTributario
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_tributarioFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_tributarioFacturaProveedorServicio) {
						//this.cargarCombosTipoTributariosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_tributario());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

						if(facturaproveedorservicio.getTipoTributario()!=null) {
							this.tipotributariosForeignKey.add(facturaproveedorservicio.getTipoTributario());
						}

						this.addItemDefectoCombosForeignKeyTipoTributario();
						this.cargarCombosFrameTipoTributariosForeignKey("Todos");
					}
					this.setActualTipoTributarioForeignKey(this.facturaproveedorservicio.getid_tipo_tributario(),false,"Formulario");

					//Moneda
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_monedaFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_monedaFacturaProveedorServicio) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_moneda());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(facturaproveedorservicio.getMoneda()!=null) {
							this.monedasForeignKey.add(facturaproveedorservicio.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.facturaproveedorservicio.getid_moneda(),false,"Formulario");

					//TipoRetencionFuente1
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_retencion_fuente1FacturaProveedorServicio) {
						//this.cargarCombosTipoRetencionFuente1sForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_retencion_fuente1());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedorservicio.getTipoRetencionFuente1()!=null) {
							this.tiporetencionfuente1sForeignKey.add(facturaproveedorservicio.getTipoRetencionFuente1());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
						this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Todos");
					}
					this.setActualTipoRetencionFuente1ForeignKey(this.facturaproveedorservicio.getid_tipo_retencion_fuente1(),false,"Formulario");

					//TipoRetencionIva1
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_retencion_iva1FacturaProveedorServicio) {
						//this.cargarCombosTipoRetencionIva1sForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_retencion_iva1());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedorservicio.getTipoRetencionIva1()!=null) {
							this.tiporetencioniva1sForeignKey.add(facturaproveedorservicio.getTipoRetencionIva1());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
						this.cargarCombosFrameTipoRetencionIva1sForeignKey("Todos");
					}
					this.setActualTipoRetencionIva1ForeignKey(this.facturaproveedorservicio.getid_tipo_retencion_iva1(),false,"Formulario");

					//CuentaContableCreditoFiscalServicios
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio) {
						//this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedorservicio.getCuentaContableCreditoFiscalServicios()!=null) {
							this.cuentacontablecreditofiscalserviciossForeignKey.add(facturaproveedorservicio.getCuentaContableCreditoFiscalServicios());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
						this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoFiscalServiciosForeignKey(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");

					//TipoMovimiento
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimientoFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_movimientoFacturaProveedorServicio) {
						//this.cargarCombosTipoMovimientosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_movimiento());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

						if(facturaproveedorservicio.getTipoMovimiento()!=null) {
							this.tipomovimientosForeignKey.add(facturaproveedorservicio.getTipoMovimiento());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimiento();
						this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
					}
					this.setActualTipoMovimientoForeignKey(this.facturaproveedorservicio.getid_tipo_movimiento(),false,"Formulario");

					//TipoMovimientoModulo
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_movimiento_moduloFacturaProveedorServicio) {
						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_movimiento_modulo());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

						if(facturaproveedorservicio.getTipoMovimientoModulo()!=null) {
							this.tipomovimientomodulosForeignKey.add(facturaproveedorservicio.getTipoMovimientoModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
						this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");
					}
					this.setActualTipoMovimientoModuloForeignKey(this.facturaproveedorservicio.getid_tipo_movimiento_modulo(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.facturaproveedorservicioConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedorServicio || this.facturaproveedorservicioConstantesFunciones.event_dependid_tipo_transaccion_moduloFacturaProveedorServicio) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.facturaproveedorservicio.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(facturaproveedorservicio.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(facturaproveedorservicio.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.facturaproveedorservicio.getid_tipo_transaccion_modulo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesFacturaProveedorServicio("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesFacturaProveedorServicio(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoFacturaProveedorServicio(facturaproveedorservicio,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioFacturaProveedorServicio(facturaproveedorservicio);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyFacturaProveedorServicio(facturaproveedorservicio,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedorServicio(facturaproveedorservicio);
	}
	
	public void setVariablesObjetoActualToFormularioFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setText(facturaproveedorservicio.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setText(facturaproveedorservicio.getruc());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setText(facturaproveedorservicio.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setSelected(facturaproveedorservicio.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setText(facturaproveedorservicio.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setText(facturaproveedorservicio.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setText(facturaproveedorservicio.getanexo_factura_fin());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,FacturaProveedorServicio facturaproveedorservicioLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,facturaproveedorservicioLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,FacturaProveedorServicio facturaproveedorservicioLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				facturaproveedorservicioLocal=this.facturaproveedorservicio;
			} else {
				facturaproveedorservicioLocal=this.facturaproveedorservicioAnterior;
			}
		}
		
		if(this.permiteMantenimiento(facturaproveedorservicioLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoFacturaProveedorServicio(facturaproveedorservicioLocal,true);
					
					if(facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(facturaproveedorservicioLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(facturaproveedorservicioLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(facturaproveedorservicio,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(facturaproveedorservicio);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(facturaproveedorservicio,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.getText()==null || this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.getText()=="" || this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.getText()=="Id") {
				this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setText("0");
			}

			if(conColumnasBase) {facturaproveedorservicio.setId(Long.parseLong(this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelIdFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setnumero_factura(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_facturaFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setruc(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelrucFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setplazo(Integer.parseInt(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelplazoFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setcon_rise(this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelcon_riseFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setfecha_emision(this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_emisionFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setfecha_vence(this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_venceFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setdetalle(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabeldetalleFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setnumero_retencion(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_retencionFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setnumero_autorizacion(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_autorizacionFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setnumero_serie(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelnumero_serieFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setfecha_validez(this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelfecha_validezFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setanexo_factura_inicio(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_inicioFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedorservicio.setanexo_factura_fin(this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelanexo_factura_finFacturaProveedorServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicioBean,FacturaProveedorServicio facturaproveedorservicio,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicioOrigen,FacturaProveedorServicio facturaproveedorservicio,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getId()!=null && !facturaproveedorservicioOrigen.getId().equals(0L))) {facturaproveedorservicio.setId(facturaproveedorservicioOrigen.getId());}}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getnumero_factura()!=null && !facturaproveedorservicioOrigen.getnumero_factura().equals(""))) {facturaproveedorservicio.setnumero_factura(facturaproveedorservicioOrigen.getnumero_factura());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getruc()!=null && !facturaproveedorservicioOrigen.getruc().equals(""))) {facturaproveedorservicio.setruc(facturaproveedorservicioOrigen.getruc());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getplazo()!=null && !facturaproveedorservicioOrigen.getplazo().equals(0))) {facturaproveedorservicio.setplazo(facturaproveedorservicioOrigen.getplazo());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getcon_rise()!=null && !facturaproveedorservicioOrigen.getcon_rise().equals(false))) {facturaproveedorservicio.setcon_rise(facturaproveedorservicioOrigen.getcon_rise());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getfecha_emision()!=null && !facturaproveedorservicioOrigen.getfecha_emision().equals(new Date()))) {facturaproveedorservicio.setfecha_emision(facturaproveedorservicioOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getfecha_vence()!=null && !facturaproveedorservicioOrigen.getfecha_vence().equals(new Date()))) {facturaproveedorservicio.setfecha_vence(facturaproveedorservicioOrigen.getfecha_vence());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getdetalle()!=null && !facturaproveedorservicioOrigen.getdetalle().equals(""))) {facturaproveedorservicio.setdetalle(facturaproveedorservicioOrigen.getdetalle());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getnumero_retencion()!=null && !facturaproveedorservicioOrigen.getnumero_retencion().equals(""))) {facturaproveedorservicio.setnumero_retencion(facturaproveedorservicioOrigen.getnumero_retencion());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getnumero_autorizacion()!=null && !facturaproveedorservicioOrigen.getnumero_autorizacion().equals(""))) {facturaproveedorservicio.setnumero_autorizacion(facturaproveedorservicioOrigen.getnumero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getnumero_serie()!=null && !facturaproveedorservicioOrigen.getnumero_serie().equals(""))) {facturaproveedorservicio.setnumero_serie(facturaproveedorservicioOrigen.getnumero_serie());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getfecha_validez()!=null && !facturaproveedorservicioOrigen.getfecha_validez().equals(new Date()))) {facturaproveedorservicio.setfecha_validez(facturaproveedorservicioOrigen.getfecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getanexo_factura_inicio()!=null && !facturaproveedorservicioOrigen.getanexo_factura_inicio().equals(""))) {facturaproveedorservicio.setanexo_factura_inicio(facturaproveedorservicioOrigen.getanexo_factura_inicio());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getanexo_factura_fin()!=null && !facturaproveedorservicioOrigen.getanexo_factura_fin().equals(""))) {facturaproveedorservicio.setanexo_factura_fin(facturaproveedorservicioOrigen.getanexo_factura_fin());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getvalor_servicios0()!=null && !facturaproveedorservicioOrigen.getvalor_servicios0().equals(0.0))) {facturaproveedorservicio.setvalor_servicios0(facturaproveedorservicioOrigen.getvalor_servicios0());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.gettotal_iva()!=null && !facturaproveedorservicioOrigen.gettotal_iva().equals(0.0))) {facturaproveedorservicio.settotal_iva(facturaproveedorservicioOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getiva_porcentaje()!=null && !facturaproveedorservicioOrigen.getiva_porcentaje().equals(0.0))) {facturaproveedorservicio.setiva_porcentaje(facturaproveedorservicioOrigen.getiva_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.gettotal()!=null && !facturaproveedorservicioOrigen.gettotal().equals(0.0))) {facturaproveedorservicio.settotal(facturaproveedorservicioOrigen.gettotal());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getnumero_mayor()!=null && !facturaproveedorservicioOrigen.getnumero_mayor().equals(""))) {facturaproveedorservicio.setnumero_mayor(facturaproveedorservicioOrigen.getnumero_mayor());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getcodigo_asiento()!=null && !facturaproveedorservicioOrigen.getcodigo_asiento().equals(""))) {facturaproveedorservicio.setcodigo_asiento(facturaproveedorservicioOrigen.getcodigo_asiento());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getanexo_numero_autorizacion()!=null && !facturaproveedorservicioOrigen.getanexo_numero_autorizacion().equals(""))) {facturaproveedorservicio.setanexo_numero_autorizacion(facturaproveedorservicioOrigen.getanexo_numero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getanexo_numeso_serie()!=null && !facturaproveedorservicioOrigen.getanexo_numeso_serie().equals(""))) {facturaproveedorservicio.setanexo_numeso_serie(facturaproveedorservicioOrigen.getanexo_numeso_serie());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getanexo_fecha_validez()!=null && !facturaproveedorservicioOrigen.getanexo_fecha_validez().equals(new Date()))) {facturaproveedorservicio.setanexo_fecha_validez(facturaproveedorservicioOrigen.getanexo_fecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorservicioOrigen.getdescripcion()!=null && !facturaproveedorservicioOrigen.getdescripcion().equals(""))) {facturaproveedorservicio.setdescripcion(facturaproveedorservicioOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setText(facturaproveedorservicio.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setText(facturaproveedorservicio.getruc());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setText(facturaproveedorservicio.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setSelected(facturaproveedorservicio.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setText(facturaproveedorservicio.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setText(facturaproveedorservicio.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setDate(facturaproveedorservicio.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setText(facturaproveedorservicio.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setText(facturaproveedorservicio.getanexo_factura_fin());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaProveedorServicio(FacturaProveedorServicioBean facturaproveedorservicioBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setText(facturaproveedorservicioBean.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setText(facturaproveedorservicioBean.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setText(facturaproveedorservicioBean.getruc());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setText(facturaproveedorservicioBean.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setSelected(facturaproveedorservicioBean.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setDate(facturaproveedorservicioBean.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setDate(facturaproveedorservicioBean.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setText(facturaproveedorservicioBean.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setText(facturaproveedorservicioBean.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setText(facturaproveedorservicioBean.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setText(facturaproveedorservicioBean.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setDate(facturaproveedorservicioBean.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setText(facturaproveedorservicioBean.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setText(facturaproveedorservicioBean.getanexo_factura_fin());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanFacturaProveedorServicio(FacturaProveedorServicioParameterReturnGeneral facturaproveedorservicioReturnGeneral,FacturaProveedorServicioBean facturaproveedorservicioBean,Boolean conDefault) throws Exception { 
		try {
			FacturaProveedorServicio facturaproveedorservicioLocal=new FacturaProveedorServicio();
			
			facturaproveedorservicioLocal=facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaproveedorservicioLocal.getId()!=null && !facturaproveedorservicioLocal.getId().equals(0L))) {facturaproveedorservicioBean.setId(facturaproveedorservicioLocal.getId());}}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getnumero_factura()!=null && !facturaproveedorservicioLocal.getnumero_factura().equals(""))) {facturaproveedorservicioBean.setnumero_factura(facturaproveedorservicioLocal.getnumero_factura());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getruc()!=null && !facturaproveedorservicioLocal.getruc().equals(""))) {facturaproveedorservicioBean.setruc(facturaproveedorservicioLocal.getruc());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getplazo()!=null && !facturaproveedorservicioLocal.getplazo().equals(0))) {facturaproveedorservicioBean.setplazo(facturaproveedorservicioLocal.getplazo());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getcon_rise()!=null && !facturaproveedorservicioLocal.getcon_rise().equals(false))) {facturaproveedorservicioBean.setcon_rise(facturaproveedorservicioLocal.getcon_rise());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getfecha_emision()!=null && !facturaproveedorservicioLocal.getfecha_emision().equals(new Date()))) {facturaproveedorservicioBean.setfecha_emision(facturaproveedorservicioLocal.getfecha_emision());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getfecha_vence()!=null && !facturaproveedorservicioLocal.getfecha_vence().equals(new Date()))) {facturaproveedorservicioBean.setfecha_vence(facturaproveedorservicioLocal.getfecha_vence());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getdetalle()!=null && !facturaproveedorservicioLocal.getdetalle().equals(""))) {facturaproveedorservicioBean.setdetalle(facturaproveedorservicioLocal.getdetalle());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getnumero_retencion()!=null && !facturaproveedorservicioLocal.getnumero_retencion().equals(""))) {facturaproveedorservicioBean.setnumero_retencion(facturaproveedorservicioLocal.getnumero_retencion());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getnumero_autorizacion()!=null && !facturaproveedorservicioLocal.getnumero_autorizacion().equals(""))) {facturaproveedorservicioBean.setnumero_autorizacion(facturaproveedorservicioLocal.getnumero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getnumero_serie()!=null && !facturaproveedorservicioLocal.getnumero_serie().equals(""))) {facturaproveedorservicioBean.setnumero_serie(facturaproveedorservicioLocal.getnumero_serie());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getfecha_validez()!=null && !facturaproveedorservicioLocal.getfecha_validez().equals(new Date()))) {facturaproveedorservicioBean.setfecha_validez(facturaproveedorservicioLocal.getfecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getanexo_factura_inicio()!=null && !facturaproveedorservicioLocal.getanexo_factura_inicio().equals(""))) {facturaproveedorservicioBean.setanexo_factura_inicio(facturaproveedorservicioLocal.getanexo_factura_inicio());}
			if(conDefault || (!conDefault && facturaproveedorservicioLocal.getanexo_factura_fin()!=null && !facturaproveedorservicioLocal.getanexo_factura_fin().equals(""))) {facturaproveedorservicioBean.setanexo_factura_fin(facturaproveedorservicioLocal.getanexo_factura_fin());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxFacturaProveedorServicioGenerico(Long idFacturaProveedorServicioSeleccionado,JComboBox jComboBoxFacturaProveedorServicio,List<FacturaProveedorServicio> facturaproveedorserviciosLocal)throws Exception {
		try {
			FacturaProveedorServicio  facturaproveedorservicioTemp=null;

			for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosLocal) {
				if(facturaproveedorservicioAux.getId()!=null && facturaproveedorservicioAux.getId().equals(idFacturaProveedorServicioSeleccionado)) {
					facturaproveedorservicioTemp=facturaproveedorservicioAux;
					break;
				}
			}

			jComboBoxFacturaProveedorServicio.setSelectedItem(facturaproveedorservicioTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxFacturaProveedorServicioGenerico(JComboBox jComboBoxFacturaProveedorServicio,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxFacturaProveedorServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaProveedorServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxFacturaProveedorServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaProveedorServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaProveedorServicio.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxFacturaProveedorServicio.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaProveedorServicio.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxFacturaProveedorServicio.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxFacturaProveedorServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxFacturaProveedorServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedorservicio=(FacturaProveedorServicio) facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturaproveedorservicio =(FacturaProveedorServicio) facturaproveedorservicios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getmes_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettransaccion_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getfactura_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoDocumento")) {
			//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettipodocumento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettipodocumento_descripcion();
			}
		}

		if(sTipo.equals("EmpleadoSolicita")) {
			//sDescripcion=this.getActualEmpleadoSolicitaForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getempleadosolicita_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoSolicitaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getempleadosolicita_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getempleado_descripcion();
			}
		}

		if(sTipo.equals("TipoTributario")) {
			//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettipotributario_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettipotributario_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionFuente1")) {
			//sDescripcion=this.getActualTipoRetencionFuente1ForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettiporetencionfuente1_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionFuente1ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettiporetencionfuente1_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIva1")) {
			//sDescripcion=this.getActualTipoRetencionIva1ForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettiporetencioniva1_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIva1ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettiporetencioniva1_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoFiscalServicios")) {
			//sDescripcion=this.getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimiento")) {
			//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettipomovimiento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettipomovimiento_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimientoModulo")) {
			//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettipomovimientomodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettipomovimientomodulo_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedorservicio.getIsNew() && !facturaproveedorservicio.getIsChanged() && !facturaproveedorservicio.getIsDeleted()) {
				sDescripcion=facturaproveedorservicio.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedorservicio.gettipotransaccionmodulo_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		FacturaProveedorServicio facturaproveedorservicioRow=new FacturaProveedorServicio();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedorservicioRow=(FacturaProveedorServicio) facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturaproveedorservicioRow=(FacturaProveedorServicio) facturaproveedorservicios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualFacturaProveedorServicio(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));			
			this.jButtonDuplicarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedorServicio && this.isPermisoDuplicarFacturaProveedorServicio));			
			this.jButtonCopiarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedorServicio && this.isPermisoCopiarFacturaProveedorServicio));
			this.jButtonVerFormFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedorServicio && this.isPermisoVerFormFacturaProveedorServicio));
			
			this.jButtonAbrirOrderByFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));			
			
			this.jButtonNuevoRelacionesFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));			
			this.jButtonNuevoGuardarCambiosFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaModificarFacturaProveedorServicio && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedorServicio && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedorServicio && this.isPermisoEliminarFacturaProveedorServicio));
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedorServicio);							
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));			
			
			}
						
			this.jButtonGuardarCambiosTablaFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));						
			this.jButtonDuplicarToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedorServicio && this.isPermisoDuplicarFacturaProveedorServicio));						
			this.jButtonCopiarToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedorServicio && this.isPermisoCopiarFacturaProveedorServicio));			
			this.jButtonVerFormToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedorServicio && this.isPermisoVerFormFacturaProveedorServicio));			
			this.jButtonAbrirOrderByToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));
			this.jButtonNuevoRelacionesToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));			
			this.jButtonNuevoGuardarCambiosToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));			
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaModificarFacturaProveedorServicio && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedorServicio  && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedorServicio && this.isPermisoEliminarFacturaProveedorServicio));
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarToolBarFacturaProveedorServicio.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedorServicio);				
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));			
			this.jMenuItemDuplicarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedorServicio && this.isPermisoDuplicarFacturaProveedorServicio));			
			this.jMenuItemCopiarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedorServicio && this.isPermisoCopiarFacturaProveedorServicio));			
			this.jMenuItemVerFormFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedorServicio && this.isPermisoVerFormFacturaProveedorServicio));			
			this.jMenuItemAbrirOrderByFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));			
			//this.jMenuItemMostrarOcultarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));
			this.jMenuItemDetalleAbrirOrderByFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));			
			//this.jMenuItemDetalleMostrarOcultarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedorServicio && this.isPermisoOrdenFacturaProveedorServicio));			
			this.jMenuItemNuevoRelacionesFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio));			
			this.jMenuItemNuevoGuardarCambiosFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedorServicio && this.isPermisoNuevoFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));									
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemModificarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaModificarFacturaProveedorServicio && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemActualizarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedorServicio && this.isPermisoActualizarFacturaProveedorServicio));	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemEliminarFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedorServicio && this.isPermisoEliminarFacturaProveedorServicio));
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemCancelarFacturaProveedorServicio.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedorServicio);				
			}
			
			this.jMenuItemGuardarCambiosFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));						
			this.jMenuItemGuardarCambiosTablaFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=this.jButtonNuevoFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaDuplicarFacturaProveedorServicio=this.jButtonDuplicarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaCopiarFacturaProveedorServicio=this.jButtonCopiarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaVerFormFacturaProveedorServicio=this.jButtonVerFormFacturaProveedorServicio.isVisible();
			
			this.isVisibilidadCeldaOrdenFacturaProveedorServicio=this.jButtonAbrirOrderByFacturaProveedorServicio.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=this.jButtonNuevoRelacionesFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=this.jButtonModificarFacturaProveedorServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaGuardarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=this.jButtonGuardarCambiosTablaFacturaProveedorServicio.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=this.jButtonNuevoToolBarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=this.jButtonNuevoRelacionesToolBarFacturaProveedorServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarToolBarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarToolBarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarToolBarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarToolBarFacturaProveedorServicio.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaProveedorServicio=this.jButtonGuardarCambiosToolBarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=this.jButtonGuardarCambiosTablaToolBarFacturaProveedorServicio.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=this.jMenuItemNuevoFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=this.jMenuItemNuevoRelacionesFacturaProveedorServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemModificarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemActualizarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemEliminarFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemCancelarFacturaProveedorServicio.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaProveedorServicio=this.jMenuItemGuardarCambiosFacturaProveedorServicio.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=this.jMenuItemGuardarCambiosTablaFacturaProveedorServicio.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesFacturaProveedorServicio(Boolean esInicializar) {
		if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {			
			if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
				//if(this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaProveedorServicio();
			}
			
			this.inicializarActualizarBindingBotonesManualFacturaProveedorServicio(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualFacturaProveedorServicio() {
		this.jButtonNuevoFacturaProveedorServicio.setVisible(this.isPermisoNuevoFacturaProveedorServicio);			
		this.jButtonDuplicarFacturaProveedorServicio.setVisible(this.isPermisoDuplicarFacturaProveedorServicio);			
		this.jButtonCopiarFacturaProveedorServicio.setVisible(this.isPermisoCopiarFacturaProveedorServicio);			
		this.jButtonVerFormFacturaProveedorServicio.setVisible(this.isPermisoVerFormFacturaProveedorServicio);			
		
		this.jButtonAbrirOrderByFacturaProveedorServicio.setVisible(this.isPermisoOrdenFacturaProveedorServicio);					
		
		this.jButtonNuevoRelacionesFacturaProveedorServicio.setVisible(this.isPermisoNuevoFacturaProveedorServicio);			
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarFacturaProveedorServicio.setVisible(this.isPermisoActualizarFacturaProveedorServicio);	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.setVisible(this.isPermisoActualizarFacturaProveedorServicio);	
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.setVisible(this.isPermisoEliminarFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedorServicio);						
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.setVisible(this.isPermisoGuardarCambiosFacturaProveedorServicio);							
		}
		
		this.jButtonGuardarCambiosTablaFacturaProveedorServicio.setVisible(this.isPermisoActualizarFacturaProveedorServicio);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaProveedorServicio() {
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarFacturaProveedorServicio.setVisible(this.isPermisoActualizarFacturaProveedorServicio);	
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.setVisible(this.isPermisoActualizarFacturaProveedorServicio);	
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.setVisible(this.isPermisoEliminarFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedorServicio);							
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedorServicio && this.isPermisoGuardarCambiosFacturaProveedorServicio));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosFacturaProveedorServicio() {
		if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualFacturaProveedorServicio();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesFacturaProveedorServicio() {
	}
	
	public void jTableDatosFacturaProveedorServicioListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarFacturaProveedorServicio(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.facturaproveedorservicio.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.facturaproveedorservicio.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.facturaproveedorservicio.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.facturaproveedorservicio.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.facturaproveedorservicio.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.facturaproveedorservicio.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.facturaproveedorservicio.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.facturaproveedorservicio.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.facturaproveedorservicio.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaFacturaProveedorServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedorServicio=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosFacturaProveedorServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.facturaproveedorservicio.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getnumero_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_factura like '%"+this.facturaproveedorservicio.getnumero_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteFacturaProveedorServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedorServicio=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosFacturaProveedorServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.facturaproveedorservicio.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.facturaproveedorservicio.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_documentoFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodocumento=true;

			idTienePermisotipodocumento=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoDocumentoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodocumento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tipodocumentoBeanSwingJInternalFrame=new TipoDocumentoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodocumentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodocumentoBeanSwingJInternalFrame.getTipoDocumentoLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_documento()!=null) {
					this.tipodocumentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodocumentoBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_documento());
					this.tipodocumentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDocumento();
				}

				JInternalFrameBase jinternalFrame =this.tipodocumentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertipodocumento=(TitledBorder)this.tipodocumentoBeanSwingJInternalFrame.jScrollPanelDatosTipoDocumento.getBorder();

				titledBordertipodocumento.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Documento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_documentoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_documento = "+this.facturaproveedorservicio.getid_tipo_documento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonplazoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getplazo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where plazo = "+this.facturaproveedorservicio.getplazo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_riseFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getcon_rise()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_rise = "+this.facturaproveedorservicio.getcon_rise().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.facturaproveedorservicio.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_venceFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getfecha_vence()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vence = '"+Funciones2.getStringPostgresDate(this.facturaproveedorservicio.getfecha_vence())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadosolicitaBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadosolicitaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadosolicitaBeanSwingJInternalFrame.sTipoBusqueda="EmpleadoSolicita";

			if(!this.sFinalQueryGeneral_empleadosolicita.equals("")) {
				this.empleadosolicitaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleadosolicita);
				this.empleadosolicitaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadosolicitaBeanSwingJInternalFrame.procesarBusqueda(this.empleadosolicitaBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadosolicitaBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleadoSolicita.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadosolicitaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedorServicio=null;
			TitledBorder titledBorderempleadosolicita=null;

			if(!this.jScrollPanelDatosFacturaProveedorServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				titledBorderempleadosolicita=(TitledBorder)this.empleadosolicitaBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosolicita.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleado_solicitaFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleadosolicita=true;

			idTienePermisoempleadosolicita=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleadosolicita) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.empleadosolicitaBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadosolicitaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadosolicitaBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_empleado_solicita()!=null) {
					this.empleadosolicitaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadosolicitaBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_empleado_solicita());
					this.empleadosolicitaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadosolicitaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadosolicitaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadosolicitaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderempleadosolicita=(TitledBorder)this.empleadosolicitaBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosolicita.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleado_solicitaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_empleado_solicita()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado_solicita = "+this.facturaproveedorservicio.getid_empleado_solicita().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoFacturaProveedorServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedorServicio=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosFacturaProveedorServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.facturaproveedorservicio.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondetalleFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getdetalle()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where detalle like '%"+this.facturaproveedorservicio.getdetalle()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_retencionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getnumero_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_retencion like '%"+this.facturaproveedorservicio.getnumero_retencion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getnumero_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_autorizacion like '%"+this.facturaproveedorservicio.getnumero_autorizacion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_serieFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getnumero_serie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_serie like '%"+this.facturaproveedorservicio.getnumero_serie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_tributarioFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotributario=true;

			idTienePermisotipotributario=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoTributarioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotributario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tipotributarioBeanSwingJInternalFrame=new TipoTributarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotributarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotributarioBeanSwingJInternalFrame.getTipoTributarioLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_tributario()!=null) {
					this.tipotributarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotributarioBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_tributario());
					this.tipotributarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTributario();
				}

				JInternalFrameBase jinternalFrame =this.tipotributarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertipotributario=(TitledBorder)this.tipotributarioBeanSwingJInternalFrame.jScrollPanelDatosTipoTributario.getBorder();

				titledBordertipotributario.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Tributario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_tributarioFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_tributario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_tributario = "+this.facturaproveedorservicio.getid_tipo_tributario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_validezFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getfecha_validez()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_validez = '"+Funciones2.getStringPostgresDate(this.facturaproveedorservicio.getfecha_validez())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_factura_inicioFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getanexo_factura_inicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_factura_inicio like '%"+this.facturaproveedorservicio.getanexo_factura_inicio()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_factura_finFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getanexo_factura_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_factura_fin like '%"+this.facturaproveedorservicio.getanexo_factura_fin()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.facturaproveedorservicio.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_servicios0FacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getvalor_servicios0()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_servicios0 = "+this.facturaproveedorservicio.getvalor_servicios0().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.facturaproveedorservicio.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_porcentajeFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getiva_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_porcentaje = "+this.facturaproveedorservicio.getiva_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.facturaproveedorservicio.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_mayorFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getnumero_mayor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_mayor like '%"+this.facturaproveedorservicio.getnumero_mayor()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_asientoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getcodigo_asiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_asiento like '%"+this.facturaproveedorservicio.getcodigo_asiento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionfuente1=true;

			idTienePermisotiporetencionfuente1=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionfuente1) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tiporetencionfuente1BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionfuente1BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionfuente1BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_retencion_fuente1()!=null) {
					this.tiporetencionfuente1BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionfuente1BeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_retencion_fuente1());
					this.tiporetencionfuente1BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionfuente1BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionfuente1BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionfuente1BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertiporetencionfuente1=(TitledBorder)this.tiporetencionfuente1BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionfuente1.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_retencion_fuente1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_fuente1 = "+this.facturaproveedorservicio.getid_tipo_retencion_fuente1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencioniva1=true;

			idTienePermisotiporetencioniva1=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencioniva1) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tiporetencioniva1BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencioniva1BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencioniva1BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_retencion_iva1()!=null) {
					this.tiporetencioniva1BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencioniva1BeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_retencion_iva1());
					this.tiporetencioniva1BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencioniva1BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencioniva1BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencioniva1BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertiporetencioniva1=(TitledBorder)this.tiporetencioniva1BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencioniva1.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_retencion_iva1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva1 = "+this.facturaproveedorservicio.getid_tipo_retencion_iva1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_numero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getanexo_numero_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_numero_autorizacion like '%"+this.facturaproveedorservicio.getanexo_numero_autorizacion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_numeso_serieFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getanexo_numeso_serie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_numeso_serie like '%"+this.facturaproveedorservicio.getanexo_numeso_serie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_fecha_validezFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getanexo_fecha_validez()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_fecha_validez = '"+Funciones2.getStringPostgresDate(this.facturaproveedorservicio.getanexo_fecha_validez())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditofiscalservicios=true;

			idTienePermisocuentacontablecreditofiscalservicios=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditofiscalservicios) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios()!=null) {
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios());
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordercuentacontablecreditofiscalservicios=(TitledBorder)this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofiscalservicios.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_fiscal_servicios = "+this.facturaproveedorservicio.getid_cuenta_contable_credito_fiscal_servicios().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.facturaproveedorservicio.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimientoFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimiento=true;

			idTienePermisotipomovimiento=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoMovimientoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimiento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tipomovimientoBeanSwingJInternalFrame=new TipoMovimientoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientoBeanSwingJInternalFrame.getTipoMovimientoLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_movimiento()!=null) {
					this.tipomovimientoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientoBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_movimiento());
					this.tipomovimientoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimiento();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertipomovimiento=(TitledBorder)this.tipomovimientoBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimiento.getBorder();

				titledBordertipomovimiento.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Movimiento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimientoFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_movimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento = "+this.facturaproveedorservicio.getid_tipo_movimiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimientomodulo=true;

			idTienePermisotipomovimientomodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoMovimientoModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimientomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tipomovimientomoduloBeanSwingJInternalFrame=new TipoMovimientoModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientomoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientomoduloBeanSwingJInternalFrame.getTipoMovimientoModuloLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_movimiento_modulo()!=null) {
					this.tipomovimientomoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientomoduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_movimiento_modulo());
					this.tipomovimientomoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimientoModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientomoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertipomovimientomodulo=(TitledBorder)this.tipomovimientomoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimientoModulo.getBorder();

				titledBordertipomovimientomodulo.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Movimiento Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_movimiento_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento_modulo = "+this.facturaproveedorservicio.getid_tipo_movimiento_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedorServicio(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedorServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedorServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.facturaproveedorservicioLogic.getConnexion());

				if(this.facturaproveedorservicio.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedorservicio.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedorServicio=(TitledBorder)this.jScrollPanelDatosFacturaProveedorServicio.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderFacturaProveedorServicio.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.getfacturaproveedorservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedorservicio==null) {
						this.facturaproveedorservicio = new FacturaProveedorServicio();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);
				}

				if(this.facturaproveedorservicio.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.facturaproveedorservicio.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedorServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdAnio();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdCliente();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdCuentaContableCreditoFiscalServicios();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdEjercicio();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdEmpleado();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoSolicitaFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdEmpleadoSolicita();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdEmpresa();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdFactura();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdMes();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdModulo();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdMoneda();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdPeriodo();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdSucursal();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDocumentoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoDocumento();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoMovimiento();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoModuloFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoMovimientoModulo();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionFuente1FacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoRetencionFuente1();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIva1FacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoRetencionIva1();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTributarioFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTipoTributario();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionFacturaProveedorServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);

			this.getFacturaProveedorServiciosFK_IdTransaccion();

			this.inicializarActualizarBindingFacturaProveedorServicio(false);

			//if(FacturaProveedorServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorservicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameFacturaProveedorServicio() {
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.setVisible(false);	    			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.dispose();
			this.jInternalFrameDetalleFormFacturaProveedorServicio=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
			this.jInternalFrameReporteDinamicoFacturaProveedorServicio.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoFacturaProveedorServicio.dispose();
			this.jInternalFrameReporteDinamicoFacturaProveedorServicio=null;
		}
		
		if(this.jInternalFrameImportacionFacturaProveedorServicio!=null) {
			this.jInternalFrameImportacionFacturaProveedorServicio.setVisible(false);	    			
			this.jInternalFrameImportacionFacturaProveedorServicio.dispose();
			this.jInternalFrameImportacionFacturaProveedorServicio=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessFacturaProveedorServicio();
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			
			if(sTipo.equals("NuevoFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarFacturaProveedorServicio")) {
				jButtonDuplicarFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarFacturaProveedorServicio")) {
				jButtonCopiarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("VerFormFacturaProveedorServicio")) {
				jButtonVerFormFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarFacturaProveedorServicio")) {
				jButtonDuplicarFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarFacturaProveedorServicio")) {
				jButtonDuplicarFacturaProveedorServicioActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarFacturaProveedorServicio")) {
				jButtonModificarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarFacturaProveedorServicio")) {
				jButtonModificarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarFacturaProveedorServicio")) {
				jButtonModificarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarFacturaProveedorServicio")) {
				jButtonActualizarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarFacturaProveedorServicio")) {
				jButtonActualizarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarFacturaProveedorServicio")) {
				jButtonActualizarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("EliminarFacturaProveedorServicio")) {
				jButtonEliminarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarFacturaProveedorServicio")) {
				jButtonEliminarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarFacturaProveedorServicio")) {
				jButtonEliminarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("CancelarFacturaProveedorServicio")) {
				jButtonCancelarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarFacturaProveedorServicio")) {
				jButtonCancelarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarFacturaProveedorServicio")) {
				jButtonCancelarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("CerrarFacturaProveedorServicio")) {
				jButtonCerrarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarFacturaProveedorServicio")) {
				jButtonCerrarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarFacturaProveedorServicio")) {
				jButtonCerrarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarFacturaProveedorServicio")) {
				jButtonMostrarOcultarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarFacturaProveedorServicio")) {
				jButtonCancelarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarFacturaProveedorServicio")) {
				jButtonCopiarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarFacturaProveedorServicio")) {
				jButtonVerFormFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarFacturaProveedorServicio")) {
				jButtonCopiarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormFacturaProveedorServicio")) {
				jButtonVerFormFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionFacturaProveedorServicio")) {
				jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarFacturaProveedorServicio")) {
				jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionFacturaProveedorServicio")) {
				jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresFacturaProveedorServicio")) {
				jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarFacturaProveedorServicio")) {
				jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreFacturaProveedorServicio")) {
				jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesFacturaProveedorServicio")) {
				jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarFacturaProveedorServicio")) {
				jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesFacturaProveedorServicio")) {
				jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByFacturaProveedorServicio") || sTipo.equals("MenuItemDetalleAbrirOrderByFacturaProveedorServicio")) {
				jButtonAbrirOrderByFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarFacturaProveedorServicio") || sTipo.equals("MenuItemDetalleMostrarOcultarFacturaProveedorServicio")) {
				jButtonMostrarOcultarFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaProveedorServicio")) {
				jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarFacturaProveedorServicio")) {
				jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosFacturaProveedorServicio")) {
				jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoFacturaProveedorServicio")) {
				jButtonCerrarReporteDinamicoFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoFacturaProveedorServicio")) {
				jButtonGenerarReporteDinamicoFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoFacturaProveedorServicio")) {
				
				jButtonGenerarExcelReporteDinamicoFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionFacturaProveedorServicio")) {
				jButtonCerrarImportacionFacturaProveedorServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionFacturaProveedorServicio")) {
				
				jButtonGenerarImportacionFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionFacturaProveedorServicio")) {
				
				jButtonAbrirImportacionFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesFacturaProveedorServicio")) {
				jComboBoxTiposAccionesFacturaProveedorServicioActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesFacturaProveedorServicio")) {
				jComboBoxTiposRelacionesFacturaProveedorServicioActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioFacturaProveedorServicio")) {
				jComboBoxTiposAccionesFacturaProveedorServicioActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarFacturaProveedorServicio")) {
				
				jComboBoxTiposSeleccionarFacturaProveedorServicioActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralFacturaProveedorServicio")) {
				jTextFieldValorCampoGeneralFacturaProveedorServicioActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByFacturaProveedorServicio")) {
				jButtonAbrirOrderByFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarFacturaProveedorServicio")) {
				jButtonAbrirOrderByFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByFacturaProveedorServicio")) {
				jButtonCerrarOrderByFacturaProveedorServicioActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaProveedorServicioBusqueda")) {
				this.jButtonidFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorServicioUpdate")) {
				this.jButtonid_empresaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empresaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorServicioUpdate")) {
				this.jButtonid_sucursalFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorServicioBusqueda")) {
				this.jButtonid_sucursalFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorServicioUpdate")) {
				this.jButtonid_ejercicioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_ejercicioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorServicioUpdate")) {
				this.jButtonid_periodoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_periodoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorServicioUpdate")) {
				this.jButtonid_anioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_anioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorServicioUpdate")) {
				this.jButtonid_mesFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorServicioBusqueda")) {
				this.jButtonid_mesFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorServicioUpdate")) {
				this.jButtonid_transaccionFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorServicioBusqueda")) {
				this.jButtonid_transaccionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicio")) {
				this.jButtonid_facturaFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicioUpdate")) {
				this.jButtonid_facturaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_facturaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_facturaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicio")) {
				this.jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicioUpdate")) {
				this.jButtonid_clienteFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicioBusqueda")) {
				this.jButtonid_clienteFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaProveedorServicioBusqueda")) {
				this.jButtonrucFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_documentoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_documentoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("plazoFacturaProveedorServicioBusqueda")) {
				this.jButtonplazoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_riseFacturaProveedorServicioBusqueda")) {
				this.jButtoncon_riseFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_emisionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venceFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_venceFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicio")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicioUpdate")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicio")) {
				this.jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicioUpdate")) {
				this.jButtonid_empleadoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empleadoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleFacturaProveedorServicioBusqueda")) {
				this.jButtondetalleFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_retencionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacionFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serieFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_serieFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_tributarioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_tributarioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_validezFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_validezFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_inicioFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_factura_inicioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_finFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_factura_finFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorServicioUpdate")) {
				this.jButtonid_monedaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_monedaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios0FacturaProveedorServicioBusqueda")) {
				this.jButtonvalor_servicios0FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaProveedorServicioBusqueda")) {
				this.jButtontotal_ivaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_porcentajeFacturaProveedorServicioBusqueda")) {
				this.jButtoniva_porcentajeFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaProveedorServicioBusqueda")) {
				this.jButtontotalFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_mayorFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_asientoFacturaProveedorServicioBusqueda")) {
				this.jButtoncodigo_asientoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numero_autorizacionFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_numero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numeso_serieFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_numeso_serieFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_fecha_validezFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_fecha_validezFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaProveedorServicioBusqueda")) {
				this.jButtondescripcionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_movimientoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_movimientoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteFacturaProveedorServicio")) {
				this.jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoFacturaProveedorServicio")) {
				this.jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdClienteFacturaProveedorServicio")) {
				this.jButtonFK_IdClienteFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio")) {
				this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoFacturaProveedorServicio")) {
				this.jButtonFK_IdEmpleadoFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDocumentoFacturaProveedorServicio")) {
				this.jButtonFK_IdTipoDocumentoFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoMovimientoModuloFacturaProveedorServicio")) {
				this.jButtonFK_IdTipoMovimientoModuloFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionFuente1FacturaProveedorServicio")) {
				this.jButtonFK_IdTipoRetencionFuente1FacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionIva1FacturaProveedorServicio")) {
				this.jButtonFK_IdTipoRetencionIva1FacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloFacturaProveedorServicio")) {
				this.jButtonFK_IdTipoTransaccionModuloFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTributarioFacturaProveedorServicio")) {
				this.jButtonFK_IdTipoTributarioFacturaProveedorServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionFacturaProveedorServicio")) {
				this.jButtonFK_IdTransaccionFacturaProveedorServicioActionPerformed(evt);
			}
			
			;
			
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessFacturaProveedorServicio();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			FacturaProveedorServicio facturaproveedorservicioLocal=null;
			
			if(!this.getEsControlTabla()) {
				facturaproveedorservicioLocal=this.facturaproveedorservicio;
			} else {
				facturaproveedorservicioLocal=this.facturaproveedorservicioAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
							
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
								
						
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
								
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
							
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
								
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosFacturaProveedorServicio")) {
					jCheckBoxSeleccionarTodosFacturaProveedorServicioItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosFacturaProveedorServicio")) {
					jCheckBoxSeleccionadosFacturaProveedorServicioItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarFacturaProveedorServicio")) {
					
				}
				
				


				
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
												
				
				


				
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedorservicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedorservicio);
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedorServicio.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedorServicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorservicioAnterior =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarFacturaProveedorServicio")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosFacturaProveedorServicioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosFacturaProveedorServicio.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.facturaproveedorservicio =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.facturaproveedorservicio);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarFacturaProveedorServicio")) {
				
				}
				
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarFacturaProveedorServicio")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosFacturaProveedorServicio.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarFacturaProveedorServicio")) {
			
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessFacturaProveedorServicio();
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			if(sTipo.equals("NuevoFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarFacturaProveedorServicio")) {
				jButtonDuplicarFacturaProveedorServicioActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarFacturaProveedorServicio")) {
				jButtonCopiarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormFacturaProveedorServicio")) {
				jButtonVerFormFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesFacturaProveedorServicio")) {
				jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarFacturaProveedorServicio")) {
				jButtonModificarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarFacturaProveedorServicio")) {
				jButtonActualizarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarFacturaProveedorServicio")) {
				jButtonEliminarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarFacturaProveedorServicio")) {
				jButtonCancelarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarFacturaProveedorServicio")) {
				jButtonCerrarFacturaProveedorServicioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosFacturaProveedorServicio")) {
				jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaProveedorServicio")) {
				jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByFacturaProveedorServicio")) {
				jButtonAbrirOrderByFacturaProveedorServicioActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionFacturaProveedorServicio")) {
				jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresFacturaProveedorServicio")) {
				jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesFacturaProveedorServicio")) {
				jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaProveedorServicioBusqueda")) {
				this.jButtonidFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorServicioUpdate")) {
				this.jButtonid_empresaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empresaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorServicioUpdate")) {
				this.jButtonid_sucursalFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorServicioBusqueda")) {
				this.jButtonid_sucursalFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorServicioUpdate")) {
				this.jButtonid_ejercicioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_ejercicioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorServicioUpdate")) {
				this.jButtonid_periodoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_periodoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorServicioUpdate")) {
				this.jButtonid_anioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_anioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorServicioUpdate")) {
				this.jButtonid_mesFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorServicioBusqueda")) {
				this.jButtonid_mesFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorServicioUpdate")) {
				this.jButtonid_transaccionFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorServicioBusqueda")) {
				this.jButtonid_transaccionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicio")) {
				this.jButtonid_facturaFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicioUpdate")) {
				this.jButtonid_facturaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_facturaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_facturaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicio")) {
				this.jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicioUpdate")) {
				this.jButtonid_clienteFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorServicioBusqueda")) {
				this.jButtonid_clienteFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaProveedorServicioBusqueda")) {
				this.jButtonrucFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_documentoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_documentoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("plazoFacturaProveedorServicioBusqueda")) {
				this.jButtonplazoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_riseFacturaProveedorServicioBusqueda")) {
				this.jButtoncon_riseFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_emisionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venceFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_venceFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicio")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicioUpdate")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empleado_solicitaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicio")) {
				this.jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicioUpdate")) {
				this.jButtonid_empleadoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_empleadoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleFacturaProveedorServicioBusqueda")) {
				this.jButtondetalleFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_retencionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacionFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serieFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_serieFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_tributarioFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_tributarioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_validezFacturaProveedorServicioBusqueda")) {
				this.jButtonfecha_validezFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_inicioFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_factura_inicioFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_finFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_factura_finFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorServicioUpdate")) {
				this.jButtonid_monedaFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorServicioBusqueda")) {
				this.jButtonid_monedaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios0FacturaProveedorServicioBusqueda")) {
				this.jButtonvalor_servicios0FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaProveedorServicioBusqueda")) {
				this.jButtontotal_ivaFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_porcentajeFacturaProveedorServicioBusqueda")) {
				this.jButtoniva_porcentajeFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaProveedorServicioBusqueda")) {
				this.jButtontotalFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorFacturaProveedorServicioBusqueda")) {
				this.jButtonnumero_mayorFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_asientoFacturaProveedorServicioBusqueda")) {
				this.jButtoncodigo_asientoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numero_autorizacionFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_numero_autorizacionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numeso_serieFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_numeso_serieFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_fecha_validezFacturaProveedorServicioBusqueda")) {
				this.jButtonanexo_fecha_validezFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaProveedorServicioBusqueda")) {
				this.jButtondescripcionFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_movimientoFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_movimientoFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorServicioUpdate")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorServicioBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusquedaActionPerformed(evt);
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessFacturaProveedorServicio();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameFacturaProveedorServicio")) {
				closingInternalFrameFacturaProveedorServicio();
				
			} else if(sTipo.equals("jButtonCancelarFacturaProveedorServicio")) {
				JInternalFrameBase jInternalFrameDetalleFormFacturaProveedorServicio = (JInternalFrameBase)evt.getSource();
	            	
	            FacturaProveedorServicioBeanSwingJInternalFrame jInternalFrameParent=(FacturaProveedorServicioBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaProveedorServicio.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarFacturaProveedorServicioActionPerformed(null);
			}
			
			FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturaproveedorservicio,new Object(),this.facturaproveedorservicioParameterGeneral,this.facturaproveedorservicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormFacturaProveedorServicio(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormFacturaProveedorServicio(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormFacturaProveedorServicio(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.facturaproveedorservicio)) {
			if(!esControlTabla) {
				if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);			
				}
				
				if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.procesarEventosFacturaProveedorServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this.facturaproveedorservicio,this.facturaproveedorservicioParameterGeneral,this.isEsNuevoFacturaProveedorServicio,classes);//this.facturaproveedorservicioLogic.getFacturaProveedorServicio()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral,this.facturaproveedorservicioBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanFacturaProveedorServicio(classes,this.facturaproveedorservicioReturnGeneral,this.facturaproveedorservicioBean,false);
					}
						
					if(this.facturaproveedorservicioReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio());	
					}
						
					if(this.facturaproveedorservicioReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio(),classes);//this.facturaproveedorservicioBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedorServicio(this.facturaproveedorservicio,classes);//this.facturaproveedorservicioBean);									
				}
			
				if(FacturaProveedorServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualFacturaProveedorServicio(this.facturaproveedorservicio,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedorServicio(this.facturaproveedorservicio);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.facturaproveedorservicioAnterior!=null) {
						this.facturaproveedorservicio=this.facturaproveedorservicioAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.procesarEventosFacturaProveedorServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this.facturaproveedorservicio,this.facturaproveedorservicioParameterGeneral,this.isEsNuevoFacturaProveedorServicio,classes);//this.facturaproveedorservicioLogic.getFacturaProveedorServicio()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaproveedorservicioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio(),facturaproveedorservicioLogic.getFacturaProveedorServicios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio(),this.facturaproveedorservicios);
				}
				//ARCHITECTURE
				
				//this.jTableDatosFacturaProveedorServicio.repaint();
				
				//((AbstractTableModel) this.jTableDatosFacturaProveedorServicio.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosFacturaProveedorServicio();
			}
		}
	}
	
	public void actualizarVisualTableDatosFacturaProveedorServicio() throws Exception {
		
		FacturaProveedorServicioModel facturaproveedorservicioModel=(FacturaProveedorServicioModel)this.jTableDatosFacturaProveedorServicio.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedorservicioModel.facturaproveedorservicios=this.facturaproveedorservicioLogic.getFacturaProveedorServicios();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			facturaproveedorservicioModel.facturaproveedorservicios=this.facturaproveedorservicios;
		}
		
		
		((FacturaProveedorServicioModel) this.jTableDatosFacturaProveedorServicio.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaFacturaProveedorServicio() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getfacturaproveedorservicioAnterior(),this.facturaproveedorservicioLogic.getFacturaProveedorServicios());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getfacturaproveedorservicioAnterior(),this.facturaproveedorservicios);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosFacturaProveedorServicio();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorservicio,new Object(),generalEntityParameterGeneral,this.facturaproveedorservicioReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=FacturaProveedorServicioConstantesFunciones.getClassesRelationshipsOfFacturaProveedorServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=FacturaProveedorServicioConstantesFunciones.getClassesRelationshipsFromStringsOfFacturaProveedorServicio(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormFacturaProveedorServicio(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				FacturaProveedorServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorservicio,new Object(),generalEntityParameterGeneral,this.facturaproveedorservicioReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioFacturaProveedorServicio(FacturaProveedorServicioBean facturaproveedorservicioBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanFacturaProveedorServicio(ArrayList<Classe> classes,FacturaProveedorServicioReturnGeneral facturaproveedorservicioReturnGeneral,FacturaProveedorServicioBean facturaproveedorservicioBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.facturaproveedorservicio)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio = new FacturaProveedorServicioDetalleFormJInternalFrame(jDesktopPane,this.facturaproveedorservicioSessionBean.getConGuardarRelaciones(),this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.setVisible(false);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.setSelected(false);						
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.facturaproveedorservicioLogic=this.facturaproveedorservicioLogic;
		
		this.cargarCombosFrameForeignKeyFacturaProveedorServicio("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaProveedorServicio();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaProveedorServicio();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyFacturaProveedorServicio("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyFacturaProveedorServicio();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaProveedorServicio"));
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ModificarFacturaProveedorServicio"));

		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaProveedorServicio"));
					
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemModificarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaProveedorServicio"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"ActualizarFacturaProveedorServicio"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaProveedorServicio"));
						
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemActualizarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaProveedorServicio"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"EliminarFacturaProveedorServicio"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaProveedorServicio"));
								
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemEliminarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaProveedorServicio"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CancelarFacturaProveedorServicio"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaProveedorServicio"));
					
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemCancelarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaProveedorServicio"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemDetalleCerrarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaProveedorServicio"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedorServicio"));
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedorServicio"));
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaProveedorServicio"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonidFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioBusqueda"));
		//jButtonid_facturaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorServicioBusqueda"));
		//jButtonid_clienteFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonrucFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonplazoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncon_riseFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_emisionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_venceFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorServicioBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioBusqueda"));
		//jButtonid_empleadoFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondetalleFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_retencionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_inicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_finFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonvalor_servicios0FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotal_ivaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoniva_porcentajeFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_mayorFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncodigo_asientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numeso_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_fecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondescripcionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaProveedorServicio"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameFacturaProveedorServicio"));
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaProveedorServicio"));
		}
		
		this.jTableDatosFacturaProveedorServicio.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarFacturaProveedorServicio"));
		
		this.jTableDatosFacturaProveedorServicio.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarFacturaProveedorServicio"));
		
		this.jButtonNuevoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"NuevoFacturaProveedorServicio"));
		
		this.jButtonDuplicarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"DuplicarFacturaProveedorServicio"));
		
		this.jButtonCopiarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"CopiarFacturaProveedorServicio"));
		
		this.jButtonVerFormFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"VerFormFacturaProveedorServicio"));
		
		
		this.jButtonNuevoToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"NuevoToolBarFacturaProveedorServicio"));
			
		this.jButtonDuplicarToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"DuplicarToolBarFacturaProveedorServicio"));
			
		this.jMenuItemNuevoFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemNuevoFacturaProveedorServicio"));
			
		this.jMenuItemDuplicarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarFacturaProveedorServicio"));		
		
		
		this.jButtonNuevoRelacionesFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"NuevoRelacionesFacturaProveedorServicio"));
		
		
		this.jButtonNuevoRelacionesToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarFacturaProveedorServicio"));
			
		this.jMenuItemNuevoRelacionesFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesFacturaProveedorServicio"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ModificarFacturaProveedorServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonModificarToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaProveedorServicio"));
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemModificarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaProveedorServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"ActualizarFacturaProveedorServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonActualizarToolBarFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaProveedorServicio"));
				
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemActualizarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaProveedorServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"EliminarFacturaProveedorServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonEliminarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaProveedorServicio"));
						
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemEliminarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaProveedorServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CancelarFacturaProveedorServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonCancelarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaProveedorServicio"));
			
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemCancelarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaProveedorServicio"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarFacturaProveedorServicio"));		
		
		
		this.jButtonCerrarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CerrarFacturaProveedorServicio"));
		
		
		this.jButtonCerrarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CerrarToolBarFacturaProveedorServicio"));
			
		this.jMenuItemCerrarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemCerrarFacturaProveedorServicio"));
			
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jMenuItemDetalleCerrarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaProveedorServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosFacturaProveedorServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedorServicio"));
		}
		
		this.jButtonCopiarToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CopiarToolBarFacturaProveedorServicio"));
			
		this.jButtonVerFormToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"VerFormToolBarFacturaProveedorServicio"));
		
		this.jMenuItemGuardarCambiosFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosFacturaProveedorServicio"));
			
		this.jMenuItemCopiarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemCopiarFacturaProveedorServicio"));		
		
		this.jMenuItemVerFormFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemVerFormFacturaProveedorServicio"));		
		
		
		this.jButtonGuardarCambiosTablaFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaProveedorServicio"));
		
		
		this.jButtonGuardarCambiosTablaToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarFacturaProveedorServicio"));
			
		this.jMenuItemGuardarCambiosTablaFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaProveedorServicio"));		
		
		
		
		this.jButtonRecargarInformacionFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"RecargarInformacionFacturaProveedorServicio"));
					
		this.jButtonRecargarInformacionToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarFacturaProveedorServicio"));
		
		this.jMenuItemRecargarInformacionFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionFacturaProveedorServicio"));		
		
		
		
		this.jButtonAnterioresFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"AnterioresFacturaProveedorServicio"));
		
		
		this.jButtonAnterioresToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"AnterioresToolBarFacturaProveedorServicio"));
		
		this.jMenuItemAnterioresFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresFacturaProveedorServicio"));		
		
		
		this.jButtonSiguientesFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"SiguientesFacturaProveedorServicio"));
		
		
		this.jButtonSiguientesToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"SiguientesToolBarFacturaProveedorServicio"));
			
		this.jMenuItemSiguientesFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesFacturaProveedorServicio"));
			
		this.jMenuItemAbrirOrderByFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByFacturaProveedorServicio"));
			
		this.jMenuItemMostrarOcultarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarFacturaProveedorServicio"));
			
		this.jMenuItemDetalleAbrirOrderByFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByFacturaProveedorServicio"));
			
		this.jMenuItemDetalleMostarOcultarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarFacturaProveedorServicio"));		
		
		
		this.jButtonNuevoGuardarCambiosFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosFacturaProveedorServicio"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarFacturaProveedorServicio"));
			
		this.jMenuItemNuevoGuardarCambiosFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosFacturaProveedorServicio"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosFacturaProveedorServicio.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosFacturaProveedorServicio"));

		this.jCheckBoxSeleccionadosFacturaProveedorServicio.addItemListener(new CheckBoxItemListener(this,"SeleccionadosFacturaProveedorServicio"));
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaProveedorServicio"));
		}
		
		
		this.jComboBoxTiposRelacionesFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"TiposRelacionesFacturaProveedorServicio"));
			
		this.jComboBoxTiposAccionesFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesFacturaProveedorServicio"));
					
		this.jComboBoxTiposSeleccionarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"TiposSeleccionarFacturaProveedorServicio"));
			
		this.jTextFieldValorCampoGeneralFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralFacturaProveedorServicio"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonidFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioBusqueda"));
		//jButtonid_facturaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorServicioBusqueda"));
		//jButtonid_clienteFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonrucFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonplazoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncon_riseFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_emisionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_venceFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorServicioBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioBusqueda"));
		//jButtonid_empleadoFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondetalleFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_retencionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_inicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_finFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonvalor_servicios0FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotal_ivaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoniva_porcentajeFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_mayorFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncodigo_asientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numeso_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_fecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondescripcionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdClienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaProveedorServicio"));

			this.jButtonBuscarFK_IdClienteid_clienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicio"));

			this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio"));

			this.jButtonFK_IdEmpleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoFacturaProveedorServicio"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicio"));

			this.jButtonFK_IdTipoDocumentoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoFacturaProveedorServicio"));

			this.jButtonFK_IdTipoMovimientoModuloFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloFacturaProveedorServicio"));

			this.jButtonFK_IdTipoRetencionFuente1FacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuente1FacturaProveedorServicio"));

			this.jButtonFK_IdTipoRetencionIva1FacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIva1FacturaProveedorServicio"));

			this.jButtonFK_IdTipoTransaccionModuloFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloFacturaProveedorServicio"));

			this.jButtonFK_IdTipoTributarioFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioFacturaProveedorServicio"));

			this.jButtonFK_IdTransaccionFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionFacturaProveedorServicio"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedorServicio!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedorServicio"));
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedorServicio"));
				this.jInternalFrameReporteDinamicoFacturaProveedorServicio.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedorServicio"));
			}
			
			//this.jButtonCerrarReporteDinamicoFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedorServicio"));				
			//this.jButtonGenerarReporteDinamicoFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedorServicio"));
			//this.jButtonGenerarExcelReporteDinamicoFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedorServicio"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionFacturaProveedorServicio!=null) {
				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaProveedorServicio"));
				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaProveedorServicio"));
				this.jInternalFrameImportacionFacturaProveedorServicio.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaProveedorServicio"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"AbrirOrderByFacturaProveedorServicio"));
			
			this.jButtonAbrirOrderByToolBarFacturaProveedorServicio.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarFacturaProveedorServicio"));			
			
			if(this.jInternalFrameOrderByFacturaProveedorServicio!=null) {
				this.jInternalFrameOrderByFacturaProveedorServicio.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaProveedorServicio"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jTabbedPaneRelacionesFacturaProveedorServicio.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaProveedorServicio"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameFacturaProveedorServicio();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormFacturaProveedorServicio = (JInternalFrameBase)event.getSource();
	            	
	            FacturaProveedorServicioBeanSwingJInternalFrame jInternalFrameParent=(FacturaProveedorServicioBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaProveedorServicio.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarFacturaProveedorServicioActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosFacturaProveedorServicio.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosFacturaProveedorServicioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosFacturaProveedorServicio.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosFacturaProveedorServicio.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoFacturaProveedorServicio";
		inputMap = this.jButtonNuevoFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesFacturaProveedorServicio";
		inputMap = this.jButtonNuevoRelacionesFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaProveedorServicioActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarFacturaProveedorServicio";
		inputMap = this.jButtonModificarFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarFacturaProveedorServicio";
		inputMap = this.jButtonActualizarFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarFacturaProveedorServicio";
		inputMap = this.jButtonEliminarFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarFacturaProveedorServicio";
		inputMap = this.jButtonCancelarFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarFacturaProveedorServicio";
		inputMap = this.jButtonCerrarFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosFacturaProveedorServicio";
		inputMap = this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonGuardarCambiosFacturaProveedorServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosFacturaProveedorServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosFacturaProveedorServicio.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosFacturaProveedorServicioItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesFacturaProveedorServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesFacturaProveedorServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarFacturaProveedorServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarFacturaProveedorServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralFacturaProveedorServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralFacturaProveedorServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonidFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empresaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_sucursalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_ejercicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_periodoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_anioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_mesFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_transaccionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorServicioBusqueda"));
		//jButtonid_facturaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_facturaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorServicioBusqueda"));
		//jButtonid_clienteFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonrucFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_documentoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonplazoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncon_riseFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_emisionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_venceFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorServicioBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorServicioBusqueda"));
		//jButtonid_empleadoFacturaProveedorServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicio"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondetalleFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_retencionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_tributarioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonfecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_inicioFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_factura_finFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_monedaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonvalor_servicios0FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotal_ivaFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoniva_porcentajeFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtontotalFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonnumero_mayorFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtoncodigo_asientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_fuente1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_retencion_iva1FacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numero_autorizacionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_numeso_serieFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonanexo_fecha_validezFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtondescripcionFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimientoFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_movimiento_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_tipo_transaccion_moduloFacturaProveedorServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorServicioBusqueda"));
		
		
		this.jButtonFK_IdClienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaProveedorServicio"));

		this.jButtonBuscarFK_IdClienteid_clienteFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorServicio"));

		this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio"));

		this.jButtonFK_IdEmpleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoFacturaProveedorServicio"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorServicio"));

		this.jButtonFK_IdTipoDocumentoFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoFacturaProveedorServicio"));

		this.jButtonFK_IdTipoMovimientoModuloFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloFacturaProveedorServicio"));

		this.jButtonFK_IdTipoRetencionFuente1FacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuente1FacturaProveedorServicio"));

		this.jButtonFK_IdTipoRetencionIva1FacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIva1FacturaProveedorServicio"));

		this.jButtonFK_IdTipoTransaccionModuloFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloFacturaProveedorServicio"));

		this.jButtonFK_IdTipoTributarioFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioFacturaProveedorServicio"));

		this.jButtonFK_IdTransaccionFacturaProveedorServicio.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionFacturaProveedorServicio"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionFacturaProveedorServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionFacturaProveedorServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarFacturaProveedorServicioActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarFacturaProveedorServicio.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosFacturaProveedorServicio(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
					facturaproveedorservicioAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicios) {
					facturaproveedorservicioAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosFacturaProveedorServicioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
						facturaproveedorservicioAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicios) {
						facturaproveedorservicioAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
					
						if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE)) {
							existe=true;
							facturaproveedorservicioAux.setcon_rise(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicios) {
						
						if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE)) {
							existe=true;
							facturaproveedorservicioAux.setcon_rise(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaProveedorServicio.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaProveedorServicio.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosFacturaProveedorServicioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosFacturaProveedorServicio.getSelectedRows();
			
			FacturaProveedorServicio facturaproveedorservicioLocal=new FacturaProveedorServicio();
			
			//this.seleccionarTodosFacturaProveedorServicio(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorservicioLocal =(FacturaProveedorServicio) this.facturaproveedorservicioLogic.getFacturaProveedorServicios().toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					facturaproveedorservicioLocal =(FacturaProveedorServicio) this.facturaproveedorservicios.toArray()[this.jTableDatosFacturaProveedorServicio.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				facturaproveedorservicioLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
						facturaproveedorservicioAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicios) {
						facturaproveedorservicioAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaProveedorServicio.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaProveedorServicio.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorServicio,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualFacturaProveedorServicioItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarFacturaProveedorServicioParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralFacturaProveedorServicioActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralFacturaProveedorServicio.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
				
						if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaproveedorservicioAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO)) {
							existe=true;
							facturaproveedorservicioAux.setplazo(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_vence(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							facturaproveedorservicioAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_factura_inicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_factura_fin(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0)) {
							existe=true;
							facturaproveedorservicioAux.setvalor_servicios0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaproveedorservicioAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE)) {
							existe=true;
							facturaproveedorservicioAux.setiva_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaproveedorservicioAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO)) {
							existe=true;
							facturaproveedorservicioAux.setcodigo_asiento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_numero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_numeso_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_fecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaproveedorservicioAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicios) {
					
						if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaproveedorservicioAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO)) {
							existe=true;
							facturaproveedorservicioAux.setplazo(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_vence(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							facturaproveedorservicioAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ)) {
							existe=true;
							facturaproveedorservicioAux.setfecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_factura_inicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_factura_fin(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0)) {
							existe=true;
							facturaproveedorservicioAux.setvalor_servicios0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaproveedorservicioAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE)) {
							existe=true;
							facturaproveedorservicioAux.setiva_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaproveedorservicioAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							facturaproveedorservicioAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO)) {
							existe=true;
							facturaproveedorservicioAux.setcodigo_asiento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_numero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_numeso_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
							existe=true;
							facturaproveedorservicioAux.setanexo_fecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaproveedorservicioAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesFacturaProveedorServicioActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioFacturaProveedorServicio=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesFacturaProveedorServicio.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteFacturaProveedorServicio) {				
					conSplash=true;//false;										
					
					//this.startProcessFacturaProveedorServicio(conSplash);
				
					this.generarReporteFacturaProveedorServiciosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoFacturaProveedorServiciosSeleccionados();
				//this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaProveedorServiciosSeleccionados(false);
				//this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaProveedorServiciosSeleccionados(true);
				//this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaProveedorServicio();
				
				this.exportarFacturaProveedorServiciosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionFacturaProveedorServicios();
				//this.importarFacturaProveedorServicios();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaProveedorServicio();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelFacturaProveedorServiciosSeleccionados();
				//this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessFacturaProveedorServicio();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoFacturaProveedorServicio)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyFacturaProveedorServicio(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
				}	
			} 			
			else if(FacturaProveedorServicioBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteFacturaProveedorServicio) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessFacturaProveedorServicio(conSplash);
					
						//this.actualizarParametrosGeneralFacturaProveedorServicio();
						
						this.generarReporteProcesoAccionFacturaProveedorServiciosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(FacturaProveedorServicioBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Factura ProveedorS SELECCIONADOS?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessFacturaProveedorServicio();
				
						this.actualizarParametrosGeneralFacturaProveedorServicio();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.facturaproveedorservicioReturnGeneral=facturaproveedorservicioLogic.procesarAccionFacturaProveedorServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.facturaproveedorservicioLogic.getFacturaProveedorServicios(),this.facturaproveedorservicioParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarFacturaProveedorServicioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralFacturaProveedorServicio();
					
					FacturaProveedorServicioBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarFacturaProveedorServicioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaProveedorServicio.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxTiposAccionesFormularioFacturaProveedorServicio.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessFacturaProveedorServicio(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesFacturaProveedorServicioActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessFacturaProveedorServicio();
			
			if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
			FacturaProveedorServicio facturaproveedorservicio=new FacturaProveedorServicio();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingFacturaProveedorServicio(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesFacturaProveedorServicio.getSelectedItem();
			
			
			
			
			facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
			//this.sTipoAccion;
			
			if(facturaproveedorserviciosSeleccionados.size()==1) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
					facturaproveedorservicio=facturaproveedorservicioAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessFacturaProveedorServicio();
			
      		//this.finishProcessFacturaProveedorServicio(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarFacturaProveedorServicioReturnGeneral() throws Exception {
		if(this.facturaproveedorservicioReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.facturaproveedorservicioReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.facturaproveedorservicioReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.facturaproveedorservicioReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.facturaproveedorservicioReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.facturaproveedorservicioReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
		}
		
		if(this.facturaproveedorservicioReturnGeneral.getConRetornoLista() || this.facturaproveedorservicioReturnGeneral.getConRetornoObjeto()) {
			if(this.facturaproveedorservicioReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaproveedorservicioLogic.setFacturaProveedorServicios(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicios());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.facturaproveedorservicioReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaproveedorservicioLogic.setFacturaProveedorServicio(this.facturaproveedorservicioReturnGeneral.getFacturaProveedorServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingFacturaProveedorServicio(false);
		}
	}
	
	public void actualizarParametrosGeneralFacturaProveedorServicio() throws Exception {
		
		
	}
	
	public ArrayList<FacturaProveedorServicio> getFacturaProveedorServiciosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioFacturaProveedorServicio) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorservicioLogic.getFacturaProveedorServicios()) {
					if(facturaproveedorservicioAux.getIsSelected()) {
						facturaproveedorserviciosSeleccionados.add(facturaproveedorservicioAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedorServicio facturaproveedorservicioAux:this.facturaproveedorservicios) {
					if(facturaproveedorservicioAux.getIsSelected()) {
						facturaproveedorserviciosSeleccionados.add(facturaproveedorservicioAux);				
					}
				}
			}
			
			if(facturaproveedorserviciosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						facturaproveedorserviciosSeleccionados.addAll(this.facturaproveedorservicioLogic.getFacturaProveedorServicios());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						facturaproveedorserviciosSeleccionados.addAll(this.facturaproveedorservicios);				
					}
				}
			}
		} else {
			facturaproveedorserviciosSeleccionados.add(this.facturaproveedorservicio);
		}
		
		return facturaproveedorserviciosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteFacturaProveedorServiciosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalFacturaProveedorServiciosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoFacturaProveedorServiciosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaProveedorServiciosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaProveedorServiciosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados);
		
	}	
	
	public void generarReporteNormalFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionFacturaProveedorServiciosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		
		this.abrirInicializarFrameReporteDinamicoFacturaProveedorServicio();
		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoFacturaProveedorServicio();
		
		
		//this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados ,facturaproveedorservicioImplementable,facturaproveedorservicioImplementableHome);
	}
	
	public void mostrarImportacionFacturaProveedorServicios() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionFacturaProveedorServicio();
		
		this.abrirFrameImportacionFacturaProveedorServicio();		
		
			
		//this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados ,facturaproveedorservicioImplementable,facturaproveedorservicioImplementableHome);
	}
	
	public void importarFacturaProveedorServicios() throws Exception {		
	
	}
	
	public void exportarFacturaProveedorServiciosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelFacturaProveedorServiciosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoFacturaProveedorServiciosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlFacturaProveedorServiciosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarFacturaProveedorServicio(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarFacturaProveedorServicio(facturaproveedorservicioAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//facturaproveedorservicioAux.setsDetalleGeneralEntityReporte(facturaproveedorservicioAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarFacturaProveedorServicio(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=facturaproveedorservicio.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getnumero_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettipodocumento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getplazo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getcon_rise().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getfecha_vence().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getempleadosolicita_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getdetalle();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getnumero_retencion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getnumero_autorizacion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getnumero_serie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettipotributario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getfecha_validez().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanexo_factura_inicio();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanexo_factura_fin();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getvalor_servicios0().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getiva_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getnumero_mayor();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getcodigo_asiento();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettiporetencionfuente1_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettiporetencioniva1_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanexo_numero_autorizacion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanexo_numeso_serie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getanexo_fecha_validez().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettipomovimiento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettipomovimientomodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedorservicio.gettipotransaccionmodulo_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("FacturaProveedorServicios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelFacturaProveedorServicio(row);				
				iRow++;
			}				
			
			for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelFacturaProveedorServicio(facturaproveedorservicioAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlFacturaProveedorServiciosSeleccionados() throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();		
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedorservicio.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("facturaproveedorservicios");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("facturaproveedorservicio");
			//elementRoot.appendChild(element);
		
			for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
				element = document.createElement("facturaproveedorservicio");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlFacturaProveedorServicio(facturaproveedorservicioAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelFacturaProveedorServicio(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_VALORSERVICIOS0);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IVAPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getnumero_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettipodocumento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getplazo());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getcon_rise());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getfecha_vence());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getempleadosolicita_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getdetalle());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getnumero_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getnumero_autorizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getnumero_serie());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettipotributario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getfecha_validez());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanexo_factura_inicio());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanexo_factura_fin());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getvalor_servicios0());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getiva_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getnumero_mayor());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getcodigo_asiento());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettiporetencionfuente1_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettiporetencioniva1_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanexo_numero_autorizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanexo_numeso_serie());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getanexo_fecha_validez());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettipomovimiento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettipomovimientomodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedorservicio.gettipotransaccionmodulo_descripcion());				
	}
	
	public void setFilaDatosExportarXmlFacturaProveedorServicio(FacturaProveedorServicio facturaproveedorservicio,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(FacturaProveedorServicioConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(facturaproveedorservicio.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(FacturaProveedorServicioConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(facturaproveedorservicio.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementmodulo_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementtransaccion_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementfactura_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementnumero_factura = document.createElement(FacturaProveedorServicioConstantesFunciones.NUMEROFACTURA);
		elementnumero_factura.appendChild(document.createTextNode(facturaproveedorservicio.getnumero_factura().trim()));
		element.appendChild(elementnumero_factura);

		Element elementcliente_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementruc = document.createElement(FacturaProveedorServicioConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(facturaproveedorservicio.getruc().trim()));
		element.appendChild(elementruc);

		Element elementtipodocumento_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPODOCUMENTO);
		elementtipodocumento_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettipodocumento_descripcion()));
		element.appendChild(elementtipodocumento_descripcion);

		Element elementplazo = document.createElement(FacturaProveedorServicioConstantesFunciones.PLAZO);
		elementplazo.appendChild(document.createTextNode(facturaproveedorservicio.getplazo().toString().trim()));
		element.appendChild(elementplazo);

		Element elementcon_rise = document.createElement(FacturaProveedorServicioConstantesFunciones.CONRISE);
		elementcon_rise.appendChild(document.createTextNode(facturaproveedorservicio.getcon_rise().toString().trim()));
		element.appendChild(elementcon_rise);

		Element elementfecha_emision = document.createElement(FacturaProveedorServicioConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(facturaproveedorservicio.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_vence = document.createElement(FacturaProveedorServicioConstantesFunciones.FECHAVENCE);
		elementfecha_vence.appendChild(document.createTextNode(facturaproveedorservicio.getfecha_vence().toString().trim()));
		element.appendChild(elementfecha_vence);

		Element elementempleadosolicita_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDEMPLEADOSOLICITA);
		elementempleadosolicita_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getempleadosolicita_descripcion()));
		element.appendChild(elementempleadosolicita_descripcion);

		Element elementempleado_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementdetalle = document.createElement(FacturaProveedorServicioConstantesFunciones.DETALLE);
		elementdetalle.appendChild(document.createTextNode(facturaproveedorservicio.getdetalle().trim()));
		element.appendChild(elementdetalle);

		Element elementnumero_retencion = document.createElement(FacturaProveedorServicioConstantesFunciones.NUMERORETENCION);
		elementnumero_retencion.appendChild(document.createTextNode(facturaproveedorservicio.getnumero_retencion().trim()));
		element.appendChild(elementnumero_retencion);

		Element elementnumero_autorizacion = document.createElement(FacturaProveedorServicioConstantesFunciones.NUMEROAUTORIZACION);
		elementnumero_autorizacion.appendChild(document.createTextNode(facturaproveedorservicio.getnumero_autorizacion().trim()));
		element.appendChild(elementnumero_autorizacion);

		Element elementnumero_serie = document.createElement(FacturaProveedorServicioConstantesFunciones.NUMEROSERIE);
		elementnumero_serie.appendChild(document.createTextNode(facturaproveedorservicio.getnumero_serie().trim()));
		element.appendChild(elementnumero_serie);

		Element elementtipotributario_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPOTRIBUTARIO);
		elementtipotributario_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettipotributario_descripcion()));
		element.appendChild(elementtipotributario_descripcion);

		Element elementfecha_validez = document.createElement(FacturaProveedorServicioConstantesFunciones.FECHAVALIDEZ);
		elementfecha_validez.appendChild(document.createTextNode(facturaproveedorservicio.getfecha_validez().toString().trim()));
		element.appendChild(elementfecha_validez);

		Element elementanexo_factura_inicio = document.createElement(FacturaProveedorServicioConstantesFunciones.ANEXOFACTURAINICIO);
		elementanexo_factura_inicio.appendChild(document.createTextNode(facturaproveedorservicio.getanexo_factura_inicio().trim()));
		element.appendChild(elementanexo_factura_inicio);

		Element elementanexo_factura_fin = document.createElement(FacturaProveedorServicioConstantesFunciones.ANEXOFACTURAFIN);
		elementanexo_factura_fin.appendChild(document.createTextNode(facturaproveedorservicio.getanexo_factura_fin().trim()));
		element.appendChild(elementanexo_factura_fin);

		Element elementmoneda_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementvalor_servicios0 = document.createElement(FacturaProveedorServicioConstantesFunciones.VALORSERVICIOS0);
		elementvalor_servicios0.appendChild(document.createTextNode(facturaproveedorservicio.getvalor_servicios0().toString().trim()));
		element.appendChild(elementvalor_servicios0);

		Element elementtotal_iva = document.createElement(FacturaProveedorServicioConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(facturaproveedorservicio.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementiva_porcentaje = document.createElement(FacturaProveedorServicioConstantesFunciones.IVAPORCENTAJE);
		elementiva_porcentaje.appendChild(document.createTextNode(facturaproveedorservicio.getiva_porcentaje().toString().trim()));
		element.appendChild(elementiva_porcentaje);

		Element elementtotal = document.createElement(FacturaProveedorServicioConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(facturaproveedorservicio.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementnumero_mayor = document.createElement(FacturaProveedorServicioConstantesFunciones.NUMEROMAYOR);
		elementnumero_mayor.appendChild(document.createTextNode(facturaproveedorservicio.getnumero_mayor().trim()));
		element.appendChild(elementnumero_mayor);

		Element elementcodigo_asiento = document.createElement(FacturaProveedorServicioConstantesFunciones.CODIGOASIENTO);
		elementcodigo_asiento.appendChild(document.createTextNode(facturaproveedorservicio.getcodigo_asiento().trim()));
		element.appendChild(elementcodigo_asiento);

		Element elementtiporetencionfuente1_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPORETENCIONFUENTE1);
		elementtiporetencionfuente1_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettiporetencionfuente1_descripcion()));
		element.appendChild(elementtiporetencionfuente1_descripcion);

		Element elementtiporetencioniva1_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPORETENCIONIVA1);
		elementtiporetencioniva1_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettiporetencioniva1_descripcion()));
		element.appendChild(elementtiporetencioniva1_descripcion);

		Element elementanexo_numero_autorizacion = document.createElement(FacturaProveedorServicioConstantesFunciones.ANEXONUMEROAUTORIZACION);
		elementanexo_numero_autorizacion.appendChild(document.createTextNode(facturaproveedorservicio.getanexo_numero_autorizacion().trim()));
		element.appendChild(elementanexo_numero_autorizacion);

		Element elementanexo_numeso_serie = document.createElement(FacturaProveedorServicioConstantesFunciones.ANEXONUMESOSERIE);
		elementanexo_numeso_serie.appendChild(document.createTextNode(facturaproveedorservicio.getanexo_numeso_serie().trim()));
		element.appendChild(elementanexo_numeso_serie);

		Element elementanexo_fecha_validez = document.createElement(FacturaProveedorServicioConstantesFunciones.ANEXOFECHAVALIDEZ);
		elementanexo_fecha_validez.appendChild(document.createTextNode(facturaproveedorservicio.getanexo_fecha_validez().toString().trim()));
		element.appendChild(elementanexo_fecha_validez);

		Element elementcuentacontablecreditofiscalservicios_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDCUENTACONTABLECREDITOFISCALSERVICIOS);
		elementcuentacontablecreditofiscalservicios_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.getcuentacontablecreditofiscalservicios_descripcion()));
		element.appendChild(elementcuentacontablecreditofiscalservicios_descripcion);

		Element elementdescripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(facturaproveedorservicio.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementtipomovimiento_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPOMOVIMIENTO);
		elementtipomovimiento_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettipomovimiento_descripcion()));
		element.appendChild(elementtipomovimiento_descripcion);

		Element elementtipomovimientomodulo_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPOMOVIMIENTOMODULO);
		elementtipomovimientomodulo_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettipomovimientomodulo_descripcion()));
		element.appendChild(elementtipomovimientomodulo_descripcion);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(FacturaProveedorServicioConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(facturaproveedorservicio.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);
	}
	
	public void generarReporteGroupGenericoFacturaProveedorServiciosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados=new ArrayList<FacturaProveedorServicio>();
		
		facturaproveedorserviciosSeleccionados=this.getFacturaProveedorServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoFacturaProveedorServicio(facturaproveedorserviciosSeleccionados);
		
		this.generarReporteFacturaProveedorServicios("Todos",facturaproveedorserviciosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoFacturaProveedorServicio(ArrayList<FacturaProveedorServicio> facturaproveedorserviciosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(FacturaProveedorServicio facturaproveedorservicioAux:facturaproveedorserviciosSeleccionados) {
				facturaproveedorservicioAux.setsDetalleGeneralEntityReporte(facturaproveedorservicioAux.toString());
			
				if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROFACTURA)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getnumero_factura());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_RUC)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPODOCUMENTO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettipodocumento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_PLAZO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getplazo().toString());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CONRISE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaproveedorservicioAux.getcon_rise()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorservicioAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVENCE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorservicioAux.getfecha_vence()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADOSOLICITA)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getempleadosolicita_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DETALLE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getdetalle());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMERORETENCION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getnumero_retencion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getnumero_autorizacion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROSERIE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getnumero_serie());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRIBUTARIO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettipotributario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_FECHAVALIDEZ)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorservicioAux.getfecha_validez()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getanexo_factura_inicio());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getanexo_factura_fin());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_NUMEROMAYOR)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getnumero_mayor());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_CODIGOASIENTO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getcodigo_asiento());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettiporetencionfuente1_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPORETENCIONIVA1)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettiporetencioniva1_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getanexo_numero_autorizacion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getanexo_numeso_serie());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorservicioAux.getanexo_fecha_validez()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getcuentacontablecreditofiscalservicios_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettipomovimiento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettipomovimientomodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorServicioConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					facturaproveedorservicioAux.setsDescripcionGeneralEntityReporte1(facturaproveedorservicioAux.gettipotransaccionmodulo_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesFacturaProveedorServicio(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoFacturaProveedorServicio=true;
				this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=true;
				this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=true;
			}
			
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=true;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
			this.isVisibilidadCeldaModificarFacturaProveedorServicio=true;
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaCancelarFacturaProveedorServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedorServicio=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(FacturaProveedorServicioJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=true;
		} else {
			this.actualizarEstadoPanelsFacturaProveedorServicio(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarFacturaProveedorServicio=false;
			//this.isVisibilidadCeldaVerFormFacturaProveedorServicio=false;
			this.isVisibilidadCeldaDuplicarFacturaProveedorServicio=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
		} else {
			this.isVisibilidadCeldaNuevoFacturaProveedorServicio=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedorServicio=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			if(!facturaproveedorservicioSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;												
			}
			
			this.jButtonCerrarFacturaProveedorServicio.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedorServicio=false;
		}
		
		if(!this.permiteMantenimiento(this.facturaproveedorservicio)) {
			this.isVisibilidadCeldaActualizarFacturaProveedorServicio=false;
			this.isVisibilidadCeldaEliminarFacturaProveedorServicio=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaProveedorServicio() {
	}
	
	public void actualizarEstadoPanelsFacturaProveedorServicio(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedorServicio.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedorServicio!=null) {
				this.jScrollPanelDatosFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedorServicio!=null) {
				this.jPanelPaginacionFacturaProveedorServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
					this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.facturaproveedorservicioSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedorServicio!=null) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesFacturaProveedorServicio!=null) {
				this.jPanelParametrosReportesFacturaProveedorServicio.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDocumento(Boolean isParaTipoDocumento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDocumentoNegation=!isParaTipoDocumento;

			this.isVisibilidadFK_IdCliente=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDocumento;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleadoSolicita(Boolean isParaEmpleadoSolicita){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoSolicitaNegation=!isParaEmpleadoSolicita;

			this.isVisibilidadFK_IdCliente=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTributario(Boolean isParaTipoTributario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTributarioNegation=!isParaTipoTributario;

			this.isVisibilidadFK_IdCliente=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTributario;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionFuente1(Boolean isParaTipoRetencionFuente1){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionFuente1Negation=!isParaTipoRetencionFuente1;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionFuente1;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIva1(Boolean isParaTipoRetencionIva1){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIva1Negation=!isParaTipoRetencionIva1;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionIva1;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoFiscalServicios(Boolean isParaCuentaContableCreditoFiscalServicios){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoFiscalServiciosNegation=!isParaCuentaContableCreditoFiscalServicios;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoFiscalServicios;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimiento(Boolean isParaTipoMovimiento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoNegation=!isParaTipoMovimiento;

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimientoModulo(Boolean isParaTipoMovimientoModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoModuloNegation=!isParaTipoMovimientoModulo;

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoModulo;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdCliente=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdClienteFacturaProveedorServicio);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdEmpleadoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoDocumentoFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTipoTributarioFacturaProveedorServicio);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(jPanelFK_IdTransaccionFacturaProveedorServicio);}
		}
		
	}
	
	
	
	

	public String registrarSesionFacturaProveedorServicioParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(facturaproveedorservicioSessionBean==null) {
				facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(facturaproveedorservicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorservicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedorServicio(true);
			//facturaSessionBean.setlidFacturaProveedorServicioActual(this.idFacturaProveedorServicioActual);

			facturaproveedorservicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedorServicio(true);
			facturaproveedorservicioSessionBean.setlIdFacturaProveedorServicioActualForeignKey(this.idFacturaProveedorServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorServicioParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(facturaproveedorservicioSessionBean==null) {
				facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(facturaproveedorservicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorservicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedorServicio(true);
			//clienteSessionBean.setlidFacturaProveedorServicioActual(this.idFacturaProveedorServicioActual);

			facturaproveedorservicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedorServicio(true);
			facturaproveedorservicioSessionBean.setlIdFacturaProveedorServicioActualForeignKey(this.idFacturaProveedorServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorServicioParaBusquedaEmpleadoSolicitas() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(facturaproveedorservicioSessionBean==null) {
				facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(empleadosolicitaSessionBean==null) {
				empleadosolicitaSessionBean=new EmpleadoSessionBean();
			}

			empleadosolicitaSessionBean.setsPathNavegacionActual(facturaproveedorservicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadosolicitaSessionBean.setisPermiteRecargarInformacion(false);
			empleadosolicitaSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadosolicitaSessionBean.getisPaginaPopup();
			empleadosolicitaSessionBean.setisPaginaPopup(false);
			empleadosolicitaSessionBean.setEstaModoBusqueda(true);
			empleadosolicitaSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorservicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado_solicita(TO_REPLACE);");
			empleadosolicitaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadosolicitaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedorServicio(true);
			//empleadoSessionBean.setlidFacturaProveedorServicioActual(this.idFacturaProveedorServicioActual);

			facturaproveedorservicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedorServicio(true);
			facturaproveedorservicioSessionBean.setlIdFacturaProveedorServicioActualForeignKey(this.idFacturaProveedorServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorServicioParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(facturaproveedorservicioSessionBean==null) {
				facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(facturaproveedorservicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorservicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(FacturaProveedorServicioConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedorServicio(true);
			//empleadoSessionBean.setlidFacturaProveedorServicioActual(this.idFacturaProveedorServicioActual);

			facturaproveedorservicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedorServicio(true);
			facturaproveedorservicioSessionBean.setlIdFacturaProveedorServicioActualForeignKey(this.idFacturaProveedorServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//FacturaProveedorServicioSessionBean facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
		
		if(this.facturaproveedorservicioSessionBean==null) {
			this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
		}
		
		this.facturaproveedorservicioSessionBean.setsUltimaBusquedaFacturaProveedorServicio(this.getsAccionBusqueda());
		this.facturaproveedorservicioSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.facturaproveedorservicioSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			facturaproveedorservicioSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalServicios")) {
			facturaproveedorservicioSessionBean.setid_cuenta_contable_credito_fiscal_servicios(this.getid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			facturaproveedorservicioSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			facturaproveedorservicioSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			facturaproveedorservicioSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			facturaproveedorservicioSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			facturaproveedorservicioSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			facturaproveedorservicioSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
			facturaproveedorservicioSessionBean.setid_tipo_documento(this.getid_tipo_documentoFK_IdTipoDocumento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
			facturaproveedorservicioSessionBean.setid_tipo_movimiento_modulo(this.getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuente1")) {
			facturaproveedorservicioSessionBean.setid_tipo_retencion_fuente1(this.getid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva1")) {
			facturaproveedorservicioSessionBean.setid_tipo_retencion_iva1(this.getid_tipo_retencion_iva1FK_IdTipoRetencionIva1());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			facturaproveedorservicioSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
			facturaproveedorservicioSessionBean.setid_tipo_tributario(this.getid_tipo_tributarioFK_IdTipoTributario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			facturaproveedorservicioSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//FacturaProveedorServicioSessionBean facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
		
		if(this.facturaproveedorservicioSessionBean==null) {
			this.facturaproveedorservicioSessionBean=new FacturaProveedorServicioSessionBean();
		}
		
		if(this.facturaproveedorservicioSessionBean.getsUltimaBusquedaFacturaProveedorServicio()!=null&&!this.facturaproveedorservicioSessionBean.getsUltimaBusquedaFacturaProveedorServicio().equals("")) {
			this.setsAccionBusqueda(facturaproveedorservicioSessionBean.getsUltimaBusquedaFacturaProveedorServicio());
			this.setiNumeroPaginacion(facturaproveedorservicioSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(facturaproveedorservicioSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(facturaproveedorservicioSessionBean.getid_cliente());
				facturaproveedorservicioSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalServicios")) {
				this.setid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios(facturaproveedorservicioSessionBean.getid_cuenta_contable_credito_fiscal_servicios());
				facturaproveedorservicioSessionBean.setid_cuenta_contable_credito_fiscal_servicios(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(facturaproveedorservicioSessionBean.getid_ejercicio());
				facturaproveedorservicioSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(facturaproveedorservicioSessionBean.getid_empleado());
				facturaproveedorservicioSessionBean.setid_empleado(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(facturaproveedorservicioSessionBean.getid_empresa());
				facturaproveedorservicioSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(facturaproveedorservicioSessionBean.getid_modulo());
				facturaproveedorservicioSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(facturaproveedorservicioSessionBean.getid_periodo());
				facturaproveedorservicioSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(facturaproveedorservicioSessionBean.getid_sucursal());
				facturaproveedorservicioSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
				this.setid_tipo_documentoFK_IdTipoDocumento(facturaproveedorservicioSessionBean.getid_tipo_documento());
				facturaproveedorservicioSessionBean.setid_tipo_documento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
				this.setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(facturaproveedorservicioSessionBean.getid_tipo_movimiento_modulo());
				facturaproveedorservicioSessionBean.setid_tipo_movimiento_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuente1")) {
				this.setid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1(facturaproveedorservicioSessionBean.getid_tipo_retencion_fuente1());
				facturaproveedorservicioSessionBean.setid_tipo_retencion_fuente1(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva1")) {
				this.setid_tipo_retencion_iva1FK_IdTipoRetencionIva1(facturaproveedorservicioSessionBean.getid_tipo_retencion_iva1());
				facturaproveedorservicioSessionBean.setid_tipo_retencion_iva1(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(facturaproveedorservicioSessionBean.getid_tipo_transaccion_modulo());
				facturaproveedorservicioSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
				this.setid_tipo_tributarioFK_IdTipoTributario(facturaproveedorservicioSessionBean.getid_tipo_tributario());
				facturaproveedorservicioSessionBean.setid_tipo_tributario(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(facturaproveedorservicioSessionBean.getid_transaccion());
				facturaproveedorservicioSessionBean.setid_transaccion(-1L);
			}
		}
		
		this.facturaproveedorservicioSessionBean.setsUltimaBusquedaFacturaProveedorServicio("");
		this.facturaproveedorservicioSessionBean.setiNumeroPaginacion(FacturaProveedorServicioConstantesFunciones.INUMEROPAGINACION);
		this.facturaproveedorservicioSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaFacturaProveedorServicio(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioFacturaProveedorServicio() {
		this.updateBorderResaltarBusquedasFormularioFacturaProveedorServicio();
		this.updateVisibilidadBusquedasFormularioFacturaProveedorServicio();
		this.updateHabilitarBusquedasFormularioFacturaProveedorServicio();
	}
	
	public void updateBorderResaltarBusquedasFormularioFacturaProveedorServicio() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponents().length>0) {
	

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdClienteFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdClienteFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedorServicio);
			}
		}

		if(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedorServicio!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedorServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedorServicio);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioFacturaProveedorServicio() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdClienteFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdClienteFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdEmpleadoFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdEmpleadoFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoDocumentoFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoDocumentoFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoMovimientoModuloFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoRetencionFuente1FacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoRetencionIva1FacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoRetencionIva1FacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoTransaccionModuloFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoTributarioFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTipoTributarioFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedorServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTransaccionFacturaProveedorServicio);
			if(!this.facturaproveedorservicioConstantesFunciones.mostrarFK_IdTransaccionFacturaProveedorServicio && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedorServicio.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioFacturaProveedorServicio() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdClienteFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdClienteFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdEmpleadoFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdEmpleadoFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoDocumentoFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoDocumentoFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoMovimientoModuloFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoRetencionFuente1FacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoRetencionIva1FacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoRetencionIva1FacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoTransaccionModuloFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoTributarioFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTipoTributarioFacturaProveedorServicio);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedorServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarFK_IdTransaccionFacturaProveedorServicio);
				this.jTabbedPaneBusquedasFacturaProveedorServicio.setEnabledAt(index,this.facturaproveedorservicioConstantesFunciones.activarFK_IdTransaccionFacturaProveedorServicio);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaFacturaProveedorServicio(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdClienteFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdClienteFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdEmpleadoFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDocumento")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoDocumentoFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoMovimientoModulo")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoMovimientoModuloFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionFuente1")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoRetencionFuente1FacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionIva1")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoRetencionIva1FacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTributario")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTipoTributarioFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedorServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasFacturaProveedorServicio.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedorServicio);

			this.jTabbedPaneBusquedasFacturaProveedorServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedorServicio.getComponent(index);

			this.facturaproveedorservicioConstantesFunciones.setResaltarFK_IdTransaccionFacturaProveedorServicio(resaltar);

			jPanel.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedorServicio);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarFacturaProveedorServicio.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioFacturaProveedorServicio() throws Exception {

		if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioFacturaProveedorServicio();
		this.updateVisibilidadResaltarControlesFormularioFacturaProveedorServicio();
		this.updateHabilitarResaltarControlesFormularioFacturaProveedorServicio();
		
	}
	
	public void updateBorderResaltarControlesFormularioFacturaProveedorServicio() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.facturaproveedorservicioConstantesFunciones.resaltaridFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaridFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_empresaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_empresaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_sucursalFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_sucursalFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_ejercicioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_ejercicioFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_periodoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_periodoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_anioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_anioFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_mesFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_mesFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_moduloFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_transaccionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_transaccionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_facturaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_facturaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_facturaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_facturaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_clienteFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_clienteFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarrucFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarrucFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_documentoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_documentoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarplazoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarplazoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarcon_riseFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setBorderPainted(true);this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarcon_riseFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_emisionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_emisionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_venceFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_venceFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_empleadoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_empleadoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltardetalleFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltardetalleFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_retencionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_retencionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_autorizacionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_autorizacionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_serieFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_serieFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_validezFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarfecha_validezFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_finFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_factura_finFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_monedaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_monedaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarvalor_servicios0FacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldvalor_servicios0FacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarvalor_servicios0FacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltartotal_ivaFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotal_ivaFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltartotal_ivaFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltariva_porcentajeFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldiva_porcentajeFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltariva_porcentajeFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltartotalFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotalFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltartotalFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_mayorFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_mayorFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarnumero_mayorFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarcodigo_asientoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldcodigo_asientoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarcodigo_asientoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numero_autorizacionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numeso_serieFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooseranexo_fecha_validezFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltardescripcionFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadescripcionFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltardescripcionFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimiento_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_movimiento_moduloFacturaProveedorServicio);}
		if(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_transaccion_moduloFacturaProveedorServicio!=null && this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setBorder(this.facturaproveedorservicioConstantesFunciones.resaltarid_tipo_transaccion_moduloFacturaProveedorServicio);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioFacturaProveedorServicio() throws Exception {		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
	
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraridFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelidFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraridFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empresaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_empresaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empresaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_sucursalFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_sucursalFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_sucursalFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_ejercicioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_ejercicioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_ejercicioFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_periodoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_periodoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_periodoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_anioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_anioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_anioFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_mesFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_mesFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_mesFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_moduloFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_transaccionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_transaccionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_transaccionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_facturaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_facturaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_facturaFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_facturaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_facturaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelnumero_facturaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_facturaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_clienteFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_clienteFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_clienteFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_clienteFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarrucFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelrucFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarrucFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_documentoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_documentoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_documentoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarplazoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelplazoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarplazoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarcon_riseFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelcon_riseFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarcon_riseFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_emisionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelfecha_emisionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_emisionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_venceFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelfecha_venceFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_venceFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_empleado_solicitaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleadoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_empleadoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleadoFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_empleadoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrardetalleFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPaneldetalleFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrardetalleFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_retencionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelnumero_retencionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_retencionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_autorizacionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelnumero_autorizacionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_autorizacionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_serieFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelnumero_serieFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_serieFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_tributarioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_validezFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelfecha_validezFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarfecha_validezFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_inicioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelanexo_factura_inicioFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_inicioFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_finFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelanexo_factura_finFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_factura_finFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_monedaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_monedaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_monedaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldvalor_servicios0FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarvalor_servicios0FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelvalor_servicios0FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarvalor_servicios0FacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotal_ivaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrartotal_ivaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPaneltotal_ivaFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrartotal_ivaFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldiva_porcentajeFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrariva_porcentajeFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPaneliva_porcentajeFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrariva_porcentajeFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotalFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrartotalFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPaneltotalFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrartotalFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_mayorFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_mayorFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelnumero_mayorFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarnumero_mayorFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldcodigo_asientoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarcodigo_asientoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelcodigo_asientoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarcodigo_asientoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_retencion_fuente1FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_retencion_fuente1FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_retencion_fuente1FacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_retencion_iva1FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_retencion_iva1FacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_retencion_iva1FacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numero_autorizacionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_numero_autorizacionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelanexo_numero_autorizacionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_numero_autorizacionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numeso_serieFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_numeso_serieFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelanexo_numeso_serieFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_numeso_serieFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooseranexo_fecha_validezFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_fecha_validezFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelanexo_fecha_validezFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostraranexo_fecha_validezFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadescripcionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrardescripcionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPaneldescripcionFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrardescripcionFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_movimientoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_movimientoFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_movimientoFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_movimiento_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_movimiento_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_movimiento_moduloFacturaProveedorServicio);
		//this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_transaccion_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jPanelid_tipo_transaccion_moduloFacturaProveedorServicio.setVisible(this.facturaproveedorservicioConstantesFunciones.mostrarid_tipo_transaccion_moduloFacturaProveedorServicio);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioFacturaProveedorServicio() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedorServicio!=null) {
	
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jLabelidFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaridFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empresaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_empresaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_sucursalFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_sucursalFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_ejercicioFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_ejercicioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_periodoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_periodoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_anioFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_anioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_mesFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_mesFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_moduloFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_transaccionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_transaccionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_facturaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_facturaFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_facturaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_facturaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_facturaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarnumero_facturaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_clienteFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_clienteFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_clienteFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_clienteFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldrucFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarrucFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_documentoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_documentoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldplazoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarplazoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jCheckBoxcon_riseFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarcon_riseFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_emisionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarfecha_emisionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_venceFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarfecha_venceFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleado_solicitaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_empleado_solicitaFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleado_solicitaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_empleado_solicitaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_empleadoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_empleadoFacturaProveedorServicio);
			this.jInternalFrameDetalleFormFacturaProveedorServicio.jButtonid_empleadoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_empleadoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadetalleFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activardetalleFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_retencionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarnumero_retencionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_autorizacionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarnumero_autorizacionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_serieFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarnumero_serieFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_tributarioFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_tributarioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooserfecha_validezFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarfecha_validezFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_inicioFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_inicioFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_factura_finFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaranexo_factura_finFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_monedaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_monedaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldvalor_servicios0FacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarvalor_servicios0FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotal_ivaFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activartotal_ivaFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldiva_porcentajeFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activariva_porcentajeFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldtotalFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activartotalFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldnumero_mayorFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarnumero_mayorFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldcodigo_asientoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarcodigo_asientoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_fuente1FacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_retencion_iva1FacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numero_autorizacionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextFieldanexo_numeso_serieFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaranexo_numeso_serieFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jDateChooseranexo_fecha_validezFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activaranexo_fecha_validezFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jTextAreadescripcionFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activardescripcionFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimientoFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimientoFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_movimiento_moduloFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_movimiento_moduloFacturaProveedorServicio);
		this.jInternalFrameDetalleFormFacturaProveedorServicio.jComboBoxid_tipo_transaccion_moduloFacturaProveedorServicio.setEnabled(this.facturaproveedorservicioConstantesFunciones.activarid_tipo_transaccion_moduloFacturaProveedorServicio);
		}
	}
	
		
}