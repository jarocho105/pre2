/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.CuentaContableConstantesFunciones;
import com.bydan.erp.contabilidad.util.CuentaContableParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.CuentaContableParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.CuentaContableBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class CuentaContableBeanSwingJInternalFrame extends CuentaContableJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(CuentaContableBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<CuentaContable> cuentacontableValidator = new ClassValidator<CuentaContable>(CuentaContable.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public CuentaContable cuentacontable;	
	public CuentaContable cuentacontableAux;
	public CuentaContable cuentacontableAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public CuentaContable cuentacontableTotales;
	public Long idCuentaContableActual;
	public Long iIdNuevoCuentaContable=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboNivelCuenta="";

	public List<NivelCuenta> nivelcuentasForeignKey;

	public List<NivelCuenta> getnivelcuentasForeignKey() {
		return nivelcuentasForeignKey;
	}

	public void setnivelcuentasForeignKey(List<NivelCuenta> nivelcuentasForeignKey) {
		this.nivelcuentasForeignKey = nivelcuentasForeignKey;
	}

	//OBJETO FK ACTUAL
	public NivelCuenta nivelcuentaForeignKey;

	public NivelCuenta getnivelcuentaForeignKey() {
		return nivelcuentaForeignKey;
	}

	public void setnivelcuentaForeignKey(NivelCuenta nivelcuentaForeignKey) {
		this.nivelcuentaForeignKey = nivelcuentaForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboTipoIntervalo="";

	public List<TipoIntervalo> tipointervalosForeignKey;

	public List<TipoIntervalo> gettipointervalosForeignKey() {
		return tipointervalosForeignKey;
	}

	public void settipointervalosForeignKey(List<TipoIntervalo> tipointervalosForeignKey) {
		this.tipointervalosForeignKey = tipointervalosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoIntervalo tipointervaloForeignKey;

	public TipoIntervalo gettipointervaloForeignKey() {
		return tipointervaloForeignKey;
	}

	public void settipointervaloForeignKey(TipoIntervalo tipointervaloForeignKey) {
		this.tipointervaloForeignKey = tipointervaloForeignKey;
	}

	public String sFinalQueryComboTipoFlujoEfectivo="";

	public List<TipoFlujoEfectivo> tipoflujoefectivosForeignKey;

	public List<TipoFlujoEfectivo> gettipoflujoefectivosForeignKey() {
		return tipoflujoefectivosForeignKey;
	}

	public void settipoflujoefectivosForeignKey(List<TipoFlujoEfectivo> tipoflujoefectivosForeignKey) {
		this.tipoflujoefectivosForeignKey = tipoflujoefectivosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoFlujoEfectivo tipoflujoefectivoForeignKey;

	public TipoFlujoEfectivo gettipoflujoefectivoForeignKey() {
		return tipoflujoefectivoForeignKey;
	}

	public void settipoflujoefectivoForeignKey(TipoFlujoEfectivo tipoflujoefectivoForeignKey) {
		this.tipoflujoefectivoForeignKey = tipoflujoefectivoForeignKey;
	}

	public String sFinalQueryComboCuentaContableDebito="";

	public List<CuentaContable> cuentacontabledebitosForeignKey;

	public List<CuentaContable> getcuentacontabledebitosForeignKey() {
		return cuentacontabledebitosForeignKey;
	}

	public void setcuentacontabledebitosForeignKey(List<CuentaContable> cuentacontabledebitosForeignKey) {
		this.cuentacontabledebitosForeignKey = cuentacontabledebitosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledebitoForeignKey;

	public CuentaContable getcuentacontabledebitoForeignKey() {
		return cuentacontabledebitoForeignKey;
	}

	public void setcuentacontabledebitoForeignKey(CuentaContable cuentacontabledebitoForeignKey) {
		this.cuentacontabledebitoForeignKey = cuentacontabledebitoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCredito="";

	public List<CuentaContable> cuentacontablecreditosForeignKey;

	public List<CuentaContable> getcuentacontablecreditosForeignKey() {
		return cuentacontablecreditosForeignKey;
	}

	public void setcuentacontablecreditosForeignKey(List<CuentaContable> cuentacontablecreditosForeignKey) {
		this.cuentacontablecreditosForeignKey = cuentacontablecreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoForeignKey;

	public CuentaContable getcuentacontablecreditoForeignKey() {
		return cuentacontablecreditoForeignKey;
	}

	public void setcuentacontablecreditoForeignKey(CuentaContable cuentacontablecreditoForeignKey) {
		this.cuentacontablecreditoForeignKey = cuentacontablecreditoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idCuentaContableDebitoActual=0L;

	public Long getidCuentaContableDebitoActual() {
		return idCuentaContableDebitoActual;
	}

	public void setidCuentaContableDebitoActual(Long idCuentaContableDebitoActual) {
		this.idCuentaContableDebitoActual= idCuentaContableDebitoActual;
	}
	public Long idCuentaContableCreditoActual=0L;

	public Long getidCuentaContableCreditoActual() {
		return idCuentaContableCreditoActual;
	}

	public void setidCuentaContableCreditoActual(Long idCuentaContableCreditoActual) {
		this.idCuentaContableCreditoActual= idCuentaContableCreditoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoCuentaContable;
	public Boolean isPermisoNuevoCuentaContable;
	public Boolean isPermisoActualizarCuentaContable;
	public Boolean isPermisoActualizarOriginalCuentaContable;
	public Boolean isPermisoEliminarCuentaContable;
	public Boolean isPermisoGuardarCambiosCuentaContable;
	public Boolean isPermisoConsultaCuentaContable;
	public Boolean isPermisoBusquedaCuentaContable;
	public Boolean isPermisoReporteCuentaContable;
	public Boolean isPermisoPaginacionMedioCuentaContable;
	public Boolean isPermisoPaginacionAltoCuentaContable;
	public Boolean isPermisoPaginacionTodoCuentaContable;
	public Boolean isPermisoCopiarCuentaContable;
	public Boolean isPermisoVerFormCuentaContable;
	public Boolean isPermisoDuplicarCuentaContable;
	public Boolean isPermisoOrdenCuentaContable;
	
	public List<CuentaContable> cuentacontablesArbol;
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public CuentaContableParameterReturnGeneral cuentacontableReturnGeneral;
	public CuentaContableParameterReturnGeneral cuentacontableParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoCuentaContable=false;
	public Boolean esParaAccionDesdeFormularioCuentaContable=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected CuentaContableSessionBeanAdditional cuentacontableSessionBeanAdditional=null;
	
	public CuentaContableSessionBeanAdditional getCuentaContableSessionBeanAdditional() {
		return this.cuentacontableSessionBeanAdditional;
	}
	
	public void setCuentaContableSessionBeanAdditional(CuentaContableSessionBeanAdditional cuentacontableSessionBeanAdditional) {
		try {
			this.cuentacontableSessionBeanAdditional=cuentacontableSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected CuentaContableBeanSwingJInternalFrameAdditional cuentacontableBeanSwingJInternalFrameAdditional=null;
	//public class CuentaContableBeanSwingJInternalFrame
	
	public CuentaContableBeanSwingJInternalFrameAdditional getCuentaContableBeanSwingJInternalFrameAdditional() {
		return this.cuentacontableBeanSwingJInternalFrameAdditional;
	}
	
	public void setCuentaContableBeanSwingJInternalFrameAdditional(CuentaContableBeanSwingJInternalFrameAdditional cuentacontableBeanSwingJInternalFrameAdditional) {
		try {
			this.cuentacontableBeanSwingJInternalFrameAdditional=cuentacontableBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public CuentaContableLogic cuentacontableLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public CuentaContable cuentacontableBean;
	public CuentaContableConstantesFunciones cuentacontableConstantesFunciones;
	//public CuentaContableParameterReturnGeneral cuentacontableReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public NivelCuentaLogic nivelcuentaLogic;
	public CentroCostoLogic centrocostoLogic;
	public ModuloLogic moduloLogic;
	public MonedaLogic monedaLogic;
	public TipoIntervaloLogic tipointervaloLogic;
	public TipoFlujoEfectivoLogic tipoflujoefectivoLogic;
	public CuentaContableLogic cuentacontabledebitoLogic;
	public CuentaContableLogic cuentacontablecreditoLogic;
	
	//PARAMETROS
	
	
	//public List<CuentaContable> cuentacontables;	
	//public List<CuentaContable> cuentacontablesEliminados;
	//public List<CuentaContable> cuentacontablesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoCuentaContable=false;
	public Boolean isVisibilidadCeldaDuplicarCuentaContable=true;
	public Boolean isVisibilidadCeldaCopiarCuentaContable=true;
	public Boolean isVisibilidadCeldaVerFormCuentaContable=true;
	public Boolean isVisibilidadCeldaOrdenCuentaContable=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
	public Boolean isVisibilidadCeldaModificarCuentaContable=false;
	public Boolean isVisibilidadCeldaActualizarCuentaContable=false;
	public Boolean isVisibilidadCeldaEliminarCuentaContable=false;
	public Boolean isVisibilidadCeldaCancelarCuentaContable=false;
	public Boolean isVisibilidadCeldaGuardarCuentaContable=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosCuentaContable=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNombre=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableDebito=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdNivelCuenta=false;
	public Boolean isVisibilidadFK_IdTipoFlujoEfectivo=false;
	public Boolean isVisibilidadFK_IdTipoIntervalo=false;
	
	public Long getiIdNuevoCuentaContable() {
		return this.iIdNuevoCuentaContable;
	}

	public void setiIdNuevoCuentaContable(Long iIdNuevoCuentaContable) {
		this.iIdNuevoCuentaContable = iIdNuevoCuentaContable;
	}
	
	public Long getidCuentaContableActual() {
		return this.idCuentaContableActual;
	}

	public void setidCuentaContableActual(Long idCuentaContableActual) {
		this.idCuentaContableActual = idCuentaContableActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public CuentaContable getcuentacontable() {
		return this.cuentacontable;
	}

	public void setcuentacontable(CuentaContable cuentacontable) {
		this.cuentacontable = cuentacontable;
	}
	
	public CuentaContable getcuentacontableAux() {
		return this.cuentacontableAux;
	}

	public void setcuentacontableAux(CuentaContable cuentacontableAux) {
		this.cuentacontableAux = cuentacontableAux;
	}				
	
	public CuentaContable getcuentacontableAnterior() {
		return this.cuentacontableAnterior;
	}

	public void setcuentacontableAnterior(CuentaContable cuentacontableAnterior) {
		this.cuentacontableAnterior = cuentacontableAnterior;
	}	
	
	public CuentaContable getcuentacontableTotales() {
		return this.cuentacontableTotales;
	}

	public void setcuentacontableTotales(CuentaContable cuentacontableTotales) {
		this.cuentacontableTotales = cuentacontableTotales;
	}	
	
	public CuentaContable getcuentacontableBean() {
		return this.cuentacontableBean;
	}

	public void setcuentacontableBean(CuentaContable cuentacontableBean) {
		this.cuentacontableBean = cuentacontableBean;
	}	
	
	public CuentaContableParameterReturnGeneral getcuentacontableReturnGeneral() {
		return this.cuentacontableReturnGeneral;
	}

	public void setcuentacontableReturnGeneral(CuentaContableParameterReturnGeneral cuentacontableReturnGeneral) {
		this.cuentacontableReturnGeneral = cuentacontableReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String nombreBusquedaPorNombre="";

	public String getnombreBusquedaPorNombre() {
		return this.nombreBusquedaPorNombre;
	}

	public void setnombreBusquedaPorNombre(String nombreBusquedaPorNombre) {
		this.nombreBusquedaPorNombre = nombreBusquedaPorNombre;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contableFK_IdCuentaContable=null;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_cuenta_contable_creditoFK_IdCuentaContableCredito=null;

	public Long getid_cuenta_contable_creditoFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_creditoFK_IdCuentaContableCredito(Long id_cuenta_contable_creditoFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_creditoFK_IdCuentaContableCredito = id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_debitoFK_IdCuentaContableDebito=null;

	public Long getid_cuenta_contable_debitoFK_IdCuentaContableDebito() {
		return this.id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public void setid_cuenta_contable_debitoFK_IdCuentaContableDebito(Long id_cuenta_contable_debitoFK_IdCuentaContableDebito) {
		this.id_cuenta_contable_debitoFK_IdCuentaContableDebito = id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_nivel_cuentaFK_IdNivelCuenta=-1L;

	public Long getid_nivel_cuentaFK_IdNivelCuenta() {
		return this.id_nivel_cuentaFK_IdNivelCuenta;
	}

	public void setid_nivel_cuentaFK_IdNivelCuenta(Long id_nivel_cuentaFK_IdNivelCuenta) {
		this.id_nivel_cuentaFK_IdNivelCuenta = id_nivel_cuentaFK_IdNivelCuenta;
	}

	public Long id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo=null;

	public Long getid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo() {
		return this.id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo;
	}

	public void setid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo(Long id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo) {
		this.id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo = id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo;
	}

	public Long id_tipo_intervaloFK_IdTipoIntervalo=-1L;

	public Long getid_tipo_intervaloFK_IdTipoIntervalo() {
		return this.id_tipo_intervaloFK_IdTipoIntervalo;
	}

	public void setid_tipo_intervaloFK_IdTipoIntervalo(Long id_tipo_intervaloFK_IdTipoIntervalo) {
		this.id_tipo_intervaloFK_IdTipoIntervalo = id_tipo_intervaloFK_IdTipoIntervalo;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public CuentaContableLogic getCuentaContableLogic()	{		
		return cuentacontableLogic;
	}

	public void setCuentaContableLogic(CuentaContableLogic cuentacontableLogic) {
		this.cuentacontableLogic = cuentacontableLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoCuentaContable() {
		return isEsNuevoCuentaContable;
	}

	public void setIsEsNuevoCuentaContable(Boolean isEsNuevoCuentaContable) {
		this.isEsNuevoCuentaContable = isEsNuevoCuentaContable;
	}

	public Boolean getEsParaAccionDesdeFormularioCuentaContable() {
		return esParaAccionDesdeFormularioCuentaContable;
	}
	
	public void setEsParaAccionDesdeFormularioCuentaContable(Boolean esParaAccionDesdeFormularioCuentaContable) {
		this.esParaAccionDesdeFormularioCuentaContable = esParaAccionDesdeFormularioCuentaContable;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(cuentacontableSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNivelCuentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.nivelcuentasForeignKey=new ArrayList<NivelCuenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NivelCuentaLogic nivelcuentaLogic=new NivelCuentaLogic();

			//nivelcuentaLogic.getNivelCuentaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionNivelCuenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//nivelcuentaLogic.getNivelCuentaDataAccess().setIsForForeingKeyData(true);

					nivelcuentaLogic.getTodosNivelCuentasWithConnection(sFinalQuery,new Pagination());

					this.nivelcuentasForeignKey=nivelcuentaLogic.getNivelCuentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNivelCuenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					nivelcuentaLogic.getEntityWithConnection(cuentacontableSessionBean.getlidNivelCuentaActual());
					this.nivelcuentasForeignKey.add(nivelcuentaLogic.getNivelCuenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontableNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablesForeignKey.add(0, cuentacontableNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentacontableSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(cuentacontableSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(cuentacontableSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(cuentacontableSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoIntervalosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipointervalosForeignKey=new ArrayList<TipoIntervalo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoIntervaloLogic tipointervaloLogic=new TipoIntervaloLogic();

			//tipointervaloLogic.getTipoIntervaloDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoIntervalo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipointervaloLogic.getTipoIntervaloDataAccess().setIsForForeingKeyData(true);

					tipointervaloLogic.getTodosTipoIntervalosWithConnection(sFinalQuery,new Pagination());

					this.tipointervalosForeignKey=tipointervaloLogic.getTipoIntervalos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoIntervalo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipointervaloLogic.getEntityWithConnection(cuentacontableSessionBean.getlidTipoIntervaloActual());
					this.tipointervalosForeignKey.add(tipointervaloLogic.getTipoIntervalo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoFlujoEfectivosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoflujoefectivosForeignKey=new ArrayList<TipoFlujoEfectivo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoFlujoEfectivoLogic tipoflujoefectivoLogic=new TipoFlujoEfectivoLogic();

			//tipoflujoefectivoLogic.getTipoFlujoEfectivoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoFlujoEfectivo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoflujoefectivoLogic.getTipoFlujoEfectivoDataAccess().setIsForForeingKeyData(true);

					tipoflujoefectivoLogic.getTodosTipoFlujoEfectivosWithConnection(sFinalQuery,new Pagination());

					this.tipoflujoefectivosForeignKey=tipoflujoefectivoLogic.getTipoFlujoEfectivos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoFlujoEfectivo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoflujoefectivoLogic.getEntityWithConnection(cuentacontableSessionBean.getlidTipoFlujoEfectivoActual());
					this.tipoflujoefectivosForeignKey.add(tipoflujoefectivoLogic.getTipoFlujoEfectivo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDebitosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledebitoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledebitosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDebito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentacontableSessionBean.getlidCuentaContableDebitoActual());
					this.cuentacontabledebitosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentacontableSessionBean.getlidCuentaContableCreditoActual());
					this.cuentacontablecreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaCuentaContable.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaCuentaContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaCuentaContableGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaCuentaContableGenerico!=null && jComboBoxid_empresaCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_empresaCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNivelCuentaForeignKey(Long idNivelCuentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NivelCuenta  nivelcuentaTemp=null;

			for(NivelCuenta nivelcuentaAux:nivelcuentasForeignKey) {
				if(nivelcuentaAux.getId()!=null && nivelcuentaAux.getId().equals(idNivelCuentaSeleccionado)) {
					nivelcuentaTemp=nivelcuentaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(nivelcuentaTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setNivelCuenta(nivelcuentaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setSelectedItem(nivelcuentaTemp);
					}
				} else {
					//jComboBoxid_nivel_cuentaCuentaContable.setSelectedItem(nivelcuentaTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdNivelCuenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(nivelcuentaTemp!=null && jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable!=null) {
						jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.setSelectedItem(nivelcuentaTemp);
					} else {
						if(jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable!=null) {
							//jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.setSelectedItem(nivelcuentaTemp);
							if(jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.getItemCount()>0) {
								jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNivelCuentaForeignKeyDescripcion(Long idNivelCuentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NivelCuenta  nivelcuentaTemp=null;

			for(NivelCuenta nivelcuentaAux:nivelcuentasForeignKey) {
				if(nivelcuentaAux.getId()!=null && nivelcuentaAux.getId().equals(idNivelCuentaSeleccionado)) {
					nivelcuentaTemp=nivelcuentaAux;
					break;
				}
			}


			sDescripcion=NivelCuentaConstantesFunciones.getNivelCuentaDescripcion(nivelcuentaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNivelCuentaForeignKeyGenerico(Long idNivelCuentaSeleccionado,JComboBox jComboBoxid_nivel_cuentaCuentaContableGenerico)throws Exception
	{
		try
		{
			NivelCuenta  nivelcuentaTemp=null;

			for(NivelCuenta nivelcuentaAux:nivelcuentasForeignKey) {
				if(nivelcuentaAux.getId()!=null && nivelcuentaAux.getId().equals(idNivelCuentaSeleccionado)) {
					nivelcuentaTemp=nivelcuentaAux;
					break;
				}
			}

			if(nivelcuentaTemp!=null) {
				jComboBoxid_nivel_cuentaCuentaContableGenerico.setSelectedItem(nivelcuentaTemp);
			} else {
				if(jComboBoxid_nivel_cuentaCuentaContableGenerico!=null && jComboBoxid_nivel_cuentaCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_nivel_cuentaCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableCuentaContable.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableTemp!=null && jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable!=null) {
						jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.setSelectedItem(cuentacontableTemp);
					} else {
						if(jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable!=null) {
							//jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.setSelectedItem(cuentacontableTemp);
							if(jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableCuentaContableGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableCuentaContableGenerico!=null && jComboBoxid_cuenta_contableCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoCuentaContable.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoCuentaContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoCuentaContableGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoCuentaContableGenerico!=null && jComboBoxid_centro_costoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloCuentaContable.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(moduloTemp!=null && jComboBoxid_moduloFK_IdModuloCuentaContable!=null) {
						jComboBoxid_moduloFK_IdModuloCuentaContable.setSelectedItem(moduloTemp);
					} else {
						if(jComboBoxid_moduloFK_IdModuloCuentaContable!=null) {
							//jComboBoxid_moduloFK_IdModuloCuentaContable.setSelectedItem(moduloTemp);
							if(jComboBoxid_moduloFK_IdModuloCuentaContable.getItemCount()>0) {
								jComboBoxid_moduloFK_IdModuloCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloCuentaContableGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloCuentaContableGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloCuentaContableGenerico!=null && jComboBoxid_moduloCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_moduloCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaCuentaContable.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaCuentaContableGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaCuentaContableGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaCuentaContableGenerico!=null && jComboBoxid_monedaCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_monedaCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoIntervaloForeignKey(Long idTipoIntervaloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoIntervalo  tipointervaloTemp=null;

			for(TipoIntervalo tipointervaloAux:tipointervalosForeignKey) {
				if(tipointervaloAux.getId()!=null && tipointervaloAux.getId().equals(idTipoIntervaloSeleccionado)) {
					tipointervaloTemp=tipointervaloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipointervaloTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setTipoIntervalo(tipointervaloTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setSelectedItem(tipointervaloTemp);
					}
				} else {
					//jComboBoxid_tipo_intervaloCuentaContable.setSelectedItem(tipointervaloTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoIntervalo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipointervaloTemp!=null && jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable!=null) {
						jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.setSelectedItem(tipointervaloTemp);
					} else {
						if(jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable!=null) {
							//jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.setSelectedItem(tipointervaloTemp);
							if(jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.getItemCount()>0) {
								jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoIntervaloForeignKeyDescripcion(Long idTipoIntervaloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoIntervalo  tipointervaloTemp=null;

			for(TipoIntervalo tipointervaloAux:tipointervalosForeignKey) {
				if(tipointervaloAux.getId()!=null && tipointervaloAux.getId().equals(idTipoIntervaloSeleccionado)) {
					tipointervaloTemp=tipointervaloAux;
					break;
				}
			}


			sDescripcion=TipoIntervaloConstantesFunciones.getTipoIntervaloDescripcion(tipointervaloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoIntervaloForeignKeyGenerico(Long idTipoIntervaloSeleccionado,JComboBox jComboBoxid_tipo_intervaloCuentaContableGenerico)throws Exception
	{
		try
		{
			TipoIntervalo  tipointervaloTemp=null;

			for(TipoIntervalo tipointervaloAux:tipointervalosForeignKey) {
				if(tipointervaloAux.getId()!=null && tipointervaloAux.getId().equals(idTipoIntervaloSeleccionado)) {
					tipointervaloTemp=tipointervaloAux;
					break;
				}
			}

			if(tipointervaloTemp!=null) {
				jComboBoxid_tipo_intervaloCuentaContableGenerico.setSelectedItem(tipointervaloTemp);
			} else {
				if(jComboBoxid_tipo_intervaloCuentaContableGenerico!=null && jComboBoxid_tipo_intervaloCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_intervaloCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoFlujoEfectivoForeignKey(Long idTipoFlujoEfectivoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoFlujoEfectivo  tipoflujoefectivoTemp=null;

			for(TipoFlujoEfectivo tipoflujoefectivoAux:tipoflujoefectivosForeignKey) {
				if(tipoflujoefectivoAux.getId()!=null && tipoflujoefectivoAux.getId().equals(idTipoFlujoEfectivoSeleccionado)) {
					tipoflujoefectivoTemp=tipoflujoefectivoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoflujoefectivoTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setTipoFlujoEfectivo(tipoflujoefectivoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedItem(tipoflujoefectivoTemp);
					}
				} else {
					//jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedItem(tipoflujoefectivoTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoFlujoEfectivo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoflujoefectivoTemp!=null && jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable!=null) {
						jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.setSelectedItem(tipoflujoefectivoTemp);
					} else {
						if(jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable!=null) {
							//jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.setSelectedItem(tipoflujoefectivoTemp);
							if(jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.getItemCount()>0) {
								jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoFlujoEfectivoForeignKeyDescripcion(Long idTipoFlujoEfectivoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoFlujoEfectivo  tipoflujoefectivoTemp=null;

			for(TipoFlujoEfectivo tipoflujoefectivoAux:tipoflujoefectivosForeignKey) {
				if(tipoflujoefectivoAux.getId()!=null && tipoflujoefectivoAux.getId().equals(idTipoFlujoEfectivoSeleccionado)) {
					tipoflujoefectivoTemp=tipoflujoefectivoAux;
					break;
				}
			}


			sDescripcion=TipoFlujoEfectivoConstantesFunciones.getTipoFlujoEfectivoDescripcion(tipoflujoefectivoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoFlujoEfectivoForeignKeyGenerico(Long idTipoFlujoEfectivoSeleccionado,JComboBox jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico)throws Exception
	{
		try
		{
			TipoFlujoEfectivo  tipoflujoefectivoTemp=null;

			for(TipoFlujoEfectivo tipoflujoefectivoAux:tipoflujoefectivosForeignKey) {
				if(tipoflujoefectivoAux.getId()!=null && tipoflujoefectivoAux.getId().equals(idTipoFlujoEfectivoSeleccionado)) {
					tipoflujoefectivoTemp=tipoflujoefectivoAux;
					break;
				}
			}

			if(tipoflujoefectivoTemp!=null) {
				jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico.setSelectedItem(tipoflujoefectivoTemp);
			} else {
				if(jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico!=null && jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDebitoForeignKey(Long idCuentaContableDebitoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledebitoTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setCuentaContableDebito(cuentacontabledebitoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDebitoForeignKeyDescripcion(Long idCuentaContableDebitoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledebitoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDebitoForeignKeyGenerico(Long idCuentaContableDebitoSeleccionado,JComboBox jComboBoxid_cuenta_contable_debitoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(cuentacontabledebitoTemp!=null) {
				jComboBoxid_cuenta_contable_debitoCuentaContableGenerico.setSelectedItem(cuentacontabledebitoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_debitoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_debitoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_debitoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoForeignKey(Long idCuentaContableCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoTemp!=null) {

					if(this.cuentacontable!=null) {
						this.cuentacontable.setCuentaContableCredito(cuentacontablecreditoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
					if(this.jInternalFrameDetalleFormCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoForeignKeyDescripcion(Long idCuentaContableCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoForeignKeyGenerico(Long idCuentaContableCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_creditoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(cuentacontablecreditoTemp!=null) {
				jComboBoxid_cuenta_contable_creditoCuentaContableGenerico.setSelectedItem(cuentacontablecreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_creditoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_creditoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_creditoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_empresaCuentaContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaCuentaContableGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaCuentaContableGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				cuentacontable.setid_empresa(empresaAux.getId());
				cuentacontable.setempresa_descripcion(CuentaContableConstantesFunciones.getEmpresaDescripcion(empresaAux));
				cuentacontable.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNivelCuentaForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_nivel_cuentaCuentaContableGenerico)throws Exception
	{
		try
		{
			NivelCuenta  nivelcuentaAux=new NivelCuenta();

			if(jComboBoxid_nivel_cuentaCuentaContableGenerico==null) {
				nivelcuentaAux=(NivelCuenta)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.getSelectedItem();
			} else {
				nivelcuentaAux=(NivelCuenta)jComboBoxid_nivel_cuentaCuentaContableGenerico.getSelectedItem();
			}

			if(nivelcuentaAux!=null && nivelcuentaAux.getId()!=null) {
				cuentacontable.setid_nivel_cuenta(nivelcuentaAux.getId());
				cuentacontable.setnivelcuenta_descripcion(CuentaContableConstantesFunciones.getNivelCuentaDescripcion(nivelcuentaAux));
				cuentacontable.setNivelCuenta(nivelcuentaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_cuenta_contableCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				cuentacontable.setid_cuenta_contable(cuentacontableAux.getId());
				cuentacontable.setcuentacontable_descripcion(CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				cuentacontable.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_centro_costoCuentaContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoCuentaContableGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoCuentaContableGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				cuentacontable.setid_centro_costo(centrocostoAux.getId());
				cuentacontable.setcentrocosto_descripcion(CuentaContableConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				cuentacontable.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_moduloCuentaContableGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloCuentaContableGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloCuentaContableGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				cuentacontable.setid_modulo(moduloAux.getId());
				cuentacontable.setmodulo_descripcion(CuentaContableConstantesFunciones.getModuloDescripcion(moduloAux));
				cuentacontable.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_monedaCuentaContableGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaCuentaContableGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaCuentaContableGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				cuentacontable.setid_moneda(monedaAux.getId());
				cuentacontable.setmoneda_descripcion(CuentaContableConstantesFunciones.getMonedaDescripcion(monedaAux));
				cuentacontable.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoIntervaloForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_tipo_intervaloCuentaContableGenerico)throws Exception
	{
		try
		{
			TipoIntervalo  tipointervaloAux=new TipoIntervalo();

			if(jComboBoxid_tipo_intervaloCuentaContableGenerico==null) {
				tipointervaloAux=(TipoIntervalo)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.getSelectedItem();
			} else {
				tipointervaloAux=(TipoIntervalo)jComboBoxid_tipo_intervaloCuentaContableGenerico.getSelectedItem();
			}

			if(tipointervaloAux!=null && tipointervaloAux.getId()!=null) {
				cuentacontable.setid_tipo_intervalo(tipointervaloAux.getId());
				cuentacontable.settipointervalo_descripcion(CuentaContableConstantesFunciones.getTipoIntervaloDescripcion(tipointervaloAux));
				cuentacontable.setTipoIntervalo(tipointervaloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoFlujoEfectivoForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico)throws Exception
	{
		try
		{
			TipoFlujoEfectivo  tipoflujoefectivoAux=new TipoFlujoEfectivo();

			if(jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico==null) {
				tipoflujoefectivoAux=(TipoFlujoEfectivo)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.getSelectedItem();
			} else {
				tipoflujoefectivoAux=(TipoFlujoEfectivo)jComboBoxid_tipo_flujo_efectivoCuentaContableGenerico.getSelectedItem();
			}

			if(tipoflujoefectivoAux!=null) {
				cuentacontable.setid_tipo_flujo_efectivo(tipoflujoefectivoAux.getId());
				cuentacontable.settipoflujoefectivo_descripcion(CuentaContableConstantesFunciones.getTipoFlujoEfectivoDescripcion(tipoflujoefectivoAux));
				cuentacontable.setTipoFlujoEfectivo(tipoflujoefectivoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDebitoForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_cuenta_contable_debitoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_debitoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_debitoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				cuentacontable.setid_cuenta_contable_debito(cuentacontableAux.getId());
				cuentacontable.setcuentacontabledebito_descripcion(CuentaContableConstantesFunciones.getCuentaContableDebitoDescripcion(cuentacontableAux));
				cuentacontable.setCuentaContableDebito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoForeignKey(CuentaContable cuentacontable,JComboBox jComboBoxid_cuenta_contable_creditoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_creditoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_creditoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				cuentacontable.setid_cuenta_contable_credito(cuentacontableAux.getId());
				cuentacontable.setcuentacontablecredito_descripcion(CuentaContableConstantesFunciones.getCuentaContableCreditoDescripcion(cuentacontableAux));
				cuentacontable.setCuentaContableCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNivelCuentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNivelCuenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.removeAllItems();

							for(NivelCuenta nivelcuenta:this.nivelcuentasForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.addItem(nivelcuenta);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNivelCuenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.removeAllItems();

							for(NivelCuenta nivelcuenta:this.nivelcuentasForeignKey) {
								this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.addItem(nivelcuenta);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.addItem(cuentacontable);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.addItem(centrocosto);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_moduloFK_IdModuloCuentaContable.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jComboBoxid_moduloFK_IdModuloCuentaContable.addItem(modulo);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoIntervalosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoIntervalo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.removeAllItems();

							for(TipoIntervalo tipointervalo:this.tipointervalosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.addItem(tipointervalo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoIntervalo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.removeAllItems();

							for(TipoIntervalo tipointervalo:this.tipointervalosForeignKey) {
								this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.addItem(tipointervalo);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoFlujoEfectivosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoFlujoEfectivo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.removeAllItems();

							for(TipoFlujoEfectivo tipoflujoefectivo:this.tipoflujoefectivosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.addItem(tipoflujoefectivo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoFlujoEfectivo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.removeAllItems();

							for(TipoFlujoEfectivo tipoflujoefectivo:this.tipoflujoefectivosForeignKey) {
								this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.addItem(tipoflujoefectivo);
							}
						}

						if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDebitosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledebito:this.cuentacontabledebitosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.addItem(cuentacontabledebito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.addItem(cuentacontablecredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaContable!=null) { 
					}

					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNivelCuentaForeignKey(NivelCuenta nivelcuenta,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setSelectedItem(nivelcuenta);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.setSelectedItem(nivelcuenta);
						} else {
							this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.setSelectedItem(cuentacontable);
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_moduloFK_IdModuloCuentaContable.setSelectedItem(modulo);
						} else {
							this.jComboBoxid_moduloFK_IdModuloCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoIntervaloForeignKey(TipoIntervalo tipointervalo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setSelectedItem(tipointervalo);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.setSelectedItem(tipointervalo);
						} else {
							this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoFlujoEfectivoForeignKey(TipoFlujoEfectivo tipoflujoefectivo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedItem(tipoflujoefectivo);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.setSelectedItem(tipoflujoefectivo);
						} else {
							this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDebitoForeignKey(CuentaContable cuentacontabledebito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedItem(cuentacontabledebito);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoForeignKey(CuentaContable cuentacontablecredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedItem(cuentacontablecredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaContable!=null) {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesCuentaContable() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			CuentaContableConstantesFunciones.refrescarForeignKeysDescripcionesCuentaContable(this.cuentacontableLogic.getCuentaContables());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			CuentaContableConstantesFunciones.refrescarForeignKeysDescripcionesCuentaContable(this.cuentacontables);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(NivelCuenta.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoIntervalo.class));
		classes.add(new Classe(TipoFlujoEfectivo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//cuentacontableLogic.setCuentaContables(this.cuentacontables);
			cuentacontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public CuentaContableParameterReturnGeneral getCuentaContableParameterGeneral() {
		return this.cuentacontableParameterGeneral;
	}
	
	public void setCuentaContableParameterGeneral(CuentaContableParameterReturnGeneral cuentacontableParameterGeneral) {
		this.cuentacontableParameterGeneral = cuentacontableParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoCuentaContable() {
		return isPermisoTodoCuentaContable;
	}

	public void setIsPermisoTodoCuentaContable(Boolean isPermisoTodoCuentaContable) {
		this.isPermisoTodoCuentaContable = isPermisoTodoCuentaContable;
	}

	public Boolean getIsPermisoNuevoCuentaContable() {
		return isPermisoNuevoCuentaContable;
	}

	public void setIsPermisoNuevoCuentaContable(Boolean isPermisoNuevoCuentaContable) {
		this.isPermisoNuevoCuentaContable = isPermisoNuevoCuentaContable;
	}

	public Boolean getIsPermisoActualizarCuentaContable() {
		return isPermisoActualizarCuentaContable;
	}

	public void setIsPermisoActualizarCuentaContable(Boolean isPermisoActualizarCuentaContable) {
		this.isPermisoActualizarCuentaContable = isPermisoActualizarCuentaContable;
	}

	public Boolean getIsPermisoEliminarCuentaContable() {
		return isPermisoEliminarCuentaContable;
	}

	public void setIsPermisoEliminarCuentaContable(Boolean isPermisoEliminarCuentaContable) {
		this.isPermisoEliminarCuentaContable = isPermisoEliminarCuentaContable;
	}

	public Boolean getIsPermisoGuardarCambiosCuentaContable() {
		return isPermisoGuardarCambiosCuentaContable;
	}

	public void setIsPermisoGuardarCambiosCuentaContable(Boolean isPermisoGuardarCambiosCuentaContable) {
		this.isPermisoGuardarCambiosCuentaContable = isPermisoGuardarCambiosCuentaContable;
	}
	
	public Boolean getIsPermisoConsultaCuentaContable() {
		return isPermisoConsultaCuentaContable;
	}

	public void setIsPermisoConsultaCuentaContable(Boolean isPermisoConsultaCuentaContable) {
		this.isPermisoConsultaCuentaContable = isPermisoConsultaCuentaContable;
	}

	public Boolean getIsPermisoBusquedaCuentaContable() {
		return isPermisoBusquedaCuentaContable;
	}

	public void setIsPermisoBusquedaCuentaContable(Boolean isPermisoBusquedaCuentaContable) {
		this.isPermisoBusquedaCuentaContable = isPermisoBusquedaCuentaContable;
	}

	public Boolean getIsPermisoReporteCuentaContable() {
		return isPermisoReporteCuentaContable;
	}

	public void setIsPermisoReporteCuentaContable(Boolean isPermisoReporteCuentaContable) {
		this.isPermisoReporteCuentaContable = isPermisoReporteCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionMedioCuentaContable() {
		return isPermisoPaginacionMedioCuentaContable;
	}

	public void setIsPermisoPaginacionMedioCuentaContable(Boolean isPermisoPaginacionMedioCuentaContable) {
		this.isPermisoPaginacionMedioCuentaContable = isPermisoPaginacionMedioCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionTodoCuentaContable() {
		return isPermisoPaginacionTodoCuentaContable;
	}

	public void setIsPermisoPaginacionTodoCuentaContable(Boolean isPermisoPaginacionTodoCuentaContable) {
		this.isPermisoPaginacionTodoCuentaContable = isPermisoPaginacionTodoCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionAltoCuentaContable() {
		return isPermisoPaginacionAltoCuentaContable;
	}

	public void setIsPermisoPaginacionAltoCuentaContable(Boolean isPermisoPaginacionAltoCuentaContable) {
		this.isPermisoPaginacionAltoCuentaContable = isPermisoPaginacionAltoCuentaContable;
	}
	
	public Boolean getIsPermisoCopiarCuentaContable() {
		return isPermisoCopiarCuentaContable;
	}

	public void setIsPermisoCopiarCuentaContable(Boolean isPermisoCopiarCuentaContable) {
		this.isPermisoCopiarCuentaContable = isPermisoCopiarCuentaContable;
	}
	
	public Boolean getIsPermisoVerFormCuentaContable() {
		return isPermisoVerFormCuentaContable;
	}

	public void setIsPermisoVerFormCuentaContable(Boolean isPermisoVerFormCuentaContable) {
		this.isPermisoVerFormCuentaContable = isPermisoVerFormCuentaContable;
	}
	
	public Boolean getIsPermisoDuplicarCuentaContable() {
		return isPermisoDuplicarCuentaContable;
	}

	public void setIsPermisoDuplicarCuentaContable(Boolean isPermisoDuplicarCuentaContable) {
		this.isPermisoDuplicarCuentaContable = isPermisoDuplicarCuentaContable;
	}
	
	public Boolean getIsPermisoOrdenCuentaContable() {
		return isPermisoOrdenCuentaContable;
	}

	public void setIsPermisoOrdenCuentaContable(Boolean isPermisoOrdenCuentaContable) {
		this.isPermisoOrdenCuentaContable = isPermisoOrdenCuentaContable;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoCuentaContable() {
		return isVisibilidadCeldaNuevoCuentaContable;
	}

	public void setIsVisibilidadCeldaNuevoCuentaContable(Boolean isVisibilidadCeldaNuevoCuentaContable) {
		this.isVisibilidadCeldaNuevoCuentaContable = isVisibilidadCeldaNuevoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarCuentaContable() {
		return isVisibilidadCeldaDuplicarCuentaContable;
	}

	public void setIsVisibilidadCeldaDuplicarCuentaContable(Boolean isVisibilidadCeldaDuplicarCuentaContable) {
		this.isVisibilidadCeldaDuplicarCuentaContable = isVisibilidadCeldaDuplicarCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarCuentaContable() {
		return isVisibilidadCeldaCopiarCuentaContable;
	}

	public void setIsVisibilidadCeldaCopiarCuentaContable(Boolean isVisibilidadCeldaCopiarCuentaContable) {
		this.isVisibilidadCeldaCopiarCuentaContable = isVisibilidadCeldaCopiarCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormCuentaContable() {
		return isVisibilidadCeldaVerFormCuentaContable;
	}

	public void setIsVisibilidadCeldaVerFormCuentaContable(Boolean isVisibilidadCeldaVerFormCuentaContable) {
		this.isVisibilidadCeldaVerFormCuentaContable = isVisibilidadCeldaVerFormCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenCuentaContable() {
		return isVisibilidadCeldaOrdenCuentaContable;
	}

	public void setIsVisibilidadCeldaOrdenCuentaContable(Boolean isVisibilidadCeldaOrdenCuentaContable) {
		this.isVisibilidadCeldaOrdenCuentaContable = isVisibilidadCeldaOrdenCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesCuentaContable() {
		return isVisibilidadCeldaNuevoRelacionesCuentaContable;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesCuentaContable(Boolean isVisibilidadCeldaNuevoRelacionesCuentaContable) {
		this.isVisibilidadCeldaNuevoRelacionesCuentaContable = isVisibilidadCeldaNuevoRelacionesCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaModificarCuentaContable() {
		return isVisibilidadCeldaModificarCuentaContable;
	}

	public void setIsVisibilidadCeldaModificarCuentaContable(Boolean isVisibilidadCeldaModificarCuentaContable) {
		this.isVisibilidadCeldaModificarCuentaContable = isVisibilidadCeldaModificarCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarCuentaContable() {
		return isVisibilidadCeldaActualizarCuentaContable;
	}

	public void setIsVisibilidadCeldaActualizarCuentaContable(Boolean isVisibilidadCeldaActualizarCuentaContable) {
		this.isVisibilidadCeldaActualizarCuentaContable = isVisibilidadCeldaActualizarCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaEliminarCuentaContable() {
		return isVisibilidadCeldaEliminarCuentaContable;
	}

	public void setIsVisibilidadCeldaEliminarCuentaContable(Boolean isVisibilidadCeldaEliminarCuentaContable) {
		this.isVisibilidadCeldaEliminarCuentaContable = isVisibilidadCeldaEliminarCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaCancelarCuentaContable() {
		return isVisibilidadCeldaCancelarCuentaContable;
	}

	public void setIsVisibilidadCeldaCancelarCuentaContable(Boolean isVisibilidadCeldaCancelarCuentaContable) {
		this.isVisibilidadCeldaCancelarCuentaContable = isVisibilidadCeldaCancelarCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaGuardarCuentaContable() {
		return isVisibilidadCeldaGuardarCuentaContable;
	}

	public void setIsVisibilidadCeldaGuardarCuentaContable(Boolean isVisibilidadCeldaGuardarCuentaContable) {
		this.isVisibilidadCeldaGuardarCuentaContable = isVisibilidadCeldaGuardarCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosCuentaContable() {
		return isVisibilidadCeldaGuardarCambiosCuentaContable;
	}

	public void setIsVisibilidadCeldaGuardarCambiosCuentaContable(Boolean isVisibilidadCeldaGuardarCambiosCuentaContable) {
		this.isVisibilidadCeldaGuardarCambiosCuentaContable = isVisibilidadCeldaGuardarCambiosCuentaContable;
	}
		
	public CuentaContableSessionBean getcuentacontableSessionBean() {
		return this.cuentacontableSessionBean;
	}
	
	public void setcuentacontableSessionBean(CuentaContableSessionBean cuentacontableSessionBean) {
		this.cuentacontableSessionBean=cuentacontableSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNombre() {
		return this.isVisibilidadBusquedaPorNombre;
	}

	public void setisVisibilidadBusquedaPorNombre(Boolean isVisibilidadBusquedaPorNombre) {
		this.isVisibilidadBusquedaPorNombre=isVisibilidadBusquedaPorNombre;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDebito() {
		return this.isVisibilidadFK_IdCuentaContableDebito;
	}

	public void setisVisibilidadFK_IdCuentaContableDebito(Boolean isVisibilidadFK_IdCuentaContableDebito) {
		this.isVisibilidadFK_IdCuentaContableDebito=isVisibilidadFK_IdCuentaContableDebito;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdNivelCuenta() {
		return this.isVisibilidadFK_IdNivelCuenta;
	}

	public void setisVisibilidadFK_IdNivelCuenta(Boolean isVisibilidadFK_IdNivelCuenta) {
		this.isVisibilidadFK_IdNivelCuenta=isVisibilidadFK_IdNivelCuenta;
	}

	public Boolean getisVisibilidadFK_IdTipoFlujoEfectivo() {
		return this.isVisibilidadFK_IdTipoFlujoEfectivo;
	}

	public void setisVisibilidadFK_IdTipoFlujoEfectivo(Boolean isVisibilidadFK_IdTipoFlujoEfectivo) {
		this.isVisibilidadFK_IdTipoFlujoEfectivo=isVisibilidadFK_IdTipoFlujoEfectivo;
	}

	public Boolean getisVisibilidadFK_IdTipoIntervalo() {
		return this.isVisibilidadFK_IdTipoIntervalo;
	}

	public void setisVisibilidadFK_IdTipoIntervalo(Boolean isVisibilidadFK_IdTipoIntervalo) {
		this.isVisibilidadFK_IdTipoIntervalo=isVisibilidadFK_IdTipoIntervalo;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysCuentaContable(CuentaContable cuentacontable)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(cuentacontable,null);
				this.setActualParaGuardarNivelCuentaForeignKey(cuentacontable,null);
				this.setActualParaGuardarCuentaContableForeignKey(cuentacontable,null);
				this.setActualParaGuardarCentroCostoForeignKey(cuentacontable,null);
				this.setActualParaGuardarModuloForeignKey(cuentacontable,null);
				this.setActualParaGuardarMonedaForeignKey(cuentacontable,null);
				this.setActualParaGuardarTipoIntervaloForeignKey(cuentacontable,null);
				this.setActualParaGuardarTipoFlujoEfectivoForeignKey(cuentacontable,null);
				this.setActualParaGuardarCuentaContableDebitoForeignKey(cuentacontable,null);
				this.setActualParaGuardarCuentaContableCreditoForeignKey(cuentacontable,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(CuentaContable cuentacontable,CuentaContable cuentacontableAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalCuentaContable(cuentacontable);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		cuentacontableAux.setId(cuentacontable.getId());
		cuentacontableAux.setVersionRow(cuentacontable.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessCuentaContable();
		
			int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = cuentacontableValidator.getInvalidValues(this.cuentacontable);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			cuentacontableLogic.setDatosCliente(datosCliente);
			cuentacontableLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				cuentacontableAux=new  CuentaContable();
				
				cuentacontableAux.setIsNew(true);
				cuentacontableAux.setIsChanged(true);
				
				cuentacontableAux.setCuentaContableOriginal(this.cuentacontable);
				
				cuentacontableAux.setId(this.cuentacontable.getId());	
				cuentacontableAux.setVersionRow(this.cuentacontable.getVersionRow());	
				cuentacontableAux.setid_empresa(this.cuentacontable.getid_empresa());	
				cuentacontableAux.setcodigo(this.cuentacontable.getcodigo());	
				cuentacontableAux.setnombre(this.cuentacontable.getnombre());	
				cuentacontableAux.setcodigo_extranjero(this.cuentacontable.getcodigo_extranjero());	
				cuentacontableAux.setnombre_extranjero(this.cuentacontable.getnombre_extranjero());	
				cuentacontableAux.setid_nivel_cuenta(this.cuentacontable.getid_nivel_cuenta());	
				
				if(this.cuentacontable.getid_cuenta_contable()!=null && this.cuentacontable.getid_cuenta_contable()>0L) {
					cuentacontableAux.setid_cuenta_contable(this.cuentacontable.getid_cuenta_contable());
				} else {
					cuentacontableAux.setid_cuenta_contable(null);
				}	
				cuentacontableAux.setid_centro_costo(this.cuentacontable.getid_centro_costo());	
				cuentacontableAux.setid_modulo(this.cuentacontable.getid_modulo());	
				cuentacontableAux.setdescripcion(this.cuentacontable.getdescripcion());	
				cuentacontableAux.setes_movimiento(this.cuentacontable.getes_movimiento());	
				cuentacontableAux.setes_centro_costo(this.cuentacontable.getes_centro_costo());	
				cuentacontableAux.setes_centro_actividad(this.cuentacontable.getes_centro_actividad());	
				cuentacontableAux.setes_activo(this.cuentacontable.getes_activo());	
				cuentacontableAux.setes_relacion(this.cuentacontable.getes_relacion());	
				cuentacontableAux.setes_para_f52(this.cuentacontable.getes_para_f52());	
				cuentacontableAux.setid_moneda(this.cuentacontable.getid_moneda());	
				cuentacontableAux.setid_tipo_intervalo(this.cuentacontable.getid_tipo_intervalo());	
				cuentacontableAux.setid_tipo_flujo_efectivo(this.cuentacontable.getid_tipo_flujo_efectivo());	
				cuentacontableAux.setid_cuenta_contable_debito(this.cuentacontable.getid_cuenta_contable_debito());	
				cuentacontableAux.setid_cuenta_contable_credito(this.cuentacontable.getid_cuenta_contable_credito());	
				cuentacontableAux.setorden(this.cuentacontable.getorden());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentacontableAux,cuentacontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.saveCuentaContables();//WithConnection
						//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);
					
					this.refrescarForeignKeysDescripcionesCuentaContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentacontableLogic.saveCuentaContableRelaciones(cuentacontableAux);//WithConnection
								//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentacontableAux,cuentacontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				cuentacontableAux=new  CuentaContable();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.cuentacontableSessionBean.getEsGuardarRelacionado() 
					|| (this.cuentacontableSessionBean.getEsGuardarRelacionado() && this.cuentacontable.getId()>=0)) {
						
					cuentacontableAux.setIsNew(false);
				}
				
				cuentacontableAux.setIsDeleted(false);
			
				cuentacontableAux.setId(this.cuentacontable.getId());	
				cuentacontableAux.setVersionRow(this.cuentacontable.getVersionRow());	
				cuentacontableAux.setid_empresa(this.cuentacontable.getid_empresa());	
				cuentacontableAux.setcodigo(this.cuentacontable.getcodigo());	
				cuentacontableAux.setnombre(this.cuentacontable.getnombre());	
				cuentacontableAux.setcodigo_extranjero(this.cuentacontable.getcodigo_extranjero());	
				cuentacontableAux.setnombre_extranjero(this.cuentacontable.getnombre_extranjero());	
				cuentacontableAux.setid_nivel_cuenta(this.cuentacontable.getid_nivel_cuenta());	
				
				if(this.cuentacontable.getid_cuenta_contable()!=null && this.cuentacontable.getid_cuenta_contable()>0L) {
					cuentacontableAux.setid_cuenta_contable(this.cuentacontable.getid_cuenta_contable());
				} else {
					cuentacontableAux.setid_cuenta_contable(null);
				}	
				cuentacontableAux.setid_centro_costo(this.cuentacontable.getid_centro_costo());	
				cuentacontableAux.setid_modulo(this.cuentacontable.getid_modulo());	
				cuentacontableAux.setdescripcion(this.cuentacontable.getdescripcion());	
				cuentacontableAux.setes_movimiento(this.cuentacontable.getes_movimiento());	
				cuentacontableAux.setes_centro_costo(this.cuentacontable.getes_centro_costo());	
				cuentacontableAux.setes_centro_actividad(this.cuentacontable.getes_centro_actividad());	
				cuentacontableAux.setes_activo(this.cuentacontable.getes_activo());	
				cuentacontableAux.setes_relacion(this.cuentacontable.getes_relacion());	
				cuentacontableAux.setes_para_f52(this.cuentacontable.getes_para_f52());	
				cuentacontableAux.setid_moneda(this.cuentacontable.getid_moneda());	
				cuentacontableAux.setid_tipo_intervalo(this.cuentacontable.getid_tipo_intervalo());	
				cuentacontableAux.setid_tipo_flujo_efectivo(this.cuentacontable.getid_tipo_flujo_efectivo());	
				cuentacontableAux.setid_cuenta_contable_debito(this.cuentacontable.getid_cuenta_contable_debito());	
				cuentacontableAux.setid_cuenta_contable_credito(this.cuentacontable.getid_cuenta_contable_credito());	
				cuentacontableAux.setorden(this.cuentacontable.getorden());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentacontableAux,cuentacontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.saveCuentaContables();//WithConnection
						//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);
					
					this.refrescarForeignKeysDescripcionesCuentaContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentacontableLogic.saveCuentaContableRelaciones(cuentacontableAux);//WithConnection
								//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentacontableAux,cuentacontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentacontable,cuentacontableAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				cuentacontableAux=new  CuentaContable();
				
				cuentacontableAux.setIsNew(false);
				cuentacontableAux.setIsChanged(false);
				
				cuentacontableAux.setIsDeleted(true);
				
				cuentacontableAux.setId(this.cuentacontable.getId());	
				cuentacontableAux.setVersionRow(this.cuentacontable.getVersionRow());	
				cuentacontableAux.setid_empresa(this.cuentacontable.getid_empresa());	
				cuentacontableAux.setcodigo(this.cuentacontable.getcodigo());	
				cuentacontableAux.setnombre(this.cuentacontable.getnombre());	
				cuentacontableAux.setcodigo_extranjero(this.cuentacontable.getcodigo_extranjero());	
				cuentacontableAux.setnombre_extranjero(this.cuentacontable.getnombre_extranjero());	
				cuentacontableAux.setid_nivel_cuenta(this.cuentacontable.getid_nivel_cuenta());	
				
				if(this.cuentacontable.getid_cuenta_contable()!=null && this.cuentacontable.getid_cuenta_contable()>0L) {
					cuentacontableAux.setid_cuenta_contable(this.cuentacontable.getid_cuenta_contable());
				} else {
					cuentacontableAux.setid_cuenta_contable(null);
				}	
				cuentacontableAux.setid_centro_costo(this.cuentacontable.getid_centro_costo());	
				cuentacontableAux.setid_modulo(this.cuentacontable.getid_modulo());	
				cuentacontableAux.setdescripcion(this.cuentacontable.getdescripcion());	
				cuentacontableAux.setes_movimiento(this.cuentacontable.getes_movimiento());	
				cuentacontableAux.setes_centro_costo(this.cuentacontable.getes_centro_costo());	
				cuentacontableAux.setes_centro_actividad(this.cuentacontable.getes_centro_actividad());	
				cuentacontableAux.setes_activo(this.cuentacontable.getes_activo());	
				cuentacontableAux.setes_relacion(this.cuentacontable.getes_relacion());	
				cuentacontableAux.setes_para_f52(this.cuentacontable.getes_para_f52());	
				cuentacontableAux.setid_moneda(this.cuentacontable.getid_moneda());	
				cuentacontableAux.setid_tipo_intervalo(this.cuentacontable.getid_tipo_intervalo());	
				cuentacontableAux.setid_tipo_flujo_efectivo(this.cuentacontable.getid_tipo_flujo_efectivo());	
				cuentacontableAux.setid_cuenta_contable_debito(this.cuentacontable.getid_cuenta_contable_debito());	
				cuentacontableAux.setid_cuenta_contable_credito(this.cuentacontable.getid_cuenta_contable_credito());	
				cuentacontableAux.setorden(this.cuentacontable.getorden());	
				
				if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.cuentacontableAux.getId()>=0) {	
						this.cuentacontablesEliminados.add(cuentacontableAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentacontableAux,cuentacontables);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.saveCuentaContables();//WithConnection
						//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentacontableLogic.saveCuentaContableRelaciones(cuentacontableAux);//WithConnection
								//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
								|| this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(cuentacontableAux,cuentacontableLogic.getCuentaContables());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(cuentacontableAux,cuentacontables);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getCuentaContables().addAll(this.cuentacontablesEliminados);
					
					cuentacontableLogic.saveCuentaContables();//WithConnection
					//cuentacontableLogic.getSetVersionRowCuentaContables();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesCuentaContable();
				
				this.cuentacontablesEliminados= new ArrayList<CuentaContable>();		
			}
			
			if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
			//ACTUALIZA ARBOL
			this.getTodosCuentaContableArbol();
			
			//TO_OPTIMIZE POR TIPO FK NO TODOS
			this.inicializarCombosForeignKeyCuentaContableListas();
			
			this.cargarCombosForeignKeyCuentaContable(false);
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Cuenta Contable GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.cuentacontable=cuentacontableAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessCuentaContable();
      	}
		
	}	
	
	public void actualizarRelaciones(CuentaContable cuentacontableLocal) throws Exception {
		
		if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(CuentaContable cuentacontableLocal) throws Exception {	
		if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				cuentacontableLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NivelCuentaDetalleFormJInternalFrame.class)) {
				NivelCuentaBeanSwingJInternalFrame nivelcuentaBeanSwingJInternalFrameLocal=(NivelCuentaBeanSwingJInternalFrame) ((NivelCuentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				nivelcuentaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNivelCuenta(nivelcuentaBeanSwingJInternalFrameLocal.getnivelcuenta(),true);
				nivelcuentaBeanSwingJInternalFrameLocal.actualizarLista(nivelcuentaBeanSwingJInternalFrameLocal.nivelcuenta,this.nivelcuentasForeignKey);

				nivelcuentaBeanSwingJInternalFrameLocal.actualizarRelaciones(nivelcuentaBeanSwingJInternalFrameLocal.nivelcuenta);

				cuentacontableLocal.setNivelCuenta(nivelcuentaBeanSwingJInternalFrameLocal.nivelcuenta);

				this.addItemDefectoCombosForeignKeyNivelCuenta();
				this.cargarCombosFrameNivelCuentasForeignKey("Formulario");
				this.setActualNivelCuentaForeignKey(nivelcuentaBeanSwingJInternalFrameLocal.nivelcuenta.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				cuentacontableLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				cuentacontableLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				cuentacontableLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				cuentacontableLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoIntervaloDetalleFormJInternalFrame.class)) {
				TipoIntervaloBeanSwingJInternalFrame tipointervaloBeanSwingJInternalFrameLocal=(TipoIntervaloBeanSwingJInternalFrame) ((TipoIntervaloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipointervaloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoIntervalo(tipointervaloBeanSwingJInternalFrameLocal.gettipointervalo(),true);
				tipointervaloBeanSwingJInternalFrameLocal.actualizarLista(tipointervaloBeanSwingJInternalFrameLocal.tipointervalo,this.tipointervalosForeignKey);

				tipointervaloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipointervaloBeanSwingJInternalFrameLocal.tipointervalo);

				cuentacontableLocal.setTipoIntervalo(tipointervaloBeanSwingJInternalFrameLocal.tipointervalo);

				this.addItemDefectoCombosForeignKeyTipoIntervalo();
				this.cargarCombosFrameTipoIntervalosForeignKey("Formulario");
				this.setActualTipoIntervaloForeignKey(tipointervaloBeanSwingJInternalFrameLocal.tipointervalo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoFlujoEfectivoDetalleFormJInternalFrame.class)) {
				TipoFlujoEfectivoBeanSwingJInternalFrame tipoflujoefectivoBeanSwingJInternalFrameLocal=(TipoFlujoEfectivoBeanSwingJInternalFrame) ((TipoFlujoEfectivoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoflujoefectivoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoFlujoEfectivo(tipoflujoefectivoBeanSwingJInternalFrameLocal.gettipoflujoefectivo(),true);
				tipoflujoefectivoBeanSwingJInternalFrameLocal.actualizarLista(tipoflujoefectivoBeanSwingJInternalFrameLocal.tipoflujoefectivo,this.tipoflujoefectivosForeignKey);

				tipoflujoefectivoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoflujoefectivoBeanSwingJInternalFrameLocal.tipoflujoefectivo);

				cuentacontableLocal.setTipoFlujoEfectivo(tipoflujoefectivoBeanSwingJInternalFrameLocal.tipoflujoefectivo);

				this.addItemDefectoCombosForeignKeyTipoFlujoEfectivo();
				this.cargarCombosFrameTipoFlujoEfectivosForeignKey("Formulario");
				this.setActualTipoFlujoEfectivoForeignKey(tipoflujoefectivoBeanSwingJInternalFrameLocal.tipoflujoefectivo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledebitoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledebitoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledebitoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledebitosForeignKey);

				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				cuentacontableLocal.setCuentaContableDebito(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey("Formulario");
				this.setActualCuentaContableDebitoForeignKey(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditosForeignKey);

				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				cuentacontableLocal.setCuentaContableCredito(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey("Formulario");
				this.setActualCuentaContableCreditoForeignKey(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarCuentaContableActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = cuentacontableValidator.getInvalidValues(this.cuentacontable);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(CuentaContable cuentacontable,List<CuentaContable> cuentacontables) throws Exception {
		try	{		
			CuentaContableConstantesFunciones.actualizarLista(cuentacontable,cuentacontables,this.cuentacontableSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(CuentaContable cuentacontable,List<CuentaContable> cuentacontables) throws Exception {
		try	{			
			CuentaContableConstantesFunciones.actualizarSelectedLista(cuentacontable,cuentacontables);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<CuentaContable> cuentacontablesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				cuentacontablesLocal=this.cuentacontableLogic.getCuentaContables();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				cuentacontablesLocal=this.cuentacontables;
			}
			//ARCHITECTURE
		
			for(CuentaContable cuentacontableLocal:cuentacontablesLocal) {
				if(this.permiteMantenimiento(cuentacontableLocal) && cuentacontableLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+CuentaContableConstantesFunciones.getCuentaContableLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_empresaCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelnombreCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.CODIGOEXTRANJERO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigo_extranjeroCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.NOMBREEXTRANJERO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelnombre_extranjeroCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDNIVELCUENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_nivel_cuentaCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contableCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_centro_costoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_moduloCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeldescripcionCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESMOVIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_movimientoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_costoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESCENTROACTIVIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_actividadCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESACTIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_activoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESRELACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_relacionCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ESPARAF52)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_para_f52CuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_monedaCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDTIPOINTERVALO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_tipo_intervaloCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDTIPOFLUJOEFECTIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_tipo_flujo_efectivoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDCUENTACONTABLEDEBITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contable_debitoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.IDCUENTACONTABLECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contable_creditoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaContableConstantesFunciones.ORDEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelordenCuentaContable,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_empresaCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelnombreCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigo_extranjeroCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelnombre_extranjeroCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_nivel_cuentaCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contableCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_centro_costoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_moduloCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeldescripcionCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_movimientoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_costoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_actividadCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_activoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_relacionCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabeles_para_f52CuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_monedaCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_tipo_intervaloCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_tipo_flujo_efectivoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contable_debitoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelid_cuenta_contable_creditoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaContable.jLabelordenCuentaContable,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoCuentaContable--;	
		
		
		this.cuentacontableAux=new CuentaContable();
		
		this.cuentacontableAux.setId(this.iIdNuevoCuentaContable);
		this.cuentacontableAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentacontableLogic.getCuentaContables().add(this.cuentacontableAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.cuentacontables.add(this.cuentacontableAux);
		}
		//ARCHITECTURE
		
		this.cuentacontable=this.cuentacontableAux;
		
		if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioCuentaContable(this.cuentacontable);
			this.setVariablesObjetoActualToFormularioForeignKeyCuentaContable(this.cuentacontable);
		}
				
		//this.setDefaultControlesCuentaContable();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyCuentaContable();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyCuentaContable();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaContable();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentaContable(this.cuentacontableBean,this.cuentacontable,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(CuentaContableConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
			classes=CuentaContableConstantesFunciones.getClassesRelationshipsOfCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.cuentacontableReturnGeneral=cuentacontableLogic.procesarEventosCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentacontableLogic.getCuentaContables(),this.cuentacontable,this.cuentacontableParameterGeneral,this.isEsNuevoCuentaContable,classes);//this.cuentacontableLogic.getCuentaContable()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanCuentaContable(this.cuentacontableReturnGeneral,this.cuentacontableBean,false);
		
		if(this.cuentacontableReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable());
		}
		
		if(this.cuentacontableReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable(),classes);//this.cuentacontableBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyCuentaContable();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyCuentaContable();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentaContableBeanSwingJInternalFrameAdditional.RecargarFormCuentaContable(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingCuentaContable(false);
						
			if(cuentacontableSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaContable();
			}
			
			this.actualizarVisualTableDatosCuentaContable();
			
			this.jTableDatosCuentaContable.setRowSelectionInterval(this.getIndiceNuevoCuentaContable(), this.getIndiceNuevoCuentaContable());
			
			this.seleccionarFilaTablaCuentaContableActual();
						
			this.actualizarEstadoCeldasBotonesCuentaContable("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesCuentaContable(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarcodigoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarnombreCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarcodigo_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarnombre_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activardescripcionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_movimientoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_centro_actividadCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_activoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_relacionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activares_para_f52CuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarordenCuentaContable);	
		//
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_empresaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_nivel_cuentaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_cuenta_contableCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_moduloCuentaContable);//
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_monedaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_tipo_intervaloCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_tipo_flujo_efectivoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_cuenta_contable_debitoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setEnabled(isHabilitar && this.cuentacontableConstantesFunciones.activarid_cuenta_contable_creditoCuentaContable);
	};
	
	public void setDefaultControlesCuentaContable() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoCuentaContable(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.cuentacontableSessionBean.setConGuardarRelaciones(true);			
			this.cuentacontableSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.setVisible(true);
			
					
		} else {
			//this.cuentacontableSessionBean.setConGuardarRelaciones(false);			
			this.cuentacontableSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoCuentaContable() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
				if(cuentacontableAux.getId().equals(this.iIdNuevoCuentaContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaContable cuentacontableAux:this.cuentacontables) {
				if(cuentacontableAux.getId().equals(this.iIdNuevoCuentaContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualCuentaContable(CuentaContable cuentacontable,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
				if(cuentacontableAux.getId().equals(cuentacontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaContable cuentacontableAux:this.cuentacontables) {
				if(cuentacontableAux.getId().equals(cuentacontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalCuentaContable(CuentaContable cuentacontableOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
				if(cuentacontableAux.getCuentaContableOriginal().getId().equals(cuentacontableOriginal.getId())) {
					existe=true;
					cuentacontableOriginal.setId(cuentacontableAux.getId());
					cuentacontableOriginal.setVersionRow(cuentacontableAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaContable cuentacontableAux:this.cuentacontables) {
				if(cuentacontableAux.getCuentaContableOriginal().getId().equals(cuentacontableOriginal.getId())) {
					existe=true;
					cuentacontableOriginal.setId(cuentacontableAux.getId());
					cuentacontableOriginal.setVersionRow(cuentacontableAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosCuentaContable(Boolean esParaCancelar) throws Exception {
		cuentacontablesAux=new ArrayList<CuentaContable>();
		cuentacontableAux=new CuentaContable();
		
		if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
					if(cuentacontableAux.getId()<0) {
						cuentacontablesAux.add(cuentacontableAux);
					}		
				}
				this.iIdNuevoCuentaContable=0L;
				this.cuentacontableLogic.getCuentaContables().removeAll(cuentacontablesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaContable cuentacontableAux:this.cuentacontables) {
					if(cuentacontableAux.getId()<0) {
						cuentacontablesAux.add(cuentacontableAux);
					}		
				}
				this.iIdNuevoCuentaContable=0L;
				this.cuentacontables.removeAll(cuentacontablesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoCuentaContable 
					&& this.cuentacontableLogic.getCuentaContables().size()>0
					) {
					cuentacontableAux=this.cuentacontableLogic.getCuentaContables().get(this.cuentacontableLogic.getCuentaContables().size() - 1);
				
					if(cuentacontableAux.getId()<0) {
						this.cuentacontableLogic.getCuentaContables().remove(cuentacontableAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoCuentaContable && this.cuentacontables.size()>0) {
					cuentacontableAux=this.cuentacontables.get(this.cuentacontables.size() - 1);
				
					if(cuentacontableAux.getId()<0) {
						this.cuentacontables.remove(cuentacontableAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoCuentaContable(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(cuentacontable.getId()<0) {
				this.cuentacontableLogic.getCuentaContables().remove(this.cuentacontable);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(cuentacontable.getId()<0) {
				this.cuentacontables.remove(this.cuentacontable);
			}
		}			
	}
	
	public void setEstadosInicialesCuentaContable(List<CuentaContable> cuentacontablesAux) throws Exception {
		CuentaContableConstantesFunciones.setEstadosInicialesCuentaContable(cuentacontablesAux);
	}
	
	public void setEstadosInicialesCuentaContable(CuentaContable cuentacontableAux) throws Exception {
		CuentaContableConstantesFunciones.setEstadosInicialesCuentaContable(cuentacontableAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarCuentaContableActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarCuentaContableActual()) {
				if(!this.isEsNuevoCuentaContable) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoCuentaContable=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarCuentaContableActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Cuenta Contable ?", "MANTENIMIENTO DE Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(CuentaContable cuentacontable) throws Exception {
		CuentaContableConstantesFunciones.seleccionarAsignar(this.cuentacontable,cuentacontable);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarCuentaContable=this.isPermisoActualizarOriginalCuentaContable;
			
			
			this.seleccionarAsignar(cuentacontable);
			
			

			idCuentaContableActual=cuentacontable.getid_cuenta_contable();
			this.seleccionarCuentaContableActual();

			idCentroCostoActual=cuentacontable.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idCuentaContableDebitoActual=cuentacontable.getid_cuenta_contable_debito();
			this.seleccionarCuentaContableDebitoActual();

			idCuentaContableCreditoActual=cuentacontable.getid_cuenta_contable_credito();
			this.seleccionarCuentaContableCreditoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentaContableConstantesFunciones.quitarEspaciosCuentaContable(this.cuentacontable,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.cuentacontableSessionBean.setsFuncionBusquedaRapida(this.cuentacontableSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableActual() throws Exception {
		try	{
			CuentaContable cuentacontableAux=new CuentaContable();

			if(this.idCuentaContableActual != null && this.idCuentaContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(this.idCuentaContableActual);
					cuentacontableAux= cuentacontableLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablesForeignKey=new ArrayList<CuentaContable>();
				cuentacontablesForeignKey.add(cuentacontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDebitoActual() throws Exception {
		try	{
			CuentaContable cuentacontabledebitoAux=new CuentaContable();

			if(this.idCuentaContableDebitoActual != null && this.idCuentaContableDebitoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledebitoLogic.getEntityWithConnection(this.idCuentaContableDebitoActual);
					cuentacontabledebitoAux= cuentacontabledebitoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledebitosForeignKey.add(cuentacontabledebitoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditoAux=new CuentaContable();

			if(this.idCuentaContableCreditoActual != null && this.idCuentaContableCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditoLogic.getEntityWithConnection(this.idCuentaContableCreditoActual);
					cuentacontablecreditoAux= cuentacontablecreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditosForeignKey.add(cuentacontablecreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoCuentaContable) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosCuentaContable(esParaCancelar);				
				this.cancelarNuevoCuentaContable(esParaCancelar);								
			}
			
			this.cuentacontable=new CuentaContable();
			
			this.inicializarCuentaContable();
			
			this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarCuentaContable() throws Exception {
		try {
			CuentaContableConstantesFunciones.inicializarCuentaContable(this.cuentacontable);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.cuentacontableLogic.getCuentaContables().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteCuentaContables(String sAccionBusqueda,List<CuentaContable> cuentacontablesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="CuentaContable"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="CuentaContableMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("CuentaContableMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="CuentaContable"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Cuenta Contables");		
		parameters.put("busquedapor", CuentaContableConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceCuentaContable=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			CuentaContableConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			CuentaContableConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceCuentaContable=new JRBeanArrayDataSource(CuentaContableJInternalFrame.TraerCuentaContableBeans(cuentacontablesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceCuentaContable);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+CuentaContableConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+CuentaContableConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(CuentaContableBean.TraerCuentaContableBeans(cuentacontablesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoCuentaContableActionPerformed(null);
					//this.generarExcelReporteCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesCuentaContables(sAccionBusqueda,sTipoArchivoReporte,cuentacontablesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaContable> cuentacontablesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaContables");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentaContable("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(CuentaContable cuentacontable : cuentacontablesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			CuentaContableConstantesFunciones.generarExcelReporteDataCuentaContable("NORMAL",row,workbook,cuentacontable,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderCuentaContable(String sTipo,Row row,Workbook workbook) {
		
		CuentaContableConstantesFunciones.generarExcelReporteHeaderCuentaContable(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaContable> cuentacontablesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(CuentaContable cuentacontable : cuentacontablesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontable));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcodigo_extranjero());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getnombre_extranjero());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getnivelcuenta_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcuentacontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_movimiento()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_centro_costo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_centro_actividad()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESACTIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESACTIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_activo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESRELACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESRELACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_relacion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ESPARAF52))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESPARAF52);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentacontable.getes_para_f52()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.gettipointervalo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.gettipoflujoefectivo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcuentacontabledebito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getcuentacontablecredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaContableConstantesFunciones.LABEL_ORDEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ORDEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentacontable.getorden());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaContable> cuentacontablesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<CuentaContable> cuentacontablesRespaldo=null;
		
		classes=CuentaContableConstantesFunciones.getClassesRelationshipsOfCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.cuentacontableLogic.setDatosCliente(this.datosCliente);
		this.cuentacontableLogic.setDatosDeep(this.datosDeep);
		this.cuentacontableLogic.setIsConDeep(true);
		
		cuentacontablesRespaldo=this.cuentacontableLogic.getCuentaContables();
		
		this.cuentacontableLogic.setCuentaContables(cuentacontablesParaReportes);	
		this.cuentacontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		cuentacontablesParaReportes=this.cuentacontableLogic.getCuentaContables();
		this.cuentacontableLogic.setCuentaContables(cuentacontablesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentaContable("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(CuentaContable cuentacontable : cuentacontablesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderCuentaContable("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			CuentaContableConstantesFunciones.generarExcelReporteDataCuentaContable("NORMAL",row,workbook,cuentacontable,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontable));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaContable.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessCuentaContable() throws Exception {		
		this.startProcessCuentaContable(true);
	}
	
	public void startProcessCuentaContable(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasCuentaContable ,this.jPanelParametrosReportesCuentaContable, this.jScrollPanelDatosCuentaContable,this.jPanelPaginacionCuentaContable, this.jScrollPanelDatosEdicionCuentaContable, this.jPanelAccionesCuentaContable,this.jPanelAccionesFormularioCuentaContable,this.jmenuBarCuentaContable,this.jmenuBarDetalleCuentaContable,this.jTtoolBarCuentaContable,this.jTtoolBarDetalleCuentaContable);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentaContable=this.jTabbedPaneBusquedasCuentaContable; 
		
		final JPanel jPanelParametrosReportesCuentaContable=this.jPanelParametrosReportesCuentaContable;
		//final JScrollPane jScrollPanelDatosCuentaContable=this.jScrollPanelDatosCuentaContable;
		final JTable jTableDatosCuentaContable=this.jTableDatosCuentaContable;		
		final JPanel jPanelPaginacionCuentaContable=this.jPanelPaginacionCuentaContable;
		//final JScrollPane jScrollPanelDatosEdicionCuentaContable=this.jScrollPanelDatosEdicionCuentaContable;
		final JPanel jPanelAccionesCuentaContable=this.jPanelAccionesCuentaContable;
		
		JPanel jPanelCamposAuxiliarCuentaContable=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarCuentaContable=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			jPanelCamposAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jPanelCamposCuentaContable;
			jPanelAccionesFormularioAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jPanelAccionesFormularioCuentaContable;
		}
		
		final JPanel jPanelCamposCuentaContable=jPanelCamposAuxiliarCuentaContable;
		final JPanel jPanelAccionesFormularioCuentaContable=jPanelAccionesFormularioAuxiliarCuentaContable;
		
		
		final JMenuBar jmenuBarCuentaContable=this.jmenuBarCuentaContable;
		final JToolBar jTtoolBarCuentaContable=this.jTtoolBarCuentaContable;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarCuentaContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentaContable=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			jmenuBarDetalleAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jmenuBarDetalleCuentaContable;
			jTtoolBarDetalleAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jTtoolBarDetalleCuentaContable;
		}
		
		final JMenuBar jmenuBarDetalleCuentaContable=jmenuBarDetalleAuxiliarCuentaContable;
		final JToolBar jTtoolBarDetalleCuentaContable=jTtoolBarDetalleAuxiliarCuentaContable;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentaContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentaContable;
			processRunnable.jTableDatos=jTableDatosCuentaContable;
			processRunnable.jPanelCampos=jPanelCamposCuentaContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentaContable;
			processRunnable.jPanelAcciones=jPanelAccionesCuentaContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentaContable;
			
			
			processRunnable.jmenuBar=jmenuBarCuentaContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentaContable;
			processRunnable.jTtoolBar=jTtoolBarCuentaContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentaContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentaContable ,jPanelParametrosReportesCuentaContable,jTableDatosCuentaContable, /*jScrollPanelDatosCuentaContable,*/jPanelCamposCuentaContable,jPanelPaginacionCuentaContable, /*jScrollPanelDatosEdicionCuentaContable,*/ jPanelAccionesCuentaContable,jPanelAccionesFormularioCuentaContable,jmenuBarCuentaContable,jmenuBarDetalleCuentaContable,jTtoolBarCuentaContable,jTtoolBarDetalleCuentaContable);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentaContable ,jPanelParametrosReportesCuentaContable, jScrollPanelDatosCuentaContable,jPanelPaginacionCuentaContable, jScrollPanelDatosEdicionCuentaContable, jPanelAccionesCuentaContable,jPanelAccionesFormularioCuentaContable,jmenuBarCuentaContable,jmenuBarDetalleCuentaContable,jTtoolBarCuentaContable,jTtoolBarDetalleCuentaContable);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessCuentaContable() {// throws Exception 
		this.finishProcessCuentaContable(true);
	}
	
	public void finishProcessCuentaContable(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasCuentaContable ,this.jPanelParametrosReportesCuentaContable, this.jScrollPanelDatosCuentaContable,this.jPanelPaginacionCuentaContable, this.jScrollPanelDatosEdicionCuentaContable, this.jPanelAccionesCuentaContable,this.jPanelAccionesFormularioCuentaContable,this.jmenuBarCuentaContable,this.jmenuBarDetalleCuentaContable,this.jTtoolBarCuentaContable,this.jTtoolBarDetalleCuentaContable);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentaContable=this.jTabbedPaneBusquedasCuentaContable; 
		
		final JPanel jPanelParametrosReportesCuentaContable=this.jPanelParametrosReportesCuentaContable;
		//final JScrollPane jScrollPanelDatosCuentaContable=this.jScrollPanelDatosCuentaContable;
		final JTable jTableDatosCuentaContable=this.jTableDatosCuentaContable;		
		final JPanel jPanelPaginacionCuentaContable=this.jPanelPaginacionCuentaContable;
		//final JScrollPane jScrollPanelDatosEdicionCuentaContable=this.jScrollPanelDatosEdicionCuentaContable;
		final JPanel jPanelAccionesCuentaContable=this.jPanelAccionesCuentaContable;
		
		JPanel jPanelCamposAuxiliarCuentaContable=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarCuentaContable=new JPanel();
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			jPanelCamposAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jPanelCamposCuentaContable;
			jPanelAccionesFormularioAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jPanelAccionesFormularioCuentaContable;
		}
		
		final JPanel jPanelCamposCuentaContable=jPanelCamposAuxiliarCuentaContable;
		final JPanel jPanelAccionesFormularioCuentaContable=jPanelAccionesFormularioAuxiliarCuentaContable;
		
		
		final JMenuBar jmenuBarCuentaContable=this.jmenuBarCuentaContable;		
		final JToolBar jTtoolBarCuentaContable=this.jTtoolBarCuentaContable;
				
		JMenuBar jmenuBarDetalleAuxiliarCuentaContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentaContable=new JToolBar();
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			jmenuBarDetalleAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jmenuBarDetalleCuentaContable;
			jTtoolBarDetalleAuxiliarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jTtoolBarDetalleCuentaContable;		
		}
		
		final JMenuBar jmenuBarDetalleCuentaContable=jmenuBarDetalleAuxiliarCuentaContable;
		final JToolBar jTtoolBarDetalleCuentaContable=jTtoolBarDetalleAuxiliarCuentaContable;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentaContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentaContable;
			processRunnable.jTableDatos=jTableDatosCuentaContable;
			processRunnable.jPanelCampos=jPanelCamposCuentaContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentaContable;
			processRunnable.jPanelAcciones=jPanelAccionesCuentaContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentaContable;
			
			
			processRunnable.jmenuBar=jmenuBarCuentaContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentaContable;
			processRunnable.jTtoolBar=jTtoolBarCuentaContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentaContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasCuentaContable ,jPanelParametrosReportesCuentaContable, jTableDatosCuentaContable,/*jScrollPanelDatosCuentaContable,*/jPanelCamposCuentaContable,jPanelPaginacionCuentaContable, /*jScrollPanelDatosEdicionCuentaContable,*/ jPanelAccionesCuentaContable,jPanelAccionesFormularioCuentaContable,jmenuBarCuentaContable,jmenuBarDetalleCuentaContable,jTtoolBarCuentaContable,jTtoolBarDetalleCuentaContable));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarCuentaContable(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuCuentaContable(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarCuentaContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleCuentaContable,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarCuentaContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleCuentaContable,esHabilitar,1,1);
		}
	}
	*/
	
	
	public void getTodosCuentaContableArbol() throws Exception {	
		ArrayList<String> arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral);
		
		String  finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);
		
		this.pagination=new Pagination();
		
		this.pagination.setiFirstResult(-1);
		this.pagination.setiMaxResults(-1);
		
		this.cargarDatosCliente();
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			cuentacontableLogic.getTodosCuentaContables(finalQueryGlobal+"",this.pagination);//WithConnection
			this.cuentacontablesArbol=cuentacontableLogic.getCuentaContables();
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
	}
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.cuentacontableConstantesFunciones.getsFinalQueryCuentaContable();
		String  finalQueryPaginacionTodos=this.cuentacontableConstantesFunciones.getsFinalQueryCuentaContable();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=CuentaContableConstantesFunciones.getArrayColumnasGlobalesNoCuentaContable(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.cuentacontablesEliminados= new ArrayList<CuentaContable>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessCuentaContable();
		
				///*CuentaContableSessionBean*/this.cuentacontableSessionBean=new CuentaContableSessionBean();
			
			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=CuentaContableConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=CuentaContableConstantesFunciones.getClassesForeignKeysOfCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/cuentacontable."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			cuentacontablesAux= new ArrayList<CuentaContable>();
			
				
			cuentacontableLogic.setDatosCliente(this.datosCliente);
			cuentacontableLogic.setDatosDeep(this.datosDeep);
			cuentacontableLogic.setIsConDeep(true);
			
			
			cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					cuentacontableLogic.getTodosCuentaContables(finalQueryGlobal,pagination);
					
					//cuentacontableLogic.getTodosCuentaContablesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(cuentacontableLogic.getCuentaContables()==null|| cuentacontableLogic.getCuentaContables().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentacontablesAux= new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux= new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentacontableLogic.getTodosCuentaContables(finalQueryGlobal+"",this.pagination);												
							
							//cuentacontableLogic.getTodosCuentaContablesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteCuentaContables("Todos",cuentacontableLogic.getCuentaContables() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());					
							cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idCuentaContable=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idCuentaContable=this.idActual;
				
				} else if(this.idCuentaContableActual!=null && this.idCuentaContableActual!=0L) {
					idCuentaContable=idCuentaContableActual;
				}
				
					
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndicePorId(idCuentaContable);
				
				this.cuentacontables=new ArrayList<CuentaContable>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					cuentacontableLogic.getEntity(idCuentaContable);
					
					//cuentacontableLogic.getEntityWithConnection(idCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
					cuentacontableLogic.getCuentaContables().add(cuentacontableLogic.getCuentaContable());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontables=new ArrayList<CuentaContable>();
					this.cuentacontables.add(cuentacontable);
				}
				
				if(cuentacontableLogic.getCuentaContable()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("BusquedaPorCodigo",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("BusquedaPorCodigo",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNombre")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("BusquedaPorNombre",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("BusquedaPorNombre",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdCentroCosto",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdCentroCosto",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContable")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdCuentaContable",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdCuentaContable",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdEmpresa",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdEmpresa",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdModulo",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdModulo",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNivelCuenta")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdNivelCuenta(id_nivel_cuentaFK_IdNivelCuenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdNivelCuenta(finalQueryGlobal,pagination,id_nivel_cuentaFK_IdNivelCuenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdNivelCuenta(id_nivel_cuentaFK_IdNivelCuenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdNivelCuenta(id_nivel_cuentaFK_IdNivelCuenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdNivelCuenta(finalQueryGlobal,pagination,id_nivel_cuentaFK_IdNivelCuenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdNivelCuenta(id_nivel_cuentaFK_IdNivelCuenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdNivelCuenta(id_nivel_cuentaFK_IdNivelCuenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdNivelCuenta",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdNivelCuenta",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoFlujoEfectivo")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoFlujoEfectivo(id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdTipoFlujoEfectivo(finalQueryGlobal,pagination,id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoFlujoEfectivo(id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoFlujoEfectivo(id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdTipoFlujoEfectivo(finalQueryGlobal,pagination,id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoFlujoEfectivo(id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoFlujoEfectivo(id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdTipoFlujoEfectivo",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdTipoFlujoEfectivo",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoIntervalo")) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoIntervalo(id_tipo_intervaloFK_IdTipoIntervalo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentacontableLogic.getCuentaContablesFK_IdTipoIntervalo(finalQueryGlobal,pagination,id_tipo_intervaloFK_IdTipoIntervalo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoIntervalo(id_tipo_intervaloFK_IdTipoIntervalo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoIntervalo(id_tipo_intervaloFK_IdTipoIntervalo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentacontableLogic.getCuentaContables()==null||cuentacontableLogic.getCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentacontables==null|| cuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontablesAux=new ArrayList<CuentaContable>();
						cuentacontablesAux.addAll(cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontablesAux=new ArrayList<CuentaContable>();
							cuentacontablesAux.addAll(cuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentacontableLogic.getCuentaContablesFK_IdTipoIntervalo(finalQueryGlobal,pagination,id_tipo_intervaloFK_IdTipoIntervalo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoIntervalo(id_tipo_intervaloFK_IdTipoIntervalo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaContableConstantesFunciones.getDetalleIndiceFK_IdTipoIntervalo(id_tipo_intervaloFK_IdTipoIntervalo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaContables("FK_IdTipoIntervalo",cuentacontableLogic.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaContables("FK_IdTipoIntervalo",cuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableLogic.setCuentaContables(new ArrayList<CuentaContable>());
						cuentacontableLogic.getCuentaContables().addAll(cuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontables=new ArrayList<CuentaContable>();
							cuentacontables.addAll(cuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesCuentaContable();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessCuentaContable();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentacontableLogic.getCuentaContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentacontables.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentacontableLogic.getCuentaContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentacontables.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(CuentaContable cuentacontable) {
		Boolean permite=true;
		
		if(this.cuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=CuentaContableConstantesFunciones.getOrderByListaCuentaContable();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=CuentaContableConstantesFunciones.getOrderByListaCuentaContable();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaContable cuentacontable:cuentacontableLogic.getCuentaContables()) {
				if(cuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					cuentacontableTotales=cuentacontable;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaContable cuentacontable:this.cuentacontables) {
				if(cuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					cuentacontableTotales=cuentacontable;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.cuentacontableAux=new CuentaContable();
			this.cuentacontableAux.setsType(Constantes2.S_TOTALES);
			this.cuentacontableAux.setIsNew(false);
			this.cuentacontableAux.setIsChanged(false);
			this.cuentacontableAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				CuentaContableConstantesFunciones.TotalizarValoresFilaCuentaContable(this.cuentacontableLogic.getCuentaContables(),this.cuentacontableAux);
				
				this.cuentacontableLogic.getCuentaContables().add(this.cuentacontableAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				CuentaContableConstantesFunciones.TotalizarValoresFilaCuentaContable(this.cuentacontables,this.cuentacontableAux);
				
				this.cuentacontables.add(this.cuentacontableAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		cuentacontableTotales=new CuentaContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentacontableLogic.getCuentaContables().remove(cuentacontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentacontables.remove(cuentacontableTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		cuentacontableTotales=new CuentaContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaContable cuentacontable:cuentacontableLogic.getCuentaContables()) {
				if(cuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					cuentacontableTotales=cuentacontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentaContableConstantesFunciones.TotalizarValoresFilaCuentaContable(this.cuentacontableLogic.getCuentaContables(),cuentacontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaContable cuentacontable:this.cuentacontables) {
				if(cuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					cuentacontableTotales=cuentacontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentaContableConstantesFunciones.TotalizarValoresFilaCuentaContable(this.cuentacontables,cuentacontableTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getCuentaContablesBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesBusquedaPorNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdCuentaContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdCuentaContableDebito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDebito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdNivelCuenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdNivelCuenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdTipoFlujoEfectivo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoFlujoEfectivo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaContablesFK_IdTipoIntervalo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoIntervalo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getCuentaContablesBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesBusquedaPorNombre(String sFinalQuery,String nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesBusquedaPorNombre(sFinalQuery,this.pagination,nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdCuentaContable(String sFinalQuery,Long id_cuenta_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdCuentaContable(sFinalQuery,this.pagination,id_cuenta_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdCuentaContableDebito(String sFinalQuery,Long id_cuenta_contable_debito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdCuentaContableDebito(sFinalQuery,this.pagination,id_cuenta_contable_debito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdNivelCuenta(String sFinalQuery,Long id_nivel_cuenta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdNivelCuenta(sFinalQuery,this.pagination,id_nivel_cuenta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdTipoFlujoEfectivo(String sFinalQuery,Long id_tipo_flujo_efectivo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdTipoFlujoEfectivo(sFinalQuery,this.pagination,id_tipo_flujo_efectivo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaContablesFK_IdTipoIntervalo(String sFinalQuery,Long id_tipo_intervalo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getCuentaContablesFK_IdTipoIntervalo(sFinalQuery,this.pagination,id_tipo_intervalo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosCuentaContable() {
		this.isPermisoTodoCuentaContable=false;
		this.isPermisoNuevoCuentaContable=false;
		this.isPermisoActualizarCuentaContable=false;
		this.isPermisoActualizarOriginalCuentaContable=false;
		this.isPermisoEliminarCuentaContable=false;
		this.isPermisoGuardarCambiosCuentaContable=false;
		this.isPermisoConsultaCuentaContable=false;
		this.isPermisoBusquedaCuentaContable=false;
		this.isPermisoReporteCuentaContable=false;		
		this.isPermisoOrdenCuentaContable=false;		
		this.isPermisoPaginacionMedioCuentaContable=false;		
		this.isPermisoPaginacionAltoCuentaContable=false;
		this.isPermisoPaginacionTodoCuentaContable=false;
		this.isPermisoCopiarCuentaContable=false;		
		this.isPermisoVerFormCuentaContable=false;		
		this.isPermisoDuplicarCuentaContable=false;		
		this.isPermisoOrdenCuentaContable=false;		
	}
	
	public void setPermisosUsuarioCuentaContable(Boolean isPermiso) {
		this.isPermisoTodoCuentaContable=isPermiso;
		this.isPermisoNuevoCuentaContable=isPermiso;
		this.isPermisoActualizarCuentaContable=isPermiso;
		this.isPermisoActualizarOriginalCuentaContable=isPermiso;
		this.isPermisoEliminarCuentaContable=isPermiso;
		this.isPermisoGuardarCambiosCuentaContable=isPermiso;
		this.isPermisoConsultaCuentaContable=isPermiso;
		this.isPermisoBusquedaCuentaContable=isPermiso;
		this.isPermisoReporteCuentaContable=isPermiso;
		this.isPermisoOrdenCuentaContable=isPermiso;		
		this.isPermisoPaginacionMedioCuentaContable=isPermiso;		
		this.isPermisoPaginacionAltoCuentaContable=isPermiso;		
		this.isPermisoPaginacionTodoCuentaContable=isPermiso;		
		this.isPermisoCopiarCuentaContable=isPermiso;		
		this.isPermisoVerFormCuentaContable=isPermiso;		
		this.isPermisoDuplicarCuentaContable=isPermiso;
		this.isPermisoOrdenCuentaContable=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioCuentaContable(Boolean isPermiso) {
		//this.isPermisoTodoCuentaContable=isPermiso;
		this.isPermisoNuevoCuentaContable=isPermiso;
		this.isPermisoActualizarCuentaContable=isPermiso;
		this.isPermisoActualizarOriginalCuentaContable=isPermiso;
		this.isPermisoEliminarCuentaContable=isPermiso;
		this.isPermisoGuardarCambiosCuentaContable=isPermiso;
		//this.isPermisoConsultaCuentaContable=isPermiso;
		//this.isPermisoBusquedaCuentaContable=isPermiso;
		//this.isPermisoReporteCuentaContable=isPermiso;
		//this.isPermisoOrdenCuentaContable=isPermiso;		
		//this.isPermisoPaginacionMedioCuentaContable=isPermiso;		
		//this.isPermisoPaginacionAltoCuentaContable=isPermiso;		
		//this.isPermisoPaginacionTodoCuentaContable=isPermiso;		
		//this.isPermisoCopiarCuentaContable=isPermiso;		
		//this.isPermisoDuplicarCuentaContable=isPermiso;
		//this.isPermisoOrdenCuentaContable=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioCuentaContableClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(CuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebCuentaContable(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioCuentaContableClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioCuentaContableClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionCuentaContableClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioCuentaContableClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioCuentaContable() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(CuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, CuentaContableConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoCuentaContable=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarCuentaContable=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalCuentaContable=this.isPermisoActualizarCuentaContable;
			this.isPermisoEliminarCuentaContable=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosCuentaContable=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaCuentaContable=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaCuentaContable=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoCuentaContable=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteCuentaContable=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentaContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioCuentaContable=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoCuentaContable=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoCuentaContable=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarCuentaContable=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormCuentaContable=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarCuentaContable=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentaContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosCuentaContable.setToolTipText(this.jTableDatosCuentaContable.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioCuentaContable(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioCuentaContable(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(CuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(CuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioCuentaContable() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyCuentaContableListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.nivelcuentasForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.tipointervalosForeignKey=new ArrayList();
				this.tipoflujoefectivosForeignKey=new ArrayList();
				this.cuentacontabledebitosForeignKey=new ArrayList();
				this.cuentacontablecreditosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(CuentaContableJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyCuentaContableListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNivelCuentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoIntervaloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoFlujoEfectivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNivelCuentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.nivelcuentasForeignKey==null||this.nivelcuentasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NivelCuentaConstantesFunciones.getArrayColumnasGlobalesNivelCuenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NivelCuentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NivelCuentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosNivelCuentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIntervaloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipointervalosForeignKey==null||this.tipointervalosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoIntervaloConstantesFunciones.getArrayColumnasGlobalesTipoIntervalo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIntervaloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoIntervaloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoIntervalosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFlujoEfectivoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoflujoefectivosForeignKey==null||this.tipoflujoefectivosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoFlujoEfectivoConstantesFunciones.getArrayColumnasGlobalesTipoFlujoEfectivo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFlujoEfectivoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoFlujoEfectivoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoFlujoEfectivosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebitoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyCuentaContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			CuentaContableParameterReturnGeneral cuentacontableReturnGeneral=new CuentaContableParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_empresaCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_empresaCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalNivelCuenta="";

				if(((this.nivelcuentasForeignKey==null||this.nivelcuentasForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_nivel_cuentaCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_nivel_cuentaCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionNivelCuenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NivelCuentaConstantesFunciones.getArrayColumnasGlobalesNivelCuenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNivelCuenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NivelCuentaConstantesFunciones.TABLENAME);

						finalQueryGlobalNivelCuenta=Funciones.GetFinalQueryAppend(finalQueryGlobalNivelCuenta, "");
						finalQueryGlobalNivelCuenta+=NivelCuentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNivelCuentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNivelCuenta=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidNivelCuentaActual();
					}
				} else {
					finalQueryGlobalNivelCuenta="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_cuenta_contableCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_cuenta_contableCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_centro_costoCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_centro_costoCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_moduloCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_moduloCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_monedaCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_monedaCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalTipoIntervalo="";

				if(((this.tipointervalosForeignKey==null||this.tipointervalosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_tipo_intervaloCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_tipo_intervaloCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoIntervalo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoIntervaloConstantesFunciones.getArrayColumnasGlobalesTipoIntervalo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoIntervalo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIntervaloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoIntervalo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoIntervalo, "");
						finalQueryGlobalTipoIntervalo+=TipoIntervaloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoIntervalosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoIntervalo=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidTipoIntervaloActual();
					}
				} else {
					finalQueryGlobalTipoIntervalo="NONE";
				}


				String finalQueryGlobalTipoFlujoEfectivo="";

				if(((this.tipoflujoefectivosForeignKey==null||this.tipoflujoefectivosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_tipo_flujo_efectivoCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_tipo_flujo_efectivoCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoFlujoEfectivo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoFlujoEfectivoConstantesFunciones.getArrayColumnasGlobalesTipoFlujoEfectivo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoFlujoEfectivo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFlujoEfectivoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoFlujoEfectivo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoFlujoEfectivo, "");
						finalQueryGlobalTipoFlujoEfectivo+=TipoFlujoEfectivoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoFlujoEfectivosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoFlujoEfectivo=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidTipoFlujoEfectivoActual();
					}
				} else {
					finalQueryGlobalTipoFlujoEfectivo="NONE";
				}


				String finalQueryGlobalCuentaContableDebito="";

				if(((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDebito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDebito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDebito, "");
						finalQueryGlobalCuentaContableDebito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDebito=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidCuentaContableDebitoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDebito="NONE";
				}


				String finalQueryGlobalCuentaContableCredito="";

				if(((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0) && this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoCuentaContable)
					 || (this.esRecargarFks && this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoCuentaContable)) {

					if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCredito, "");
						finalQueryGlobalCuentaContableCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCredito=" WHERE " + ConstantesSql.ID + "="+cuentacontableSessionBean.getlidCuentaContableCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCredito="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				cuentacontableReturnGeneral=cuentacontableLogic.cargarCombosLoteForeignKeyCuentaContable(finalQueryGlobalEmpresa,finalQueryGlobalNivelCuenta,finalQueryGlobalCuentaContable,finalQueryGlobalCentroCosto,finalQueryGlobalModulo,finalQueryGlobalMoneda,finalQueryGlobalTipoIntervalo,finalQueryGlobalTipoFlujoEfectivo,finalQueryGlobalCuentaContableDebito,finalQueryGlobalCuentaContableCredito);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=cuentacontableReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalNivelCuenta.equals("NONE")) {
				this.nivelcuentasForeignKey=cuentacontableReturnGeneral.getnivelcuentasForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=cuentacontableReturnGeneral.getcuentacontablesForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=cuentacontableReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=cuentacontableReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=cuentacontableReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalTipoIntervalo.equals("NONE")) {
				this.tipointervalosForeignKey=cuentacontableReturnGeneral.gettipointervalosForeignKey();
			}

			if(!finalQueryGlobalTipoFlujoEfectivo.equals("NONE")) {
				this.tipoflujoefectivosForeignKey=cuentacontableReturnGeneral.gettipoflujoefectivosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDebito.equals("NONE")) {
				this.cuentacontabledebitosForeignKey=cuentacontableReturnGeneral.getcuentacontabledebitosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCredito.equals("NONE")) {
				this.cuentacontablecreditosForeignKey=cuentacontableReturnGeneral.getcuentacontablecreditosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyCuentaContable()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyNivelCuenta();
			this.addItemDefectoCombosForeignKeyCuentaContable();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyTipoIntervalo();
			this.addItemDefectoCombosForeignKeyTipoFlujoEfectivo();
			this.addItemDefectoCombosForeignKeyCuentaContableDebito();
			this.addItemDefectoCombosForeignKeyCuentaContableCredito();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.cuentacontableSessionBean==null) {
				this.cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNivelCuenta()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionNivelCuenta()) {
				NivelCuenta nivelcuenta=new NivelCuenta();
				NivelCuentaConstantesFunciones.setNivelCuentaDescripcion(nivelcuenta,Constantes.SMENSAJE_ESCOJA_OPCION);
				nivelcuenta.setId(null);

				if(!NivelCuentaConstantesFunciones.ExisteEnLista(this.nivelcuentasForeignKey,nivelcuenta,true)) {

					this.nivelcuentasForeignKey.add(0,nivelcuenta);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoIntervalo()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoIntervalo()) {
				TipoIntervalo tipointervalo=new TipoIntervalo();
				TipoIntervaloConstantesFunciones.setTipoIntervaloDescripcion(tipointervalo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipointervalo.setId(null);

				if(!TipoIntervaloConstantesFunciones.ExisteEnLista(this.tipointervalosForeignKey,tipointervalo,true)) {

					this.tipointervalosForeignKey.add(0,tipointervalo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoFlujoEfectivo()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoFlujoEfectivo()) {
				TipoFlujoEfectivo tipoflujoefectivo=new TipoFlujoEfectivo();
				TipoFlujoEfectivoConstantesFunciones.setTipoFlujoEfectivoDescripcion(tipoflujoefectivo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoflujoefectivo.setId(null);

				if(!TipoFlujoEfectivoConstantesFunciones.ExisteEnLista(this.tipoflujoefectivosForeignKey,tipoflujoefectivo,true)) {

					this.tipoflujoefectivosForeignKey.add(0,tipoflujoefectivo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDebito()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				CuentaContable cuentacontabledebito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledebito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledebito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledebitosForeignKey,cuentacontabledebito,true)) {

					this.cuentacontabledebitosForeignKey.add(0,cuentacontabledebito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCredito()throws Exception {
		try {

			if(!this.cuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				CuentaContable cuentacontablecredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditosForeignKey,cuentacontablecredito,true)) {

					this.cuentacontablecreditosForeignKey.add(0,cuentacontablecredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyCuentaContable()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyCuentaContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyCuentaContable()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaContable();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyCuentaContable(CuentaContable cuentacontable)throws Exception {	
		try {
			
			this.setActualNivelCuentaForeignKey(cuentacontable.getid_nivel_cuenta(),false,"Formulario");
			this.setActualCuentaContableForeignKey(cuentacontable.getid_cuenta_contable(),false,"Formulario");
			this.setActualCentroCostoForeignKey(cuentacontable.getid_centro_costo(),false,"Formulario");
			this.setActualModuloForeignKey(cuentacontable.getid_modulo(),false,"Formulario");
			this.setActualTipoIntervaloForeignKey(cuentacontable.getid_tipo_intervalo(),false,"Formulario");
			this.setActualTipoFlujoEfectivoForeignKey(cuentacontable.getid_tipo_flujo_efectivo(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(cuentacontable.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(cuentacontable.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyCuentaContable(CuentaContable cuentacontable,String sTipoEvento)throws Exception {	
		try {
			
			

				if(cuentacontable.getCuentaContable()!=null && !sTipoEvento.equals("id_cuenta_contableCuentaContable")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablesForeignKey.add(cuentacontable.getCuentaContable());

					this.addItemDefectoCombosForeignKeyCuentaContable();
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}

				if(cuentacontable.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoCuentaContable")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(cuentacontable.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(cuentacontable.getCuentaContableDebito()!=null && !sTipoEvento.equals("id_cuenta_contable_debitoCuentaContable")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledebitosForeignKey.add(cuentacontable.getCuentaContableDebito());

					this.addItemDefectoCombosForeignKeyCuentaContableDebito();
					this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
				}

				if(cuentacontable.getCuentaContableCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_creditoCuentaContable")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditosForeignKey.add(cuentacontable.getCuentaContableCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableCredito();
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyCuentaContable()throws Exception {	
		try {
			
			this.setActualNivelCuentaForeignKey(this.cuentacontableConstantesFunciones.getid_nivel_cuenta(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.cuentacontableConstantesFunciones.getid_cuenta_contable(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.cuentacontableConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualModuloForeignKey(this.cuentacontableConstantesFunciones.getid_modulo(),false,"Formulario");
			this.setActualTipoIntervaloForeignKey(this.cuentacontableConstantesFunciones.getid_tipo_intervalo(),false,"Formulario");
			this.setActualTipoFlujoEfectivoForeignKey(this.cuentacontableConstantesFunciones.getid_tipo_flujo_efectivo(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(this.cuentacontableConstantesFunciones.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(this.cuentacontableConstantesFunciones.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaContable()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyCuentaContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyCuentaContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroCuentaContable()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyCuentaContable()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameNivelCuentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameTipoIntervalosForeignKey("Todos");
			this.cargarCombosFrameTipoFlujoEfectivosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyCuentaContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNivelCuentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoIntervalosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoFlujoEfectivosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




















	
	

	public CuentaContableBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public CuentaContableBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public CuentaContableBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.cuentacontableSessionBean=new CuentaContableSessionBean(); 
		this.cuentacontableConstantesFunciones=new CuentaContableConstantesFunciones(); 
		this.cuentacontableBean=new CuentaContable();//(this.cuentacontableConstantesFunciones); 		
		this.cuentacontableReturnGeneral=new CuentaContableParameterReturnGeneral(); 
		
		this.cuentacontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.cuentacontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public CuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public CuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public CuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessCuentaContable(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.cuentacontableConstantesFunciones=new CuentaContableConstantesFunciones(); 
			this.cuentacontableBean=new CuentaContable();//this.cuentacontableConstantesFunciones); 			
			this.cuentacontableReturnGeneral=new CuentaContableParameterReturnGeneral(); 
		
			CuentaContableBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Cuenta Contable Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.cuentacontable=new CuentaContable();
			this.cuentacontables = new ArrayList<CuentaContable>();
			this.cuentacontablesAux = new ArrayList<CuentaContable>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic=new CuentaContableLogic();
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			//this.cuentacontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.cuentacontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormCuentaContable);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentaContable);	
					}
					
					if(this.jInternalFrameImportacionCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentaContable);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByCuentaContable);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormCuentaContable!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentaContable);
				this.jInternalFrameDetalleFormCuentaContable.setVisible(false);
				this.jInternalFrameDetalleFormCuentaContable.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentaContable);
					this.jInternalFrameReporteDinamicoCuentaContable.setVisible(false);
					this.jInternalFrameReporteDinamicoCuentaContable.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionCuentaContable);
					this.jInternalFrameImportacionCuentaContable.setVisible(false);
					this.jInternalFrameImportacionCuentaContable.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByCuentaContable);
					this.jInternalFrameOrderByCuentaContable.setVisible(false);
					this.jInternalFrameOrderByCuentaContable.setSelected(false);				
				}
				
			}
			
			this.cuentacontablesArbol= new ArrayList<CuentaContable>();
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTreeCuentaContable);    		
			}
			
			this.jDesktopPane.add(this.jInternalFrameTreeCuentaContable);
			this.jInternalFrameTreeCuentaContable.setVisible(false);
	        this.jInternalFrameTreeCuentaContable.setSelected(false);						
			
			if(!esParaBusquedaForeignKey) {
				this.getTodosCuentaContableArbol();
			}			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idCuentaContableActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=CuentaContableConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.cuentacontableReturnGeneral=new CuentaContableParameterReturnGeneral();
			
			this.cuentacontableParameterGeneral=new CuentaContableParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.cuentacontableLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(CuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentaContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentacontableSessionBean.getEsGuardarRelacionado(),this.cuentacontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentaContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentacontableSessionBean.getEsGuardarRelacionado(),this.cuentacontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaDuplicarCuentaContable=true;
			this.isVisibilidadCeldaCopiarCuentaContable=true;
			this.isVisibilidadCeldaVerFormCuentaContable=true;
			this.isVisibilidadCeldaOrdenCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=false;
			this.isVisibilidadCeldaGuardarCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNombre=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableDebito=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdNivelCuenta=true;
			this.isVisibilidadFK_IdTipoFlujoEfectivo=true;
			this.isVisibilidadFK_IdTipoIntervalo=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosCuentaContable();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioCuentaContable(false);
			
			this.setPermisosUsuarioCuentaContable();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentacontableSessionBean.getEsGuardarRelacionado() 
				|| (this.cuentacontableSessionBean.getEsGuardarRelacionado() && this.cuentacontableSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioCuentaContableClasesRelacionadas();
			}
			
			if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioCuentaContableClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosCuentaContable();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualCuentaContable();
			}
			
			if(!this.isPermisoBusquedaCuentaContable) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasCuentaContable.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioCuentaContable,this.isPermisoPaginacionMedioCuentaContable,this.isPermisoPaginacionTodoCuentaContable);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(CuentaContableConstantesFunciones.getTiposSeleccionarCuentaContable());
				
				this.tiposColumnasSelect=CuentaContableConstantesFunciones.getTiposSeleccionarCuentaContable(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioCuentaContable();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioCuentaContable(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioCuentaContable(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaContable() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.nivelcuentaLogic=new NivelCuentaLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.moduloLogic=new ModuloLogic();
			this.monedaLogic=new MonedaLogic();
			this.tipointervaloLogic=new TipoIntervaloLogic();
			this.tipoflujoefectivoLogic=new TipoFlujoEfectivoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				cuentacontableImplementable= (CuentaContableImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentaContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				cuentacontableImplementableHome= (CuentaContableImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentaContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.cuentacontables= new ArrayList<CuentaContable>();
			this.cuentacontablesEliminados= new ArrayList<CuentaContable>();
						
			this.isEsNuevoCuentaContable=false;
			this.esParaAccionDesdeFormularioCuentaContable=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableActual=0L;
			this.idCentroCostoActual=0L;
			this.idCuentaContableDebitoActual=0L;
			this.idCuentaContableCreditoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.nivelcuentasForeignKey=new ArrayList<NivelCuenta>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.tipointervalosForeignKey=new ArrayList<TipoIntervalo>() ;
			this.tipoflujoefectivosForeignKey=new ArrayList<TipoFlujoEfectivo>() ;
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyCuentaContable(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroCuentaContable();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			CuentaContableBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=CuentaContableConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingCuentaContable(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioCuentaContable();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioCuentaContable();
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasCuentaContable.getTabCount(); i++) {
					this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessCuentaContable(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga CuentaContable: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectCuentaContable() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesCuentaContable")) {
				iIndex=this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessCuentaContable();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyCuentaContable(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyCuentaContableListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyCuentaContable();
		
		this.cargarCombosFrameForeignKeyCuentaContable();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyCuentaContable();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyCuentaContable();
		}
	}
	
	

	public void cargarCombosForeignKeyNivelCuenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNivelCuentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNivelCuenta();
				this.cargarCombosFrameNivelCuentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaNivelCuenta(this.nivelcuentasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaModulo(this.modulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIntervalo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoIntervaloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoIntervalo();
				this.cargarCombosFrameTipoIntervalosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoIntervalo(this.tipointervalosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFlujoEfectivo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoFlujoEfectivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoFlujoEfectivo();
				this.cargarCombosFrameTipoFlujoEfectivosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoFlujoEfectivo(this.tipoflujoefectivosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDebito(this.cuentacontabledebitosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoCuentaContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			
			if(jTableDatosCuentaContable.getRowCount()>=1) {
				jTableDatosCuentaContable.removeRowSelectionInterval(0, jTableDatosCuentaContable.getRowCount()-1);						
			}
			
			this.isEsNuevoCuentaContable=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoCuentaContable(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesCuentaContable(true);			
			//this.cuentacontable=new CuentaContable();
			//this.cuentacontable.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaContable(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaContable() ;
			
			if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaContable(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.cuentacontable);	
			this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);				
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar CuentaContable: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarCuentaContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosCuentaContable.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosCuentaContable.getSelectedRows().length;			
			}
			
			cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoCuentaContable--;			
				//CuentaContable cuentacontableAux= new CuentaContable();			
				//cuentacontableAux.setId(this.iIdNuevoCuentaContable);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//CuentaContable cuentacontableOrigen=new CuentaContable();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(CuentaContable cuentacontableOrigen : cuentacontablesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							cuentacontableOrigen =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentacontableOrigen =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaCuentaContable();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.cuentacontable.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosCuentaContable(cuentacontableOrigen,this.cuentacontable,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentacontableLogic.getCuentaContables().add(this.cuentacontableAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentacontables.add(this.cuentacontableAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaCuentaContable(false);
				
				this.jTableDatosCuentaContable.setRowSelectionInterval(this.getIndiceNuevoCuentaContable(), this.getIndiceNuevoCuentaContable());
				
				int iLastRow =  this.jTableDatosCuentaContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentaContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentaContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaContable(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();									
		
			CuentaContable cuentacontableOrigen=new CuentaContable();
			CuentaContable cuentacontableDestino=new CuentaContable();
				
			cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosCuentaContable.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || cuentacontablesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosCuentaContable.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableOrigen =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentacontableOrigen =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentacontableDestino =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentacontableDestino =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				cuentacontableOrigen =cuentacontablesSeleccionados.get(0);
				cuentacontableDestino =cuentacontablesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosCuentaContable(cuentacontableOrigen,cuentacontableDestino,true,false);
				
				cuentacontableDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentacontableDestino,cuentacontableLogic.getCuentaContables());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentacontableDestino,cuentacontables);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaCuentaContable(false);
				
				//this.jTableDatosCuentaContable.setRowSelectionInterval(this.getIndiceNuevoCuentaContable(), this.getIndiceNuevoCuentaContable());
				
				int iLastRow =  this.jTableDatosCuentaContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentaContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentaContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaContable(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormCuentaContable.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesCuentaContable.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasCuentaContable.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesCuentaContable.setVisible(!isVisible);
			this.jPanelPaginacionCuentaContable.setVisible(!isVisible);
			this.jPanelAccionesCuentaContable.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameCuentaContable();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByCuentaContable();
			
			this.abrirFrameOrderByCuentaContable();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleCuentaContable(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentaContable);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormCuentaContable.isMaximum()) {
					this.jInternalFrameDetalleFormCuentaContable.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormCuentaContable.setSize(this.jInternalFrameDetalleFormCuentaContable.iWidthFormulario,this.jInternalFrameDetalleFormCuentaContable.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormCuentaContable.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormCuentaContable.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormCuentaContable.isMaximum()) {
						this.jInternalFrameDetalleFormCuentaContable.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormCuentaContable.jContentPaneDetalleCuentaContable.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormCuentaContable.jContentPaneDetalleCuentaContable.getWidth(),CuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormCuentaContable.jContentPaneDetalleCuentaContable.getWidth(),CuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormCuentaContable.jContentPaneDetalleCuentaContable.getWidth(),CuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormCuentaContable.setVisible(true);
	        this.jInternalFrameDetalleFormCuentaContable.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByCuentaContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByCuentaContable==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByCuentaContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentaContable,false,this);
				} else {
					this.jInternalFrameOrderByCuentaContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentaContable,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByCuentaContable);
				this.jInternalFrameOrderByCuentaContable.setVisible(false);
				this.jInternalFrameOrderByCuentaContable.setSelected(false);
				
				this.jInternalFrameOrderByCuentaContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentaContable"));
				
				this.inicializarActualizarBindingTablaOrderByCuentaContable();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionCuentaContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionCuentaContable==null) {
				
				this.jInternalFrameImportacionCuentaContable=new ImportacionJInternalFrame(CuentaContableConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentaContable);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionCuentaContable);
				this.jInternalFrameImportacionCuentaContable.setVisible(false);
				this.jInternalFrameImportacionCuentaContable.setSelected(false);


				this.jInternalFrameImportacionCuentaContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentaContable"));
				this.jInternalFrameImportacionCuentaContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentaContable"));
				this.jInternalFrameImportacionCuentaContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentaContable"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoCuentaContable() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoCuentaContable==null) {
				this.jInternalFrameReporteDinamicoCuentaContable=new ReporteDinamicoJInternalFrame(CuentaContableConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentaContable);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentaContable);
				this.jInternalFrameReporteDinamicoCuentaContable.setVisible(false);
				this.jInternalFrameReporteDinamicoCuentaContable.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaContable"));
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaContable"));
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaContable"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaContable();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleCuentaContable() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentaContable);
			
	       	this.jInternalFrameDetalleFormCuentaContable.setVisible(false);
	        this.jInternalFrameDetalleFormCuentaContable.setSelected(false);
			
			//this.jInternalFrameDetalleFormCuentaContable.dispose();
			//this.jInternalFrameDetalleFormCuentaContable=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoCuentaContable() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoCuentaContable.setVisible(true);
	        this.jInternalFrameReporteDinamicoCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionCuentaContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionCuentaContable.setVisible(true);
	        this.jInternalFrameImportacionCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByCuentaContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByCuentaContable.setVisible(true);
	        this.jInternalFrameOrderByCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByCuentaContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByCuentaContable.setVisible(false);
	        this.jInternalFrameOrderByCuentaContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoCuentaContable() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoCuentaContable.setVisible(false);
	        this.jInternalFrameReporteDinamicoCuentaContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionCuentaContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionCuentaContable.setVisible(false);
	        this.jInternalFrameImportacionCuentaContable.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	 public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
			
			this.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);
			
			if(sTipoProceso.equals("BUSQUEDA_FK")) {
				this.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
			}
			
			this.jInternalFrameTreeCuentaContable.setCuentaContables(this.cuentacontablesArbol);
			this.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
			
	       	this.jInternalFrameTreeCuentaContable.setVisible(true);
	        this.jInternalFrameTreeCuentaContable.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			e.getStackTrace();
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTreeCuentaContable() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
			
	       	this.jInternalFrameTreeCuentaContable.setVisible(false);
	        this.jInternalFrameTreeCuentaContable.setSelected(false);
			
			//this.jInternalFrameTreeCuentaContable.dispose();
			//this.jInternalFrameTreeCuentaContable=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderCuentaContable.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDebito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDebito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableDebito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDebito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDebito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCredito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarCuentaContable(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarCuentaContable(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesCuentaContable(true);
			//this.isEsNuevoCuentaContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaContable(false) ;
			
			if(cuentacontableSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaContable(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaCuentaContableActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarCuentaContable(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesCuentaContable(true);
			//this.isEsNuevoCuentaContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.cuentacontable.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesCuentaContable(false) ;
			
			if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaContable(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContable")) {
				if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contableCuentaContable) {
					this.cargarCombosCuentaContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentaContable(false,false);
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable (id);

				this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.cuentacontableConstantesFunciones.cargarid_centro_costoCuentaContable) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentaContable(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("CuentaContableDebito")) {
				if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoCuentaContable) {
					this.cargarCombosCuentaContableDebitosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentaContable(false,false);
					this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_debito (id);

				this.recargarComboTablaCuentaContableDebito(this.cuentacontabledebitosForeignKey);

			}
			
			if(sType.equals("CuentaContableCredito")) {
				if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoCuentaContable) {
					this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentaContable(false,false);
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (id);

				this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaNivelCuenta(List<NivelCuenta> nivelcuentasForeignKey)throws Exception{
		TableColumn tableColumnNivelCuenta=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA));
		TableCellEditor tableCellEditorNivelCuenta =tableColumnNivelCuenta.getCellEditor();

		NivelCuentaTableCell nivelcuentaTableCellFk=(NivelCuentaTableCell)tableCellEditorNivelCuenta;

		if(nivelcuentaTableCellFk!=null) {
			nivelcuentaTableCellFk.setnivelcuentasForeignKey(nivelcuentasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//nivelcuentaTableCellFk.setRowActual(intSelectedRow);
			//nivelcuentaTableCellFk.setnivelcuentasForeignKeyActual(nivelcuentasForeignKey);
		//}


		if(nivelcuentaTableCellFk!=null) {
			nivelcuentaTableCellFk.RecargarNivelCuentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaModulo(List<Modulo> modulosForeignKey)throws Exception{
		TableColumn tableColumnModulo=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDMODULO));
		TableCellEditor tableCellEditorModulo =tableColumnModulo.getCellEditor();

		ModuloTableCell moduloTableCellFk=(ModuloTableCell)tableCellEditorModulo;

		if(moduloTableCellFk!=null) {
			moduloTableCellFk.setmodulosForeignKey(modulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//moduloTableCellFk.setRowActual(intSelectedRow);
			//moduloTableCellFk.setmodulosForeignKeyActual(modulosForeignKey);
		//}


		if(moduloTableCellFk!=null) {
			moduloTableCellFk.RecargarModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTipoIntervalo(List<TipoIntervalo> tipointervalosForeignKey)throws Exception{
		TableColumn tableColumnTipoIntervalo=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO));
		TableCellEditor tableCellEditorTipoIntervalo =tableColumnTipoIntervalo.getCellEditor();

		TipoIntervaloTableCell tipointervaloTableCellFk=(TipoIntervaloTableCell)tableCellEditorTipoIntervalo;

		if(tipointervaloTableCellFk!=null) {
			tipointervaloTableCellFk.settipointervalosForeignKey(tipointervalosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipointervaloTableCellFk.setRowActual(intSelectedRow);
			//tipointervaloTableCellFk.settipointervalosForeignKeyActual(tipointervalosForeignKey);
		//}


		if(tipointervaloTableCellFk!=null) {
			tipointervaloTableCellFk.RecargarTipoIntervalosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoFlujoEfectivo(List<TipoFlujoEfectivo> tipoflujoefectivosForeignKey)throws Exception{
		TableColumn tableColumnTipoFlujoEfectivo=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO));
		TableCellEditor tableCellEditorTipoFlujoEfectivo =tableColumnTipoFlujoEfectivo.getCellEditor();

		TipoFlujoEfectivoTableCell tipoflujoefectivoTableCellFk=(TipoFlujoEfectivoTableCell)tableCellEditorTipoFlujoEfectivo;

		if(tipoflujoefectivoTableCellFk!=null) {
			tipoflujoefectivoTableCellFk.settipoflujoefectivosForeignKey(tipoflujoefectivosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoflujoefectivoTableCellFk.setRowActual(intSelectedRow);
			//tipoflujoefectivoTableCellFk.settipoflujoefectivosForeignKeyActual(tipoflujoefectivosForeignKey);
		//}


		if(tipoflujoefectivoTableCellFk!=null) {
			tipoflujoefectivoTableCellFk.RecargarTipoFlujoEfectivosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDebito(List<CuentaContable> cuentacontabledebitosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDebito=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));
		TableCellEditor tableCellEditorCuentaContableDebito =tableColumnCuentaContableDebito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDebito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledebitosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledebitosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCredito(List<CuentaContable> cuentacontablecreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCredito=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));
		TableCellEditor tableCellEditorCuentaContableCredito =tableColumnCuentaContableCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable (Long id) throws Exception {
		this.setActualCuentaContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_debito (Long id) throws Exception {
		this.setActualCuentaContableDebitoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (Long id) throws Exception {
		this.setActualCuentaContableCreditoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesCuentaContable(false);
			
			//if(!this.isEsNuevoCuentaContable) {								
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				
			}
			
			if(this.permiteMantenimiento(this.cuentacontable)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoCuentaContable=true;
					this.inicializarActualizarBindingTablaCuentaContable(false);
					this.isEsNuevoCuentaContable=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoCuentaContable=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoCuentaContable=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentaContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaContable(false);
				
				this.habilitarDeshabilitarControlesCuentaContable(false);
			
												
				
				if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleCuentaContable();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoCuentaContableActionPerformed(evt,cuentacontableSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualCuentaContable(this.cuentacontable,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,cuentacontableSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.cuentacontable.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				this.cuentacontable.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				this.cuentacontable.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.cuentacontable)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((CuentaContableModel) this.jTableDatosCuentaContable.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoCuentaContable=true;
				this.inicializarActualizarBindingTablaCuentaContable(false);
				this.isEsNuevoCuentaContable=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentaContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaContable(false);
				
				this.habilitarDeshabilitarControlesCuentaContable(false);
				
				
				
				if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleCuentaContable();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarCuentaContableActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosCuentaContable.getRowCount()>=1) {
				jTableDatosCuentaContable.removeRowSelectionInterval(0, jTableDatosCuentaContable.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesCuentaContable(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaCuentaContable(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaContable(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaContable(false) ;
			
			this.isEsNuevoCuentaContable=false;
			
			if(CuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleCuentaContable();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingCuentaContable(false);
				
				//SI ES MANUAL
				if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualCuentaContable();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoCuentaContable--;			
			//CuentaContable cuentacontableAux= new CuentaContable();			
			//cuentacontableAux.setId(this.iIdNuevoCuentaContable);
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaCuentaContable();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
			
			this.cuentacontable.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.cuentacontableLogic.getCuentaContables().add(this.cuentacontableAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.cuentacontables.add(this.cuentacontableAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaCuentaContable(false);
			
			this.jTableDatosCuentaContable.setRowSelectionInterval(this.getIndiceNuevoCuentaContable(), this.getIndiceNuevoCuentaContable());
			
			int iLastRow =  this.jTableDatosCuentaContable.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosCuentaContable.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosCuentaContable.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaCuentaContable(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingCuentaContable(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaContable(false);
			
			//SI ES MANUAL
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaContable();
			}
			
			//this.abrirFrameTreeCuentaContable();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionCuentaContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Cuenta ContableS ?", "MANTENIMIENTO DE Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionCuentaContable.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralCuentaContable();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.cuentacontableReturnGeneral=cuentacontableLogic.procesarImportacionCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.cuentacontableParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarCuentaContableReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionCuentaContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionCuentaContable.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionCuentaContable.setFileImportacion(this.jInternalFrameImportacionCuentaContable.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionCuentaContable.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionCuentaContable.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionCuentaContable.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionCuentaContable.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		

		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("CuentaContableBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"CuentaContableBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoExtranjero_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoExtranjero_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoExtranjero_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoExtranjero_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreExtranjero_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreExtranjero_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreExtranjero_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreExtranjero_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NivelCuenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NivelCuenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NivelCuenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NivelCuenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Movimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Movimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Movimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Movimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroActividad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroActividad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroActividad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroActividad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESACTIVO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Activo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Activo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Activo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Activo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESRELACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Relacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Relacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Relacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Relacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ESPARAF52:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ParaF52_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ParaF52_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ParaF52_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ParaF52_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoIntervalo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoIntervalo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoIntervalo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoIntervalo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoFlujoEfectivo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoFlujoEfectivo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoFlujoEfectivo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoFlujoEfectivo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDebito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDebito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDebito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDebito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaContableConstantesFunciones.LABEL_ORDEN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_den_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_den_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_den_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_den_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoCuentaContable.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case CuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO:
					sNombreCampoCategoria="codigo_extranjero";
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO:
					sNombreCampoCategoria="nombre_extranjero";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA:
					sNombreCampoCategoria="id_nivel_cuenta";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case CuentaContableConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO:
					sNombreCampoCategoria="es_movimiento";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO:
					sNombreCampoCategoria="es_centro_costo";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD:
					sNombreCampoCategoria="es_centro_actividad";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESACTIVO:
					sNombreCampoCategoria="es_activo";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESRELACION:
					sNombreCampoCategoria="es_relacion";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESPARAF52:
					sNombreCampoCategoria="es_para_f52";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO:
					sNombreCampoCategoria="id_tipo_intervalo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO:
					sNombreCampoCategoria="id_tipo_flujo_efectivo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoria="id_cuenta_contable_debito";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoria="id_cuenta_contable_credito";
					break;

				case CuentaContableConstantesFunciones.LABEL_ORDEN:
					sNombreCampoCategoria="orden";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case CuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO:
					sNombreCampoCategoriaValor="codigo_extranjero";
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO:
					sNombreCampoCategoriaValor="nombre_extranjero";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA:
					sNombreCampoCategoriaValor="id_nivel_cuenta";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case CuentaContableConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO:
					sNombreCampoCategoriaValor="es_movimiento";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO:
					sNombreCampoCategoriaValor="es_centro_costo";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD:
					sNombreCampoCategoriaValor="es_centro_actividad";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESACTIVO:
					sNombreCampoCategoriaValor="es_activo";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESRELACION:
					sNombreCampoCategoriaValor="es_relacion";
					break;

				case CuentaContableConstantesFunciones.LABEL_ESPARAF52:
					sNombreCampoCategoriaValor="es_para_f52";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO:
					sNombreCampoCategoriaValor="id_tipo_intervalo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO:
					sNombreCampoCategoriaValor="id_tipo_flujo_efectivo";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_debito";
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito";
					break;

				case CuentaContableConstantesFunciones.LABEL_ORDEN:
					sNombreCampoCategoriaValor="orden";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Extranjero",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_extranjero");
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Extranjero",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_extranjero");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nivel Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_nivel_cuenta");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Padre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case CuentaContableConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_movimiento");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_centro_costo");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Centro Actividad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_centro_actividad");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESACTIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Activo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_activo");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESRELACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Relacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_relacion");
					break;

				case CuentaContableConstantesFunciones.LABEL_ESPARAF52:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Para F52",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_para_f52");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Intervalo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_intervalo");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T Flujo Efectivo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_flujo_efectivo");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Debito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_debito");
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito");
					break;

				case CuentaContableConstantesFunciones.LABEL_ORDEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Orden",sNombreCampoCategoria,sNombreCampoCategoriaValor,"orden");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoCuentaContableActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("CuentaContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case CuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcodigo_extranjero());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getnombre_extranjero());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getnivelcuenta_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_movimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_centro_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_centro_actividad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESACTIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESACTIVO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_activo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESRELACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESRELACION);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_relacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ESPARAF52:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESPARAF52);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getes_para_f52());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.gettipointervalo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.gettipoflujoefectivo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcuentacontabledebito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getcuentacontablecredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaContableConstantesFunciones.LABEL_ORDEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ORDEN);
					iRow++;

					for(CuentaContable cuentacontable:cuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentacontable.getorden());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelCuentaContable(row);				
			//	iRow++;
			//}				
			
			//for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelCuentaContable(cuentacontableAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	public void jButtonArbolCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.abrirFrameTreeCuentaContable("BUSQUEDA_NORMAL");
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaContable(false);
			
			//SI ES MANUAL
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaContable();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaContable(false);
			
			//SI ES MANUAL
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentaContable();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaContable(false);
			
			//SI ES MANUAL
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentaContable();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaCuentaContable() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosCuentaContable.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosCuentaContable.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosCuentaContable.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosCuentaContable.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosCuentaContable.setMinimumSize(dimensionMinimum);
		this.jTableDatosCuentaContable.setMaximumSize(dimensionMaximum);
		this.jTableDatosCuentaContable.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingCuentaContable(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingCuentaContable(esInicializar,true);
	}
	
	public void inicializarActualizarBindingCuentaContable(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaCuentaContable(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesCuentaContable(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasCuentaContable(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaContable(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesCuentaContable(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!CuentaContableJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualCuentaContable() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaCuentaContable();
		
		this.inicializarActualizarBindingBotonesManualCuentaContable(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualCuentaContable();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaContable() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaContable(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaContable(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosCuentaContable.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosCuentaContable.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteCuentaContable.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormCuentaContable!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionNuevoCuentaContable.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionSinCerrarCuentaContable.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionSinMensajeCuentaContable.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosCuentaContable.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosCuentaContable.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteCuentaContable.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormCuentaContable!=null) {
				this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionNuevoCuentaContable.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionSinCerrarCuentaContable.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormCuentaContable.jCheckBoxPostAccionSinMensajeCuentaContable.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionCuentaContable.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionCuentaContable.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesCuentaContable.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesCuentaContable.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesCuentaContable.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarCuentaContable.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesCuentaContable.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesCuentaContable.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralCuentaContable.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesCuentaContable(Boolean esInicializar) throws Exception {
		try	{	
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaContable(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesCuentaContable() throws Exception {
		try	{
			if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentaContable();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentaContable() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentaContable() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesCuentaContable.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesCuentaContable.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesCuentaContable.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionCuentaContable.addItem(reporte);
			}
			
			
			if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionCuentaContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionCuentaContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesCuentaContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesCuentaContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarCuentaContable.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarCuentaContable.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaContable();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaContable() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentaContable.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
				
				if(this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentaContable.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoCuentaContable.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentaContable.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentaContable.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualCuentaContable()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextFieldcodigoBusquedaPorCodigoCuentaContable.getText();
		this.nombreBusquedaPorNombre=this.jTextAreanombreBusquedaPorNombreCuentaContable.getText();
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.getSelectedItem()!=null){this.id_cuenta_contableFK_IdCuentaContable=((CuentaContable)this.jComboBoxid_cuenta_contableFK_IdCuentaContableCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_moduloFK_IdModuloCuentaContable.getSelectedItem()!=null){this.id_moduloFK_IdModulo=((Modulo)this.jComboBoxid_moduloFK_IdModuloCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.getSelectedItem()!=null){this.id_nivel_cuentaFK_IdNivelCuenta=((NivelCuenta)this.jComboBoxid_nivel_cuentaFK_IdNivelCuentaCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.getSelectedItem()!=null){this.id_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo=((TipoFlujoEfectivo)this.jComboBoxid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.getSelectedItem()!=null){this.id_tipo_intervaloFK_IdTipoIntervalo=((TipoIntervalo)this.jComboBoxid_tipo_intervaloFK_IdTipoIntervaloCuentaContable.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasCuentaContable(Boolean esInicializar) throws Exception {				
		if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualCuentaContable();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaCuentaContable() throws Exception {
		this.inicializarActualizarBindingTablaCuentaContable(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByCuentaContable() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosCuentaContableOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContableOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaCuentaContable(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=cuentacontableLogic.getCuentaContables().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=cuentacontables.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosCuentaContable.setModel(new CuentaContableModel(this.cuentacontableLogic.getCuentaContables(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosCuentaContable.setModel(new CuentaContableModel(this.cuentacontables,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByCuentaContable!=null && this.jInternalFrameOrderByCuentaContable.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByCuentaContable();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+CuentaContableConstantesFunciones.SCLASSWEBTITULO,cuentacontableConstantesFunciones.resaltarSeleccionarCuentaContable,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+CuentaContableConstantesFunciones.SCLASSWEBTITULO,cuentacontableConstantesFunciones.resaltarSeleccionarCuentaContable,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ID));

		if(this.cuentacontableConstantesFunciones.mostraridCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cuentacontableConstantesFunciones.resaltaridCuentaContable,this.cuentacontableConstantesFunciones.activaridCuentaContable,this,true,"idCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltaridCuentaContable,this.cuentacontableConstantesFunciones.activaridCuentaContable,this,true,"idCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDEMPRESA));

		if(this.cuentacontableConstantesFunciones.mostrarid_empresaCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_empresaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_empresaCuentaContable));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_empresaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_empresaCuentaContable,false,"id_empresaCuentaContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_CODIGO));

		if(this.cuentacontableConstantesFunciones.mostrarcodigoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentacontableConstantesFunciones.resaltarcodigoCuentaContable,this.cuentacontableConstantesFunciones.activarcodigoCuentaContable,this,true,"codigoCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltarcodigoCuentaContable,this.cuentacontableConstantesFunciones.activarcodigoCuentaContable,this,true,"codigoCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_NOMBRE));

		if(this.cuentacontableConstantesFunciones.mostrarnombreCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentacontableConstantesFunciones.resaltarnombreCuentaContable,this.cuentacontableConstantesFunciones.activarnombreCuentaContable,this,true,"nombreCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltarnombreCuentaContable,this.cuentacontableConstantesFunciones.activarnombreCuentaContable,this,true,"nombreCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO));

		if(this.cuentacontableConstantesFunciones.mostrarcodigo_extranjeroCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentacontableConstantesFunciones.resaltarcodigo_extranjeroCuentaContable,this.cuentacontableConstantesFunciones.activarcodigo_extranjeroCuentaContable,this,true,"codigo_extranjeroCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltarcodigo_extranjeroCuentaContable,this.cuentacontableConstantesFunciones.activarcodigo_extranjeroCuentaContable,this,true,"codigo_extranjeroCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO));

		if(this.cuentacontableConstantesFunciones.mostrarnombre_extranjeroCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentacontableConstantesFunciones.resaltarnombre_extranjeroCuentaContable,this.cuentacontableConstantesFunciones.activarnombre_extranjeroCuentaContable,this,true,"nombre_extranjeroCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltarnombre_extranjeroCuentaContable,this.cuentacontableConstantesFunciones.activarnombre_extranjeroCuentaContable,this,true,"nombre_extranjeroCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA));

		if(this.cuentacontableConstantesFunciones.mostrarid_nivel_cuentaCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NivelCuentaTableCell(this.nivelcuentasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_nivel_cuentaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_nivel_cuentaCuentaContable));
			tableColumn.setCellEditor(new NivelCuentaTableCell(this.nivelcuentasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_nivel_cuentaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_nivel_cuentaCuentaContable,true,"id_nivel_cuentaCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE));

		if(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contableCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contableCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contableCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contableCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contableCuentaContable,true,"id_cuenta_contableCuentaContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.cuentacontableConstantesFunciones.mostrarid_centro_costoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_centro_costoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_centro_costoCuentaContable));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_centro_costoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_centro_costoCuentaContable,true,"id_centro_costoCuentaContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDMODULO));

		if(this.cuentacontableConstantesFunciones.mostrarid_moduloCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_moduloCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_moduloCuentaContable));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_moduloCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_moduloCuentaContable,true,"id_moduloCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_DESCRIPCION));

		if(this.cuentacontableConstantesFunciones.mostrardescripcionCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentacontableConstantesFunciones.resaltardescripcionCuentaContable,this.cuentacontableConstantesFunciones.activardescripcionCuentaContable,this,true,"descripcionCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltardescripcionCuentaContable,this.cuentacontableConstantesFunciones.activardescripcionCuentaContable,this,true,"descripcionCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO));

		if(this.cuentacontableConstantesFunciones.mostrares_movimientoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_movimientoCuentaContable,this.cuentacontableConstantesFunciones.activares_movimientoCuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_movimientoCuentaContable,this.cuentacontableConstantesFunciones.activares_movimientoCuentaContable,this,true,"es_movimientoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO));

		if(this.cuentacontableConstantesFunciones.mostrares_centro_costoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_centro_costoCuentaContable,this.cuentacontableConstantesFunciones.activares_centro_costoCuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_centro_costoCuentaContable,this.cuentacontableConstantesFunciones.activares_centro_costoCuentaContable,this,true,"es_centro_costoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD));

		if(this.cuentacontableConstantesFunciones.mostrares_centro_actividadCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_centro_actividadCuentaContable,this.cuentacontableConstantesFunciones.activares_centro_actividadCuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_centro_actividadCuentaContable,this.cuentacontableConstantesFunciones.activares_centro_actividadCuentaContable,this,true,"es_centro_actividadCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESACTIVO));

		if(this.cuentacontableConstantesFunciones.mostrares_activoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESACTIVO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_activoCuentaContable,this.cuentacontableConstantesFunciones.activares_activoCuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_activoCuentaContable,this.cuentacontableConstantesFunciones.activares_activoCuentaContable,this,true,"es_activoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESRELACION));

		if(this.cuentacontableConstantesFunciones.mostrares_relacionCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESRELACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_relacionCuentaContable,this.cuentacontableConstantesFunciones.activares_relacionCuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_relacionCuentaContable,this.cuentacontableConstantesFunciones.activares_relacionCuentaContable,this,true,"es_relacionCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ESPARAF52));

		if(this.cuentacontableConstantesFunciones.mostrares_para_f52CuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ESPARAF52,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentacontableConstantesFunciones.resaltares_para_f52CuentaContable,this.cuentacontableConstantesFunciones.activares_para_f52CuentaContable));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentacontableConstantesFunciones.resaltares_para_f52CuentaContable,this.cuentacontableConstantesFunciones.activares_para_f52CuentaContable,this,true,"es_para_f52CuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDMONEDA));

		if(this.cuentacontableConstantesFunciones.mostrarid_monedaCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_monedaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_monedaCuentaContable));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.cuentacontableConstantesFunciones.resaltarid_monedaCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_monedaCuentaContable,false,"id_monedaCuentaContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO));

		if(this.cuentacontableConstantesFunciones.mostrarid_tipo_intervaloCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoIntervaloTableCell(this.tipointervalosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_tipo_intervaloCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_tipo_intervaloCuentaContable));
			tableColumn.setCellEditor(new TipoIntervaloTableCell(this.tipointervalosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_tipo_intervaloCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_tipo_intervaloCuentaContable,true,"id_tipo_intervaloCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO));

		if(this.cuentacontableConstantesFunciones.mostrarid_tipo_flujo_efectivoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoFlujoEfectivoTableCell(this.tipoflujoefectivosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_tipo_flujo_efectivoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_tipo_flujo_efectivoCuentaContable));
			tableColumn.setCellEditor(new TipoFlujoEfectivoTableCell(this.tipoflujoefectivosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_tipo_flujo_efectivoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_tipo_flujo_efectivoCuentaContable,true,"id_tipo_flujo_efectivoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));

		if(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contable_debitoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contable_debitoCuentaContable,true,"id_cuenta_contable_debitoCuentaContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));

		if(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contable_creditoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoCuentaContable,this,this.cuentacontableConstantesFunciones.activarid_cuenta_contable_creditoCuentaContable,true,"id_cuenta_contable_creditoCuentaContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,CuentaContableConstantesFunciones.LABEL_ORDEN));

		if(this.cuentacontableConstantesFunciones.mostrarordenCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaContableConstantesFunciones.LABEL_ORDEN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cuentacontableConstantesFunciones.resaltarordenCuentaContable,this.cuentacontableConstantesFunciones.activarordenCuentaContable,this,true,"ordenCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentacontableConstantesFunciones.resaltarordenCuentaContable,this.cuentacontableConstantesFunciones.activarordenCuentaContable,this,true,"ordenCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentaContable.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentaContable.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarCuentaContable && this.isPermisoGuardarCambiosCuentaContable) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.cuentacontableSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosCuentaContable.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosCuentaContable.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentaContable && this.isPermisoGuardarCambiosCuentaContable) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentaContable && this.isPermisoGuardarCambiosCuentaContable) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosCuentaContable.moveColumn(this.jTableDatosCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosCuentaContable.moveColumn(this.jTableDatosCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosCuentaContable.moveColumn(this.jTableDatosCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosCuentaContable.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosCuentaContable.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosCuentaContable,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosCuentaContable.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosCuentaContable.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosCuentaContable.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosCuentaContable.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosCuentaContable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=cuentacontableLogic.getCuentaContables().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=cuentacontables.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosCuentaContable.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosCuentaContable();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoCuentaContable=false;
					
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
				if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormCuentaContable==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentaContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.cuentacontable.getsType().equals("DUPLICADO")
				   || this.cuentacontable.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoCuentaContable=true;
				
				} else {
					this.isEsNuevoCuentaContable=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					if(this.cuentacontable.getId()>=0 && !this.cuentacontable.getIsNew()) {						
						this.isEsNuevoCuentaContable=false;
						
					} else {
						this.isEsNuevoCuentaContable=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoCuentaContable(esRelaciones);						
				
				this.seleccionarCuentaContable(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.cuentacontable.getId()<0) {
					this.isEsNuevoCuentaContable=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarCuentaContable(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarCuentaContable(evt,rowIndex);
				}	
				
				if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion CuentaContable: " + this.dDif); 
					}
				}								
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarCuentaContable(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.cuentacontable)) {
					if(this.cuentacontable.getId()>0) {
						this.cuentacontable.setIsDeleted(true);
						
						this.cuentacontablesEliminados.add(this.cuentacontable);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentacontableLogic.getCuentaContables().remove(this.cuentacontable);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentacontables.remove(this.cuentacontable);				
					}
					
					
					((CuentaContableModel) this.jTableDatosCuentaContable.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaContable(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarCuentaContable(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoCuentaContable) {
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentaContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentaContable.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioCuentaContable(this.cuentacontable);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.cuentacontableConstantesFunciones.cargarid_empresaCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_empresaCuentaContable) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.cuentacontable.getid_empresa());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(cuentacontable.getEmpresa()!=null) {
							this.empresasForeignKey.add(cuentacontable.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.cuentacontable.getid_empresa(),false,"Formulario");

					//NivelCuenta
					if(!this.cuentacontableConstantesFunciones.cargarid_nivel_cuentaCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_nivel_cuentaCuentaContable) {
						//this.cargarCombosNivelCuentasForeignKeyLista(" where id="+this.cuentacontable.getid_nivel_cuenta());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.nivelcuentasForeignKey=new ArrayList<NivelCuenta>();

						if(cuentacontable.getNivelCuenta()!=null) {
							this.nivelcuentasForeignKey.add(cuentacontable.getNivelCuenta());
						}

						this.addItemDefectoCombosForeignKeyNivelCuenta();
						this.cargarCombosFrameNivelCuentasForeignKey("Todos");
					}
					this.setActualNivelCuentaForeignKey(this.cuentacontable.getid_nivel_cuenta(),false,"Formulario");

					//CuentaContable
					if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contableCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_cuenta_contableCuentaContable) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.cuentacontable.getid_cuenta_contable());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(cuentacontable.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(cuentacontable.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.cuentacontable.getid_cuenta_contable(),false,"Formulario");

					//CentroCosto
					if(!this.cuentacontableConstantesFunciones.cargarid_centro_costoCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_centro_costoCuentaContable) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.cuentacontable.getid_centro_costo());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(cuentacontable.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(cuentacontable.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.cuentacontable.getid_centro_costo(),false,"Formulario");

					//Modulo
					if(!this.cuentacontableConstantesFunciones.cargarid_moduloCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_moduloCuentaContable) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.cuentacontable.getid_modulo());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(cuentacontable.getModulo()!=null) {
							this.modulosForeignKey.add(cuentacontable.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.cuentacontable.getid_modulo(),false,"Formulario");

					//Moneda
					if(!this.cuentacontableConstantesFunciones.cargarid_monedaCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_monedaCuentaContable) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.cuentacontable.getid_moneda());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(cuentacontable.getMoneda()!=null) {
							this.monedasForeignKey.add(cuentacontable.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.cuentacontable.getid_moneda(),false,"Formulario");

					//TipoIntervalo
					if(!this.cuentacontableConstantesFunciones.cargarid_tipo_intervaloCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_tipo_intervaloCuentaContable) {
						//this.cargarCombosTipoIntervalosForeignKeyLista(" where id="+this.cuentacontable.getid_tipo_intervalo());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.tipointervalosForeignKey=new ArrayList<TipoIntervalo>();

						if(cuentacontable.getTipoIntervalo()!=null) {
							this.tipointervalosForeignKey.add(cuentacontable.getTipoIntervalo());
						}

						this.addItemDefectoCombosForeignKeyTipoIntervalo();
						this.cargarCombosFrameTipoIntervalosForeignKey("Todos");
					}
					this.setActualTipoIntervaloForeignKey(this.cuentacontable.getid_tipo_intervalo(),false,"Formulario");

					//TipoFlujoEfectivo
					if(!this.cuentacontableConstantesFunciones.cargarid_tipo_flujo_efectivoCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_tipo_flujo_efectivoCuentaContable) {
						//this.cargarCombosTipoFlujoEfectivosForeignKeyLista(" where id="+this.cuentacontable.getid_tipo_flujo_efectivo());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.tipoflujoefectivosForeignKey=new ArrayList<TipoFlujoEfectivo>();

						if(cuentacontable.getTipoFlujoEfectivo()!=null) {
							this.tipoflujoefectivosForeignKey.add(cuentacontable.getTipoFlujoEfectivo());
						}

						this.addItemDefectoCombosForeignKeyTipoFlujoEfectivo();
						this.cargarCombosFrameTipoFlujoEfectivosForeignKey("Todos");
					}
					this.setActualTipoFlujoEfectivoForeignKey(this.cuentacontable.getid_tipo_flujo_efectivo(),false,"Formulario");

					//CuentaContableDebito
					if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_cuenta_contable_debitoCuentaContable) {
						//this.cargarCombosCuentaContableDebitosForeignKeyLista(" where id="+this.cuentacontable.getid_cuenta_contable_debito());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

						if(cuentacontable.getCuentaContableDebito()!=null) {
							this.cuentacontabledebitosForeignKey.add(cuentacontable.getCuentaContableDebito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDebito();
						this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
					}
					this.setActualCuentaContableDebitoForeignKey(this.cuentacontable.getid_cuenta_contable_debito(),false,"Formulario");

					//CuentaContableCredito
					if(!this.cuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoCuentaContable || this.cuentacontableConstantesFunciones.event_dependid_cuenta_contable_creditoCuentaContable) {
						//this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+this.cuentacontable.getid_cuenta_contable_credito());
									//this.inicializarActualizarBindingCuentaContable(false,false);
						this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

						if(cuentacontable.getCuentaContableCredito()!=null) {
							this.cuentacontablecreditosForeignKey.add(cuentacontable.getCuentaContableCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCredito();
						this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoForeignKey(this.cuentacontable.getid_cuenta_contable_credito(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesCuentaContable("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesCuentaContable(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaContable() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentaContable(CuentaContable cuentacontable) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoCuentaContable(cuentacontable,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentaContable(CuentaContable cuentacontable,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioCuentaContable(cuentacontable);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyCuentaContable(cuentacontable,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyCuentaContable(cuentacontable);
	}
	
	public void setVariablesObjetoActualToFormularioCuentaContable(CuentaContable cuentacontable) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setText(cuentacontable.getId().toString());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setText(cuentacontable.getcodigo());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setText(cuentacontable.getnombre());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setText(cuentacontable.getcodigo_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setText(cuentacontable.getnombre_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setText(cuentacontable.getdescripcion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setSelected(cuentacontable.getes_movimiento());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setSelected(cuentacontable.getes_centro_costo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setSelected(cuentacontable.getes_centro_actividad());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setSelected(cuentacontable.getes_activo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setSelected(cuentacontable.getes_relacion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setSelected(cuentacontable.getes_para_f52());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setText(cuentacontable.getorden().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,CuentaContable cuentacontableLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,cuentacontableLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,CuentaContable cuentacontableLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				cuentacontableLocal=this.cuentacontable;
			} else {
				cuentacontableLocal=this.cuentacontableAnterior;
			}
		}
		
		if(this.permiteMantenimiento(cuentacontableLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableLocal,true);
					
					if(cuentacontableSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(cuentacontableLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(cuentacontableLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoCuentaContable(CuentaContable cuentacontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentaContable(cuentacontable,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(cuentacontable);
	}
	
	public void setVariablesFormularioToObjetoActualCuentaContable(CuentaContable cuentacontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentaContable(cuentacontable,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualCuentaContable(CuentaContable cuentacontable,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.getText()==null || this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.getText()=="" || this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.getText()=="Id") {
				this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setText("0");
			}

			if(conColumnasBase) {cuentacontable.setId(Long.parseLong(this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelIdCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setcodigo(this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigoCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setnombre(this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelnombreCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setcodigo_extranjero(this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelcodigo_extranjeroCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setnombre_extranjero(this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelnombre_extranjeroCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setdescripcion(this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeldescripcionCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_movimiento(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_movimientoCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_centro_costo(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_costoCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_centro_actividad(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_centro_actividadCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_activo(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESACTIVO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_activoCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_relacion(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESRELACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_relacionCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setes_para_f52(this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ESPARAF52+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabeles_para_f52CuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentacontable.setorden(Integer.parseInt(this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaContableConstantesFunciones.LABEL_ORDEN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaContable.jLabelordenCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentaContable(CuentaContable cuentacontableBean,CuentaContable cuentacontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && cuentacontableBean.getid_nivel_cuenta()!=null && !cuentacontableBean.getid_nivel_cuenta().equals(-1L))) {cuentacontable.setid_nivel_cuenta(cuentacontableBean.getid_nivel_cuenta());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_cuenta_contable()!=null && !cuentacontableBean.getid_cuenta_contable().equals(null))) {cuentacontable.setid_cuenta_contable(cuentacontableBean.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_centro_costo()!=null && !cuentacontableBean.getid_centro_costo().equals(null))) {cuentacontable.setid_centro_costo(cuentacontableBean.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_modulo()!=null && !cuentacontableBean.getid_modulo().equals(-1L))) {cuentacontable.setid_modulo(cuentacontableBean.getid_modulo());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_tipo_intervalo()!=null && !cuentacontableBean.getid_tipo_intervalo().equals(-1L))) {cuentacontable.setid_tipo_intervalo(cuentacontableBean.getid_tipo_intervalo());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_tipo_flujo_efectivo()!=null && !cuentacontableBean.getid_tipo_flujo_efectivo().equals(null))) {cuentacontable.setid_tipo_flujo_efectivo(cuentacontableBean.getid_tipo_flujo_efectivo());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_cuenta_contable_debito()!=null && !cuentacontableBean.getid_cuenta_contable_debito().equals(null))) {cuentacontable.setid_cuenta_contable_debito(cuentacontableBean.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && cuentacontableBean.getid_cuenta_contable_credito()!=null && !cuentacontableBean.getid_cuenta_contable_credito().equals(null))) {cuentacontable.setid_cuenta_contable_credito(cuentacontableBean.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosCuentaContable(CuentaContable cuentacontableOrigen,CuentaContable cuentacontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentacontableOrigen.getId()!=null && !cuentacontableOrigen.getId().equals(0L))) {cuentacontable.setId(cuentacontableOrigen.getId());}}
			if(conDefault || (!conDefault && cuentacontableOrigen.getcodigo()!=null && !cuentacontableOrigen.getcodigo().equals(""))) {cuentacontable.setcodigo(cuentacontableOrigen.getcodigo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getnombre()!=null && !cuentacontableOrigen.getnombre().equals(""))) {cuentacontable.setnombre(cuentacontableOrigen.getnombre());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getcodigo_extranjero()!=null && !cuentacontableOrigen.getcodigo_extranjero().equals(""))) {cuentacontable.setcodigo_extranjero(cuentacontableOrigen.getcodigo_extranjero());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getnombre_extranjero()!=null && !cuentacontableOrigen.getnombre_extranjero().equals(""))) {cuentacontable.setnombre_extranjero(cuentacontableOrigen.getnombre_extranjero());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_nivel_cuenta()!=null && !cuentacontableOrigen.getid_nivel_cuenta().equals(-1L))) {cuentacontable.setid_nivel_cuenta(cuentacontableOrigen.getid_nivel_cuenta());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_cuenta_contable()!=null && !cuentacontableOrigen.getid_cuenta_contable().equals(null))) {cuentacontable.setid_cuenta_contable(cuentacontableOrigen.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_centro_costo()!=null && !cuentacontableOrigen.getid_centro_costo().equals(null))) {cuentacontable.setid_centro_costo(cuentacontableOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_modulo()!=null && !cuentacontableOrigen.getid_modulo().equals(-1L))) {cuentacontable.setid_modulo(cuentacontableOrigen.getid_modulo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getdescripcion()!=null && !cuentacontableOrigen.getdescripcion().equals(""))) {cuentacontable.setdescripcion(cuentacontableOrigen.getdescripcion());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_movimiento()!=null && !cuentacontableOrigen.getes_movimiento().equals(false))) {cuentacontable.setes_movimiento(cuentacontableOrigen.getes_movimiento());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_centro_costo()!=null && !cuentacontableOrigen.getes_centro_costo().equals(false))) {cuentacontable.setes_centro_costo(cuentacontableOrigen.getes_centro_costo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_centro_actividad()!=null && !cuentacontableOrigen.getes_centro_actividad().equals(false))) {cuentacontable.setes_centro_actividad(cuentacontableOrigen.getes_centro_actividad());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_activo()!=null && !cuentacontableOrigen.getes_activo().equals(false))) {cuentacontable.setes_activo(cuentacontableOrigen.getes_activo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_relacion()!=null && !cuentacontableOrigen.getes_relacion().equals(false))) {cuentacontable.setes_relacion(cuentacontableOrigen.getes_relacion());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getes_para_f52()!=null && !cuentacontableOrigen.getes_para_f52().equals(false))) {cuentacontable.setes_para_f52(cuentacontableOrigen.getes_para_f52());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_tipo_intervalo()!=null && !cuentacontableOrigen.getid_tipo_intervalo().equals(-1L))) {cuentacontable.setid_tipo_intervalo(cuentacontableOrigen.getid_tipo_intervalo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_tipo_flujo_efectivo()!=null && !cuentacontableOrigen.getid_tipo_flujo_efectivo().equals(null))) {cuentacontable.setid_tipo_flujo_efectivo(cuentacontableOrigen.getid_tipo_flujo_efectivo());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_cuenta_contable_debito()!=null && !cuentacontableOrigen.getid_cuenta_contable_debito().equals(null))) {cuentacontable.setid_cuenta_contable_debito(cuentacontableOrigen.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getid_cuenta_contable_credito()!=null && !cuentacontableOrigen.getid_cuenta_contable_credito().equals(null))) {cuentacontable.setid_cuenta_contable_credito(cuentacontableOrigen.getid_cuenta_contable_credito());}
			if(conDefault || (!conDefault && cuentacontableOrigen.getorden()!=null && !cuentacontableOrigen.getorden().equals(0))) {cuentacontable.setorden(cuentacontableOrigen.getorden());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentaContable(CuentaContable cuentacontable) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setText(cuentacontable.getId().toString());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setText(cuentacontable.getcodigo());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setText(cuentacontable.getnombre());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setText(cuentacontable.getcodigo_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setText(cuentacontable.getnombre_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setText(cuentacontable.getdescripcion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setSelected(cuentacontable.getes_movimiento());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setSelected(cuentacontable.getes_centro_costo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setSelected(cuentacontable.getes_centro_actividad());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setSelected(cuentacontable.getes_activo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setSelected(cuentacontable.getes_relacion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setSelected(cuentacontable.getes_para_f52());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setText(cuentacontable.getorden().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentaContable(CuentaContableBean cuentacontableBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setText(cuentacontableBean.getId().toString());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setText(cuentacontableBean.getcodigo());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setText(cuentacontableBean.getnombre());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setText(cuentacontableBean.getcodigo_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setText(cuentacontableBean.getnombre_extranjero());
			this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setText(cuentacontableBean.getdescripcion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setSelected(cuentacontableBean.getes_movimiento());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setSelected(cuentacontableBean.getes_centro_costo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setSelected(cuentacontableBean.getes_centro_actividad());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setSelected(cuentacontableBean.getes_activo());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setSelected(cuentacontableBean.getes_relacion());
			this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setSelected(cuentacontableBean.getes_para_f52());
			this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setText(cuentacontableBean.getorden().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanCuentaContable(CuentaContableParameterReturnGeneral cuentacontableReturnGeneral,CuentaContableBean cuentacontableBean,Boolean conDefault) throws Exception { 
		try {
			CuentaContable cuentacontableLocal=new CuentaContable();
			
			cuentacontableLocal=cuentacontableReturnGeneral.getCuentaContable();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentacontableLocal.getId()!=null && !cuentacontableLocal.getId().equals(0L))) {cuentacontableBean.setId(cuentacontableLocal.getId());}}
			if(conDefault || (!conDefault && cuentacontableLocal.getcodigo()!=null && !cuentacontableLocal.getcodigo().equals(""))) {cuentacontableBean.setcodigo(cuentacontableLocal.getcodigo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getnombre()!=null && !cuentacontableLocal.getnombre().equals(""))) {cuentacontableBean.setnombre(cuentacontableLocal.getnombre());}
			if(conDefault || (!conDefault && cuentacontableLocal.getcodigo_extranjero()!=null && !cuentacontableLocal.getcodigo_extranjero().equals(""))) {cuentacontableBean.setcodigo_extranjero(cuentacontableLocal.getcodigo_extranjero());}
			if(conDefault || (!conDefault && cuentacontableLocal.getnombre_extranjero()!=null && !cuentacontableLocal.getnombre_extranjero().equals(""))) {cuentacontableBean.setnombre_extranjero(cuentacontableLocal.getnombre_extranjero());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_nivel_cuenta()!=null && !cuentacontableLocal.getid_nivel_cuenta().equals(-1L))) {cuentacontableBean.setid_nivel_cuenta(cuentacontableLocal.getid_nivel_cuenta());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_cuenta_contable()!=null && !cuentacontableLocal.getid_cuenta_contable().equals(null))) {cuentacontableBean.setid_cuenta_contable(cuentacontableLocal.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_centro_costo()!=null && !cuentacontableLocal.getid_centro_costo().equals(null))) {cuentacontableBean.setid_centro_costo(cuentacontableLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_modulo()!=null && !cuentacontableLocal.getid_modulo().equals(-1L))) {cuentacontableBean.setid_modulo(cuentacontableLocal.getid_modulo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getdescripcion()!=null && !cuentacontableLocal.getdescripcion().equals(""))) {cuentacontableBean.setdescripcion(cuentacontableLocal.getdescripcion());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_movimiento()!=null && !cuentacontableLocal.getes_movimiento().equals(false))) {cuentacontableBean.setes_movimiento(cuentacontableLocal.getes_movimiento());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_centro_costo()!=null && !cuentacontableLocal.getes_centro_costo().equals(false))) {cuentacontableBean.setes_centro_costo(cuentacontableLocal.getes_centro_costo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_centro_actividad()!=null && !cuentacontableLocal.getes_centro_actividad().equals(false))) {cuentacontableBean.setes_centro_actividad(cuentacontableLocal.getes_centro_actividad());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_activo()!=null && !cuentacontableLocal.getes_activo().equals(false))) {cuentacontableBean.setes_activo(cuentacontableLocal.getes_activo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_relacion()!=null && !cuentacontableLocal.getes_relacion().equals(false))) {cuentacontableBean.setes_relacion(cuentacontableLocal.getes_relacion());}
			if(conDefault || (!conDefault && cuentacontableLocal.getes_para_f52()!=null && !cuentacontableLocal.getes_para_f52().equals(false))) {cuentacontableBean.setes_para_f52(cuentacontableLocal.getes_para_f52());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_tipo_intervalo()!=null && !cuentacontableLocal.getid_tipo_intervalo().equals(-1L))) {cuentacontableBean.setid_tipo_intervalo(cuentacontableLocal.getid_tipo_intervalo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_tipo_flujo_efectivo()!=null && !cuentacontableLocal.getid_tipo_flujo_efectivo().equals(null))) {cuentacontableBean.setid_tipo_flujo_efectivo(cuentacontableLocal.getid_tipo_flujo_efectivo());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_cuenta_contable_debito()!=null && !cuentacontableLocal.getid_cuenta_contable_debito().equals(null))) {cuentacontableBean.setid_cuenta_contable_debito(cuentacontableLocal.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && cuentacontableLocal.getid_cuenta_contable_credito()!=null && !cuentacontableLocal.getid_cuenta_contable_credito().equals(null))) {cuentacontableBean.setid_cuenta_contable_credito(cuentacontableLocal.getid_cuenta_contable_credito());}
			if(conDefault || (!conDefault && cuentacontableLocal.getorden()!=null && !cuentacontableLocal.getorden().equals(0))) {cuentacontableBean.setorden(cuentacontableLocal.getorden());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxCuentaContableGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxCuentaContable,List<CuentaContable> cuentacontablesLocal)throws Exception {
		try {
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesLocal) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			jComboBoxCuentaContable.setSelectedItem(cuentacontableTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxCuentaContableGenerico(JComboBox jComboBoxCuentaContable,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentaContable.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxCuentaContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentaContable.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxCuentaContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
				//AUTOREFERENCIADA
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ARBOL");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ARBOL");
				
				jComboBoxCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Arbol"));			
				//AUTOREFERENCIADA
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentacontable=(CuentaContable) cuentacontableLogic.getCuentaContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentacontable =(CuentaContable) cuentacontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getempresa_descripcion();
			}
		}

		if(sTipo.equals("NivelCuenta")) {
			//sDescripcion=this.getActualNivelCuentaForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getnivelcuenta_descripcion();
			} else {
				//sDescripcion=this.getActualNivelCuentaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getnivelcuenta_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getcuentacontable_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("TipoIntervalo")) {
			//sDescripcion=this.getActualTipoIntervaloForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.gettipointervalo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoIntervaloForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.gettipointervalo_descripcion();
			}
		}

		if(sTipo.equals("TipoFlujoEfectivo")) {
			//sDescripcion=this.getActualTipoFlujoEfectivoForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.gettipoflujoefectivo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoFlujoEfectivoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.gettipoflujoefectivo_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDebito")) {
			//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getcuentacontabledebito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getcuentacontabledebito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCredito")) {
			//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
			if(!cuentacontable.getIsNew() && !cuentacontable.getIsChanged() && !cuentacontable.getIsDeleted()) {
				sDescripcion=cuentacontable.getcuentacontablecredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentacontable.getcuentacontablecredito_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		CuentaContable cuentacontableRow=new CuentaContable();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentacontableRow=(CuentaContable) cuentacontableLogic.getCuentaContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentacontableRow=(CuentaContable) cuentacontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualCuentaContable(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable));			
			this.jButtonDuplicarCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarCuentaContable && this.isPermisoDuplicarCuentaContable));			
			this.jButtonCopiarCuentaContable.setVisible((this.isVisibilidadCeldaCopiarCuentaContable && this.isPermisoCopiarCuentaContable));
			this.jButtonVerFormCuentaContable.setVisible((this.isVisibilidadCeldaVerFormCuentaContable && this.isPermisoVerFormCuentaContable));
			
			this.jButtonAbrirOrderByCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));			
			
			this.jButtonNuevoRelacionesCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaContable && this.isPermisoNuevoCuentaContable));			
			this.jButtonNuevoGuardarCambiosCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable && this.isPermisoGuardarCambiosCuentaContable));
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonModificarCuentaContable.setVisible((this.isVisibilidadCeldaModificarCuentaContable && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.setVisible((this.isVisibilidadCeldaActualizarCuentaContable && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.setVisible((this.isVisibilidadCeldaEliminarCuentaContable && this.isPermisoEliminarCuentaContable));
			this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.setVisible(this.isVisibilidadCeldaCancelarCuentaContable);							
			this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCuentaContable && this.isPermisoGuardarCambiosCuentaContable));			
			
			}
						
			this.jButtonGuardarCambiosTablaCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaContable && this.isPermisoGuardarCambiosCuentaContable));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable));						
			this.jButtonDuplicarToolBarCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarCuentaContable && this.isPermisoDuplicarCuentaContable));						
			this.jButtonCopiarToolBarCuentaContable.setVisible((this.isVisibilidadCeldaCopiarCuentaContable && this.isPermisoCopiarCuentaContable));			
			this.jButtonVerFormToolBarCuentaContable.setVisible((this.isVisibilidadCeldaVerFormCuentaContable && this.isPermisoVerFormCuentaContable));			
			this.jButtonAbrirOrderByToolBarCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));
			this.jButtonNuevoRelacionesToolBarCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaContable && this.isPermisoNuevoCuentaContable));			
			this.jButtonNuevoGuardarCambiosToolBarCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable && this.isPermisoGuardarCambiosCuentaContable));			
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonModificarToolBarCuentaContable.setVisible((this.isVisibilidadCeldaModificarCuentaContable && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarToolBarCuentaContable.setVisible((this.isVisibilidadCeldaActualizarCuentaContable  && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarToolBarCuentaContable.setVisible((this.isVisibilidadCeldaEliminarCuentaContable && this.isPermisoEliminarCuentaContable));
			this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarToolBarCuentaContable.setVisible(this.isVisibilidadCeldaCancelarCuentaContable);				
			this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosToolBarCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCuentaContable && this.isPermisoGuardarCambiosCuentaContable));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaContable && this.isPermisoGuardarCambiosCuentaContable));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable));			
			this.jMenuItemDuplicarCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarCuentaContable && this.isPermisoDuplicarCuentaContable));			
			this.jMenuItemCopiarCuentaContable.setVisible((this.isVisibilidadCeldaCopiarCuentaContable && this.isPermisoCopiarCuentaContable));			
			this.jMenuItemVerFormCuentaContable.setVisible((this.isVisibilidadCeldaVerFormCuentaContable && this.isPermisoVerFormCuentaContable));			
			this.jMenuItemAbrirOrderByCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));			
			//this.jMenuItemMostrarOcultarCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));
			this.jMenuItemDetalleAbrirOrderByCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));			
			//this.jMenuItemDetalleMostrarOcultarCuentaContable.setVisible((this.isVisibilidadCeldaOrdenCuentaContable && this.isPermisoOrdenCuentaContable));			
			this.jMenuItemNuevoRelacionesCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaContable && this.isPermisoNuevoCuentaContable));			
			this.jMenuItemNuevoGuardarCambiosCuentaContable.setVisible((this.isVisibilidadCeldaNuevoCuentaContable && this.isPermisoNuevoCuentaContable && this.isPermisoGuardarCambiosCuentaContable));									
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemModificarCuentaContable.setVisible((this.isVisibilidadCeldaModificarCuentaContable && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemActualizarCuentaContable.setVisible((this.isVisibilidadCeldaActualizarCuentaContable && this.isPermisoActualizarCuentaContable));	
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemEliminarCuentaContable.setVisible((this.isVisibilidadCeldaEliminarCuentaContable && this.isPermisoEliminarCuentaContable));
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemCancelarCuentaContable.setVisible(this.isVisibilidadCeldaCancelarCuentaContable);				
			}
			
			this.jMenuItemGuardarCambiosCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCuentaContable && this.isPermisoGuardarCambiosCuentaContable));						
			this.jMenuItemGuardarCambiosTablaCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaContable && this.isPermisoGuardarCambiosCuentaContable));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoCuentaContable=this.jButtonNuevoCuentaContable.isVisible();
			this.isVisibilidadCeldaDuplicarCuentaContable=this.jButtonDuplicarCuentaContable.isVisible();
			this.isVisibilidadCeldaCopiarCuentaContable=this.jButtonCopiarCuentaContable.isVisible();
			this.isVisibilidadCeldaVerFormCuentaContable=this.jButtonVerFormCuentaContable.isVisible();
			
			this.isVisibilidadCeldaOrdenCuentaContable=this.jButtonAbrirOrderByCuentaContable.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=this.jButtonNuevoRelacionesCuentaContable.isVisible();
			this.isVisibilidadCeldaModificarCuentaContable=this.jButtonModificarCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.isVisibilidadCeldaActualizarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=this.jButtonGuardarCambiosTablaCuentaContable.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoCuentaContable=this.jButtonNuevoToolBarCuentaContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=this.jButtonNuevoRelacionesToolBarCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.isVisibilidadCeldaModificarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonModificarToolBarCuentaContable.isVisible();
			this.isVisibilidadCeldaActualizarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarToolBarCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarToolBarCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarToolBarCuentaContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentaContable=this.jButtonGuardarCambiosToolBarCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=this.jButtonGuardarCambiosTablaToolBarCuentaContable.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoCuentaContable=this.jMenuItemNuevoCuentaContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=this.jMenuItemNuevoRelacionesCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.isVisibilidadCeldaModificarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jMenuItemModificarCuentaContable.isVisible();
			this.isVisibilidadCeldaActualizarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jMenuItemActualizarCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jMenuItemEliminarCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarCuentaContable=this.jInternalFrameDetalleFormCuentaContable.jMenuItemCancelarCuentaContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentaContable=this.jMenuItemGuardarCambiosCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=this.jMenuItemGuardarCambiosTablaCuentaContable.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesCuentaContable(Boolean esInicializar) {
		if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {			
			if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
				//if(this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesCuentaContable();
			}
			
			this.inicializarActualizarBindingBotonesManualCuentaContable(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualCuentaContable() {
		this.jButtonNuevoCuentaContable.setVisible(this.isPermisoNuevoCuentaContable);			
		this.jButtonDuplicarCuentaContable.setVisible(this.isPermisoDuplicarCuentaContable);			
		this.jButtonCopiarCuentaContable.setVisible(this.isPermisoCopiarCuentaContable);			
		this.jButtonVerFormCuentaContable.setVisible(this.isPermisoVerFormCuentaContable);			
		
		this.jButtonAbrirOrderByCuentaContable.setVisible(this.isPermisoOrdenCuentaContable);					
		
		this.jButtonNuevoRelacionesCuentaContable.setVisible(this.isPermisoNuevoCuentaContable);			
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonModificarCuentaContable.setVisible(this.isPermisoActualizarCuentaContable);	
			this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.setVisible(this.isPermisoActualizarCuentaContable);	
			this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.setVisible(this.isPermisoEliminarCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.setVisible(this.isVisibilidadCeldaCancelarCuentaContable);						
			this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.setVisible(this.isPermisoGuardarCambiosCuentaContable);							
		}
		
		this.jButtonGuardarCambiosTablaCuentaContable.setVisible(this.isPermisoActualizarCuentaContable);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentaContable() {
		this.jInternalFrameDetalleFormCuentaContable.jButtonModificarCuentaContable.setVisible(this.isPermisoActualizarCuentaContable);	
		this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.setVisible(this.isPermisoActualizarCuentaContable);	
		this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.setVisible(this.isPermisoEliminarCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.setVisible(this.isVisibilidadCeldaCancelarCuentaContable);							
		this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCuentaContable && this.isPermisoGuardarCambiosCuentaContable));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosCuentaContable() {
		if(CuentaContableJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualCuentaContable();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesCuentaContable() {
	}
	
	public void jTableDatosCuentaContableListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarCuentaContable(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.cuentacontable.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebCuentaContable(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderCuentaContable.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.cuentacontable.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.cuentacontable.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.cuentacontable.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_extranjeroCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getcodigo_extranjero()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_extranjero like '%"+this.cuentacontable.getcodigo_extranjero()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_extranjeroCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getnombre_extranjero()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_extranjero like '%"+this.cuentacontable.getnombre_extranjero()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_nivel_cuentaCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonivelcuenta=true;

			idTienePermisonivelcuenta=this.tienePermisosUsuarioEnPaginaWebCuentaContable(NivelCuentaConstantesFunciones.CLASSNAME);

			if(idTienePermisonivelcuenta) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.nivelcuentaBeanSwingJInternalFrame=new NivelCuentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.nivelcuentaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.nivelcuentaBeanSwingJInternalFrame.getNivelCuentaLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_nivel_cuenta()!=null) {
					this.nivelcuentaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.nivelcuentaBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_nivel_cuenta());
					this.nivelcuentaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.nivelcuentaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.nivelcuentaBeanSwingJInternalFrame.inicializarActualizarBindingTablaNivelCuenta();
				}

				JInternalFrameBase jinternalFrame =this.nivelcuentaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordernivelcuenta=(TitledBorder)this.nivelcuentaBeanSwingJInternalFrame.jScrollPanelDatosNivelCuenta.getBorder();

				titledBordernivelcuenta.setTitle(titledBorderCuentaContable.getTitle() + " -> Nivel Cuenta");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_nivel_cuentaCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_nivel_cuenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_nivel_cuenta = "+this.cuentacontable.getid_nivel_cuenta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableCuentaContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="CuentaContable";

			if(!this.sFinalQueryGeneral_cuentacontable.equals("")) {
				this.cuentacontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontable);
				this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentaContable=null;
			TitledBorder titledBordercuentacontable=null;

			if(!this.jScrollPanelDatosCuentaContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contableCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.cuentacontable.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoCuentaContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentaContable=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosCuentaContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderCuentaContable.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebCuentaContable(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderCuentaContable.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.cuentacontable.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebCuentaContable(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderCuentaContable.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.cuentacontable.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.cuentacontable.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_movimientoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_movimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_movimiento = "+this.cuentacontable.getes_movimiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_centro_costoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_centro_costo = "+this.cuentacontable.getes_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_centro_actividadCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_centro_actividad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_centro_actividad = "+this.cuentacontable.getes_centro_actividad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_activoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_activo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_activo = "+this.cuentacontable.getes_activo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_relacionCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_relacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_relacion = "+this.cuentacontable.getes_relacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_para_f52CuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getes_para_f52()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_para_f52 = "+this.cuentacontable.getes_para_f52().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebCuentaContable(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderCuentaContable.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.cuentacontable.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_intervaloCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipointervalo=true;

			idTienePermisotipointervalo=this.tienePermisosUsuarioEnPaginaWebCuentaContable(TipoIntervaloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipointervalo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.tipointervaloBeanSwingJInternalFrame=new TipoIntervaloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipointervaloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipointervaloBeanSwingJInternalFrame.getTipoIntervaloLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_tipo_intervalo()!=null) {
					this.tipointervaloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipointervaloBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_tipo_intervalo());
					this.tipointervaloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipointervaloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipointervaloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoIntervalo();
				}

				JInternalFrameBase jinternalFrame =this.tipointervaloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordertipointervalo=(TitledBorder)this.tipointervaloBeanSwingJInternalFrame.jScrollPanelDatosTipoIntervalo.getBorder();

				titledBordertipointervalo.setTitle(titledBorderCuentaContable.getTitle() + " -> Tipo Intervalo ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_intervaloCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_tipo_intervalo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_intervalo = "+this.cuentacontable.getid_tipo_intervalo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_flujo_efectivoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoflujoefectivo=true;

			idTienePermisotipoflujoefectivo=this.tienePermisosUsuarioEnPaginaWebCuentaContable(TipoFlujoEfectivoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoflujoefectivo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.tipoflujoefectivoBeanSwingJInternalFrame=new TipoFlujoEfectivoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoflujoefectivoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoflujoefectivoBeanSwingJInternalFrame.getTipoFlujoEfectivoLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_tipo_flujo_efectivo()!=null) {
					this.tipoflujoefectivoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoflujoefectivoBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_tipo_flujo_efectivo());
					this.tipoflujoefectivoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoflujoefectivoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoflujoefectivoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoFlujoEfectivo();
				}

				JInternalFrameBase jinternalFrame =this.tipoflujoefectivoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordertipoflujoefectivo=(TitledBorder)this.tipoflujoefectivoBeanSwingJInternalFrame.jScrollPanelDatosTipoFlujoEfectivo.getBorder();

				titledBordertipoflujoefectivo.setTitle(titledBorderCuentaContable.getTitle() + " -> Tipo Flujo Efectivo ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_flujo_efectivoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_tipo_flujo_efectivo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_flujo_efectivo = "+this.cuentacontable.getid_tipo_flujo_efectivo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledebitoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDebito";

			if(!this.sFinalQueryGeneral_cuentacontabledebito.equals("")) {
				this.cuentacontabledebitoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledebito);
				this.cuentacontabledebitoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledebitoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledebitoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledebitoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDebito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledebitoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentaContable=null;
			TitledBorder titledBordercuentacontabledebito=null;

			if(!this.jScrollPanelDatosCuentaContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				titledBordercuentacontabledebito=(TitledBorder)this.cuentacontabledebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledebito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_debitoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledebito=true;

			idTienePermisocuentacontabledebito=this.tienePermisosUsuarioEnPaginaWebCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledebito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.cuentacontabledebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledebitoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_cuenta_contable_debito()!=null) {
					this.cuentacontabledebitoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledebitoBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_cuenta_contable_debito());
					this.cuentacontabledebitoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledebitoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordercuentacontabledebito=(TitledBorder)this.cuentacontabledebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledebito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_debitoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_cuenta_contable_debito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_debito = "+this.cuentacontable.getid_cuenta_contable_debito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCredito";

			if(!this.sFinalQueryGeneral_cuentacontablecredito.equals("")) {
				this.cuentacontablecreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecredito);
				this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentaContable=null;
			TitledBorder titledBordercuentacontablecredito=null;

			if(!this.jScrollPanelDatosCuentaContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_creditoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecredito=true;

			idTienePermisocuentacontablecredito=this.tienePermisosUsuarioEnPaginaWebCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);

				this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentacontableLogic.getConnexion());

				if(this.cuentacontable.getid_cuenta_contable_credito()!=null) {
					this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoBeanSwingJInternalFrame.setIdActual(this.cuentacontable.getid_cuenta_contable_credito());
					this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaContable=(TitledBorder)this.jScrollPanelDatosCuentaContable.getBorder();
				TitledBorder titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_creditoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getid_cuenta_contable_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito = "+this.cuentacontable.getid_cuenta_contable_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonordenCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.getcuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentacontable==null) {
						this.cuentacontable = new CuentaContable();
					}

					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);
				}

				if(this.cuentacontable.getorden()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where orden = "+this.cuentacontable.getorden().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesBusquedaPorCodigo();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNombreCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesBusquedaPorNombre();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdCentroCosto();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdCuentaContable();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDebitoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdCuentaContableDebito();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdEmpresa();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdModulo();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdMoneda();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdNivelCuentaCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdNivelCuenta();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoFlujoEfectivoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdTipoFlujoEfectivo();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoIntervaloCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaContable(false,false);

			this.getCuentaContablesFK_IdTipoIntervalo();

			this.inicializarActualizarBindingCuentaContable(false);

			//if(CuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameCuentaContable() {
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
			this.jInternalFrameDetalleFormCuentaContable.setVisible(false);	    			
			this.jInternalFrameDetalleFormCuentaContable.dispose();
			this.jInternalFrameDetalleFormCuentaContable=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
			this.jInternalFrameReporteDinamicoCuentaContable.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoCuentaContable.dispose();
			this.jInternalFrameReporteDinamicoCuentaContable=null;
		}
		
		if(this.jInternalFrameImportacionCuentaContable!=null) {
			this.jInternalFrameImportacionCuentaContable.setVisible(false);	    			
			this.jInternalFrameImportacionCuentaContable.dispose();
			this.jInternalFrameImportacionCuentaContable=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	public void closingTreeFrameCuentaContable() {
		
		if(this.jInternalFrameTreeCuentaContable!=null) {
			this.jInternalFrameTreeCuentaContable.setVisible(false);	    			
			this.jInternalFrameTreeCuentaContable.dispose();
			this.jInternalFrameTreeCuentaContable=null;
		}
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessCuentaContable();
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			
			if(sTipo.equals("NuevoCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarCuentaContable")) {
				jButtonDuplicarCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarCuentaContable")) {
				jButtonCopiarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormCuentaContable")) {
				jButtonVerFormCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarCuentaContable")) {
				jButtonDuplicarCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarCuentaContable")) {
				jButtonDuplicarCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarCuentaContable")) {
				jButtonModificarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarCuentaContable")) {
				jButtonModificarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarCuentaContable")) {
				jButtonModificarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarCuentaContable")) {
				jButtonActualizarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarCuentaContable")) {
				jButtonActualizarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarCuentaContable")) {
				jButtonActualizarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarCuentaContable")) {
				jButtonEliminarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarCuentaContable")) {
				jButtonEliminarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarCuentaContable")) {
				jButtonEliminarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarCuentaContable")) {
				jButtonCancelarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarCuentaContable")) {
				jButtonCancelarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarCuentaContable")) {
				jButtonCancelarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarCuentaContable")) {
				jButtonCerrarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarCuentaContable")) {
				jButtonCerrarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarCuentaContable")) {
				jButtonCerrarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarCuentaContable")) {
				jButtonMostrarOcultarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarCuentaContable")) {
				jButtonCancelarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarCuentaContable")) {
				jButtonCopiarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarCuentaContable")) {
				jButtonVerFormCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarCuentaContable")) {
				jButtonCopiarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormCuentaContable")) {
				jButtonVerFormCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionCuentaContable")) {
				jButtonRecargarInformacionCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarCuentaContable")) {
				jButtonRecargarInformacionCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionCuentaContable")) {
				jButtonRecargarInformacionCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("ArbolCuentaContable")) {
				jButtonArbolCuentaContableActionPerformed(evt);
			} 
			else if(sTipo.equals("AnterioresCuentaContable")) {
				jButtonAnterioresCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarCuentaContable")) {
				jButtonAnterioresCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreCuentaContable")) {
				jButtonAnterioresCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesCuentaContable")) {
				jButtonSiguientesCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarCuentaContable")) {
				jButtonSiguientesCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesCuentaContable")) {
				jButtonSiguientesCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByCuentaContable") || sTipo.equals("MenuItemDetalleAbrirOrderByCuentaContable")) {
				jButtonAbrirOrderByCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarCuentaContable") || sTipo.equals("MenuItemDetalleMostrarOcultarCuentaContable")) {
				jButtonMostrarOcultarCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosCuentaContable")) {
				jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarCuentaContable")) {
				jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosCuentaContable")) {
				jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoCuentaContable")) {
				jButtonCerrarReporteDinamicoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoCuentaContable")) {
				jButtonGenerarReporteDinamicoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoCuentaContable")) {
				
				jButtonGenerarExcelReporteDinamicoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionCuentaContable")) {
				jButtonCerrarImportacionCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionCuentaContable")) {
				
				jButtonGenerarImportacionCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionCuentaContable")) {
				
				jButtonAbrirImportacionCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesCuentaContable")) {
				jComboBoxTiposAccionesCuentaContableActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesCuentaContable")) {
				jComboBoxTiposRelacionesCuentaContableActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioCuentaContable")) {
				jComboBoxTiposAccionesCuentaContableActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarCuentaContable")) {
				
				jComboBoxTiposSeleccionarCuentaContableActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralCuentaContable")) {
				jTextFieldValorCampoGeneralCuentaContableActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByCuentaContable")) {
				jButtonAbrirOrderByCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarCuentaContable")) {
				jButtonAbrirOrderByCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByCuentaContable")) {
				jButtonCerrarOrderByCuentaContableActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentaContableBusqueda")) {
				this.jButtonidCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentaContableUpdate")) {
				this.jButtonid_empresaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentaContableBusqueda")) {
				this.jButtonid_empresaCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoCuentaContableBusqueda")) {
				this.jButtoncodigoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreCuentaContableBusqueda")) {
				this.jButtonnombreCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_extranjeroCuentaContableBusqueda")) {
				this.jButtoncodigo_extranjeroCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_extranjeroCuentaContableBusqueda")) {
				this.jButtonnombre_extranjeroCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_nivel_cuentaCuentaContableUpdate")) {
				this.jButtonid_nivel_cuentaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_nivel_cuentaCuentaContableBusqueda")) {
				this.jButtonid_nivel_cuentaCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContable")) {
				this.jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableUpdate")) {
				this.jButtonid_cuenta_contableCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contableCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContable")) {
				this.jButtonid_centro_costoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableUpdate")) {
				this.jButtonid_centro_costoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableBusqueda")) {
				this.jButtonid_centro_costoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloCuentaContableUpdate")) {
				this.jButtonid_moduloCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloCuentaContableBusqueda")) {
				this.jButtonid_moduloCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionCuentaContableBusqueda")) {
				this.jButtondescripcionCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_movimientoCuentaContableBusqueda")) {
				this.jButtones_movimientoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_centro_costoCuentaContableBusqueda")) {
				this.jButtones_centro_costoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_centro_actividadCuentaContableBusqueda")) {
				this.jButtones_centro_actividadCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_activoCuentaContableBusqueda")) {
				this.jButtones_activoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_relacionCuentaContableBusqueda")) {
				this.jButtones_relacionCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_para_f52CuentaContableBusqueda")) {
				this.jButtones_para_f52CuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaCuentaContableUpdate")) {
				this.jButtonid_monedaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaCuentaContableBusqueda")) {
				this.jButtonid_monedaCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_intervaloCuentaContableUpdate")) {
				this.jButtonid_tipo_intervaloCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_intervaloCuentaContableBusqueda")) {
				this.jButtonid_tipo_intervaloCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_flujo_efectivoCuentaContableUpdate")) {
				this.jButtonid_tipo_flujo_efectivoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_flujo_efectivoCuentaContableBusqueda")) {
				this.jButtonid_tipo_flujo_efectivoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContable")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContable")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ordenCuentaContableBusqueda")) {
				this.jButtonordenCuentaContableBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoCuentaContable")) {
				this.jButtonid_centro_costoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contableCuentaContable")) {
				this.jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorCodigoCuentaContable")) {
				this.jButtonBusquedaPorCodigoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNombreCuentaContable")) {
				this.jButtonBusquedaPorNombreCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoCuentaContable")) {
				this.jButtonFK_IdCentroCostoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCuentaContable")) {
				this.jButtonFK_IdCuentaContableCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdModuloCuentaContable")) {
				this.jButtonFK_IdModuloCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdNivelCuentaCuentaContable")) {
				this.jButtonFK_IdNivelCuentaCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoFlujoEfectivoCuentaContable")) {
				this.jButtonFK_IdTipoFlujoEfectivoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoIntervaloCuentaContable")) {
				this.jButtonFK_IdTipoIntervaloCuentaContableActionPerformed(evt);
			}
			
			;
			
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessCuentaContable();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			CuentaContable cuentacontableLocal=null;
			
			if(!this.getEsControlTabla()) {
				cuentacontableLocal=this.cuentacontable;
			} else {
				cuentacontableLocal=this.cuentacontableAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
							
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
								
						
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
								
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
							
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
								
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosCuentaContable")) {
					jCheckBoxSeleccionarTodosCuentaContableItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosCuentaContable")) {
					jCheckBoxSeleccionadosCuentaContableItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarCuentaContable")) {
					
				}
				
				


				
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
												
				
				


				
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaContableActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentacontable);
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaContable.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentacontableAnterior =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarCuentaContable")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosCuentaContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosCuentaContable.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.cuentacontable =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.cuentacontable =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.cuentacontable);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarCuentaContable")) {
				
				}
				
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarCuentaContable")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosCuentaContable.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarCuentaContable")) {
			
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessCuentaContable();
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			if(sTipo.equals("NuevoCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarCuentaContable")) {
				jButtonDuplicarCuentaContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarCuentaContable")) {
				jButtonCopiarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormCuentaContable")) {
				jButtonVerFormCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesCuentaContable")) {
				jButtonNuevoCuentaContableActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarCuentaContable")) {
				jButtonModificarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarCuentaContable")) {
				jButtonActualizarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarCuentaContable")) {
				jButtonEliminarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarCuentaContable")) {
				jButtonCancelarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarCuentaContable")) {
				jButtonCerrarCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosCuentaContable")) {
				jButtonGuardarCambiosCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosCuentaContable")) {
				jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByCuentaContable")) {
				jButtonAbrirOrderByCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionCuentaContable")) {
				jButtonRecargarInformacionCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresCuentaContable")) {
				jButtonAnterioresCuentaContableActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesCuentaContable")) {
				jButtonSiguientesCuentaContableActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentaContableBusqueda")) {
				this.jButtonidCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentaContableUpdate")) {
				this.jButtonid_empresaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentaContableBusqueda")) {
				this.jButtonid_empresaCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoCuentaContableBusqueda")) {
				this.jButtoncodigoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreCuentaContableBusqueda")) {
				this.jButtonnombreCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_extranjeroCuentaContableBusqueda")) {
				this.jButtoncodigo_extranjeroCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_extranjeroCuentaContableBusqueda")) {
				this.jButtonnombre_extranjeroCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_nivel_cuentaCuentaContableUpdate")) {
				this.jButtonid_nivel_cuentaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_nivel_cuentaCuentaContableBusqueda")) {
				this.jButtonid_nivel_cuentaCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContable")) {
				this.jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableUpdate")) {
				this.jButtonid_cuenta_contableCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contableCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContable")) {
				this.jButtonid_centro_costoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableUpdate")) {
				this.jButtonid_centro_costoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoCuentaContableBusqueda")) {
				this.jButtonid_centro_costoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloCuentaContableUpdate")) {
				this.jButtonid_moduloCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloCuentaContableBusqueda")) {
				this.jButtonid_moduloCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionCuentaContableBusqueda")) {
				this.jButtondescripcionCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_movimientoCuentaContableBusqueda")) {
				this.jButtones_movimientoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_centro_costoCuentaContableBusqueda")) {
				this.jButtones_centro_costoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_centro_actividadCuentaContableBusqueda")) {
				this.jButtones_centro_actividadCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_activoCuentaContableBusqueda")) {
				this.jButtones_activoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_relacionCuentaContableBusqueda")) {
				this.jButtones_relacionCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_para_f52CuentaContableBusqueda")) {
				this.jButtones_para_f52CuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaCuentaContableUpdate")) {
				this.jButtonid_monedaCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaCuentaContableBusqueda")) {
				this.jButtonid_monedaCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_intervaloCuentaContableUpdate")) {
				this.jButtonid_tipo_intervaloCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_intervaloCuentaContableBusqueda")) {
				this.jButtonid_tipo_intervaloCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_flujo_efectivoCuentaContableUpdate")) {
				this.jButtonid_tipo_flujo_efectivoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_flujo_efectivoCuentaContableBusqueda")) {
				this.jButtonid_tipo_flujo_efectivoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContable")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_debitoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContable")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_creditoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ordenCuentaContableBusqueda")) {
				this.jButtonordenCuentaContableBusquedaActionPerformed(evt);
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessCuentaContable();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameCuentaContable")) {
				closingInternalFrameCuentaContable();
				
			} else if(sTipo.equals("jButtonCancelarCuentaContable")) {
				JInternalFrameBase jInternalFrameDetalleFormCuentaContable = (JInternalFrameBase)evt.getSource();
	            	
	            CuentaContableBeanSwingJInternalFrame jInternalFrameParent=(CuentaContableBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentaContable.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarCuentaContableActionPerformed(null);
			}
			
			CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentacontable,new Object(),this.cuentacontableParameterGeneral,this.cuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormCuentaContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormCuentaContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormCuentaContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.cuentacontable)) {
			if(!esControlTabla) {
				if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);			
				}
				
				if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualCuentaContable(this.cuentacontable,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentacontableReturnGeneral=cuentacontableLogic.procesarEventosCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentacontableLogic.getCuentaContables(),this.cuentacontable,this.cuentacontableParameterGeneral,this.isEsNuevoCuentaContable,classes);//this.cuentacontableLogic.getCuentaContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanCuentaContable(this.cuentacontableReturnGeneral,this.cuentacontableBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanCuentaContable(classes,this.cuentacontableReturnGeneral,this.cuentacontableBean,false);
					}
						
					if(this.cuentacontableReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable());	
					}
						
					if(this.cuentacontableReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable(),classes);//this.cuentacontableBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioCuentaContable(this.cuentacontable,classes);//this.cuentacontableBean);									
				}
			
				if(CuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualCuentaContable(this.cuentacontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaContable(this.cuentacontable);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.cuentacontableAnterior!=null) {
						this.cuentacontable=this.cuentacontableAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentacontableReturnGeneral=cuentacontableLogic.procesarEventosCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentacontableLogic.getCuentaContables(),this.cuentacontable,this.cuentacontableParameterGeneral,this.isEsNuevoCuentaContable,classes);//this.cuentacontableLogic.getCuentaContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentacontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentacontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.cuentacontableReturnGeneral.getCuentaContable(),cuentacontableLogic.getCuentaContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.cuentacontableReturnGeneral.getCuentaContable(),this.cuentacontables);
				}
				//ARCHITECTURE
				
				//this.jTableDatosCuentaContable.repaint();
				
				//((AbstractTableModel) this.jTableDatosCuentaContable.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosCuentaContable();
			}
		}
	}
	
	public void actualizarVisualTableDatosCuentaContable() throws Exception {
		
		CuentaContableModel cuentacontableModel=(CuentaContableModel)this.jTableDatosCuentaContable.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentacontableModel.cuentacontables=this.cuentacontableLogic.getCuentaContables();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			cuentacontableModel.cuentacontables=this.cuentacontables;
		}
		
		
		((CuentaContableModel) this.jTableDatosCuentaContable.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaCuentaContable() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getcuentacontableAnterior(),this.cuentacontableLogic.getCuentaContables());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getcuentacontableAnterior(),this.cuentacontables);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosCuentaContable();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioCuentaContable(CuentaContable cuentacontable,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentacontable,new Object(),generalEntityParameterGeneral,this.cuentacontableReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.cuentacontableSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=CuentaContableConstantesFunciones.getClassesRelationshipsOfCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=CuentaContableConstantesFunciones.getClassesRelationshipsFromStringsOfCuentaContable(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormCuentaContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				CuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentacontable,new Object(),generalEntityParameterGeneral,this.cuentacontableReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioCuentaContable(CuentaContableBean cuentacontableBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanCuentaContable(ArrayList<Classe> classes,CuentaContableReturnGeneral cuentacontableReturnGeneral,CuentaContableBean cuentacontableBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualCuentaContable(CuentaContable cuentacontable,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.cuentacontable)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormCuentaContable = new CuentaContableDetalleFormJInternalFrame(jDesktopPane,this.cuentacontableSessionBean.getConGuardarRelaciones(),this.cuentacontableSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.setVisible(false);
		this.jInternalFrameDetalleFormCuentaContable.setSelected(false);						
		
		this.jInternalFrameDetalleFormCuentaContable.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormCuentaContable.cuentacontableLogic=this.cuentacontableLogic;
		
		this.cargarCombosFrameForeignKeyCuentaContable("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentaContable();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentaContable();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyCuentaContable("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyCuentaContable();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormCuentaContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentaContable"));
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonModificarCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarCuentaContable"));

		
		this.jInternalFrameDetalleFormCuentaContable.jButtonModificarToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentaContable"));
					
		this.jInternalFrameDetalleFormCuentaContable.jMenuItemModificarCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.addActionListener (new ButtonActionListener(this,"ActualizarCuentaContable"));
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentaContable"));
						
		this.jInternalFrameDetalleFormCuentaContable.jMenuItemActualizarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarCuentaContable"));
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentaContable"));
								
		this.jInternalFrameDetalleFormCuentaContable.jMenuItemEliminarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarCuentaContable"));
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentaContable"));
					
		this.jInternalFrameDetalleFormCuentaContable.jMenuItemCancelarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentaContable"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jMenuItemDetalleCerrarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaContable"));
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaContable"));
		
		
		
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentaContable"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonidCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombreCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombreCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigo_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigo_extranjeroCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombre_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombre_extranjeroCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableBusqueda"));
		//jButtonid_cuenta_contableCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContable"));
		//jButtonid_cuenta_contableCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableBusqueda"));
		//jButtonid_centro_costoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContable.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContable"));
		//jButtonid_centro_costoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtondescripcionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_movimientoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_movimientoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_costoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_actividadCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_actividadCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_activoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_activoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_relacionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_relacionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_para_f52CuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_para_f52CuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_debitoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContable"));
		//jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_creditoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContable"));
		//jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonordenCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"ordenCuentaContableBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentaContable"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameCuentaContable"));
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentaContable"));
		}
		
		this.jTableDatosCuentaContable.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarCuentaContable"));
		
		this.jTableDatosCuentaContable.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarCuentaContable"));
		
		this.jButtonNuevoCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoCuentaContable"));
		
		this.jButtonDuplicarCuentaContable.addActionListener(new ButtonActionListener(this,"DuplicarCuentaContable"));
		
		this.jButtonCopiarCuentaContable.addActionListener(new ButtonActionListener(this,"CopiarCuentaContable"));
		
		this.jButtonVerFormCuentaContable.addActionListener(new ButtonActionListener(this,"VerFormCuentaContable"));
		
		
		this.jButtonNuevoToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoToolBarCuentaContable"));
			
		this.jButtonDuplicarToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"DuplicarToolBarCuentaContable"));
			
		this.jMenuItemNuevoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoCuentaContable"));
			
		this.jMenuItemDuplicarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarCuentaContable"));		
		
		
		this.jButtonNuevoRelacionesCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoRelacionesCuentaContable"));
		
		
		this.jButtonNuevoRelacionesToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarCuentaContable"));
			
		this.jMenuItemNuevoRelacionesCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesCuentaContable"));		
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonModificarCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonModificarToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentaContable"));
			
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemModificarCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarCuentaContable.addActionListener (new ButtonActionListener(this,"ActualizarCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonActualizarToolBarCuentaContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentaContable"));
				
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemActualizarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonEliminarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentaContable"));
						
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemEliminarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonCancelarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentaContable"));
			
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemCancelarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentaContable"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarCuentaContable"));		
		
		
		this.jButtonCerrarCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarCuentaContable"));
		
		
		this.jButtonCerrarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarToolBarCuentaContable"));
			
		this.jMenuItemCerrarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCerrarCuentaContable"));
			
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jMenuItemDetalleCerrarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaContable"));
		}
		
		this.jButtonCopiarToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"CopiarToolBarCuentaContable"));
			
		this.jButtonVerFormToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"VerFormToolBarCuentaContable"));
		
		this.jMenuItemGuardarCambiosCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosCuentaContable"));
			
		this.jMenuItemCopiarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCopiarCuentaContable"));		
		
		this.jMenuItemVerFormCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemVerFormCuentaContable"));		
		
		
		this.jButtonGuardarCambiosTablaCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentaContable"));
		
		
		this.jButtonGuardarCambiosTablaToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarCuentaContable"));
			
		this.jMenuItemGuardarCambiosTablaCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentaContable"));		
		
		
		
		this.jButtonRecargarInformacionCuentaContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionCuentaContable"));
					
		this.jButtonRecargarInformacionToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarCuentaContable"));
		
		this.jMenuItemRecargarInformacionCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionCuentaContable"));		
		
		
		this.jButtonArbolCuentaContable.addActionListener (new ButtonActionListener(this,"ArbolCuentaContable"));
		
		this.jButtonAnterioresCuentaContable.addActionListener (new ButtonActionListener(this,"AnterioresCuentaContable"));
		
		
		this.jButtonAnterioresToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"AnterioresToolBarCuentaContable"));
		
		this.jMenuItemAnterioresCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresCuentaContable"));		
		
		
		this.jButtonSiguientesCuentaContable.addActionListener (new ButtonActionListener(this,"SiguientesCuentaContable"));
		
		
		this.jButtonSiguientesToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"SiguientesToolBarCuentaContable"));
			
		this.jMenuItemSiguientesCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesCuentaContable"));
			
		this.jMenuItemAbrirOrderByCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByCuentaContable"));
			
		this.jMenuItemMostrarOcultarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarCuentaContable"));
			
		this.jMenuItemDetalleAbrirOrderByCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByCuentaContable"));
			
		this.jMenuItemDetalleMostarOcultarCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarCuentaContable"));		
		
		
		this.jButtonNuevoGuardarCambiosCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosCuentaContable"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarCuentaContable"));
			
		this.jMenuItemNuevoGuardarCambiosCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosCuentaContable"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosCuentaContable.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosCuentaContable"));

		this.jCheckBoxSeleccionadosCuentaContable.addItemListener(new CheckBoxItemListener(this,"SeleccionadosCuentaContable"));
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentaContable"));
		}
		
		
		this.jComboBoxTiposRelacionesCuentaContable.addActionListener (new ButtonActionListener(this,"TiposRelacionesCuentaContable"));
			
		this.jComboBoxTiposAccionesCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesCuentaContable"));
					
		this.jComboBoxTiposSeleccionarCuentaContable.addActionListener (new ButtonActionListener(this,"TiposSeleccionarCuentaContable"));
			
		this.jTextFieldValorCampoGeneralCuentaContable.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralCuentaContable"));		
		
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonidCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombreCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombreCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigo_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigo_extranjeroCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombre_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombre_extranjeroCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableBusqueda"));
		//jButtonid_cuenta_contableCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContable"));
		//jButtonid_cuenta_contableCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableBusqueda"));
		//jButtonid_centro_costoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContable.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContable"));
		//jButtonid_centro_costoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtondescripcionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_movimientoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_movimientoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_costoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_actividadCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_actividadCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_activoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_activoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_relacionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_relacionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_para_f52CuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_para_f52CuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_debitoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContable"));
		//jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_creditoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContable"));
		//jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonordenCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"ordenCuentaContableBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoCuentaContable.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoCuentaContable"));

			this.jButtonBusquedaPorNombreCuentaContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreCuentaContable"));

			this.jButtonFK_IdCentroCostoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoCuentaContable"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoCuentaContable.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContable"));

			this.jButtonFK_IdCuentaContableCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCuentaContable"));

			this.jButtonBuscarFK_IdCuentaContableid_cuenta_contableCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContable"));

			this.jButtonFK_IdModuloCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdModuloCuentaContable"));

			this.jButtonFK_IdNivelCuentaCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdNivelCuentaCuentaContable"));

			this.jButtonFK_IdTipoFlujoEfectivoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoFlujoEfectivoCuentaContable"));

			this.jButtonFK_IdTipoIntervaloCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoIntervaloCuentaContable"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaContable"));
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaContable"));
				this.jInternalFrameReporteDinamicoCuentaContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaContable"));
			}
			
			//this.jButtonCerrarReporteDinamicoCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaContable"));				
			//this.jButtonGenerarReporteDinamicoCuentaContable.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaContable"));
			//this.jButtonGenerarExcelReporteDinamicoCuentaContable.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaContable"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionCuentaContable!=null) {
				this.jInternalFrameImportacionCuentaContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentaContable"));
				this.jInternalFrameImportacionCuentaContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentaContable"));
				this.jInternalFrameImportacionCuentaContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentaContable"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByCuentaContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByCuentaContable"));
			
			this.jButtonAbrirOrderByToolBarCuentaContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarCuentaContable"));			
			
			if(this.jInternalFrameOrderByCuentaContable!=null) {
				this.jInternalFrameOrderByCuentaContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentaContable"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaContable.jTabbedPaneRelacionesCuentaContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentaContable"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameCuentaContable();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormCuentaContable.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormCuentaContable = (JInternalFrameBase)event.getSource();
	            	
	            CuentaContableBeanSwingJInternalFrame jInternalFrameParent=(CuentaContableBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentaContable.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarCuentaContableActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosCuentaContable.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosCuentaContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosCuentaContable.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosCuentaContable.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoCuentaContable";
		inputMap = this.jButtonNuevoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentaContableActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesCuentaContable";
		inputMap = this.jButtonNuevoRelacionesCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentaContableActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarCuentaContable";
		inputMap = this.jButtonModificarCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarCuentaContable";
		inputMap = this.jButtonActualizarCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarCuentaContable";
		inputMap = this.jButtonEliminarCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarCuentaContable";
		inputMap = this.jButtonCancelarCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarCuentaContable";
		inputMap = this.jButtonCerrarCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosCuentaContable";
		inputMap = this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormCuentaContable.jButtonGuardarCambiosCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonArbolCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonArbolCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosCuentaContable.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosCuentaContableItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonidCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_empresaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombreCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombreCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtoncodigo_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"codigo_extranjeroCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonnombre_extranjeroCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"nombre_extranjeroCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_nivel_cuentaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_nivel_cuentaCuentaContableBusqueda"));
		//jButtonid_cuenta_contableCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContable"));
		//jButtonid_cuenta_contableCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContableBusqueda"));
		//jButtonid_centro_costoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContable.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContable"));
		//jButtonid_centro_costoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_moduloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtondescripcionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_movimientoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_movimientoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_costoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_costoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_centro_actividadCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_centro_actividadCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_activoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_activoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_relacionCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_relacionCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtones_para_f52CuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"es_para_f52CuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_monedaCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_intervaloCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_intervaloCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_tipo_flujo_efectivoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_flujo_efectivoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_debitoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContable"));
		//jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoCuentaContableBusqueda"));
		//jButtonid_cuenta_contable_creditoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContable"));
		//jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoCuentaContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaContable.jButtonordenCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"ordenCuentaContableBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoCuentaContable.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoCuentaContable"));

		this.jButtonBusquedaPorNombreCuentaContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreCuentaContable"));

		this.jButtonFK_IdCentroCostoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoCuentaContable"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoCuentaContable.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentaContable"));

		this.jButtonFK_IdCuentaContableCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCuentaContable"));

		this.jButtonBuscarFK_IdCuentaContableid_cuenta_contableCuentaContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaContable"));

		this.jButtonFK_IdModuloCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdModuloCuentaContable"));

		this.jButtonFK_IdNivelCuentaCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdNivelCuentaCuentaContable"));

		this.jButtonFK_IdTipoFlujoEfectivoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoFlujoEfectivoCuentaContable"));

		this.jButtonFK_IdTipoIntervaloCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoIntervaloCuentaContable"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarCuentaContableActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarCuentaContable.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosCuentaContable(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
					cuentacontableAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaContable cuentacontableAux:cuentacontables) {
					cuentacontableAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosCuentaContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentaContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
						cuentacontableAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaContable cuentacontableAux:cuentacontables) {
						cuentacontableAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
					
						if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO)) {
							existe=true;
							cuentacontableAux.setes_movimiento(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO)) {
							existe=true;
							cuentacontableAux.setes_centro_costo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD)) {
							existe=true;
							cuentacontableAux.setes_centro_actividad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESACTIVO)) {
							existe=true;
							cuentacontableAux.setes_activo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESRELACION)) {
							existe=true;
							cuentacontableAux.setes_relacion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESPARAF52)) {
							existe=true;
							cuentacontableAux.setes_para_f52(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaContable cuentacontableAux:cuentacontables) {
						
						if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO)) {
							existe=true;
							cuentacontableAux.setes_movimiento(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO)) {
							existe=true;
							cuentacontableAux.setes_centro_costo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD)) {
							existe=true;
							cuentacontableAux.setes_centro_actividad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESACTIVO)) {
							existe=true;
							cuentacontableAux.setes_activo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESRELACION)) {
							existe=true;
							cuentacontableAux.setes_relacion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESPARAF52)) {
							existe=true;
							cuentacontableAux.setes_para_f52(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaCuentaContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentaContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentaContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosCuentaContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentaContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosCuentaContable.getSelectedRows();
			
			CuentaContable cuentacontableLocal=new CuentaContable();
			
			//this.seleccionarTodosCuentaContable(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLocal =(CuentaContable) this.cuentacontableLogic.getCuentaContables().toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					cuentacontableLocal =(CuentaContable) this.cuentacontables.toArray()[this.jTableDatosCuentaContable.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				cuentacontableLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
						cuentacontableAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaContable cuentacontableAux:cuentacontables) {
						cuentacontableAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaCuentaContable(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentaContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentaContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentaContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualCuentaContableItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarCuentaContableParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralCuentaContableActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingCuentaContable(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralCuentaContable.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentaContable cuentacontableAux:this.cuentacontableLogic.getCuentaContables()) {
				
						if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							cuentacontableAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							cuentacontableAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO)) {
							existe=true;
							cuentacontableAux.setcodigo_extranjero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO)) {
							existe=true;
							cuentacontableAux.setnombre_extranjero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							cuentacontableAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ORDEN)) {
							existe=true;
							cuentacontableAux.setorden(Integer.parseInt(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaContable cuentacontableAux:cuentacontables) {
					
						if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							cuentacontableAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							cuentacontableAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO)) {
							existe=true;
							cuentacontableAux.setcodigo_extranjero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO)) {
							existe=true;
							cuentacontableAux.setnombre_extranjero(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							cuentacontableAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ORDEN)) {
							existe=true;
							cuentacontableAux.setorden(Integer.parseInt(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaCuentaContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesCuentaContableActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingCuentaContable(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioCuentaContable=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesCuentaContable.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteCuentaContable) {				
					conSplash=true;//false;										
					
					//this.startProcessCuentaContable(conSplash);
				
					this.generarReporteCuentaContablesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoCuentaContablesSeleccionados();
				//this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentaContablesSeleccionados(false);
				//this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentaContablesSeleccionados(true);
				//this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentaContable();
				
				this.exportarCuentaContablesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionCuentaContables();
				//this.importarCuentaContables();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentaContable();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelCuentaContablesSeleccionados();
				//this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessCuentaContable();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoCuentaContable)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyCuentaContable(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
				}	
			} 			
			else if(CuentaContableBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteCuentaContable) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessCuentaContable(conSplash);
					
						//this.actualizarParametrosGeneralCuentaContable();
						
						this.generarReporteProcesoAccionCuentaContablesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(CuentaContableBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Cuenta ContableS SELECCIONADOS?", "MANTENIMIENTO DE Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessCuentaContable();
				
						this.actualizarParametrosGeneralCuentaContable();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.cuentacontableReturnGeneral=cuentacontableLogic.procesarAccionCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.cuentacontableLogic.getCuentaContables(),this.cuentacontableParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarCuentaContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralCuentaContable();
					
					CuentaContableBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarCuentaContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentaContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentaContable.jComboBoxTiposAccionesFormularioCuentaContable.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessCuentaContable(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesCuentaContableActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessCuentaContable();
			
			if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
			CuentaContable cuentacontable=new CuentaContable();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingCuentaContable(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesCuentaContable.getSelectedItem();
			
			
			
			
			cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
			//this.sTipoAccion;
			
			if(cuentacontablesSeleccionados.size()==1) {
				for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
					cuentacontable=cuentacontableAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessCuentaContable();
			
      		//this.finishProcessCuentaContable(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarCuentaContableReturnGeneral() throws Exception {
		if(this.cuentacontableReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.cuentacontableReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.cuentacontableReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.cuentacontableReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.cuentacontableReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.cuentacontableReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingCuentaContable(false);
		}
		
		if(this.cuentacontableReturnGeneral.getConRetornoLista() || this.cuentacontableReturnGeneral.getConRetornoObjeto()) {
			if(this.cuentacontableReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentacontableLogic.setCuentaContables(this.cuentacontableReturnGeneral.getCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.cuentacontableReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentacontableLogic.setCuentaContable(this.cuentacontableReturnGeneral.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingCuentaContable(false);
		}
	}
	
	public void actualizarParametrosGeneralCuentaContable() throws Exception {
		
		
	}
	
	public ArrayList<CuentaContable> getCuentaContablesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioCuentaContable) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(CuentaContable cuentacontableAux:cuentacontableLogic.getCuentaContables()) {
					if(cuentacontableAux.getIsSelected()) {
						cuentacontablesSeleccionados.add(cuentacontableAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaContable cuentacontableAux:this.cuentacontables) {
					if(cuentacontableAux.getIsSelected()) {
						cuentacontablesSeleccionados.add(cuentacontableAux);				
					}
				}
			}
			
			if(cuentacontablesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						cuentacontablesSeleccionados.addAll(this.cuentacontableLogic.getCuentaContables());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						cuentacontablesSeleccionados.addAll(this.cuentacontables);				
					}
				}
			}
		} else {
			cuentacontablesSeleccionados.add(this.cuentacontable);
		}
		
		return cuentacontablesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteCuentaContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalCuentaContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoCuentaContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentaContablesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentaContablesSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Cuenta Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados);
		
	}	
	
	public void generarReporteNormalCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionCuentaContablesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		
		this.abrirInicializarFrameReporteDinamicoCuentaContable();
		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoCuentaContable();
		
		
		//this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados ,cuentacontableImplementable,cuentacontableImplementableHome);
	}
	
	public void mostrarImportacionCuentaContables() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionCuentaContable();
		
		this.abrirFrameImportacionCuentaContable();		
		
			
		//this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados ,cuentacontableImplementable,cuentacontableImplementableHome);
	}
	
	public void importarCuentaContables() throws Exception {		
	
	}
	
	public void exportarCuentaContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelCuentaContablesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoCuentaContablesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlCuentaContablesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Cuenta Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarCuentaContable(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarCuentaContable(cuentacontableAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//cuentacontableAux.setsDetalleGeneralEntityReporte(cuentacontableAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarCuentaContable(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESACTIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESRELACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ESPARAF52;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaContableConstantesFunciones.LABEL_ORDEN;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarCuentaContable(CuentaContable cuentacontable,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=cuentacontable.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcodigo_extranjero();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getnombre_extranjero();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getnivelcuenta_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcuentacontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_movimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_centro_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_centro_actividad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_activo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_relacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getes_para_f52().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.gettipointervalo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.gettipoflujoefectivo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcuentacontabledebito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getcuentacontablecredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentacontable.getorden().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("CuentaContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelCuentaContable(row);				
				iRow++;
			}				
			
			for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelCuentaContable(cuentacontableAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlCuentaContablesSeleccionados() throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();		
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentacontable.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("cuentacontables");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("cuentacontable");
			//elementRoot.appendChild(element);
		
			for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
				element = document.createElement("cuentacontable");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlCuentaContable(cuentacontableAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelCuentaContable(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESACTIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESRELACION);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ESPARAF52);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaContableConstantesFunciones.LABEL_ORDEN);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelCuentaContable(CuentaContable cuentacontable,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcodigo_extranjero());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getnombre_extranjero());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getnivelcuenta_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcuentacontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_movimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_centro_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_centro_actividad());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_activo());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_relacion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getes_para_f52());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.gettipointervalo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.gettipoflujoefectivo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcuentacontabledebito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getcuentacontablecredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentacontable.getorden());				
	}
	
	public void setFilaDatosExportarXmlCuentaContable(CuentaContable cuentacontable,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(CuentaContableConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(cuentacontable.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(CuentaContableConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(cuentacontable.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(CuentaContableConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(cuentacontable.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementcodigo = document.createElement(CuentaContableConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(cuentacontable.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(CuentaContableConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(cuentacontable.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementcodigo_extranjero = document.createElement(CuentaContableConstantesFunciones.CODIGOEXTRANJERO);
		elementcodigo_extranjero.appendChild(document.createTextNode(cuentacontable.getcodigo_extranjero().trim()));
		element.appendChild(elementcodigo_extranjero);

		Element elementnombre_extranjero = document.createElement(CuentaContableConstantesFunciones.NOMBREEXTRANJERO);
		elementnombre_extranjero.appendChild(document.createTextNode(cuentacontable.getnombre_extranjero().trim()));
		element.appendChild(elementnombre_extranjero);

		Element elementnivelcuenta_descripcion = document.createElement(CuentaContableConstantesFunciones.IDNIVELCUENTA);
		elementnivelcuenta_descripcion.appendChild(document.createTextNode(cuentacontable.getnivelcuenta_descripcion()));
		element.appendChild(elementnivelcuenta_descripcion);

		Element elementcuentacontable_descripcion = document.createElement(CuentaContableConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(cuentacontable.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(CuentaContableConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(cuentacontable.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementmodulo_descripcion = document.createElement(CuentaContableConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(cuentacontable.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementdescripcion = document.createElement(CuentaContableConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(cuentacontable.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementes_movimiento = document.createElement(CuentaContableConstantesFunciones.ESMOVIMIENTO);
		elementes_movimiento.appendChild(document.createTextNode(cuentacontable.getes_movimiento().toString().trim()));
		element.appendChild(elementes_movimiento);

		Element elementes_centro_costo = document.createElement(CuentaContableConstantesFunciones.ESCENTROCOSTO);
		elementes_centro_costo.appendChild(document.createTextNode(cuentacontable.getes_centro_costo().toString().trim()));
		element.appendChild(elementes_centro_costo);

		Element elementes_centro_actividad = document.createElement(CuentaContableConstantesFunciones.ESCENTROACTIVIDAD);
		elementes_centro_actividad.appendChild(document.createTextNode(cuentacontable.getes_centro_actividad().toString().trim()));
		element.appendChild(elementes_centro_actividad);

		Element elementes_activo = document.createElement(CuentaContableConstantesFunciones.ESACTIVO);
		elementes_activo.appendChild(document.createTextNode(cuentacontable.getes_activo().toString().trim()));
		element.appendChild(elementes_activo);

		Element elementes_relacion = document.createElement(CuentaContableConstantesFunciones.ESRELACION);
		elementes_relacion.appendChild(document.createTextNode(cuentacontable.getes_relacion().toString().trim()));
		element.appendChild(elementes_relacion);

		Element elementes_para_f52 = document.createElement(CuentaContableConstantesFunciones.ESPARAF52);
		elementes_para_f52.appendChild(document.createTextNode(cuentacontable.getes_para_f52().toString().trim()));
		element.appendChild(elementes_para_f52);

		Element elementmoneda_descripcion = document.createElement(CuentaContableConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(cuentacontable.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementtipointervalo_descripcion = document.createElement(CuentaContableConstantesFunciones.IDTIPOINTERVALO);
		elementtipointervalo_descripcion.appendChild(document.createTextNode(cuentacontable.gettipointervalo_descripcion()));
		element.appendChild(elementtipointervalo_descripcion);

		Element elementtipoflujoefectivo_descripcion = document.createElement(CuentaContableConstantesFunciones.IDTIPOFLUJOEFECTIVO);
		elementtipoflujoefectivo_descripcion.appendChild(document.createTextNode(cuentacontable.gettipoflujoefectivo_descripcion()));
		element.appendChild(elementtipoflujoefectivo_descripcion);

		Element elementcuentacontabledebito_descripcion = document.createElement(CuentaContableConstantesFunciones.IDCUENTACONTABLEDEBITO);
		elementcuentacontabledebito_descripcion.appendChild(document.createTextNode(cuentacontable.getcuentacontabledebito_descripcion()));
		element.appendChild(elementcuentacontabledebito_descripcion);

		Element elementcuentacontablecredito_descripcion = document.createElement(CuentaContableConstantesFunciones.IDCUENTACONTABLECREDITO);
		elementcuentacontablecredito_descripcion.appendChild(document.createTextNode(cuentacontable.getcuentacontablecredito_descripcion()));
		element.appendChild(elementcuentacontablecredito_descripcion);

		Element elementorden = document.createElement(CuentaContableConstantesFunciones.ORDEN);
		elementorden.appendChild(document.createTextNode(cuentacontable.getorden().toString().trim()));
		element.appendChild(elementorden);
	}
	
	public void generarReporteGroupGenericoCuentaContablesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<CuentaContable> cuentacontablesSeleccionados=new ArrayList<CuentaContable>();
		
		cuentacontablesSeleccionados=this.getCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoCuentaContable(cuentacontablesSeleccionados);
		
		this.generarReporteCuentaContables("Todos",cuentacontablesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoCuentaContable(ArrayList<CuentaContable> cuentacontablesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(CuentaContable cuentacontableAux:cuentacontablesSeleccionados) {
				cuentacontableAux.setsDetalleGeneralEntityReporte(cuentacontableAux.toString());
			
				if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_CODIGOEXTRANJERO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcodigo_extranjero());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_NOMBREEXTRANJERO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getnombre_extranjero());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDNIVELCUENTA)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getnivelcuenta_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcuentacontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESMOVIMIENTO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_movimiento()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROCOSTO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_centro_costo()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESCENTROACTIVIDAD)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_centro_actividad()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESACTIVO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_activo()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESRELACION)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_relacion()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ESPARAF52)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentacontableAux.getes_para_f52()));
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDTIPOINTERVALO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.gettipointervalo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDTIPOFLUJOEFECTIVO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.gettipoflujoefectivo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcuentacontabledebito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getcuentacontablecredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaContableConstantesFunciones.LABEL_ORDEN)) {
					existe=true;
					cuentacontableAux.setsDescripcionGeneralEntityReporte1(cuentacontableAux.getorden().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesCuentaContable(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoCuentaContable=true;
				this.isVisibilidadCeldaNuevoRelacionesCuentaContable=true;
				this.isVisibilidadCeldaGuardarCambiosCuentaContable=true;
			}
			
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=true;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=true;
			this.isVisibilidadCeldaEliminarCuentaContable=true;
			this.isVisibilidadCeldaCancelarCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=true;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=true;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=true;
			this.isVisibilidadCeldaModificarCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
			this.isVisibilidadCeldaModificarCuentaContable=true;
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
			this.isVisibilidadCeldaCancelarCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaContable=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(CuentaContableJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=true;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=true;
		} else {
			this.actualizarEstadoPanelsCuentaContable(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarCuentaContable=false;
			//this.isVisibilidadCeldaVerFormCuentaContable=false;
			this.isVisibilidadCeldaDuplicarCuentaContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!cuentacontableSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
		} else {
			this.isVisibilidadCeldaNuevoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(cuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(!cuentacontableSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;												
			}
			
			this.jButtonCerrarCuentaContable.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesCuentaContable=false;
		}
		
		if(!this.permiteMantenimiento(this.cuentacontable)) {
			this.isVisibilidadCeldaActualizarCuentaContable=false;
			this.isVisibilidadCeldaEliminarCuentaContable=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesCuentaContable() {
	}
	
	public void actualizarEstadoPanelsCuentaContable(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionCuentaContable!=null) {
				this.jScrollPanelDatosEdicionCuentaContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaContable!=null) {
				this.jScrollPanelDatosCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaContable!=null) {
				this.jPanelPaginacionCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasCuentaContable!=null) {
					this.jTabbedPaneBusquedasCuentaContable.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.cuentacontableSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaContable!=null) {
				this.jTabbedPaneBusquedasCuentaContable.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesCuentaContable!=null) {
				this.jPanelParametrosReportesCuentaContable.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaNivelCuenta(Boolean isParaNivelCuenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaNivelCuentaNegation=!isParaNivelCuenta;

			this.isVisibilidadBusquedaPorCodigo=isParaNivelCuentaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaNivelCuentaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaNivelCuentaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaNivelCuentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaNivelCuentaNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaNivelCuenta;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaNivelCuentaNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaNivelCuentaNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContable;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadBusquedaPorCodigo=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadBusquedaPorCodigo=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaModulo;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadBusquedaPorCodigo=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoIntervalo(Boolean isParaTipoIntervalo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoIntervaloNegation=!isParaTipoIntervalo;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaTipoIntervaloNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaTipoIntervalo;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoFlujoEfectivo(Boolean isParaTipoFlujoEfectivo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoFlujoEfectivoNegation=!isParaTipoFlujoEfectivo;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaTipoFlujoEfectivo;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaTipoFlujoEfectivoNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDebito(Boolean isParaCuentaContableDebito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDebitoNegation=!isParaCuentaContableDebito;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCredito(Boolean isParaCuentaContableCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoNegation=!isParaCuentaContableCredito;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorCodigoCuentaContable);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelBusquedaPorNombreCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCentroCostoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdCuentaContableCuentaContable);}

			this.isVisibilidadFK_IdModulo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdModulo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdModuloCuentaContable);}

			this.isVisibilidadFK_IdNivelCuenta=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdNivelCuenta) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdNivelCuentaCuentaContable);}

			this.isVisibilidadFK_IdTipoFlujoEfectivo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoFlujoEfectivo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoFlujoEfectivoCuentaContable);}

			this.isVisibilidadFK_IdTipoIntervalo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoIntervalo) {this.jTabbedPaneBusquedasCuentaContable.remove(jPanelFK_IdTipoIntervaloCuentaContable);}
		}
		
	}
	
	
	
	

	public String registrarSesionCuentaContableParaBusquedaCuentaContables() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableSessionBean.setsPathNavegacionActual(cuentacontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableSessionBean.getisPaginaPopup();
			cuentacontableSessionBean.setisPaginaPopup(false);
			cuentacontableSessionBean.setEstaModoBusqueda(true);
			cuentacontableSessionBean.setsFuncionBusquedaRapida("window.opener.cuentacontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable(TO_REPLACE);");
			cuentacontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentaContableConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentaContable(true);
			//cuentacontableSessionBean.setlidCuentaContableActual(this.idCuentaContableActual);

			cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaContable(true);
			cuentacontableSessionBean.setlIdCuentaContableActualForeignKey(this.idCuentaContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentaContableParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(cuentacontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentacontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(CuentaContableConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionCuentaContable(true);
			//centrocostoSessionBean.setlidCuentaContableActual(this.idCuentaContableActual);

			cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaContable(true);
			cuentacontableSessionBean.setlIdCuentaContableActualForeignKey(this.idCuentaContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentaContableParaBusquedaCuentaContableDebitos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(cuentacontabledebitoSessionBean==null) {
				cuentacontabledebitoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledebitoSessionBean.setsPathNavegacionActual(cuentacontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledebitoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledebitoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledebitoSessionBean.getisPaginaPopup();
			cuentacontabledebitoSessionBean.setisPaginaPopup(false);
			cuentacontabledebitoSessionBean.setEstaModoBusqueda(true);
			cuentacontabledebitoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentacontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_debito(TO_REPLACE);");
			cuentacontabledebitoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledebitoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentaContableConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentaContable(true);
			//cuentacontableSessionBean.setlidCuentaContableActual(this.idCuentaContableActual);

			cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaContable(true);
			cuentacontableSessionBean.setlIdCuentaContableActualForeignKey(this.idCuentaContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentaContableParaBusquedaCuentaContableCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			if(cuentacontablecreditoSessionBean==null) {
				cuentacontablecreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditoSessionBean.setsPathNavegacionActual(cuentacontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditoSessionBean.getisPaginaPopup();
			cuentacontablecreditoSessionBean.setisPaginaPopup(false);
			cuentacontablecreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentacontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito(TO_REPLACE);");
			cuentacontablecreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentaContableConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentaContable(true);
			//cuentacontableSessionBean.setlidCuentaContableActual(this.idCuentaContableActual);

			cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaContable(true);
			cuentacontableSessionBean.setlIdCuentaContableActualForeignKey(this.idCuentaContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//CuentaContableSessionBean cuentacontableSessionBean=new CuentaContableSessionBean();
		
		if(this.cuentacontableSessionBean==null) {
			this.cuentacontableSessionBean=new CuentaContableSessionBean();
		}
		
		this.cuentacontableSessionBean.setsUltimaBusquedaCuentaContable(this.getsAccionBusqueda());
		this.cuentacontableSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.cuentacontableSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			cuentacontableSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
			cuentacontableSessionBean.setnombre(this.getnombreBusquedaPorNombre());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			cuentacontableSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
			cuentacontableSessionBean.setid_cuenta_contable(this.getid_cuenta_contableFK_IdCuentaContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			cuentacontableSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			cuentacontableSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNivelCuenta")) {
			cuentacontableSessionBean.setid_nivel_cuenta(this.getid_nivel_cuentaFK_IdNivelCuenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoFlujoEfectivo")) {
			cuentacontableSessionBean.setid_tipo_flujo_efectivo(this.getid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoIntervalo")) {
			cuentacontableSessionBean.setid_tipo_intervalo(this.getid_tipo_intervaloFK_IdTipoIntervalo());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//CuentaContableSessionBean cuentacontableSessionBean=new CuentaContableSessionBean();
		
		if(this.cuentacontableSessionBean==null) {
			this.cuentacontableSessionBean=new CuentaContableSessionBean();
		}
		
		if(this.cuentacontableSessionBean.getsUltimaBusquedaCuentaContable()!=null&&!this.cuentacontableSessionBean.getsUltimaBusquedaCuentaContable().equals("")) {
			this.setsAccionBusqueda(cuentacontableSessionBean.getsUltimaBusquedaCuentaContable());
			this.setiNumeroPaginacion(cuentacontableSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(cuentacontableSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(cuentacontableSessionBean.getcodigo());
				cuentacontableSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
				this.setnombreBusquedaPorNombre(cuentacontableSessionBean.getnombre());
				cuentacontableSessionBean.setnombre("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(cuentacontableSessionBean.getid_centro_costo());
				cuentacontableSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
				this.setid_cuenta_contableFK_IdCuentaContable(cuentacontableSessionBean.getid_cuenta_contable());
				cuentacontableSessionBean.setid_cuenta_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(cuentacontableSessionBean.getid_empresa());
				cuentacontableSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(cuentacontableSessionBean.getid_modulo());
				cuentacontableSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNivelCuenta")) {
				this.setid_nivel_cuentaFK_IdNivelCuenta(cuentacontableSessionBean.getid_nivel_cuenta());
				cuentacontableSessionBean.setid_nivel_cuenta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoFlujoEfectivo")) {
				this.setid_tipo_flujo_efectivoFK_IdTipoFlujoEfectivo(cuentacontableSessionBean.getid_tipo_flujo_efectivo());
				cuentacontableSessionBean.setid_tipo_flujo_efectivo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoIntervalo")) {
				this.setid_tipo_intervaloFK_IdTipoIntervalo(cuentacontableSessionBean.getid_tipo_intervalo());
				cuentacontableSessionBean.setid_tipo_intervalo(-1L);
			}
		}
		
		this.cuentacontableSessionBean.setsUltimaBusquedaCuentaContable("");
		this.cuentacontableSessionBean.setiNumeroPaginacion(CuentaContableConstantesFunciones.INUMEROPAGINACION);
		this.cuentacontableSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaCuentaContable(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioCuentaContable() {
		this.updateBorderResaltarBusquedasFormularioCuentaContable();
		this.updateVisibilidadBusquedasFormularioCuentaContable();
		this.updateHabilitarBusquedasFormularioCuentaContable();
	}
	
	public void updateBorderResaltarBusquedasFormularioCuentaContable() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasCuentaContable.getComponents().length>0) {
	

		if(this.cuentacontableConstantesFunciones.resaltarBusquedaPorCodigoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarBusquedaPorCodigoCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarBusquedaPorNombreCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorNombreCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarBusquedaPorNombreCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdCentroCostoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdCentroCostoCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdModuloCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdModuloCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdModuloCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdNivelCuentaCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdNivelCuentaCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdNivelCuentaCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoFlujoEfectivoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoFlujoEfectivoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoFlujoEfectivoCuentaContable);
			}
		}

		if(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoIntervaloCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoIntervaloCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoIntervaloCuentaContable);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioCuentaContable() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasCuentaContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarBusquedaPorCodigoCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarBusquedaPorCodigoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorNombreCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarBusquedaPorNombreCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarBusquedaPorNombreCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdCentroCostoCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdCentroCostoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdModuloCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdModuloCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdModuloCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdNivelCuentaCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdNivelCuentaCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdNivelCuentaCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoFlujoEfectivoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdTipoFlujoEfectivoCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdTipoFlujoEfectivoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoIntervaloCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentacontableConstantesFunciones.mostrarFK_IdTipoIntervaloCuentaContable);
			if(!this.cuentacontableConstantesFunciones.mostrarFK_IdTipoIntervaloCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasCuentaContable.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioCuentaContable() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasCuentaContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarBusquedaPorCodigoCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarBusquedaPorCodigoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorNombreCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarBusquedaPorNombreCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarBusquedaPorNombreCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdCentroCostoCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdCentroCostoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdCuentaContableCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdCuentaContableCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdModuloCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdModuloCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdModuloCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdNivelCuentaCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdNivelCuentaCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdNivelCuentaCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoFlujoEfectivoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdTipoFlujoEfectivoCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdTipoFlujoEfectivoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoIntervaloCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentacontableConstantesFunciones.activarFK_IdTipoIntervaloCuentaContable);
				this.jTabbedPaneBusquedasCuentaContable.setEnabledAt(index,this.cuentacontableConstantesFunciones.activarFK_IdTipoIntervaloCuentaContable);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaCuentaContable(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarBusquedaPorCodigoCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarBusquedaPorCodigoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNombre")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelBusquedaPorNombreCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarBusquedaPorNombreCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarBusquedaPorNombreCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdCentroCostoCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdCentroCostoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContable")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdModulo")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdModuloCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdModuloCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdModuloCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNivelCuenta")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdNivelCuentaCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdNivelCuentaCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdNivelCuentaCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoFlujoEfectivo")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoFlujoEfectivoCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdTipoFlujoEfectivoCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoFlujoEfectivoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoIntervalo")) {
			index= this.jTabbedPaneBusquedasCuentaContable.indexOfComponent(this.jPanelFK_IdTipoIntervaloCuentaContable);

			this.jTabbedPaneBusquedasCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaContable.getComponent(index);

			this.cuentacontableConstantesFunciones.setResaltarFK_IdTipoIntervaloCuentaContable(resaltar);

			jPanel.setBorder(this.cuentacontableConstantesFunciones.resaltarFK_IdTipoIntervaloCuentaContable);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarCuentaContable.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioCuentaContable() throws Exception {

		if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioCuentaContable();
		this.updateVisibilidadResaltarControlesFormularioCuentaContable();
		this.updateHabilitarResaltarControlesFormularioCuentaContable();
		
	}
	
	public void updateBorderResaltarControlesFormularioCuentaContable() throws Exception {
		if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.cuentacontableConstantesFunciones.resaltaridCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltaridCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_empresaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_empresaCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarcodigoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarcodigoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarnombreCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarnombreCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarcodigo_extranjeroCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarcodigo_extranjeroCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarnombre_extranjeroCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarnombre_extranjeroCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_nivel_cuentaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_nivel_cuentaCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contableCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contableCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_centro_costoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_centro_costoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_moduloCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_moduloCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltardescripcionCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltardescripcionCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_movimientoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_movimientoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_centro_costoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_centro_costoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_centro_actividadCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_centro_actividadCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_activoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_activoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_relacionCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_relacionCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltares_para_f52CuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltares_para_f52CuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_monedaCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_monedaCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_tipo_intervaloCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_tipo_intervaloCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_tipo_flujo_efectivoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_tipo_flujo_efectivoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoCuentaContable);}
		if(this.cuentacontableConstantesFunciones.resaltarordenCuentaContable!=null && this.jInternalFrameDetalleFormCuentaContable!=null) {this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setBorder(this.cuentacontableConstantesFunciones.resaltarordenCuentaContable);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioCuentaContable() throws Exception {		
		if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
	
		//this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostraridCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelidCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostraridCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_empresaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_empresaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_empresaCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarcodigoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelcodigoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarcodigoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarnombreCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelnombreCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarnombreCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarcodigo_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelcodigo_extranjeroCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarcodigo_extranjeroCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarnombre_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelnombre_extranjeroCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarnombre_extranjeroCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_nivel_cuentaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_nivel_cuentaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_nivel_cuentaCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contableCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_cuenta_contableCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contableCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contableCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_centro_costoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_centro_costoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_centro_costoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_moduloCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_moduloCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_moduloCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrardescripcionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneldescripcionCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrardescripcionCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_movimientoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_movimientoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_movimientoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_centro_costoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_centro_costoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_centro_actividadCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_centro_actividadCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_centro_actividadCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_activoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_activoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_activoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_relacionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_relacionCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_relacionCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_para_f52CuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPaneles_para_f52CuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrares_para_f52CuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_monedaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_monedaCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_monedaCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_tipo_intervaloCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_tipo_intervaloCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_tipo_intervaloCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_tipo_flujo_efectivoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_tipo_flujo_efectivoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_tipo_flujo_efectivoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_cuenta_contable_debitoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelid_cuenta_contable_creditoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoCuentaContable);
		//this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarordenCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jPanelordenCuentaContable.setVisible(this.cuentacontableConstantesFunciones.mostrarordenCuentaContable);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioCuentaContable() throws Exception {
		if(this.jInternalFrameDetalleFormCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentaContable!=null) {
	
		this.jInternalFrameDetalleFormCuentaContable.jLabelidCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activaridCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_empresaCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_empresaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarcodigoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreanombreCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarnombreCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldcodigo_extranjeroCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarcodigo_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreanombre_extranjeroCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarnombre_extranjeroCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_nivel_cuentaCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_nivel_cuentaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contableCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contableCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contableCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contableCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_centro_costoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_centro_costoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_centro_costoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_moduloCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_moduloCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextAreadescripcionCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activardescripcionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_movimientoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_movimientoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_costoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_centro_costoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_centro_actividadCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_centro_actividadCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_activoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_activoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_relacionCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_relacionCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jCheckBoxes_para_f52CuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activares_para_f52CuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_monedaCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_monedaCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_intervaloCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_tipo_intervaloCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_tipo_flujo_efectivoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_tipo_flujo_efectivoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_debitoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contable_debitoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_debitoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contable_debitoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jComboBoxid_cuenta_contable_creditoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contable_creditoCuentaContable);
			this.jInternalFrameDetalleFormCuentaContable.jButtonid_cuenta_contable_creditoCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarid_cuenta_contable_creditoCuentaContable);
		this.jInternalFrameDetalleFormCuentaContable.jTextFieldordenCuentaContable.setEnabled(this.cuentacontableConstantesFunciones.activarordenCuentaContable);
		}
	}
	
		
}