/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.DetalleFacturaProveedorConstantesFunciones;
import com.bydan.erp.contabilidad.util.DetalleFacturaProveedorParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.DetalleFacturaProveedorParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.DetalleFacturaProveedorBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleFacturaProveedorBeanSwingJInternalFrame extends DetalleFacturaProveedorJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleFacturaProveedorBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleFacturaProveedor> detallefacturaproveedorValidator = new ClassValidator<DetalleFacturaProveedor>(DetalleFacturaProveedor.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleFacturaProveedor detallefacturaproveedor;	
	public DetalleFacturaProveedor detallefacturaproveedorAux;
	public DetalleFacturaProveedor detallefacturaproveedorAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleFacturaProveedor detallefacturaproveedorTotales;
	public Long idDetalleFacturaProveedorActual;
	public Long iIdNuevoDetalleFacturaProveedor=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboFacturaProveedor="";

	public List<FacturaProveedor> facturaproveedorsForeignKey;

	public List<FacturaProveedor> getfacturaproveedorsForeignKey() {
		return facturaproveedorsForeignKey;
	}

	public void setfacturaproveedorsForeignKey(List<FacturaProveedor> facturaproveedorsForeignKey) {
		this.facturaproveedorsForeignKey = facturaproveedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public FacturaProveedor facturaproveedorForeignKey;

	public FacturaProveedor getfacturaproveedorForeignKey() {
		return facturaproveedorForeignKey;
	}

	public void setfacturaproveedorForeignKey(FacturaProveedor facturaproveedorForeignKey) {
		this.facturaproveedorForeignKey = facturaproveedorForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboNovedadProducto="";

	public List<NovedadProducto> novedadproductosForeignKey;

	public List<NovedadProducto> getnovedadproductosForeignKey() {
		return novedadproductosForeignKey;
	}

	public void setnovedadproductosForeignKey(List<NovedadProducto> novedadproductosForeignKey) {
		this.novedadproductosForeignKey = novedadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public NovedadProducto novedadproductoForeignKey;

	public NovedadProducto getnovedadproductoForeignKey() {
		return novedadproductoForeignKey;
	}

	public void setnovedadproductoForeignKey(NovedadProducto novedadproductoForeignKey) {
		this.novedadproductoForeignKey = novedadproductoForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCosto="";

	public List<CuentaContable> cuentacontablecostosForeignKey;

	public List<CuentaContable> getcuentacontablecostosForeignKey() {
		return cuentacontablecostosForeignKey;
	}

	public void setcuentacontablecostosForeignKey(List<CuentaContable> cuentacontablecostosForeignKey) {
		this.cuentacontablecostosForeignKey = cuentacontablecostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoForeignKey;

	public CuentaContable getcuentacontablecostoForeignKey() {
		return cuentacontablecostoForeignKey;
	}

	public void setcuentacontablecostoForeignKey(CuentaContable cuentacontablecostoForeignKey) {
		this.cuentacontablecostoForeignKey = cuentacontablecostoForeignKey;
	}

	public String sFinalQueryComboBodegaEnviar="";

	public List<Bodega> bodegaenviarsForeignKey;

	public List<Bodega> getbodegaenviarsForeignKey() {
		return bodegaenviarsForeignKey;
	}

	public void setbodegaenviarsForeignKey(List<Bodega> bodegaenviarsForeignKey) {
		this.bodegaenviarsForeignKey = bodegaenviarsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaenviarForeignKey;

	public Bodega getbodegaenviarForeignKey() {
		return bodegaenviarForeignKey;
	}

	public void setbodegaenviarForeignKey(Bodega bodegaenviarForeignKey) {
		this.bodegaenviarForeignKey = bodegaenviarForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleFacturaProveedor;
	public Boolean isPermisoNuevoDetalleFacturaProveedor;
	public Boolean isPermisoActualizarDetalleFacturaProveedor;
	public Boolean isPermisoActualizarOriginalDetalleFacturaProveedor;
	public Boolean isPermisoEliminarDetalleFacturaProveedor;
	public Boolean isPermisoGuardarCambiosDetalleFacturaProveedor;
	public Boolean isPermisoConsultaDetalleFacturaProveedor;
	public Boolean isPermisoBusquedaDetalleFacturaProveedor;
	public Boolean isPermisoReporteDetalleFacturaProveedor;
	public Boolean isPermisoPaginacionMedioDetalleFacturaProveedor;
	public Boolean isPermisoPaginacionAltoDetalleFacturaProveedor;
	public Boolean isPermisoPaginacionTodoDetalleFacturaProveedor;
	public Boolean isPermisoCopiarDetalleFacturaProveedor;
	public Boolean isPermisoVerFormDetalleFacturaProveedor;
	public Boolean isPermisoDuplicarDetalleFacturaProveedor;
	public Boolean isPermisoOrdenDetalleFacturaProveedor;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorReturnGeneral;
	public DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleFacturaProveedor=false;
	public Boolean esParaAccionDesdeFormularioDetalleFacturaProveedor=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleFacturaProveedorSessionBeanAdditional detallefacturaproveedorSessionBeanAdditional=null;
	
	public DetalleFacturaProveedorSessionBeanAdditional getDetalleFacturaProveedorSessionBeanAdditional() {
		return this.detallefacturaproveedorSessionBeanAdditional;
	}
	
	public void setDetalleFacturaProveedorSessionBeanAdditional(DetalleFacturaProveedorSessionBeanAdditional detallefacturaproveedorSessionBeanAdditional) {
		try {
			this.detallefacturaproveedorSessionBeanAdditional=detallefacturaproveedorSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleFacturaProveedorBeanSwingJInternalFrameAdditional detallefacturaproveedorBeanSwingJInternalFrameAdditional=null;
	//public class DetalleFacturaProveedorBeanSwingJInternalFrame
	
	public DetalleFacturaProveedorBeanSwingJInternalFrameAdditional getDetalleFacturaProveedorBeanSwingJInternalFrameAdditional() {
		return this.detallefacturaproveedorBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleFacturaProveedorBeanSwingJInternalFrameAdditional(DetalleFacturaProveedorBeanSwingJInternalFrameAdditional detallefacturaproveedorBeanSwingJInternalFrameAdditional) {
		try {
			this.detallefacturaproveedorBeanSwingJInternalFrameAdditional=detallefacturaproveedorBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleFacturaProveedorLogic detallefacturaproveedorLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleFacturaProveedor detallefacturaproveedorBean;
	public DetalleFacturaProveedorConstantesFunciones detallefacturaproveedorConstantesFunciones;
	//public DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorReturnGeneral;
	
	//FK
	
	public FacturaProveedorLogic facturaproveedorLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public NovedadProductoLogic novedadproductoLogic;
	public CentroCostoLogic centrocostoLogic;
	public CuentaContableLogic cuentacontablecostoLogic;
	public BodegaLogic bodegaenviarLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleFacturaProveedor> detallefacturaproveedors;	
	//public List<DetalleFacturaProveedor> detallefacturaproveedorsEliminados;
	//public List<DetalleFacturaProveedor> detallefacturaproveedorsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleFacturaProveedor=true;
	public Boolean isVisibilidadCeldaCopiarDetalleFacturaProveedor=true;
	public Boolean isVisibilidadCeldaVerFormDetalleFacturaProveedor=true;
	public Boolean isVisibilidadCeldaOrdenDetalleFacturaProveedor=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaCancelarDetalleFacturaProveedor=false;
	public Boolean isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdBodegaEnviar=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFacturaProveedor=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdNovedadProducto=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleFacturaProveedor() {
		return this.iIdNuevoDetalleFacturaProveedor;
	}

	public void setiIdNuevoDetalleFacturaProveedor(Long iIdNuevoDetalleFacturaProveedor) {
		this.iIdNuevoDetalleFacturaProveedor = iIdNuevoDetalleFacturaProveedor;
	}
	
	public Long getidDetalleFacturaProveedorActual() {
		return this.idDetalleFacturaProveedorActual;
	}

	public void setidDetalleFacturaProveedorActual(Long idDetalleFacturaProveedorActual) {
		this.idDetalleFacturaProveedorActual = idDetalleFacturaProveedorActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleFacturaProveedor getdetallefacturaproveedor() {
		return this.detallefacturaproveedor;
	}

	public void setdetallefacturaproveedor(DetalleFacturaProveedor detallefacturaproveedor) {
		this.detallefacturaproveedor = detallefacturaproveedor;
	}
	
	public DetalleFacturaProveedor getdetallefacturaproveedorAux() {
		return this.detallefacturaproveedorAux;
	}

	public void setdetallefacturaproveedorAux(DetalleFacturaProveedor detallefacturaproveedorAux) {
		this.detallefacturaproveedorAux = detallefacturaproveedorAux;
	}				
	
	public DetalleFacturaProveedor getdetallefacturaproveedorAnterior() {
		return this.detallefacturaproveedorAnterior;
	}

	public void setdetallefacturaproveedorAnterior(DetalleFacturaProveedor detallefacturaproveedorAnterior) {
		this.detallefacturaproveedorAnterior = detallefacturaproveedorAnterior;
	}	
	
	public DetalleFacturaProveedor getdetallefacturaproveedorTotales() {
		return this.detallefacturaproveedorTotales;
	}

	public void setdetallefacturaproveedorTotales(DetalleFacturaProveedor detallefacturaproveedorTotales) {
		this.detallefacturaproveedorTotales = detallefacturaproveedorTotales;
	}	
	
	public DetalleFacturaProveedor getdetallefacturaproveedorBean() {
		return this.detallefacturaproveedorBean;
	}

	public void setdetallefacturaproveedorBean(DetalleFacturaProveedor detallefacturaproveedorBean) {
		this.detallefacturaproveedorBean = detallefacturaproveedorBean;
	}	
	
	public DetalleFacturaProveedorParameterReturnGeneral getdetallefacturaproveedorReturnGeneral() {
		return this.detallefacturaproveedorReturnGeneral;
	}

	public void setdetallefacturaproveedorReturnGeneral(DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorReturnGeneral) {
		this.detallefacturaproveedorReturnGeneral = detallefacturaproveedorReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_bodega_enviarFK_IdBodegaEnviar=-1L;

	public Long getid_bodega_enviarFK_IdBodegaEnviar() {
		return this.id_bodega_enviarFK_IdBodegaEnviar;
	}

	public void setid_bodega_enviarFK_IdBodegaEnviar(Long id_bodega_enviarFK_IdBodegaEnviar) {
		this.id_bodega_enviarFK_IdBodegaEnviar = id_bodega_enviarFK_IdBodegaEnviar;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contable_costoFK_IdCuentaContableCosto=-1L;

	public Long getid_cuenta_contable_costoFK_IdCuentaContableCosto() {
		return this.id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public void setid_cuenta_contable_costoFK_IdCuentaContableCosto(Long id_cuenta_contable_costoFK_IdCuentaContableCosto) {
		this.id_cuenta_contable_costoFK_IdCuentaContableCosto = id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_factura_proveedorFK_IdFacturaProveedor=-1L;

	public Long getid_factura_proveedorFK_IdFacturaProveedor() {
		return this.id_factura_proveedorFK_IdFacturaProveedor;
	}

	public void setid_factura_proveedorFK_IdFacturaProveedor(Long id_factura_proveedorFK_IdFacturaProveedor) {
		this.id_factura_proveedorFK_IdFacturaProveedor = id_factura_proveedorFK_IdFacturaProveedor;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_novedad_productoFK_IdNovedadProducto=-1L;

	public Long getid_novedad_productoFK_IdNovedadProducto() {
		return this.id_novedad_productoFK_IdNovedadProducto;
	}

	public void setid_novedad_productoFK_IdNovedadProducto(Long id_novedad_productoFK_IdNovedadProducto) {
		this.id_novedad_productoFK_IdNovedadProducto = id_novedad_productoFK_IdNovedadProducto;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleFacturaProveedorLogic getDetalleFacturaProveedorLogic()	{		
		return detallefacturaproveedorLogic;
	}

	public void setDetalleFacturaProveedorLogic(DetalleFacturaProveedorLogic detallefacturaproveedorLogic) {
		this.detallefacturaproveedorLogic = detallefacturaproveedorLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleFacturaProveedor() {
		return isEsNuevoDetalleFacturaProveedor;
	}

	public void setIsEsNuevoDetalleFacturaProveedor(Boolean isEsNuevoDetalleFacturaProveedor) {
		this.isEsNuevoDetalleFacturaProveedor = isEsNuevoDetalleFacturaProveedor;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleFacturaProveedor() {
		return esParaAccionDesdeFormularioDetalleFacturaProveedor;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleFacturaProveedor(Boolean esParaAccionDesdeFormularioDetalleFacturaProveedor) {
		this.esParaAccionDesdeFormularioDetalleFacturaProveedor = esParaAccionDesdeFormularioDetalleFacturaProveedor;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosFacturaProveedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturaproveedorsForeignKey=new ArrayList<FacturaProveedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaProveedorLogic facturaproveedorLogic=new FacturaProveedorLogic();

			facturaproveedorLogic.getFacturaProveedorDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFacturaProveedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorDataAccess().setIsForForeingKeyData(true);

					facturaproveedorLogic.getTodosFacturaProveedorsWithConnection(sFinalQuery,new Pagination());

					this.facturaproveedorsForeignKey=facturaproveedorLogic.getFacturaProveedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFacturaProveedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidFacturaProveedorActual());
					this.facturaproveedorsForeignKey.add(facturaproveedorLogic.getFacturaProveedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNovedadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NovedadProductoLogic novedadproductoLogic=new NovedadProductoLogic();

			//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

					novedadproductoLogic.getTodosNovedadProductosWithConnection(sFinalQuery,new Pagination());

					this.novedadproductosForeignKey=novedadproductoLogic.getNovedadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNovedadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					novedadproductoLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidNovedadProductoActual());
					this.novedadproductosForeignKey.add(novedadproductoLogic.getNovedadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidCuentaContableCostoActual());
					this.cuentacontablecostosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegaEnviarsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegaenviarsForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaenviarLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegaenviarsForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodegaEnviar(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidBodegaEnviarActual());
					this.bodegaenviarsForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detallefacturaproveedorSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualFacturaProveedorForeignKey(Long idFacturaProveedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			FacturaProveedor  facturaproveedorTemp=null;

			for(FacturaProveedor facturaproveedorAux:facturaproveedorsForeignKey) {
				if(facturaproveedorAux.getId()!=null && facturaproveedorAux.getId().equals(idFacturaProveedorSeleccionado)) {
					facturaproveedorTemp=facturaproveedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaproveedorTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setFacturaProveedor(facturaproveedorTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedorTemp);
					}
				} else {
					//jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedorTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFacturaProveedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaproveedorTemp!=null && jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor!=null) {
						jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedorTemp);
					} else {
						if(jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor!=null) {
							//jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedorTemp);
							if(jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaProveedorForeignKeyDescripcion(Long idFacturaProveedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			FacturaProveedor  facturaproveedorTemp=null;

			for(FacturaProveedor facturaproveedorAux:facturaproveedorsForeignKey) {
				if(facturaproveedorAux.getId()!=null && facturaproveedorAux.getId().equals(idFacturaProveedorSeleccionado)) {
					facturaproveedorTemp=facturaproveedorAux;
					break;
				}
			}


			sDescripcion=FacturaProveedorConstantesFunciones.getFacturaProveedorDescripcion(facturaproveedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaProveedorForeignKeyGenerico(Long idFacturaProveedorSeleccionado,JComboBox jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			FacturaProveedor  facturaproveedorTemp=null;

			for(FacturaProveedor facturaproveedorAux:facturaproveedorsForeignKey) {
				if(facturaproveedorAux.getId()!=null && facturaproveedorAux.getId().equals(idFacturaProveedorSeleccionado)) {
					facturaproveedorTemp=facturaproveedorAux;
					break;
				}
			}

			if(facturaproveedorTemp!=null) {
				jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico.setSelectedItem(facturaproveedorTemp);
			} else {
				if(jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico!=null && jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleFacturaProveedor.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleFacturaProveedorGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleFacturaProveedorGenerico!=null && jComboBoxid_empresaDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleFacturaProveedorGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleFacturaProveedorGenerico!=null && jComboBoxid_sucursalDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleFacturaProveedorGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleFacturaProveedorGenerico!=null && jComboBoxid_bodegaDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleFacturaProveedor.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor!=null) {
						jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleFacturaProveedorGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleFacturaProveedorGenerico!=null && jComboBoxid_productoDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleFacturaProveedor.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleFacturaProveedorGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleFacturaProveedorGenerico!=null && jComboBoxid_unidadDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleFacturaProveedorGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleFacturaProveedorGenerico!=null && jComboBoxid_ejercicioDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleFacturaProveedor.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleFacturaProveedorGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleFacturaProveedorGenerico!=null && jComboBoxid_periodoDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNovedadProductoForeignKey(Long idNovedadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(novedadproductoTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setNovedadProducto(novedadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedItem(novedadproductoTemp);
					}
				} else {
					//jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedItem(novedadproductoTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(novedadproductoTemp!=null && jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor!=null) {
						jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.setSelectedItem(novedadproductoTemp);
					} else {
						if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor!=null) {
							//jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.setSelectedItem(novedadproductoTemp);
							if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNovedadProductoForeignKeyDescripcion(Long idNovedadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}


			sDescripcion=NovedadProductoConstantesFunciones.getNovedadProductoDescripcion(novedadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNovedadProductoForeignKeyGenerico(Long idNovedadProductoSeleccionado,JComboBox jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(novedadproductoTemp!=null) {
				jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico.setSelectedItem(novedadproductoTemp);
			} else {
				if(jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico!=null && jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleFacturaProveedorGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleFacturaProveedorGenerico!=null && jComboBoxid_centro_costoDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoForeignKey(Long idCuentaContableCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setCuentaContableCosto(cuentacontablecostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedItem(cuentacontablecostoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedItem(cuentacontablecostoTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecostoTemp!=null && jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor!=null) {
						jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.setSelectedItem(cuentacontablecostoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor!=null) {
							//jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.setSelectedItem(cuentacontablecostoTemp);
							if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoForeignKeyDescripcion(Long idCuentaContableCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoForeignKeyGenerico(Long idCuentaContableCostoSeleccionado,JComboBox jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(cuentacontablecostoTemp!=null) {
				jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico.setSelectedItem(cuentacontablecostoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaEnviarForeignKey(Long idBodegaEnviarSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaenviarTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setBodegaEnviar(bodegaenviarTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedItem(bodegaenviarTemp);
					}
				} else {
					//jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedItem(bodegaenviarTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodegaEnviar") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaenviarTemp!=null && jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor!=null) {
						jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.setSelectedItem(bodegaenviarTemp);
					} else {
						if(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor!=null) {
							//jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.setSelectedItem(bodegaenviarTemp);
							if(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaEnviarForeignKeyDescripcion(Long idBodegaEnviarSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaenviarTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaEnviarForeignKeyGenerico(Long idBodegaEnviarSeleccionado,JComboBox jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}

			if(bodegaenviarTemp!=null) {
				jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico.setSelectedItem(bodegaenviarTemp);
			} else {
				if(jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico!=null && jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleFacturaProveedor.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAnio") || sFormularioTipoBusqueda.equals("Todos")){
					if(anioTemp!=null && jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor!=null) {
						jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.setSelectedItem(anioTemp);
					} else {
						if(jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor!=null) {
							//jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.setSelectedItem(anioTemp);
							if(jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleFacturaProveedorGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleFacturaProveedorGenerico!=null && jComboBoxid_anioDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detallefacturaproveedor!=null) {
						this.detallefacturaproveedor.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleFacturaProveedor.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMes") || sFormularioTipoBusqueda.equals("Todos")){
					if(mesTemp!=null && jComboBoxid_mesFK_IdMesDetalleFacturaProveedor!=null) {
						jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.setSelectedItem(mesTemp);
					} else {
						if(jComboBoxid_mesFK_IdMesDetalleFacturaProveedor!=null) {
							//jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.setSelectedItem(mesTemp);
							if(jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.getItemCount()>0) {
								jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleFacturaProveedorGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleFacturaProveedorGenerico!=null && jComboBoxid_mesDetalleFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaProveedorForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			FacturaProveedor  facturaproveedorAux=new FacturaProveedor();

			if(jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico==null) {
				facturaproveedorAux=(FacturaProveedor)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.getSelectedItem();
			} else {
				facturaproveedorAux=(FacturaProveedor)jComboBoxid_factura_proveedorDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(facturaproveedorAux!=null && facturaproveedorAux.getId()!=null) {
				detallefacturaproveedor.setid_factura_proveedor(facturaproveedorAux.getId());
				detallefacturaproveedor.setfacturaproveedor_descripcion(DetalleFacturaProveedorConstantesFunciones.getFacturaProveedorDescripcion(facturaproveedorAux));
				detallefacturaproveedor.setFacturaProveedor(facturaproveedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_empresaDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleFacturaProveedorGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallefacturaproveedor.setid_empresa(empresaAux.getId());
				detallefacturaproveedor.setempresa_descripcion(DetalleFacturaProveedorConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallefacturaproveedor.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_sucursalDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleFacturaProveedorGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallefacturaproveedor.setid_sucursal(sucursalAux.getId());
				detallefacturaproveedor.setsucursal_descripcion(DetalleFacturaProveedorConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallefacturaproveedor.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_bodegaDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleFacturaProveedorGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallefacturaproveedor.setid_bodega(bodegaAux.getId());
				detallefacturaproveedor.setbodega_descripcion(DetalleFacturaProveedorConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallefacturaproveedor.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_productoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleFacturaProveedorGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallefacturaproveedor.setid_producto(productoAux.getId());
				detallefacturaproveedor.setproducto_descripcion(DetalleFacturaProveedorConstantesFunciones.getProductoDescripcion(productoAux));
				detallefacturaproveedor.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_unidadDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleFacturaProveedorGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallefacturaproveedor.setid_unidad(unidadAux.getId());
				detallefacturaproveedor.setunidad_descripcion(DetalleFacturaProveedorConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallefacturaproveedor.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_ejercicioDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleFacturaProveedorGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detallefacturaproveedor.setid_ejercicio(ejercicioAux.getId());
				detallefacturaproveedor.setejercicio_descripcion(DetalleFacturaProveedorConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detallefacturaproveedor.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_periodoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleFacturaProveedorGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detallefacturaproveedor.setid_periodo(periodoAux.getId());
				detallefacturaproveedor.setperiodo_descripcion(DetalleFacturaProveedorConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detallefacturaproveedor.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNovedadProductoForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoAux=new NovedadProducto();

			if(jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico==null) {
				novedadproductoAux=(NovedadProducto)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.getSelectedItem();
			} else {
				novedadproductoAux=(NovedadProducto)jComboBoxid_novedad_productoDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(novedadproductoAux!=null && novedadproductoAux.getId()!=null) {
				detallefacturaproveedor.setid_novedad_producto(novedadproductoAux.getId());
				detallefacturaproveedor.setnovedadproducto_descripcion(DetalleFacturaProveedorConstantesFunciones.getNovedadProductoDescripcion(novedadproductoAux));
				detallefacturaproveedor.setNovedadProducto(novedadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_centro_costoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleFacturaProveedorGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detallefacturaproveedor.setid_centro_costo(centrocostoAux.getId());
				detallefacturaproveedor.setcentrocosto_descripcion(DetalleFacturaProveedorConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detallefacturaproveedor.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costoDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				detallefacturaproveedor.setid_cuenta_contable_costo(cuentacontableAux.getId());
				detallefacturaproveedor.setcuentacontablecosto_descripcion(DetalleFacturaProveedorConstantesFunciones.getCuentaContableCostoDescripcion(cuentacontableAux));
				detallefacturaproveedor.setCuentaContableCosto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaEnviarForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodega_enviarDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallefacturaproveedor.setid_bodega_enviar(bodegaAux.getId());
				detallefacturaproveedor.setbodegaenviar_descripcion(DetalleFacturaProveedorConstantesFunciones.getBodegaEnviarDescripcion(bodegaAux));
				detallefacturaproveedor.setBodegaEnviar(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_anioDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleFacturaProveedorGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detallefacturaproveedor.setid_anio(anioAux.getId());
				detallefacturaproveedor.setanio_descripcion(DetalleFacturaProveedorConstantesFunciones.getAnioDescripcion(anioAux));
				detallefacturaproveedor.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleFacturaProveedor detallefacturaproveedor,JComboBox jComboBoxid_mesDetalleFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleFacturaProveedorGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleFacturaProveedorGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detallefacturaproveedor.setid_mes(mesAux.getId());
				detallefacturaproveedor.setmes_descripcion(DetalleFacturaProveedorConstantesFunciones.getMesDescripcion(mesAux));
				detallefacturaproveedor.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturaProveedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFacturaProveedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.removeAllItems();

							for(FacturaProveedor facturaproveedor:this.facturaproveedorsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.addItem(facturaproveedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFacturaProveedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.removeAllItems();

							for(FacturaProveedor facturaproveedor:this.facturaproveedorsForeignKey) {
								this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.addItem(facturaproveedor);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.addItem(bodega);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.addItem(producto);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.addItem(unidad);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNovedadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNovedadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.addItem(novedadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.addItem(novedadproducto);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.addItem(centrocosto);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.addItem(cuentacontablecosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.addItem(cuentacontablecosto);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegaEnviarsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.removeAllItems();

							for(Bodega bodegaenviar:this.bodegaenviarsForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.addItem(bodegaenviar);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodegaEnviar") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.removeAllItems();

							for(Bodega bodegaenviar:this.bodegaenviarsForeignKey) {
								this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.addItem(bodegaenviar);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAnio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.addItem(anio);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { 
					}

					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMes") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.addItem(mes);
							}
						}

						if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameFacturaProveedorForeignKey(FacturaProveedor facturaproveedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.setSelectedItem(facturaproveedor);
						} else {
							this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNovedadProductoForeignKey(NovedadProducto novedadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedItem(novedadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.setSelectedItem(novedadproducto);
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoForeignKey(CuentaContable cuentacontablecosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedItem(cuentacontablecosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.setSelectedItem(cuentacontablecosto);
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaEnviarForeignKey(Bodega bodegaenviar,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedItem(bodegaenviar);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.setSelectedItem(bodegaenviar);
						} else {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.setSelectedItem(anio);
						} else {
							this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.setSelectedItem(mes);
						} else {
							this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleFacturaProveedor() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleFacturaProveedorConstantesFunciones.refrescarForeignKeysDescripcionesDetalleFacturaProveedor(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleFacturaProveedorConstantesFunciones.refrescarForeignKeysDescripcionesDetalleFacturaProveedor(this.detallefacturaproveedors);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(FacturaProveedor.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(NovedadProducto.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallefacturaproveedorLogic.setDetalleFacturaProveedors(this.detallefacturaproveedors);
			detallefacturaproveedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleFacturaProveedorParameterReturnGeneral getDetalleFacturaProveedorParameterGeneral() {
		return this.detallefacturaproveedorParameterGeneral;
	}
	
	public void setDetalleFacturaProveedorParameterGeneral(DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorParameterGeneral) {
		this.detallefacturaproveedorParameterGeneral = detallefacturaproveedorParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleFacturaProveedor() {
		return isPermisoTodoDetalleFacturaProveedor;
	}

	public void setIsPermisoTodoDetalleFacturaProveedor(Boolean isPermisoTodoDetalleFacturaProveedor) {
		this.isPermisoTodoDetalleFacturaProveedor = isPermisoTodoDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoNuevoDetalleFacturaProveedor() {
		return isPermisoNuevoDetalleFacturaProveedor;
	}

	public void setIsPermisoNuevoDetalleFacturaProveedor(Boolean isPermisoNuevoDetalleFacturaProveedor) {
		this.isPermisoNuevoDetalleFacturaProveedor = isPermisoNuevoDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoActualizarDetalleFacturaProveedor() {
		return isPermisoActualizarDetalleFacturaProveedor;
	}

	public void setIsPermisoActualizarDetalleFacturaProveedor(Boolean isPermisoActualizarDetalleFacturaProveedor) {
		this.isPermisoActualizarDetalleFacturaProveedor = isPermisoActualizarDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoEliminarDetalleFacturaProveedor() {
		return isPermisoEliminarDetalleFacturaProveedor;
	}

	public void setIsPermisoEliminarDetalleFacturaProveedor(Boolean isPermisoEliminarDetalleFacturaProveedor) {
		this.isPermisoEliminarDetalleFacturaProveedor = isPermisoEliminarDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleFacturaProveedor() {
		return isPermisoGuardarCambiosDetalleFacturaProveedor;
	}

	public void setIsPermisoGuardarCambiosDetalleFacturaProveedor(Boolean isPermisoGuardarCambiosDetalleFacturaProveedor) {
		this.isPermisoGuardarCambiosDetalleFacturaProveedor = isPermisoGuardarCambiosDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoConsultaDetalleFacturaProveedor() {
		return isPermisoConsultaDetalleFacturaProveedor;
	}

	public void setIsPermisoConsultaDetalleFacturaProveedor(Boolean isPermisoConsultaDetalleFacturaProveedor) {
		this.isPermisoConsultaDetalleFacturaProveedor = isPermisoConsultaDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoBusquedaDetalleFacturaProveedor() {
		return isPermisoBusquedaDetalleFacturaProveedor;
	}

	public void setIsPermisoBusquedaDetalleFacturaProveedor(Boolean isPermisoBusquedaDetalleFacturaProveedor) {
		this.isPermisoBusquedaDetalleFacturaProveedor = isPermisoBusquedaDetalleFacturaProveedor;
	}

	public Boolean getIsPermisoReporteDetalleFacturaProveedor() {
		return isPermisoReporteDetalleFacturaProveedor;
	}

	public void setIsPermisoReporteDetalleFacturaProveedor(Boolean isPermisoReporteDetalleFacturaProveedor) {
		this.isPermisoReporteDetalleFacturaProveedor = isPermisoReporteDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleFacturaProveedor() {
		return isPermisoPaginacionMedioDetalleFacturaProveedor;
	}

	public void setIsPermisoPaginacionMedioDetalleFacturaProveedor(Boolean isPermisoPaginacionMedioDetalleFacturaProveedor) {
		this.isPermisoPaginacionMedioDetalleFacturaProveedor = isPermisoPaginacionMedioDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleFacturaProveedor() {
		return isPermisoPaginacionTodoDetalleFacturaProveedor;
	}

	public void setIsPermisoPaginacionTodoDetalleFacturaProveedor(Boolean isPermisoPaginacionTodoDetalleFacturaProveedor) {
		this.isPermisoPaginacionTodoDetalleFacturaProveedor = isPermisoPaginacionTodoDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleFacturaProveedor() {
		return isPermisoPaginacionAltoDetalleFacturaProveedor;
	}

	public void setIsPermisoPaginacionAltoDetalleFacturaProveedor(Boolean isPermisoPaginacionAltoDetalleFacturaProveedor) {
		this.isPermisoPaginacionAltoDetalleFacturaProveedor = isPermisoPaginacionAltoDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoCopiarDetalleFacturaProveedor() {
		return isPermisoCopiarDetalleFacturaProveedor;
	}

	public void setIsPermisoCopiarDetalleFacturaProveedor(Boolean isPermisoCopiarDetalleFacturaProveedor) {
		this.isPermisoCopiarDetalleFacturaProveedor = isPermisoCopiarDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoVerFormDetalleFacturaProveedor() {
		return isPermisoVerFormDetalleFacturaProveedor;
	}

	public void setIsPermisoVerFormDetalleFacturaProveedor(Boolean isPermisoVerFormDetalleFacturaProveedor) {
		this.isPermisoVerFormDetalleFacturaProveedor = isPermisoVerFormDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoDuplicarDetalleFacturaProveedor() {
		return isPermisoDuplicarDetalleFacturaProveedor;
	}

	public void setIsPermisoDuplicarDetalleFacturaProveedor(Boolean isPermisoDuplicarDetalleFacturaProveedor) {
		this.isPermisoDuplicarDetalleFacturaProveedor = isPermisoDuplicarDetalleFacturaProveedor;
	}
	
	public Boolean getIsPermisoOrdenDetalleFacturaProveedor() {
		return isPermisoOrdenDetalleFacturaProveedor;
	}

	public void setIsPermisoOrdenDetalleFacturaProveedor(Boolean isPermisoOrdenDetalleFacturaProveedor) {
		this.isPermisoOrdenDetalleFacturaProveedor = isPermisoOrdenDetalleFacturaProveedor;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleFacturaProveedor() {
		return isVisibilidadCeldaNuevoDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaNuevoDetalleFacturaProveedor(Boolean isVisibilidadCeldaNuevoDetalleFacturaProveedor) {
		this.isVisibilidadCeldaNuevoDetalleFacturaProveedor = isVisibilidadCeldaNuevoDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleFacturaProveedor() {
		return isVisibilidadCeldaDuplicarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleFacturaProveedor(Boolean isVisibilidadCeldaDuplicarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor = isVisibilidadCeldaDuplicarDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleFacturaProveedor() {
		return isVisibilidadCeldaCopiarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaCopiarDetalleFacturaProveedor(Boolean isVisibilidadCeldaCopiarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaCopiarDetalleFacturaProveedor = isVisibilidadCeldaCopiarDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleFacturaProveedor() {
		return isVisibilidadCeldaVerFormDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaVerFormDetalleFacturaProveedor(Boolean isVisibilidadCeldaVerFormDetalleFacturaProveedor) {
		this.isVisibilidadCeldaVerFormDetalleFacturaProveedor = isVisibilidadCeldaVerFormDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleFacturaProveedor() {
		return isVisibilidadCeldaOrdenDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaOrdenDetalleFacturaProveedor(Boolean isVisibilidadCeldaOrdenDetalleFacturaProveedor) {
		this.isVisibilidadCeldaOrdenDetalleFacturaProveedor = isVisibilidadCeldaOrdenDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor() {
		return isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor(Boolean isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor = isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleFacturaProveedor() {
		return isVisibilidadCeldaModificarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaModificarDetalleFacturaProveedor(Boolean isVisibilidadCeldaModificarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaModificarDetalleFacturaProveedor = isVisibilidadCeldaModificarDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleFacturaProveedor() {
		return isVisibilidadCeldaActualizarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaActualizarDetalleFacturaProveedor(Boolean isVisibilidadCeldaActualizarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaActualizarDetalleFacturaProveedor = isVisibilidadCeldaActualizarDetalleFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleFacturaProveedor() {
		return isVisibilidadCeldaEliminarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaEliminarDetalleFacturaProveedor(Boolean isVisibilidadCeldaEliminarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaEliminarDetalleFacturaProveedor = isVisibilidadCeldaEliminarDetalleFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleFacturaProveedor() {
		return isVisibilidadCeldaCancelarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaCancelarDetalleFacturaProveedor(Boolean isVisibilidadCeldaCancelarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaCancelarDetalleFacturaProveedor = isVisibilidadCeldaCancelarDetalleFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleFacturaProveedor() {
		return isVisibilidadCeldaGuardarDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaGuardarDetalleFacturaProveedor(Boolean isVisibilidadCeldaGuardarDetalleFacturaProveedor) {
		this.isVisibilidadCeldaGuardarDetalleFacturaProveedor = isVisibilidadCeldaGuardarDetalleFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor() {
		return isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor(Boolean isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor) {
		this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor = isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor;
	}
		
	public DetalleFacturaProveedorSessionBean getdetallefacturaproveedorSessionBean() {
		return this.detallefacturaproveedorSessionBean;
	}
	
	public void setdetallefacturaproveedorSessionBean(DetalleFacturaProveedorSessionBean detallefacturaproveedorSessionBean) {
		this.detallefacturaproveedorSessionBean=detallefacturaproveedorSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdBodegaEnviar() {
		return this.isVisibilidadFK_IdBodegaEnviar;
	}

	public void setisVisibilidadFK_IdBodegaEnviar(Boolean isVisibilidadFK_IdBodegaEnviar) {
		this.isVisibilidadFK_IdBodegaEnviar=isVisibilidadFK_IdBodegaEnviar;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCosto() {
		return this.isVisibilidadFK_IdCuentaContableCosto;
	}

	public void setisVisibilidadFK_IdCuentaContableCosto(Boolean isVisibilidadFK_IdCuentaContableCosto) {
		this.isVisibilidadFK_IdCuentaContableCosto=isVisibilidadFK_IdCuentaContableCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFacturaProveedor() {
		return this.isVisibilidadFK_IdFacturaProveedor;
	}

	public void setisVisibilidadFK_IdFacturaProveedor(Boolean isVisibilidadFK_IdFacturaProveedor) {
		this.isVisibilidadFK_IdFacturaProveedor=isVisibilidadFK_IdFacturaProveedor;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdNovedadProducto() {
		return this.isVisibilidadFK_IdNovedadProducto;
	}

	public void setisVisibilidadFK_IdNovedadProducto(Boolean isVisibilidadFK_IdNovedadProducto) {
		this.isVisibilidadFK_IdNovedadProducto=isVisibilidadFK_IdNovedadProducto;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor)throws Exception {
		try {
			
				this.setActualParaGuardarFacturaProveedorForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarEmpresaForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarSucursalForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarBodegaForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarProductoForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarUnidadForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarEjercicioForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarPeriodoForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarNovedadProductoForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarCentroCostoForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarCuentaContableCostoForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarBodegaEnviarForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarAnioForeignKey(detallefacturaproveedor,null);
				this.setActualParaGuardarMesForeignKey(detallefacturaproveedor,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetalleFacturaProveedor detallefacturaproveedor,DetalleFacturaProveedor detallefacturaproveedorAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleFacturaProveedor(detallefacturaproveedor);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallefacturaproveedorAux.setId(detallefacturaproveedor.getId());
		detallefacturaproveedorAux.setVersionRow(detallefacturaproveedor.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleFacturaProveedor();
		
			int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallefacturaproveedorValidator.getInvalidValues(this.detallefacturaproveedor);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallefacturaproveedorLogic.setDatosCliente(datosCliente);
			detallefacturaproveedorLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallefacturaproveedorAux=new  DetalleFacturaProveedor();
				
				detallefacturaproveedorAux.setIsNew(true);
				detallefacturaproveedorAux.setIsChanged(true);
				
				detallefacturaproveedorAux.setDetalleFacturaProveedorOriginal(this.detallefacturaproveedor);
				
				detallefacturaproveedorAux.setId(this.detallefacturaproveedor.getId());	
				detallefacturaproveedorAux.setVersionRow(this.detallefacturaproveedor.getVersionRow());	
				detallefacturaproveedorAux.setid_factura_proveedor(this.detallefacturaproveedor.getid_factura_proveedor());	
				detallefacturaproveedorAux.setid_empresa(this.detallefacturaproveedor.getid_empresa());	
				detallefacturaproveedorAux.setid_sucursal(this.detallefacturaproveedor.getid_sucursal());	
				detallefacturaproveedorAux.setid_bodega(this.detallefacturaproveedor.getid_bodega());	
				detallefacturaproveedorAux.setid_producto(this.detallefacturaproveedor.getid_producto());	
				detallefacturaproveedorAux.setid_unidad(this.detallefacturaproveedor.getid_unidad());	
				detallefacturaproveedorAux.setid_ejercicio(this.detallefacturaproveedor.getid_ejercicio());	
				detallefacturaproveedorAux.setid_periodo(this.detallefacturaproveedor.getid_periodo());	
				detallefacturaproveedorAux.setnumero_comprobante(this.detallefacturaproveedor.getnumero_comprobante());	
				detallefacturaproveedorAux.setcantidad(this.detallefacturaproveedor.getcantidad());	
				detallefacturaproveedorAux.setcantidad_auxiliar(this.detallefacturaproveedor.getcantidad_auxiliar());	
				detallefacturaproveedorAux.setdescuento(this.detallefacturaproveedor.getdescuento());	
				detallefacturaproveedorAux.setiva(this.detallefacturaproveedor.getiva());	
				detallefacturaproveedorAux.setlote(this.detallefacturaproveedor.getlote());	
				detallefacturaproveedorAux.setfecha_elaboracion_lote(this.detallefacturaproveedor.getfecha_elaboracion_lote());	
				detallefacturaproveedorAux.setfecha_caducidad_lote(this.detallefacturaproveedor.getfecha_caducidad_lote());	
				detallefacturaproveedorAux.setcosto_iva(this.detallefacturaproveedor.getcosto_iva());	
				detallefacturaproveedorAux.setcosto_unitario(this.detallefacturaproveedor.getcosto_unitario());	
				detallefacturaproveedorAux.setcosto_total(this.detallefacturaproveedor.getcosto_total());	
				detallefacturaproveedorAux.setice(this.detallefacturaproveedor.getice());	
				detallefacturaproveedorAux.setdescuento1(this.detallefacturaproveedor.getdescuento1());	
				detallefacturaproveedorAux.setdescuento2(this.detallefacturaproveedor.getdescuento2());	
				detallefacturaproveedorAux.setdescripcion(this.detallefacturaproveedor.getdescripcion());	
				detallefacturaproveedorAux.setprecio_venta(this.detallefacturaproveedor.getprecio_venta());	
				detallefacturaproveedorAux.setid_novedad_producto(this.detallefacturaproveedor.getid_novedad_producto());	
				detallefacturaproveedorAux.setid_centro_costo(this.detallefacturaproveedor.getid_centro_costo());	
				detallefacturaproveedorAux.setid_cuenta_contable_costo(this.detallefacturaproveedor.getid_cuenta_contable_costo());	
				detallefacturaproveedorAux.setid_bodega_enviar(this.detallefacturaproveedor.getid_bodega_enviar());	
				detallefacturaproveedorAux.setlote_cliente(this.detallefacturaproveedor.getlote_cliente());	
				detallefacturaproveedorAux.setdisponible(this.detallefacturaproveedor.getdisponible());	
				detallefacturaproveedorAux.setserie(this.detallefacturaproveedor.getserie());	
				detallefacturaproveedorAux.setice_valor(this.detallefacturaproveedor.getice_valor());	
				detallefacturaproveedorAux.setid_anio(this.detallefacturaproveedor.getid_anio());	
				detallefacturaproveedorAux.setid_mes(this.detallefacturaproveedor.getid_mes());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.saveDetalleFacturaProveedors();//WithConnection
						//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);
					
					this.refrescarForeignKeysDescripcionesDetalleFacturaProveedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaproveedorLogic.saveDetalleFacturaProveedorRelaciones(detallefacturaproveedorAux);//WithConnection
								//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallefacturaproveedorAux=new  DetalleFacturaProveedor();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() 
					|| (this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() && this.detallefacturaproveedor.getId()>=0)) {
						
					detallefacturaproveedorAux.setIsNew(false);
				}
				
				detallefacturaproveedorAux.setIsDeleted(false);
			
				detallefacturaproveedorAux.setId(this.detallefacturaproveedor.getId());	
				detallefacturaproveedorAux.setVersionRow(this.detallefacturaproveedor.getVersionRow());	
				detallefacturaproveedorAux.setid_factura_proveedor(this.detallefacturaproveedor.getid_factura_proveedor());	
				detallefacturaproveedorAux.setid_empresa(this.detallefacturaproveedor.getid_empresa());	
				detallefacturaproveedorAux.setid_sucursal(this.detallefacturaproveedor.getid_sucursal());	
				detallefacturaproveedorAux.setid_bodega(this.detallefacturaproveedor.getid_bodega());	
				detallefacturaproveedorAux.setid_producto(this.detallefacturaproveedor.getid_producto());	
				detallefacturaproveedorAux.setid_unidad(this.detallefacturaproveedor.getid_unidad());	
				detallefacturaproveedorAux.setid_ejercicio(this.detallefacturaproveedor.getid_ejercicio());	
				detallefacturaproveedorAux.setid_periodo(this.detallefacturaproveedor.getid_periodo());	
				detallefacturaproveedorAux.setnumero_comprobante(this.detallefacturaproveedor.getnumero_comprobante());	
				detallefacturaproveedorAux.setcantidad(this.detallefacturaproveedor.getcantidad());	
				detallefacturaproveedorAux.setcantidad_auxiliar(this.detallefacturaproveedor.getcantidad_auxiliar());	
				detallefacturaproveedorAux.setdescuento(this.detallefacturaproveedor.getdescuento());	
				detallefacturaproveedorAux.setiva(this.detallefacturaproveedor.getiva());	
				detallefacturaproveedorAux.setlote(this.detallefacturaproveedor.getlote());	
				detallefacturaproveedorAux.setfecha_elaboracion_lote(this.detallefacturaproveedor.getfecha_elaboracion_lote());	
				detallefacturaproveedorAux.setfecha_caducidad_lote(this.detallefacturaproveedor.getfecha_caducidad_lote());	
				detallefacturaproveedorAux.setcosto_iva(this.detallefacturaproveedor.getcosto_iva());	
				detallefacturaproveedorAux.setcosto_unitario(this.detallefacturaproveedor.getcosto_unitario());	
				detallefacturaproveedorAux.setcosto_total(this.detallefacturaproveedor.getcosto_total());	
				detallefacturaproveedorAux.setice(this.detallefacturaproveedor.getice());	
				detallefacturaproveedorAux.setdescuento1(this.detallefacturaproveedor.getdescuento1());	
				detallefacturaproveedorAux.setdescuento2(this.detallefacturaproveedor.getdescuento2());	
				detallefacturaproveedorAux.setdescripcion(this.detallefacturaproveedor.getdescripcion());	
				detallefacturaproveedorAux.setprecio_venta(this.detallefacturaproveedor.getprecio_venta());	
				detallefacturaproveedorAux.setid_novedad_producto(this.detallefacturaproveedor.getid_novedad_producto());	
				detallefacturaproveedorAux.setid_centro_costo(this.detallefacturaproveedor.getid_centro_costo());	
				detallefacturaproveedorAux.setid_cuenta_contable_costo(this.detallefacturaproveedor.getid_cuenta_contable_costo());	
				detallefacturaproveedorAux.setid_bodega_enviar(this.detallefacturaproveedor.getid_bodega_enviar());	
				detallefacturaproveedorAux.setlote_cliente(this.detallefacturaproveedor.getlote_cliente());	
				detallefacturaproveedorAux.setdisponible(this.detallefacturaproveedor.getdisponible());	
				detallefacturaproveedorAux.setserie(this.detallefacturaproveedor.getserie());	
				detallefacturaproveedorAux.setice_valor(this.detallefacturaproveedor.getice_valor());	
				detallefacturaproveedorAux.setid_anio(this.detallefacturaproveedor.getid_anio());	
				detallefacturaproveedorAux.setid_mes(this.detallefacturaproveedor.getid_mes());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.saveDetalleFacturaProveedors();//WithConnection
						//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);
					
					this.refrescarForeignKeysDescripcionesDetalleFacturaProveedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaproveedorLogic.saveDetalleFacturaProveedorRelaciones(detallefacturaproveedorAux);//WithConnection
								//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallefacturaproveedor,detallefacturaproveedorAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallefacturaproveedorAux=new  DetalleFacturaProveedor();
				
				detallefacturaproveedorAux.setIsNew(false);
				detallefacturaproveedorAux.setIsChanged(false);
				
				detallefacturaproveedorAux.setIsDeleted(true);
				
				detallefacturaproveedorAux.setId(this.detallefacturaproveedor.getId());	
				detallefacturaproveedorAux.setVersionRow(this.detallefacturaproveedor.getVersionRow());	
				detallefacturaproveedorAux.setid_factura_proveedor(this.detallefacturaproveedor.getid_factura_proveedor());	
				detallefacturaproveedorAux.setid_empresa(this.detallefacturaproveedor.getid_empresa());	
				detallefacturaproveedorAux.setid_sucursal(this.detallefacturaproveedor.getid_sucursal());	
				detallefacturaproveedorAux.setid_bodega(this.detallefacturaproveedor.getid_bodega());	
				detallefacturaproveedorAux.setid_producto(this.detallefacturaproveedor.getid_producto());	
				detallefacturaproveedorAux.setid_unidad(this.detallefacturaproveedor.getid_unidad());	
				detallefacturaproveedorAux.setid_ejercicio(this.detallefacturaproveedor.getid_ejercicio());	
				detallefacturaproveedorAux.setid_periodo(this.detallefacturaproveedor.getid_periodo());	
				detallefacturaproveedorAux.setnumero_comprobante(this.detallefacturaproveedor.getnumero_comprobante());	
				detallefacturaproveedorAux.setcantidad(this.detallefacturaproveedor.getcantidad());	
				detallefacturaproveedorAux.setcantidad_auxiliar(this.detallefacturaproveedor.getcantidad_auxiliar());	
				detallefacturaproveedorAux.setdescuento(this.detallefacturaproveedor.getdescuento());	
				detallefacturaproveedorAux.setiva(this.detallefacturaproveedor.getiva());	
				detallefacturaproveedorAux.setlote(this.detallefacturaproveedor.getlote());	
				detallefacturaproveedorAux.setfecha_elaboracion_lote(this.detallefacturaproveedor.getfecha_elaboracion_lote());	
				detallefacturaproveedorAux.setfecha_caducidad_lote(this.detallefacturaproveedor.getfecha_caducidad_lote());	
				detallefacturaproveedorAux.setcosto_iva(this.detallefacturaproveedor.getcosto_iva());	
				detallefacturaproveedorAux.setcosto_unitario(this.detallefacturaproveedor.getcosto_unitario());	
				detallefacturaproveedorAux.setcosto_total(this.detallefacturaproveedor.getcosto_total());	
				detallefacturaproveedorAux.setice(this.detallefacturaproveedor.getice());	
				detallefacturaproveedorAux.setdescuento1(this.detallefacturaproveedor.getdescuento1());	
				detallefacturaproveedorAux.setdescuento2(this.detallefacturaproveedor.getdescuento2());	
				detallefacturaproveedorAux.setdescripcion(this.detallefacturaproveedor.getdescripcion());	
				detallefacturaproveedorAux.setprecio_venta(this.detallefacturaproveedor.getprecio_venta());	
				detallefacturaproveedorAux.setid_novedad_producto(this.detallefacturaproveedor.getid_novedad_producto());	
				detallefacturaproveedorAux.setid_centro_costo(this.detallefacturaproveedor.getid_centro_costo());	
				detallefacturaproveedorAux.setid_cuenta_contable_costo(this.detallefacturaproveedor.getid_cuenta_contable_costo());	
				detallefacturaproveedorAux.setid_bodega_enviar(this.detallefacturaproveedor.getid_bodega_enviar());	
				detallefacturaproveedorAux.setlote_cliente(this.detallefacturaproveedor.getlote_cliente());	
				detallefacturaproveedorAux.setdisponible(this.detallefacturaproveedor.getdisponible());	
				detallefacturaproveedorAux.setserie(this.detallefacturaproveedor.getserie());	
				detallefacturaproveedorAux.setice_valor(this.detallefacturaproveedor.getice_valor());	
				detallefacturaproveedorAux.setid_anio(this.detallefacturaproveedor.getid_anio());	
				detallefacturaproveedorAux.setid_mes(this.detallefacturaproveedor.getid_mes());	
				
				if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallefacturaproveedorAux.getId()>=0) {	
						this.detallefacturaproveedorsEliminados.add(detallefacturaproveedorAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.saveDetalleFacturaProveedors();//WithConnection
						//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallefacturaproveedorLogic.saveDetalleFacturaProveedorRelaciones(detallefacturaproveedorAux);//WithConnection
								//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallefacturaproveedorAux,detallefacturaproveedorLogic.getDetalleFacturaProveedors());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallefacturaproveedorAux,detallefacturaproveedors);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(this.detallefacturaproveedorsEliminados);
					
					detallefacturaproveedorLogic.saveDetalleFacturaProveedors();//WithConnection
					//detallefacturaproveedorLogic.getSetVersionRowDetalleFacturaProveedors();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleFacturaProveedor();
				
				this.detallefacturaproveedorsEliminados= new ArrayList<DetalleFacturaProveedor>();		
			}
			
			if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Factura Proveedor GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallefacturaproveedor=detallefacturaproveedorAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleFacturaProveedor();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleFacturaProveedor detallefacturaproveedorLocal) throws Exception {
		
		if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleFacturaProveedor detallefacturaproveedorLocal) throws Exception {	
		if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(FacturaProveedorDetalleFormJInternalFrame.class)) {
				FacturaProveedorBeanSwingJInternalFrame facturaproveedorBeanSwingJInternalFrameLocal=(FacturaProveedorBeanSwingJInternalFrame) ((FacturaProveedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaproveedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFacturaProveedor(facturaproveedorBeanSwingJInternalFrameLocal.getfacturaproveedor(),true);
				facturaproveedorBeanSwingJInternalFrameLocal.actualizarLista(facturaproveedorBeanSwingJInternalFrameLocal.facturaproveedor,this.facturaproveedorsForeignKey);

				facturaproveedorBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaproveedorBeanSwingJInternalFrameLocal.facturaproveedor);

				detallefacturaproveedorLocal.setFacturaProveedor(facturaproveedorBeanSwingJInternalFrameLocal.facturaproveedor);

				this.addItemDefectoCombosForeignKeyFacturaProveedor();
				this.cargarCombosFrameFacturaProveedorsForeignKey("Formulario");
				this.setActualFacturaProveedorForeignKey(facturaproveedorBeanSwingJInternalFrameLocal.facturaproveedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallefacturaproveedorLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallefacturaproveedorLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallefacturaproveedorLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallefacturaproveedorLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallefacturaproveedorLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detallefacturaproveedorLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detallefacturaproveedorLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NovedadProductoDetalleFormJInternalFrame.class)) {
				NovedadProductoBeanSwingJInternalFrame novedadproductoBeanSwingJInternalFrameLocal=(NovedadProductoBeanSwingJInternalFrame) ((NovedadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				novedadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.getnovedadproducto(),true);
				novedadproductoBeanSwingJInternalFrameLocal.actualizarLista(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto,this.novedadproductosForeignKey);

				novedadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				detallefacturaproveedorLocal.setNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey("Formulario");
				this.setActualNovedadProductoForeignKey(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detallefacturaproveedorLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostosForeignKey);

				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				detallefacturaproveedorLocal.setCuentaContableCosto(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey("Formulario");
				this.setActualCuentaContableCostoForeignKey(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaenviarBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaenviarBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaenviarBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaenviarBeanSwingJInternalFrameLocal.actualizarLista(bodegaenviarBeanSwingJInternalFrameLocal.bodega,this.bodegaenviarsForeignKey);

				bodegaenviarBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaenviarBeanSwingJInternalFrameLocal.bodega);

				detallefacturaproveedorLocal.setBodegaEnviar(bodegaenviarBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodegaEnviar();
				this.cargarCombosFrameBodegaEnviarsForeignKey("Formulario");
				this.setActualBodegaEnviarForeignKey(bodegaenviarBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detallefacturaproveedorLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detallefacturaproveedorLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleFacturaProveedorActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallefacturaproveedorValidator.getInvalidValues(this.detallefacturaproveedor);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleFacturaProveedor detallefacturaproveedor,List<DetalleFacturaProveedor> detallefacturaproveedors) throws Exception {
		try	{		
			DetalleFacturaProveedorConstantesFunciones.actualizarLista(detallefacturaproveedor,detallefacturaproveedors,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleFacturaProveedor detallefacturaproveedor,List<DetalleFacturaProveedor> detallefacturaproveedors) throws Exception {
		try	{			
			DetalleFacturaProveedorConstantesFunciones.actualizarSelectedLista(detallefacturaproveedor,detallefacturaproveedors);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleFacturaProveedor> detallefacturaproveedorsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallefacturaproveedorsLocal=this.detallefacturaproveedorLogic.getDetalleFacturaProveedors();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallefacturaproveedorsLocal=this.detallefacturaproveedors;
			}
			//ARCHITECTURE
		
			for(DetalleFacturaProveedor detallefacturaproveedorLocal:detallefacturaproveedorsLocal) {
				if(this.permiteMantenimiento(detallefacturaproveedorLocal) && detallefacturaproveedorLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleFacturaProveedorConstantesFunciones.getDetalleFacturaProveedorLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDFACTURAPROVEEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_factura_proveedorDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_empresaDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_sucursalDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_bodegaDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_productoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_unidadDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_ejercicioDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_periodoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelnumero_comprobanteDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidadDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.CANTIDADAUXILIAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidad_auxiliarDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuentoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelivaDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.LOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelloteDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.FECHAELABORACIONLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_elaboracion_loteDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.FECHACADUCIDADLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_caducidad_loteDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.COSTOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_ivaDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.COSTOUNITARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_unitarioDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.COSTOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_totalDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeliceDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.DESCUENTO1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento1DetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.DESCUENTO2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento2DetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescripcionDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.PRECIOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelprecio_ventaDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDNOVEDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_novedad_productoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_centro_costoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDCUENTACONTABLECOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_cuenta_contable_costoDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDBODEGAENVIAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_bodega_enviarDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.LOTECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabellote_clienteDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.DISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldisponibleDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.SERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelserieDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.ICEVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelice_valorDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_anioDetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleFacturaProveedorConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_mesDetalleFacturaProveedor,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_factura_proveedorDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_empresaDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_sucursalDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_bodegaDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_productoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_unidadDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_ejercicioDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_periodoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelnumero_comprobanteDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidadDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidad_auxiliarDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuentoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelivaDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelloteDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_elaboracion_loteDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_caducidad_loteDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_ivaDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_unitarioDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_totalDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeliceDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento1DetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento2DetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescripcionDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelprecio_ventaDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_novedad_productoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_centro_costoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_cuenta_contable_costoDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_bodega_enviarDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabellote_clienteDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldisponibleDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelserieDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelice_valorDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_anioDetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelid_mesDetalleFacturaProveedor,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleFacturaProveedor--;	
		
		
		this.detallefacturaproveedorAux=new DetalleFacturaProveedor();
		
		this.detallefacturaproveedorAux.setId(this.iIdNuevoDetalleFacturaProveedor);
		this.detallefacturaproveedorAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().add(this.detallefacturaproveedorAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallefacturaproveedors.add(this.detallefacturaproveedorAux);
		}
		//ARCHITECTURE
		
		this.detallefacturaproveedor=this.detallefacturaproveedorAux;
		
		if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedor);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleFacturaProveedor(this.detallefacturaproveedor);
		}
				
		//this.setDefaultControlesDetalleFacturaProveedor();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleFacturaProveedor();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleFacturaProveedor();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFacturaProveedor();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedorBean,this.detallefacturaproveedor,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
			classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.procesarEventosDetalleFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this.detallefacturaproveedor,this.detallefacturaproveedorParameterGeneral,this.isEsNuevoDetalleFacturaProveedor,classes);//this.detallefacturaproveedorLogic.getDetalleFacturaProveedor()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral,this.detallefacturaproveedorBean,false);
		
		if(this.detallefacturaproveedorReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor());
		}
		
		if(this.detallefacturaproveedorReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor(),classes);//this.detallefacturaproveedorBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleFacturaProveedor();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleFacturaProveedor();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.RecargarFormDetalleFacturaProveedor(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
						
			if(detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFacturaProveedor();
			}
			
			this.actualizarVisualTableDatosDetalleFacturaProveedor();
			
			this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoDetalleFacturaProveedor(), this.getIndiceNuevoDetalleFacturaProveedor());
			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
						
			this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleFacturaProveedor(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarnumero_comprobanteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarcantidadDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarcantidad_auxiliarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activardescuentoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarloteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarfecha_elaboracion_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarfecha_caducidad_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarcosto_ivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarcosto_unitarioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarcosto_totalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activariceDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activardescuento1DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activardescuento2DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activardescripcionDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarprecio_ventaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarlote_clienteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activardisponibleDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarserieDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarice_valorDetalleFacturaProveedor);	
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_factura_proveedorDetalleFacturaProveedor);//
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_empresaDetalleFacturaProveedor);//
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_sucursalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_bodegaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_unidadDetalleFacturaProveedor);//
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_ejercicioDetalleFacturaProveedor);//
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_periodoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_novedad_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_centro_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_cuenta_contable_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_bodega_enviarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_anioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setEnabled(isHabilitar && this.detallefacturaproveedorConstantesFunciones.activarid_mesDetalleFacturaProveedor);
	};
	
	public void setDefaultControlesDetalleFacturaProveedor() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleFacturaProveedor(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallefacturaproveedorSessionBean.setConGuardarRelaciones(true);			
			this.detallefacturaproveedorSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.setVisible(true);
			
					
		} else {
			//this.detallefacturaproveedorSessionBean.setConGuardarRelaciones(false);			
			this.detallefacturaproveedorSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleFacturaProveedor() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				if(detallefacturaproveedorAux.getId().equals(this.iIdNuevoDetalleFacturaProveedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedors) {
				if(detallefacturaproveedorAux.getId().equals(this.iIdNuevoDetalleFacturaProveedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				if(detallefacturaproveedorAux.getId().equals(detallefacturaproveedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedors) {
				if(detallefacturaproveedorAux.getId().equals(detallefacturaproveedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedorOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				if(detallefacturaproveedorAux.getDetalleFacturaProveedorOriginal().getId().equals(detallefacturaproveedorOriginal.getId())) {
					existe=true;
					detallefacturaproveedorOriginal.setId(detallefacturaproveedorAux.getId());
					detallefacturaproveedorOriginal.setVersionRow(detallefacturaproveedorAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedors) {
				if(detallefacturaproveedorAux.getDetalleFacturaProveedorOriginal().getId().equals(detallefacturaproveedorOriginal.getId())) {
					existe=true;
					detallefacturaproveedorOriginal.setId(detallefacturaproveedorAux.getId());
					detallefacturaproveedorOriginal.setVersionRow(detallefacturaproveedorAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleFacturaProveedor(Boolean esParaCancelar) throws Exception {
		detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
		detallefacturaproveedorAux=new DetalleFacturaProveedor();
		
		if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
					if(detallefacturaproveedorAux.getId()<0) {
						detallefacturaproveedorsAux.add(detallefacturaproveedorAux);
					}		
				}
				this.iIdNuevoDetalleFacturaProveedor=0L;
				this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().removeAll(detallefacturaproveedorsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedors) {
					if(detallefacturaproveedorAux.getId()<0) {
						detallefacturaproveedorsAux.add(detallefacturaproveedorAux);
					}		
				}
				this.iIdNuevoDetalleFacturaProveedor=0L;
				this.detallefacturaproveedors.removeAll(detallefacturaproveedorsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleFacturaProveedor 
					&& this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()>0
					) {
					detallefacturaproveedorAux=this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().get(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().size() - 1);
				
					if(detallefacturaproveedorAux.getId()<0) {
						this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().remove(detallefacturaproveedorAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleFacturaProveedor && this.detallefacturaproveedors.size()>0) {
					detallefacturaproveedorAux=this.detallefacturaproveedors.get(this.detallefacturaproveedors.size() - 1);
				
					if(detallefacturaproveedorAux.getId()<0) {
						this.detallefacturaproveedors.remove(detallefacturaproveedorAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleFacturaProveedor(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallefacturaproveedor.getId()<0) {
				this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().remove(this.detallefacturaproveedor);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallefacturaproveedor.getId()<0) {
				this.detallefacturaproveedors.remove(this.detallefacturaproveedor);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleFacturaProveedor(List<DetalleFacturaProveedor> detallefacturaproveedorsAux) throws Exception {
		DetalleFacturaProveedorConstantesFunciones.setEstadosInicialesDetalleFacturaProveedor(detallefacturaproveedorsAux);
	}
	
	public void setEstadosInicialesDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedorAux) throws Exception {
		DetalleFacturaProveedorConstantesFunciones.setEstadosInicialesDetalleFacturaProveedor(detallefacturaproveedorAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleFacturaProveedorActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleFacturaProveedorActual()) {
				if(!this.isEsNuevoDetalleFacturaProveedor) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleFacturaProveedor=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleFacturaProveedorActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Factura Proveedor ?", "MANTENIMIENTO DE Detalle Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleFacturaProveedor detallefacturaproveedor) throws Exception {
		DetalleFacturaProveedorConstantesFunciones.seleccionarAsignar(this.detallefacturaproveedor,detallefacturaproveedor);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleFacturaProveedor=this.isPermisoActualizarOriginalDetalleFacturaProveedor;
			
			
			this.seleccionarAsignar(detallefacturaproveedor);
			
			

			idProductoActual=detallefacturaproveedor.getid_producto();
			this.seleccionarProductoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleFacturaProveedorConstantesFunciones.quitarEspaciosDetalleFacturaProveedor(this.detallefacturaproveedor,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallefacturaproveedorSessionBean.setsFuncionBusquedaRapida(this.detallefacturaproveedorSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleFacturaProveedor) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleFacturaProveedor(esParaCancelar);				
				this.cancelarNuevoDetalleFacturaProveedor(esParaCancelar);								
			}
			
			this.detallefacturaproveedor=new DetalleFacturaProveedor();
			
			this.inicializarDetalleFacturaProveedor();
			
			this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleFacturaProveedor() throws Exception {
		try {
			DetalleFacturaProveedorConstantesFunciones.inicializarDetalleFacturaProveedor(this.detallefacturaproveedor);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleFacturaProveedors(String sAccionBusqueda,List<DetalleFacturaProveedor> detallefacturaproveedorsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleFacturaProveedor"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleFacturaProveedorMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleFacturaProveedorMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleFacturaProveedor"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Factura Proveedores");		
		parameters.put("busquedapor", DetalleFacturaProveedorConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleFacturaProveedor=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleFacturaProveedorConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleFacturaProveedorConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleFacturaProveedor=new JRBeanArrayDataSource(DetalleFacturaProveedorJInternalFrame.TraerDetalleFacturaProveedorBeans(detallefacturaproveedorsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleFacturaProveedor);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleFacturaProveedorConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleFacturaProveedorConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleFacturaProveedorBean.TraerDetalleFacturaProveedorBeans(detallefacturaproveedorsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedorActionPerformed(null);
					//this.generarExcelReporteDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,detallefacturaproveedorsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFacturaProveedor> detallefacturaproveedorsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturaProveedors");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleFacturaProveedor("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleFacturaProveedor detallefacturaproveedor : detallefacturaproveedorsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleFacturaProveedorConstantesFunciones.generarExcelReporteDataDetalleFacturaProveedor("NORMAL",row,workbook,detallefacturaproveedor,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleFacturaProveedor(String sTipo,Row row,Workbook workbook) {
		
		DetalleFacturaProveedorConstantesFunciones.generarExcelReporteHeaderDetalleFacturaProveedor(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFacturaProveedor> detallefacturaproveedorsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturaProveedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleFacturaProveedor detallefacturaproveedor : detallefacturaproveedorsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.getDetalleFacturaProveedorDescripcion(detallefacturaproveedor));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getfacturaproveedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcantidad_auxiliar());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getlote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getfecha_elaboracion_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getfecha_caducidad_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(detallefacturaproveedor.getcosto_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcosto_unitario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcosto_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getdescuento1());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getdescuento2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getprecio_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getnovedadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getcuentacontablecosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getbodegaenviar_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getlote_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getdisponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getserie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getice_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallefacturaproveedor.getmes_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleFacturaProveedor> detallefacturaproveedorsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleFacturaProveedor> detallefacturaproveedorsRespaldo=null;
		
		classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallefacturaproveedorLogic.setDatosCliente(this.datosCliente);
		this.detallefacturaproveedorLogic.setDatosDeep(this.datosDeep);
		this.detallefacturaproveedorLogic.setIsConDeep(true);
		
		detallefacturaproveedorsRespaldo=this.detallefacturaproveedorLogic.getDetalleFacturaProveedors();
		
		this.detallefacturaproveedorLogic.setDetalleFacturaProveedors(detallefacturaproveedorsParaReportes);	
		this.detallefacturaproveedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallefacturaproveedorsParaReportes=this.detallefacturaproveedorLogic.getDetalleFacturaProveedors();
		this.detallefacturaproveedorLogic.setDetalleFacturaProveedors(detallefacturaproveedorsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleFacturaProveedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleFacturaProveedor("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleFacturaProveedor detallefacturaproveedor : detallefacturaproveedorsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleFacturaProveedor("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleFacturaProveedorConstantesFunciones.generarExcelReporteDataDetalleFacturaProveedor("NORMAL",row,workbook,detallefacturaproveedor,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.getDetalleFacturaProveedorDescripcion(detallefacturaproveedor));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetalleFacturaProveedor() throws Exception {		
		this.startProcessDetalleFacturaProveedor(true);
	}
	
	public void startProcessDetalleFacturaProveedor(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleFacturaProveedor ,this.jPanelParametrosReportesDetalleFacturaProveedor, this.jScrollPanelDatosDetalleFacturaProveedor,this.jPanelPaginacionDetalleFacturaProveedor, this.jScrollPanelDatosEdicionDetalleFacturaProveedor, this.jPanelAccionesDetalleFacturaProveedor,this.jPanelAccionesFormularioDetalleFacturaProveedor,this.jmenuBarDetalleFacturaProveedor,this.jmenuBarDetalleDetalleFacturaProveedor,this.jTtoolBarDetalleFacturaProveedor,this.jTtoolBarDetalleDetalleFacturaProveedor);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleFacturaProveedor=this.jTabbedPaneBusquedasDetalleFacturaProveedor; 
		
		final JPanel jPanelParametrosReportesDetalleFacturaProveedor=this.jPanelParametrosReportesDetalleFacturaProveedor;
		//final JScrollPane jScrollPanelDatosDetalleFacturaProveedor=this.jScrollPanelDatosDetalleFacturaProveedor;
		final JTable jTableDatosDetalleFacturaProveedor=this.jTableDatosDetalleFacturaProveedor;		
		final JPanel jPanelPaginacionDetalleFacturaProveedor=this.jPanelPaginacionDetalleFacturaProveedor;
		//final JScrollPane jScrollPanelDatosEdicionDetalleFacturaProveedor=this.jScrollPanelDatosEdicionDetalleFacturaProveedor;
		final JPanel jPanelAccionesDetalleFacturaProveedor=this.jPanelAccionesDetalleFacturaProveedor;
		
		JPanel jPanelCamposAuxiliarDetalleFacturaProveedor=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			jPanelCamposAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelCamposDetalleFacturaProveedor;
			jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelAccionesFormularioDetalleFacturaProveedor;
		}
		
		final JPanel jPanelCamposDetalleFacturaProveedor=jPanelCamposAuxiliarDetalleFacturaProveedor;
		final JPanel jPanelAccionesFormularioDetalleFacturaProveedor=jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor;
		
		
		final JMenuBar jmenuBarDetalleFacturaProveedor=this.jmenuBarDetalleFacturaProveedor;
		final JToolBar jTtoolBarDetalleFacturaProveedor=this.jTtoolBarDetalleFacturaProveedor;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetalleFacturaProveedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleFacturaProveedor=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			jmenuBarDetalleAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jmenuBarDetalleDetalleFacturaProveedor;
			jTtoolBarDetalleAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTtoolBarDetalleDetalleFacturaProveedor;
		}
		
		final JMenuBar jmenuBarDetalleDetalleFacturaProveedor=jmenuBarDetalleAuxiliarDetalleFacturaProveedor;
		final JToolBar jTtoolBarDetalleDetalleFacturaProveedor=jTtoolBarDetalleAuxiliarDetalleFacturaProveedor;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleFacturaProveedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleFacturaProveedor;
			processRunnable.jTableDatos=jTableDatosDetalleFacturaProveedor;
			processRunnable.jPanelCampos=jPanelCamposDetalleFacturaProveedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleFacturaProveedor;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleFacturaProveedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleFacturaProveedor;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleFacturaProveedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleFacturaProveedor;
			processRunnable.jTtoolBar=jTtoolBarDetalleFacturaProveedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleFacturaProveedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleFacturaProveedor ,jPanelParametrosReportesDetalleFacturaProveedor,jTableDatosDetalleFacturaProveedor, /*jScrollPanelDatosDetalleFacturaProveedor,*/jPanelCamposDetalleFacturaProveedor,jPanelPaginacionDetalleFacturaProveedor, /*jScrollPanelDatosEdicionDetalleFacturaProveedor,*/ jPanelAccionesDetalleFacturaProveedor,jPanelAccionesFormularioDetalleFacturaProveedor,jmenuBarDetalleFacturaProveedor,jmenuBarDetalleDetalleFacturaProveedor,jTtoolBarDetalleFacturaProveedor,jTtoolBarDetalleDetalleFacturaProveedor);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleFacturaProveedor ,jPanelParametrosReportesDetalleFacturaProveedor, jScrollPanelDatosDetalleFacturaProveedor,jPanelPaginacionDetalleFacturaProveedor, jScrollPanelDatosEdicionDetalleFacturaProveedor, jPanelAccionesDetalleFacturaProveedor,jPanelAccionesFormularioDetalleFacturaProveedor,jmenuBarDetalleFacturaProveedor,jmenuBarDetalleDetalleFacturaProveedor,jTtoolBarDetalleFacturaProveedor,jTtoolBarDetalleDetalleFacturaProveedor);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleFacturaProveedor() {// throws Exception 
		this.finishProcessDetalleFacturaProveedor(true);
	}
	
	public void finishProcessDetalleFacturaProveedor(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleFacturaProveedor ,this.jPanelParametrosReportesDetalleFacturaProveedor, this.jScrollPanelDatosDetalleFacturaProveedor,this.jPanelPaginacionDetalleFacturaProveedor, this.jScrollPanelDatosEdicionDetalleFacturaProveedor, this.jPanelAccionesDetalleFacturaProveedor,this.jPanelAccionesFormularioDetalleFacturaProveedor,this.jmenuBarDetalleFacturaProveedor,this.jmenuBarDetalleDetalleFacturaProveedor,this.jTtoolBarDetalleFacturaProveedor,this.jTtoolBarDetalleDetalleFacturaProveedor);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleFacturaProveedor=this.jTabbedPaneBusquedasDetalleFacturaProveedor; 
		
		final JPanel jPanelParametrosReportesDetalleFacturaProveedor=this.jPanelParametrosReportesDetalleFacturaProveedor;
		//final JScrollPane jScrollPanelDatosDetalleFacturaProveedor=this.jScrollPanelDatosDetalleFacturaProveedor;
		final JTable jTableDatosDetalleFacturaProveedor=this.jTableDatosDetalleFacturaProveedor;		
		final JPanel jPanelPaginacionDetalleFacturaProveedor=this.jPanelPaginacionDetalleFacturaProveedor;
		//final JScrollPane jScrollPanelDatosEdicionDetalleFacturaProveedor=this.jScrollPanelDatosEdicionDetalleFacturaProveedor;
		final JPanel jPanelAccionesDetalleFacturaProveedor=this.jPanelAccionesDetalleFacturaProveedor;
		
		JPanel jPanelCamposAuxiliarDetalleFacturaProveedor=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			jPanelCamposAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelCamposDetalleFacturaProveedor;
			jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelAccionesFormularioDetalleFacturaProveedor;
		}
		
		final JPanel jPanelCamposDetalleFacturaProveedor=jPanelCamposAuxiliarDetalleFacturaProveedor;
		final JPanel jPanelAccionesFormularioDetalleFacturaProveedor=jPanelAccionesFormularioAuxiliarDetalleFacturaProveedor;
		
		
		final JMenuBar jmenuBarDetalleFacturaProveedor=this.jmenuBarDetalleFacturaProveedor;		
		final JToolBar jTtoolBarDetalleFacturaProveedor=this.jTtoolBarDetalleFacturaProveedor;
				
		JMenuBar jmenuBarDetalleAuxiliarDetalleFacturaProveedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleFacturaProveedor=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			jmenuBarDetalleAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jmenuBarDetalleDetalleFacturaProveedor;
			jTtoolBarDetalleAuxiliarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTtoolBarDetalleDetalleFacturaProveedor;		
		}
		
		final JMenuBar jmenuBarDetalleDetalleFacturaProveedor=jmenuBarDetalleAuxiliarDetalleFacturaProveedor;
		final JToolBar jTtoolBarDetalleDetalleFacturaProveedor=jTtoolBarDetalleAuxiliarDetalleFacturaProveedor;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleFacturaProveedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleFacturaProveedor;
			processRunnable.jTableDatos=jTableDatosDetalleFacturaProveedor;
			processRunnable.jPanelCampos=jPanelCamposDetalleFacturaProveedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleFacturaProveedor;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleFacturaProveedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleFacturaProveedor;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleFacturaProveedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleFacturaProveedor;
			processRunnable.jTtoolBar=jTtoolBarDetalleFacturaProveedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleFacturaProveedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleFacturaProveedor ,jPanelParametrosReportesDetalleFacturaProveedor, jTableDatosDetalleFacturaProveedor,/*jScrollPanelDatosDetalleFacturaProveedor,*/jPanelCamposDetalleFacturaProveedor,jPanelPaginacionDetalleFacturaProveedor, /*jScrollPanelDatosEdicionDetalleFacturaProveedor,*/ jPanelAccionesDetalleFacturaProveedor,jPanelAccionesFormularioDetalleFacturaProveedor,jmenuBarDetalleFacturaProveedor,jmenuBarDetalleDetalleFacturaProveedor,jTtoolBarDetalleFacturaProveedor,jTtoolBarDetalleDetalleFacturaProveedor));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleFacturaProveedor(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleFacturaProveedor(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFacturaProveedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleFacturaProveedor,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFacturaProveedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleFacturaProveedor,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallefacturaproveedorConstantesFunciones.getsFinalQueryDetalleFacturaProveedor();
		String  finalQueryPaginacionTodos=this.detallefacturaproveedorConstantesFunciones.getsFinalQueryDetalleFacturaProveedor();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleFacturaProveedorConstantesFunciones.getArrayColumnasGlobalesNoDetalleFacturaProveedor(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleFacturaProveedorConstantesFunciones.getArrayColumnasGlobalesDetalleFacturaProveedor(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleFacturaProveedorConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallefacturaproveedorsEliminados= new ArrayList<DetalleFacturaProveedor>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleFacturaProveedor();
		
				///*DetalleFacturaProveedorSessionBean*/this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			
			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleFacturaProveedorConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleFacturaProveedorConstantesFunciones.getClassesForeignKeysOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallefacturaproveedor."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallefacturaproveedorsAux= new ArrayList<DetalleFacturaProveedor>();
			
				
			detallefacturaproveedorLogic.setDatosCliente(this.datosCliente);
			detallefacturaproveedorLogic.setDatosDeep(this.datosDeep);
			detallefacturaproveedorLogic.setIsConDeep(true);
			
			
			detallefacturaproveedorLogic.getDetalleFacturaProveedorDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallefacturaproveedorLogic.getTodosDetalleFacturaProveedors(finalQueryGlobal,pagination);
					
					//detallefacturaproveedorLogic.getTodosDetalleFacturaProveedorsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null|| detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturaproveedorsAux= new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux= new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturaproveedorLogic.getTodosDetalleFacturaProveedors(finalQueryGlobal+"",this.pagination);												
							
							//detallefacturaproveedorLogic.getTodosDetalleFacturaProveedorsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorLogic.getDetalleFacturaProveedors() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());					
							detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleFacturaProveedor=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleFacturaProveedor=this.idActual;
				
				} else if(this.idDetalleFacturaProveedorActual!=null && this.idDetalleFacturaProveedorActual!=0L) {
					idDetalleFacturaProveedor=idDetalleFacturaProveedorActual;
				}
				
					
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndicePorId(idDetalleFacturaProveedor);
				
				this.detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallefacturaproveedorLogic.getEntity(idDetalleFacturaProveedor);
					
					//detallefacturaproveedorLogic.getEntityWithConnection(idDetalleFacturaProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
					detallefacturaproveedorLogic.getDetalleFacturaProveedors().add(detallefacturaproveedorLogic.getDetalleFacturaProveedor());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
					this.detallefacturaproveedors.add(detallefacturaproveedor);
				}
				
				if(detallefacturaproveedorLogic.getDetalleFacturaProveedor()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAnio")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdAnio(finalQueryGlobal,pagination,id_anioFK_IdAnio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdAnio(finalQueryGlobal,pagination,id_anioFK_IdAnio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdAnio",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdAnio",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdBodega",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdBodega",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdBodegaEnviar")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodegaEnviar(finalQueryGlobal,pagination,id_bodega_enviarFK_IdBodegaEnviar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodegaEnviar(finalQueryGlobal,pagination,id_bodega_enviarFK_IdBodegaEnviar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdBodegaEnviar",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdBodegaEnviar",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdCentroCosto",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdCentroCosto",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCosto")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdCuentaContableCosto",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdCuentaContableCosto",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdEjercicio",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdEjercicio",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdEmpresa",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdEmpresa",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFacturaProveedor")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdFacturaProveedor(id_factura_proveedorFK_IdFacturaProveedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdFacturaProveedor(finalQueryGlobal,pagination,id_factura_proveedorFK_IdFacturaProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdFacturaProveedor(id_factura_proveedorFK_IdFacturaProveedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdFacturaProveedor(id_factura_proveedorFK_IdFacturaProveedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdFacturaProveedor(finalQueryGlobal,pagination,id_factura_proveedorFK_IdFacturaProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdFacturaProveedor(id_factura_proveedorFK_IdFacturaProveedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdFacturaProveedor(id_factura_proveedorFK_IdFacturaProveedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdFacturaProveedor",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdFacturaProveedor",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMes")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdMes(finalQueryGlobal,pagination,id_mesFK_IdMes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdMes(finalQueryGlobal,pagination,id_mesFK_IdMes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdMes",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdMes",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNovedadProducto")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdNovedadProducto",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdNovedadProducto",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdPeriodo",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdPeriodo",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdProducto",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdProducto",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdSucursal",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdSucursal",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors()==null||detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallefacturaproveedors==null|| detallefacturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
						detallefacturaproveedorsAux.addAll(detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorsAux=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedorsAux.addAll(detallefacturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleFacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleFacturaProveedors("FK_IdUnidad",detallefacturaproveedorLogic.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleFacturaProveedors("FK_IdUnidad",detallefacturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
						detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(detallefacturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedors=new ArrayList<DetalleFacturaProveedor>();
							detallefacturaproveedors.addAll(detallefacturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleFacturaProveedor();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleFacturaProveedor();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallefacturaproveedorLogic.getDetalleFacturaProveedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallefacturaproveedors.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallefacturaproveedorLogic.getDetalleFacturaProveedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallefacturaproveedors.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleFacturaProveedor detallefacturaproveedor) {
		Boolean permite=true;
		
		if(this.detallefacturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleFacturaProveedorConstantesFunciones.getOrderByListaDetalleFacturaProveedor();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleFacturaProveedorConstantesFunciones.getOrderByListaDetalleFacturaProveedor();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				if(detallefacturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaproveedorTotales=detallefacturaproveedor;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFacturaProveedor detallefacturaproveedor:this.detallefacturaproveedors) {
				if(detallefacturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaproveedorTotales=detallefacturaproveedor;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallefacturaproveedorAux=new DetalleFacturaProveedor();
			this.detallefacturaproveedorAux.setsType(Constantes2.S_TOTALES);
			this.detallefacturaproveedorAux.setIsNew(false);
			this.detallefacturaproveedorAux.setIsChanged(false);
			this.detallefacturaproveedorAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleFacturaProveedorConstantesFunciones.TotalizarValoresFilaDetalleFacturaProveedor(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this.detallefacturaproveedorAux);
				
				this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().add(this.detallefacturaproveedorAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleFacturaProveedorConstantesFunciones.TotalizarValoresFilaDetalleFacturaProveedor(this.detallefacturaproveedors,this.detallefacturaproveedorAux);
				
				this.detallefacturaproveedors.add(this.detallefacturaproveedorAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallefacturaproveedorTotales=new DetalleFacturaProveedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().remove(detallefacturaproveedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallefacturaproveedors.remove(detallefacturaproveedorTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallefacturaproveedorTotales=new DetalleFacturaProveedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				if(detallefacturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaproveedorTotales=detallefacturaproveedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleFacturaProveedorConstantesFunciones.TotalizarValoresFilaDetalleFacturaProveedor(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),detallefacturaproveedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleFacturaProveedor detallefacturaproveedor:this.detallefacturaproveedors) {
				if(detallefacturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					detallefacturaproveedorTotales=detallefacturaproveedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleFacturaProveedorConstantesFunciones.TotalizarValoresFilaDetalleFacturaProveedor(this.detallefacturaproveedors,detallefacturaproveedorTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetalleFacturaProveedorsFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdBodegaEnviar()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodegaEnviar";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdCuentaContableCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdFacturaProveedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdFacturaProveedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdNovedadProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdNovedadProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleFacturaProveedorsFK_IdUnidad()throws Exception {
		try {
			sAccionBusqueda="FK_IdUnidad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetalleFacturaProveedorsFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdBodegaEnviar(String sFinalQuery,Long id_bodega_enviar)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdBodegaEnviar(sFinalQuery,this.pagination,id_bodega_enviar);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdCuentaContableCosto(String sFinalQuery,Long id_cuenta_contable_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdCuentaContableCosto(sFinalQuery,this.pagination,id_cuenta_contable_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdFacturaProveedor(String sFinalQuery,Long id_factura_proveedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdFacturaProveedor(sFinalQuery,this.pagination,id_factura_proveedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdNovedadProducto(String sFinalQuery,Long id_novedad_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdNovedadProducto(sFinalQuery,this.pagination,id_novedad_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleFacturaProveedorsFK_IdUnidad(String sFinalQuery,Long id_unidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLogic.getDetalleFacturaProveedorsFK_IdUnidad(sFinalQuery,this.pagination,id_unidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleFacturaProveedor() {
		this.isPermisoTodoDetalleFacturaProveedor=false;
		this.isPermisoNuevoDetalleFacturaProveedor=false;
		this.isPermisoActualizarDetalleFacturaProveedor=false;
		this.isPermisoActualizarOriginalDetalleFacturaProveedor=false;
		this.isPermisoEliminarDetalleFacturaProveedor=false;
		this.isPermisoGuardarCambiosDetalleFacturaProveedor=false;
		this.isPermisoConsultaDetalleFacturaProveedor=false;
		this.isPermisoBusquedaDetalleFacturaProveedor=false;
		this.isPermisoReporteDetalleFacturaProveedor=false;		
		this.isPermisoOrdenDetalleFacturaProveedor=false;		
		this.isPermisoPaginacionMedioDetalleFacturaProveedor=false;		
		this.isPermisoPaginacionAltoDetalleFacturaProveedor=false;
		this.isPermisoPaginacionTodoDetalleFacturaProveedor=false;
		this.isPermisoCopiarDetalleFacturaProveedor=false;		
		this.isPermisoVerFormDetalleFacturaProveedor=false;		
		this.isPermisoDuplicarDetalleFacturaProveedor=false;		
		this.isPermisoOrdenDetalleFacturaProveedor=false;		
	}
	
	public void setPermisosUsuarioDetalleFacturaProveedor(Boolean isPermiso) {
		this.isPermisoTodoDetalleFacturaProveedor=isPermiso;
		this.isPermisoNuevoDetalleFacturaProveedor=isPermiso;
		this.isPermisoActualizarDetalleFacturaProveedor=isPermiso;
		this.isPermisoActualizarOriginalDetalleFacturaProveedor=isPermiso;
		this.isPermisoEliminarDetalleFacturaProveedor=isPermiso;
		this.isPermisoGuardarCambiosDetalleFacturaProveedor=isPermiso;
		this.isPermisoConsultaDetalleFacturaProveedor=isPermiso;
		this.isPermisoBusquedaDetalleFacturaProveedor=isPermiso;
		this.isPermisoReporteDetalleFacturaProveedor=isPermiso;
		this.isPermisoOrdenDetalleFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionMedioDetalleFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionAltoDetalleFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionTodoDetalleFacturaProveedor=isPermiso;		
		this.isPermisoCopiarDetalleFacturaProveedor=isPermiso;		
		this.isPermisoVerFormDetalleFacturaProveedor=isPermiso;		
		this.isPermisoDuplicarDetalleFacturaProveedor=isPermiso;
		this.isPermisoOrdenDetalleFacturaProveedor=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleFacturaProveedor(Boolean isPermiso) {
		//this.isPermisoTodoDetalleFacturaProveedor=isPermiso;
		this.isPermisoNuevoDetalleFacturaProveedor=isPermiso;
		this.isPermisoActualizarDetalleFacturaProveedor=isPermiso;
		this.isPermisoActualizarOriginalDetalleFacturaProveedor=isPermiso;
		this.isPermisoEliminarDetalleFacturaProveedor=isPermiso;
		this.isPermisoGuardarCambiosDetalleFacturaProveedor=isPermiso;
		//this.isPermisoConsultaDetalleFacturaProveedor=isPermiso;
		//this.isPermisoBusquedaDetalleFacturaProveedor=isPermiso;
		//this.isPermisoReporteDetalleFacturaProveedor=isPermiso;
		//this.isPermisoOrdenDetalleFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleFacturaProveedor=isPermiso;		
		//this.isPermisoCopiarDetalleFacturaProveedor=isPermiso;		
		//this.isPermisoDuplicarDetalleFacturaProveedor=isPermiso;
		//this.isPermisoOrdenDetalleFacturaProveedor=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleFacturaProveedorClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleFacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleFacturaProveedorClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleFacturaProveedorClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleFacturaProveedorClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleFacturaProveedorClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleFacturaProveedor() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleFacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleFacturaProveedor=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleFacturaProveedor=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleFacturaProveedor=this.isPermisoActualizarDetalleFacturaProveedor;
			this.isPermisoEliminarDetalleFacturaProveedor=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleFacturaProveedor=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleFacturaProveedor=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleFacturaProveedor=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleFacturaProveedor=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleFacturaProveedor=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleFacturaProveedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleFacturaProveedor=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleFacturaProveedor=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleFacturaProveedor=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleFacturaProveedor=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleFacturaProveedor=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleFacturaProveedor=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleFacturaProveedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleFacturaProveedor.setToolTipText(this.jTableDatosDetalleFacturaProveedor.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleFacturaProveedor(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleFacturaProveedor(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleFacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleFacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleFacturaProveedor() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleFacturaProveedorListas()throws Exception {
		try	{						
			
				this.facturaproveedorsForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.novedadproductosForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.cuentacontablecostosForeignKey=new ArrayList();
				this.bodegaenviarsForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleFacturaProveedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleFacturaProveedorJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleFacturaProveedorListas(false);
			} else {
			
				this.cargarCombosForeignKeyFacturaProveedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaEnviarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyFacturaProveedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturaproveedorsForeignKey==null||this.facturaproveedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaProveedorConstantesFunciones.getArrayColumnasGlobalesFacturaProveedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaProveedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaProveedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturaProveedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NovedadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaEnviarListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegaenviarsForeignKey==null||this.bodegaenviarsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegaEnviarsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleFacturaProveedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorReturnGeneral=new DetalleFacturaProveedorParameterReturnGeneral();
						
			


				String finalQueryGlobalFacturaProveedor="";

				if(((this.facturaproveedorsForeignKey==null||this.facturaproveedorsForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_factura_proveedorDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_factura_proveedorDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFacturaProveedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaProveedorConstantesFunciones.getArrayColumnasGlobalesFacturaProveedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFacturaProveedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaProveedorConstantesFunciones.TABLENAME);

						finalQueryGlobalFacturaProveedor=Funciones.GetFinalQueryAppend(finalQueryGlobalFacturaProveedor, "");
						finalQueryGlobalFacturaProveedor+=FacturaProveedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturaProveedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFacturaProveedor=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidFacturaProveedorActual();
					}
				} else {
					finalQueryGlobalFacturaProveedor="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_empresaDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_empresaDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_sucursalDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_sucursalDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_bodegaDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_bodegaDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_productoDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_productoDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_unidadDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_unidadDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_ejercicioDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_ejercicioDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_periodoDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_periodoDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalNovedadProducto="";

				if(((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_novedad_productoDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_novedad_productoDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNovedadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalNovedadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalNovedadProducto, "");
						finalQueryGlobalNovedadProducto+=NovedadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNovedadProducto=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidNovedadProductoActual();
					}
				} else {
					finalQueryGlobalNovedadProducto="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_centro_costoDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_centro_costoDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCuentaContableCosto="";

				if(((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_cuenta_contable_costoDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_cuenta_contable_costoDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCosto, "");
						finalQueryGlobalCuentaContableCosto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCosto=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidCuentaContableCostoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCosto="NONE";
				}


				String finalQueryGlobalBodegaEnviar="";

				if(((this.bodegaenviarsForeignKey==null||this.bodegaenviarsForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_bodega_enviarDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_bodega_enviarDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodegaEnviar=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodegaEnviar=Funciones.GetFinalQueryAppend(finalQueryGlobalBodegaEnviar, "");
						finalQueryGlobalBodegaEnviar+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegaEnviarsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodegaEnviar=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidBodegaEnviarActual();
					}
				} else {
					finalQueryGlobalBodegaEnviar="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_anioDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_anioDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detallefacturaproveedorConstantesFunciones.cargarid_mesDetalleFacturaProveedor)
					 || (this.esRecargarFks && this.detallefacturaproveedorConstantesFunciones.cargarid_mesDetalleFacturaProveedor)) {

					if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detallefacturaproveedorSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.cargarCombosLoteForeignKeyDetalleFacturaProveedor(finalQueryGlobalFacturaProveedor,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalNovedadProducto,finalQueryGlobalCentroCosto,finalQueryGlobalCuentaContableCosto,finalQueryGlobalBodegaEnviar,finalQueryGlobalAnio,finalQueryGlobalMes);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalFacturaProveedor.equals("NONE")) {
				this.facturaproveedorsForeignKey=detallefacturaproveedorReturnGeneral.getfacturaproveedorsForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallefacturaproveedorReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallefacturaproveedorReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallefacturaproveedorReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallefacturaproveedorReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallefacturaproveedorReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detallefacturaproveedorReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detallefacturaproveedorReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalNovedadProducto.equals("NONE")) {
				this.novedadproductosForeignKey=detallefacturaproveedorReturnGeneral.getnovedadproductosForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detallefacturaproveedorReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCosto.equals("NONE")) {
				this.cuentacontablecostosForeignKey=detallefacturaproveedorReturnGeneral.getcuentacontablecostosForeignKey();
			}

			if(!finalQueryGlobalBodegaEnviar.equals("NONE")) {
				this.bodegaenviarsForeignKey=detallefacturaproveedorReturnGeneral.getbodegaenviarsForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detallefacturaproveedorReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detallefacturaproveedorReturnGeneral.getmessForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleFacturaProveedor()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyFacturaProveedor();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyNovedadProducto();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableCosto();
			this.addItemDefectoCombosForeignKeyBodegaEnviar();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyFacturaProveedor()throws Exception {
		try {
			if(this.detallefacturaproveedorSessionBean==null) {
				this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFacturaProveedor()) {
				FacturaProveedor facturaproveedor=new FacturaProveedor();
				FacturaProveedorConstantesFunciones.setFacturaProveedorDescripcion(facturaproveedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				facturaproveedor.setId(null);

				if(!FacturaProveedorConstantesFunciones.ExisteEnLista(this.facturaproveedorsForeignKey,facturaproveedor,true)) {

					this.facturaproveedorsForeignKey.add(0,facturaproveedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNovedadProducto()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				NovedadProducto novedadproducto=new NovedadProducto();
				NovedadProductoConstantesFunciones.setNovedadProductoDescripcion(novedadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				novedadproducto.setId(null);

				if(!NovedadProductoConstantesFunciones.ExisteEnLista(this.novedadproductosForeignKey,novedadproducto,true)) {

					this.novedadproductosForeignKey.add(0,novedadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCosto()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				CuentaContable cuentacontablecosto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecosto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostosForeignKey,cuentacontablecosto,true)) {

					this.cuentacontablecostosForeignKey.add(0,cuentacontablecosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodegaEnviar()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {
				Bodega bodegaenviar=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodegaenviar,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodegaenviar.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegaenviarsForeignKey,bodegaenviar,true)) {

					this.bodegaenviarsForeignKey.add(0,bodegaenviar);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detallefacturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleFacturaProveedor()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleFacturaProveedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallefacturaproveedor.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleFacturaProveedor"));
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleFacturaProveedor"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleFacturaProveedor"));
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleFacturaProveedor"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleFacturaProveedor"));
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleFacturaProveedor"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleFacturaProveedor"));
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleFacturaProveedor"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor"));

						this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor"));

						this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleFacturaProveedor()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detallefacturaproveedor.setfecha_elaboracion_lote(this.parametroGeneralUsuario.getfecha_sistema());
				this.detallefacturaproveedor.setfecha_caducidad_lote(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFacturaProveedor();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor)throws Exception {	
		try {
			
			this.setActualFacturaProveedorForeignKey(detallefacturaproveedor.getid_factura_proveedor(),false,"Formulario");
			this.setActualBodegaForeignKey(detallefacturaproveedor.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallefacturaproveedor.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallefacturaproveedor.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(detallefacturaproveedor.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detallefacturaproveedor.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(detallefacturaproveedor.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualBodegaEnviarForeignKey(detallefacturaproveedor.getid_bodega_enviar(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallefacturaproveedor.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallefacturaproveedor.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleFacturaProveedor()throws Exception {	
		try {
			
			this.setActualFacturaProveedorForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_factura_proveedor(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualBodegaEnviarForeignKey(this.detallefacturaproveedorConstantesFunciones.getid_bodega_enviar(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleFacturaProveedor()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleFacturaProveedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleFacturaProveedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleFacturaProveedor()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleFacturaProveedor()throws Exception {
		try {
			

			this.cargarCombosFrameFacturaProveedorsForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameNovedadProductosForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
			this.cargarCombosFrameBodegaEnviarsForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleFacturaProveedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameFacturaProveedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegaEnviarsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleFacturaProveedor()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	







	public void recargarFormDetalleFacturaProveedorBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleFacturaProveedorid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleFacturaProveedorProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleFacturaProveedorid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}


















	
	



	public void recargarFormDetalleFacturaProveedorid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallefacturaproveedor,jComboBoxGenericoProducto);
			}

			if(this.detallefacturaproveedor.getid_bodega()!=null && this.detallefacturaproveedor.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallefacturaproveedor.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallefacturaproveedor.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleFacturaProveedorid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallefacturaproveedor,jComboBoxGenericoUnidad);
			}

			if(this.detallefacturaproveedor.getid_producto()!=null && this.detallefacturaproveedor.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallefacturaproveedor.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallefacturaproveedor.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleFacturaProveedorBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleFacturaProveedorBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleFacturaProveedorBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean(); 
		this.detallefacturaproveedorConstantesFunciones=new DetalleFacturaProveedorConstantesFunciones(); 
		this.detallefacturaproveedorBean=new DetalleFacturaProveedor();//(this.detallefacturaproveedorConstantesFunciones); 		
		this.detallefacturaproveedorReturnGeneral=new DetalleFacturaProveedorParameterReturnGeneral(); 
		
		this.detallefacturaproveedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallefacturaproveedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleFacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleFacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleFacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleFacturaProveedor(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallefacturaproveedorConstantesFunciones=new DetalleFacturaProveedorConstantesFunciones(); 
			this.detallefacturaproveedorBean=new DetalleFacturaProveedor();//this.detallefacturaproveedorConstantesFunciones); 			
			this.detallefacturaproveedorReturnGeneral=new DetalleFacturaProveedorParameterReturnGeneral(); 
		
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Factura Proveedor Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallefacturaproveedor=new DetalleFacturaProveedor();
			this.detallefacturaproveedors = new ArrayList<DetalleFacturaProveedor>();
			this.detallefacturaproveedorsAux = new ArrayList<DetalleFacturaProveedor>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic=new DetalleFacturaProveedorLogic();
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			//this.detallefacturaproveedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallefacturaproveedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleFacturaProveedor);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleFacturaProveedor);	
					}
					
					if(this.jInternalFrameImportacionDetalleFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleFacturaProveedor);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetalleFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleFacturaProveedor);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleFacturaProveedor);
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.setVisible(false);
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor);
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleFacturaProveedor);
					this.jInternalFrameImportacionDetalleFacturaProveedor.setVisible(false);
					this.jInternalFrameImportacionDetalleFacturaProveedor.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetalleFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleFacturaProveedor);
					this.jInternalFrameOrderByDetalleFacturaProveedor.setVisible(false);
					this.jInternalFrameOrderByDetalleFacturaProveedor.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleFacturaProveedorActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleFacturaProveedorConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallefacturaproveedorReturnGeneral=new DetalleFacturaProveedorParameterReturnGeneral();
			
			this.detallefacturaproveedorParameterGeneral=new DetalleFacturaProveedorParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallefacturaproveedorLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleFacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),this.detallefacturaproveedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),this.detallefacturaproveedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaCopiarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaVerFormDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaOrdenDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdBodegaEnviar=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContableCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFacturaProveedor=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdNovedadProducto=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleFacturaProveedor();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleFacturaProveedor(false);
			
			this.setPermisosUsuarioDetalleFacturaProveedor();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() 
				|| (this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() && this.detallefacturaproveedorSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleFacturaProveedorClasesRelacionadas();
			}
			
			if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleFacturaProveedorClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleFacturaProveedor();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleFacturaProveedor();
			}
			
			if(!this.isPermisoBusquedaDetalleFacturaProveedor) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleFacturaProveedor,this.isPermisoPaginacionMedioDetalleFacturaProveedor,this.isPermisoPaginacionTodoDetalleFacturaProveedor);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleFacturaProveedorConstantesFunciones.getTiposSeleccionarDetalleFacturaProveedor());
				
				this.tiposColumnasSelect=DetalleFacturaProveedorConstantesFunciones.getTiposSeleccionarDetalleFacturaProveedor(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleFacturaProveedor();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleFacturaProveedor(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleFacturaProveedor(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFacturaProveedor() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.facturaproveedorLogic=new FacturaProveedorLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.novedadproductoLogic=new NovedadProductoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.cuentacontablecostoLogic=new CuentaContableLogic();
			this.bodegaenviarLogic=new BodegaLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallefacturaproveedorImplementable= (DetalleFacturaProveedorImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleFacturaProveedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallefacturaproveedorImplementableHome= (DetalleFacturaProveedorImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleFacturaProveedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallefacturaproveedors= new ArrayList<DetalleFacturaProveedor>();
			this.detallefacturaproveedorsEliminados= new ArrayList<DetalleFacturaProveedor>();
						
			this.isEsNuevoDetalleFacturaProveedor=false;
			this.esParaAccionDesdeFormularioDetalleFacturaProveedor=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.facturaproveedorsForeignKey=new ArrayList<FacturaProveedor>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>() ;
			this.bodegaenviarsForeignKey=new ArrayList<Bodega>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleFacturaProveedor(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleFacturaProveedor();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleFacturaProveedorConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleFacturaProveedor(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleFacturaProveedor();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleFacturaProveedor();
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleFacturaProveedor.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleFacturaProveedor(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleFacturaProveedor: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleFacturaProveedor() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleFacturaProveedor")) {
				iIndex=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleFacturaProveedor();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleFacturaProveedor(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleFacturaProveedor(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleFacturaProveedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleFacturaProveedorListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleFacturaProveedor();
		
		this.cargarCombosFrameForeignKeyDetalleFacturaProveedor();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleFacturaProveedor();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleFacturaProveedor();
		}
	}
	
	

	public void cargarCombosForeignKeyFacturaProveedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaProveedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFacturaProveedor();
				this.cargarCombosFrameFacturaProveedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFacturaProveedor(this.facturaproveedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaNovedadProducto(this.novedadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaEnviar(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaEnviarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodegaEnviar();
				this.cargarCombosFrameBodegaEnviarsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaBodegaEnviar(this.bodegaenviarsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleFacturaProveedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			
			if(jTableDatosDetalleFacturaProveedor.getRowCount()>=1) {
				jTableDatosDetalleFacturaProveedor.removeRowSelectionInterval(0, jTableDatosDetalleFacturaProveedor.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleFacturaProveedor=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleFacturaProveedor(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleFacturaProveedor(true);			
			//this.detallefacturaproveedor=new DetalleFacturaProveedor();
			//this.detallefacturaproveedor.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor() ;
			
			if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFacturaProveedor(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallefacturaproveedor);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);				
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleFacturaProveedor: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleFacturaProveedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleFacturaProveedor.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleFacturaProveedor.getSelectedRows().length;			
			}
			
			detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleFacturaProveedor--;			
				//DetalleFacturaProveedor detallefacturaproveedorAux= new DetalleFacturaProveedor();			
				//detallefacturaproveedorAux.setId(this.iIdNuevoDetalleFacturaProveedor);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleFacturaProveedor detallefacturaproveedorOrigen=new DetalleFacturaProveedor();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleFacturaProveedor detallefacturaproveedorOrigen : detallefacturaproveedorsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallefacturaproveedorOrigen =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallefacturaproveedorOrigen =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleFacturaProveedor();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallefacturaproveedor.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleFacturaProveedor(detallefacturaproveedorOrigen,this.detallefacturaproveedor,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().add(this.detallefacturaproveedorAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedors.add(this.detallefacturaproveedorAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
				
				this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoDetalleFacturaProveedor(), this.getIndiceNuevoDetalleFacturaProveedor());
				
				int iLastRow =  this.jTableDatosDetalleFacturaProveedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleFacturaProveedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleFacturaProveedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();									
		
			DetalleFacturaProveedor detallefacturaproveedorOrigen=new DetalleFacturaProveedor();
			DetalleFacturaProveedor detallefacturaproveedorDestino=new DetalleFacturaProveedor();
				
			detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleFacturaProveedor.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallefacturaproveedorsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleFacturaProveedor.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorOrigen =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallefacturaproveedorOrigen =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallefacturaproveedorDestino =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallefacturaproveedorDestino =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallefacturaproveedorOrigen =detallefacturaproveedorsSeleccionados.get(0);
				detallefacturaproveedorDestino =detallefacturaproveedorsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleFacturaProveedor(detallefacturaproveedorOrigen,detallefacturaproveedorDestino,true,false);
				
				detallefacturaproveedorDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallefacturaproveedorDestino,detallefacturaproveedorLogic.getDetalleFacturaProveedors());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallefacturaproveedorDestino,detallefacturaproveedors);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
				
				//this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoDetalleFacturaProveedor(), this.getIndiceNuevoDetalleFacturaProveedor());
				
				int iLastRow =  this.jTableDatosDetalleFacturaProveedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleFacturaProveedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleFacturaProveedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleFacturaProveedor.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(!isVisible);
			this.jPanelPaginacionDetalleFacturaProveedor.setVisible(!isVisible);
			this.jPanelAccionesDetalleFacturaProveedor.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleFacturaProveedor();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetalleFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetalleFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetalleFacturaProveedor();
			
			this.abrirFrameOrderByDetalleFacturaProveedor();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetalleFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleFacturaProveedor(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleFacturaProveedor);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSize(this.jInternalFrameDetalleFormDetalleFacturaProveedor.iWidthFormulario,this.jInternalFrameDetalleFormDetalleFacturaProveedor.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleFacturaProveedor.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleFacturaProveedor.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jContentPaneDetalleDetalleFacturaProveedor.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jContentPaneDetalleDetalleFacturaProveedor.getWidth(),DetalleFacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jContentPaneDetalleDetalleFacturaProveedor.getWidth(),DetalleFacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jContentPaneDetalleDetalleFacturaProveedor.getWidth(),DetalleFacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleFacturaProveedor.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleFacturaProveedor==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleFacturaProveedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleFacturaProveedor,false,this);
				} else {
					this.jInternalFrameOrderByDetalleFacturaProveedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleFacturaProveedor,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleFacturaProveedor);
				this.jInternalFrameOrderByDetalleFacturaProveedor.setVisible(false);
				this.jInternalFrameOrderByDetalleFacturaProveedor.setSelected(false);
				
				this.jInternalFrameOrderByDetalleFacturaProveedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleFacturaProveedor"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleFacturaProveedor();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleFacturaProveedor==null) {
				
				this.jInternalFrameImportacionDetalleFacturaProveedor=new ImportacionJInternalFrame(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleFacturaProveedor);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleFacturaProveedor);
				this.jInternalFrameImportacionDetalleFacturaProveedor.setVisible(false);
				this.jInternalFrameImportacionDetalleFacturaProveedor.setSelected(false);


				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleFacturaProveedor"));
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleFacturaProveedor"));
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleFacturaProveedor"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor==null) {
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor=new ReporteDinamicoJInternalFrame(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleFacturaProveedor);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor);
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFacturaProveedor"));
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFacturaProveedor"));
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFacturaProveedor"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFacturaProveedor();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleFacturaProveedor);
			
	       	this.jInternalFrameDetalleFormDetalleFacturaProveedor.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleFacturaProveedor.dispose();
			//this.jInternalFrameDetalleFormDetalleFacturaProveedor=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetalleFacturaProveedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleFacturaProveedor.setVisible(true);
	        this.jInternalFrameImportacionDetalleFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDetalleFacturaProveedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleFacturaProveedor.setVisible(true);
	        this.jInternalFrameOrderByDetalleFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetalleFacturaProveedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleFacturaProveedor.setVisible(false);
	        this.jInternalFrameOrderByDetalleFacturaProveedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetalleFacturaProveedor() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetalleFacturaProveedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleFacturaProveedor.setVisible(false);
	        this.jInternalFrameImportacionDetalleFacturaProveedor.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCosto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCosto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCosto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCosto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleFacturaProveedor(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleFacturaProveedor(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleFacturaProveedor(true);
			//this.isEsNuevoDetalleFacturaProveedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false) ;
			
			if(detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFacturaProveedor(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleFacturaProveedorActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleFacturaProveedor(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleFacturaProveedor(true);
			//this.isEsNuevoDetalleFacturaProveedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallefacturaproveedor.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false) ;
			
			if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleFacturaProveedor(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detallefacturaproveedorConstantesFunciones.cargarid_productoDetalleFacturaProveedor) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaFacturaProveedor(List<FacturaProveedor> facturaproveedorsForeignKey)throws Exception{
		TableColumn tableColumnFacturaProveedor=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR));
		TableCellEditor tableCellEditorFacturaProveedor =tableColumnFacturaProveedor.getCellEditor();

		FacturaProveedorTableCell facturaproveedorTableCellFk=(FacturaProveedorTableCell)tableCellEditorFacturaProveedor;

		if(facturaproveedorTableCellFk!=null) {
			facturaproveedorTableCellFk.setfacturaproveedorsForeignKey(facturaproveedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaproveedorTableCellFk.setRowActual(intSelectedRow);
			//facturaproveedorTableCellFk.setfacturaproveedorsForeignKeyActual(facturaproveedorsForeignKey);
		//}


		if(facturaproveedorTableCellFk!=null) {
			facturaproveedorTableCellFk.RecargarFacturaProveedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaNovedadProducto(List<NovedadProducto> novedadproductosForeignKey)throws Exception{
		TableColumn tableColumnNovedadProducto=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));
		TableCellEditor tableCellEditorNovedadProducto =tableColumnNovedadProducto.getCellEditor();

		NovedadProductoTableCell novedadproductoTableCellFk=(NovedadProductoTableCell)tableCellEditorNovedadProducto;

		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.setnovedadproductosForeignKey(novedadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//novedadproductoTableCellFk.setRowActual(intSelectedRow);
			//novedadproductoTableCellFk.setnovedadproductosForeignKeyActual(novedadproductosForeignKey);
		//}


		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.RecargarNovedadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCosto(List<CuentaContable> cuentacontablecostosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCosto=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));
		TableCellEditor tableCellEditorCuentaContableCosto =tableColumnCuentaContableCosto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCosto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodegaEnviar(List<Bodega> bodegaenviarsForeignKey)throws Exception{
		TableColumn tableColumnBodegaEnviar=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR));
		TableCellEditor tableCellEditorBodegaEnviar =tableColumnBodegaEnviar.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodegaEnviar;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegaenviarsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegaenviarsForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleFacturaProveedor(false);
			
			//if(!this.isEsNuevoDetalleFacturaProveedor) {								
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				
			}
			
			if(this.permiteMantenimiento(this.detallefacturaproveedor)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleFacturaProveedor=true;
					this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
					this.isEsNuevoDetalleFacturaProveedor=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleFacturaProveedor=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleFacturaProveedor=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(false);
				
				this.habilitarDeshabilitarControlesDetalleFacturaProveedor(false);
			
												
				
				if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleFacturaProveedor();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,detallefacturaproveedorSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleFacturaProveedor(this.detallefacturaproveedor,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallefacturaproveedorSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallefacturaproveedor.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				this.detallefacturaproveedor.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				this.detallefacturaproveedor.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallefacturaproveedor)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleFacturaProveedorModel) this.jTableDatosDetalleFacturaProveedor.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleFacturaProveedor=true;
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
				this.isEsNuevoDetalleFacturaProveedor=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(false);
				
				this.habilitarDeshabilitarControlesDetalleFacturaProveedor(false);
				
				
				
				if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleFacturaProveedor();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleFacturaProveedor.getRowCount()>=1) {
				jTableDatosDetalleFacturaProveedor.removeRowSelectionInterval(0, jTableDatosDetalleFacturaProveedor.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleFacturaProveedor(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(false) ;
			
			this.isEsNuevoDetalleFacturaProveedor=false;
			
			if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleFacturaProveedor();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				
				//SI ES MANUAL
				if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleFacturaProveedor();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleFacturaProveedor--;			
			//DetalleFacturaProveedor detallefacturaproveedorAux= new DetalleFacturaProveedor();			
			//detallefacturaproveedorAux.setId(this.iIdNuevoDetalleFacturaProveedor);
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleFacturaProveedor();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
			
			this.detallefacturaproveedor.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().add(this.detallefacturaproveedorAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallefacturaproveedors.add(this.detallefacturaproveedorAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			
			this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoDetalleFacturaProveedor(), this.getIndiceNuevoDetalleFacturaProveedor());
			
			int iLastRow =  this.jTableDatosDetalleFacturaProveedor.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleFacturaProveedor.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleFacturaProveedor.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
			
			//SI ES MANUAL
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFacturaProveedor();
			}
			
			//this.abrirFrameTreeDetalleFacturaProveedor();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle Factura ProveedorES ?", "MANTENIMIENTO DE Detalle Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleFacturaProveedor.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleFacturaProveedor();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.procesarImportacionDetalleFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallefacturaproveedorParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleFacturaProveedorReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleFacturaProveedor.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleFacturaProveedor.setFileImportacion(this.jInternalFrameImportacionDetalleFacturaProveedor.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleFacturaProveedor.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleFacturaProveedor.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		

		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleFacturaProveedorBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleFacturaProveedorBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FacturaProveedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FacturaProveedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FacturaProveedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FacturaProveedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidadAuxiliar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidadAuxiliar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidadAuxiliar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidadAuxiliar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_te_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_te_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_te_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_te_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaElaboracionLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaElaboracionLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaElaboracionLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaElaboracionLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducidadLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducidadLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducidadLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducidadLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoUnitario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoUnitario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoUnitario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoUnitario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ecioVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ecioVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ecioVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ecioVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NovedadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NovedadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NovedadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NovedadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_BodegaEnviar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_BodegaEnviar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_BodegaEnviar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_BodegaEnviar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_teCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_teCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_teCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_teCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR:
					sNombreCampoCategoria="id_factura_proveedor";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR:
					sNombreCampoCategoria="cantidad_auxiliar";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoria="lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoria="fecha_elaboracion_lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoria="fecha_caducidad_lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoria="costo_iva";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoria="costo_unitario";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoria="costo_total";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoria="descuento1";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoria="descuento2";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA:
					sNombreCampoCategoria="precio_venta";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoria="id_novedad_producto";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoria="id_cuenta_contable_costo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR:
					sNombreCampoCategoria="id_bodega_enviar";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoria="lote_cliente";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoria="disponible";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoria="serie";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoria="ice_valor";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR:
					sNombreCampoCategoriaValor="id_factura_proveedor";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR:
					sNombreCampoCategoriaValor="cantidad_auxiliar";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoriaValor="lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoriaValor="fecha_elaboracion_lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoriaValor="fecha_caducidad_lote";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoriaValor="costo_iva";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoriaValor="costo_unitario";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoriaValor="costo_total";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoriaValor="descuento1";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoriaValor="descuento2";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA:
					sNombreCampoCategoriaValor="precio_venta";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoriaValor="id_novedad_producto";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR:
					sNombreCampoCategoriaValor="id_bodega_enviar";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoriaValor="lote_cliente";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoriaValor="disponible";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoriaValor="serie";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoriaValor="ice_valor";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura_proveedor");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantad Auxiliar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad_auxiliar");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Elaboracion Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_elaboracion_lote");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Caducad Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caducidad_lote");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_iva");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Unitario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_unitario");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_total");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento1");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento2");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"precio_venta");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Novedad Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_novedad_producto");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega Enviar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega_enviar");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote_cliente");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"disponible");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice_valor");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleFacturaProveedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getfacturaproveedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcantidad_auxiliar());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getlote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getfecha_elaboracion_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getfecha_caducidad_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcosto_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcosto_unitario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcosto_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getdescuento1());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getdescuento2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getprecio_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getnovedadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getcuentacontablecosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getbodegaenviar_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getlote_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getdisponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getserie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getice_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleFacturaProveedor detallefacturaproveedor:detallefacturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallefacturaproveedor.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleFacturaProveedor(row);				
			//	iRow++;
			//}				
			
			//for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleFacturaProveedor(detallefacturaproveedorAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
			
			//SI ES MANUAL
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleFacturaProveedor();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
			
			//SI ES MANUAL
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleFacturaProveedor();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
			
			//SI ES MANUAL
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleFacturaProveedor();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleFacturaProveedor() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleFacturaProveedor.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleFacturaProveedor.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleFacturaProveedor.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleFacturaProveedor.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleFacturaProveedor.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleFacturaProveedor.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleFacturaProveedor.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleFacturaProveedor(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleFacturaProveedor(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleFacturaProveedor(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleFacturaProveedor(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleFacturaProveedor(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFacturaProveedor(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleFacturaProveedor(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleFacturaProveedor() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleFacturaProveedor();
		
		this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleFacturaProveedor();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFacturaProveedor() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFacturaProveedor(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFacturaProveedor(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleFacturaProveedor.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleFacturaProveedor.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleFacturaProveedor.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionNuevoDetalleFacturaProveedor.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionSinCerrarDetalleFacturaProveedor.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionSinMensajeDetalleFacturaProveedor.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleFacturaProveedor.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleFacturaProveedor.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetalleFacturaProveedor.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionNuevoDetalleFacturaProveedor.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionSinCerrarDetalleFacturaProveedor.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxPostAccionSinMensajeDetalleFacturaProveedor.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetalleFacturaProveedor.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleFacturaProveedor.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleFacturaProveedor.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleFacturaProveedor.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleFacturaProveedor.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleFacturaProveedor.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleFacturaProveedor.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleFacturaProveedor.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleFacturaProveedor(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleFacturaProveedor(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleFacturaProveedor() throws Exception {
		try	{
			if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleFacturaProveedor();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleFacturaProveedor() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleFacturaProveedor() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleFacturaProveedor.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleFacturaProveedor.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleFacturaProveedor.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleFacturaProveedor.addItem(reporte);
			}
			
			
			if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleFacturaProveedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleFacturaProveedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleFacturaProveedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleFacturaProveedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFacturaProveedor();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleFacturaProveedor() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleFacturaProveedorConstantesFunciones.getTiposSeleccionarDetalleFacturaProveedor(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleFacturaProveedorConstantesFunciones.getTiposSeleccionarDetalleFacturaProveedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleFacturaProveedorConstantesFunciones.getTiposSeleccionarDetalleFacturaProveedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetalleFacturaProveedor()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.getSelectedItem()!=null){this.id_anioFK_IdAnio=((Anio)this.jComboBoxid_anioFK_IdAnioDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.getSelectedItem()!=null){this.id_bodega_enviarFK_IdBodegaEnviar=((Bodega)this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.getSelectedItem()!=null){this.id_cuenta_contable_costoFK_IdCuentaContableCosto=((CuentaContable)this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.getSelectedItem()!=null){this.id_factura_proveedorFK_IdFacturaProveedor=((FacturaProveedor)this.jComboBoxid_factura_proveedorFK_IdFacturaProveedorDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.getSelectedItem()!=null){this.id_mesFK_IdMes=((Mes)this.jComboBoxid_mesFK_IdMesDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.getSelectedItem()!=null){this.id_novedad_productoFK_IdNovedadProducto=((NovedadProducto)this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleFacturaProveedor.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleFacturaProveedor(Boolean esInicializar) throws Exception {				
		if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleFacturaProveedor();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleFacturaProveedor() throws Exception {
		this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetalleFacturaProveedor() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleFacturaProveedorOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedorOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDetalleFacturaProveedor(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallefacturaproveedors.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleFacturaProveedor.setModel(new DetalleFacturaProveedorModel(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleFacturaProveedor.setModel(new DetalleFacturaProveedorModel(this.detallefacturaproveedors,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDetalleFacturaProveedor!=null && this.jInternalFrameOrderByDetalleFacturaProveedor.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleFacturaProveedor();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO,detallefacturaproveedorConstantesFunciones.resaltarSeleccionarDetalleFacturaProveedor,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO,detallefacturaproveedorConstantesFunciones.resaltarSeleccionarDetalleFacturaProveedor,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_ID));

		if(this.detallefacturaproveedorConstantesFunciones.mostraridDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltaridDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activaridDetalleFacturaProveedor,iSizeTabla,this,true,"idDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltaridDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activaridDetalleFacturaProveedor,this,true,"idDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_factura_proveedorDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaProveedorTableCell(this.facturaproveedorsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_factura_proveedorDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_factura_proveedorDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new FacturaProveedorTableCell(this.facturaproveedorsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_factura_proveedorDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_factura_proveedorDetalleFacturaProveedor,true,"id_factura_proveedorDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_empresaDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_empresaDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_empresaDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_empresaDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_empresaDetalleFacturaProveedor,false,"id_empresaDetalleFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_sucursalDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_sucursalDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_sucursalDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_sucursalDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_sucursalDetalleFacturaProveedor,false,"id_sucursalDetalleFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodegaDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_bodegaDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_bodegaDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_bodegaDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_bodegaDetalleFacturaProveedor,true,"id_bodegaDetalleFacturaProveedor","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_productoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_productoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_productoDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_productoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_productoDetalleFacturaProveedor,true,"id_productoDetalleFacturaProveedor","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_unidadDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_unidadDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_unidadDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_unidadDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_unidadDetalleFacturaProveedor,true,"id_unidadDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_ejercicioDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_ejercicioDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_ejercicioDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_ejercicioDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_ejercicioDetalleFacturaProveedor,false,"id_ejercicioDetalleFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_periodoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_periodoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_periodoDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_periodoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_periodoDetalleFacturaProveedor,false,"id_periodoDetalleFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarnumero_comprobanteDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarnumero_comprobanteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarnumero_comprobanteDetalleFacturaProveedor,iSizeTabla,this,true,"numero_comprobanteDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarnumero_comprobanteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarnumero_comprobanteDetalleFacturaProveedor,this,true,"numero_comprobanteDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarcantidadDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcantidadDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcantidadDetalleFacturaProveedor,iSizeTabla,this,true,"cantidadDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcantidadDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcantidadDetalleFacturaProveedor,this,true,"cantidadDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarcantidad_auxiliarDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcantidad_auxiliarDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcantidad_auxiliarDetalleFacturaProveedor,iSizeTabla,this,true,"cantidad_auxiliarDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcantidad_auxiliarDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcantidad_auxiliarDetalleFacturaProveedor,this,true,"cantidad_auxiliarDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrardescuentoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuentoDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuentoDetalleFacturaProveedor,iSizeTabla,this,true,"descuentoDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuentoDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuentoDetalleFacturaProveedor,this,true,"descuentoDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IVA));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarivaDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarivaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarivaDetalleFacturaProveedor,iSizeTabla,this,true,"ivaDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarivaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarivaDetalleFacturaProveedor,this,true,"ivaDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarloteDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarloteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarloteDetalleFacturaProveedor,iSizeTabla,this,true,"loteDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarloteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarloteDetalleFacturaProveedor,this,true,"loteDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_elaboracion_loteDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_elaboracion_loteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarfecha_elaboracion_loteDetalleFacturaProveedor,iSizeTabla,this,true,"fecha_elaboracion_loteDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_elaboracion_loteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarfecha_elaboracion_loteDetalleFacturaProveedor,this,true,"fecha_elaboracion_loteDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_caducidad_loteDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_caducidad_loteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarfecha_caducidad_loteDetalleFacturaProveedor,iSizeTabla,this,true,"fecha_caducidad_loteDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_caducidad_loteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarfecha_caducidad_loteDetalleFacturaProveedor,this,true,"fecha_caducidad_loteDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_ivaDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_ivaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_ivaDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_ivaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_ivaDetalleFacturaProveedor,this,true,"costo_ivaDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_unitarioDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_unitarioDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_unitarioDetalleFacturaProveedor,iSizeTabla,this,true,"costo_unitarioDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_unitarioDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_unitarioDetalleFacturaProveedor,this,true,"costo_unitarioDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_totalDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_totalDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_totalDetalleFacturaProveedor,iSizeTabla,this,true,"costo_totalDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_totalDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarcosto_totalDetalleFacturaProveedor,this,true,"costo_totalDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_ICE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrariceDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltariceDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activariceDetalleFacturaProveedor,iSizeTabla,this,true,"iceDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltariceDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activariceDetalleFacturaProveedor,this,true,"iceDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1));

		if(this.detallefacturaproveedorConstantesFunciones.mostrardescuento1DetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuento1DetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuento1DetalleFacturaProveedor,iSizeTabla,this,true,"descuento1DetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuento1DetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuento1DetalleFacturaProveedor,this,true,"descuento1DetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2));

		if(this.detallefacturaproveedorConstantesFunciones.mostrardescuento2DetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuento2DetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuento2DetalleFacturaProveedor,iSizeTabla,this,true,"descuento2DetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescuento2DetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescuento2DetalleFacturaProveedor,this,true,"descuento2DetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallefacturaproveedorConstantesFunciones.mostrardescripcionDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescripcionDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescripcionDetalleFacturaProveedor,iSizeTabla,this,true,"descripcionDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardescripcionDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardescripcionDetalleFacturaProveedor,this,true,"descripcionDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarprecio_ventaDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarprecio_ventaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarprecio_ventaDetalleFacturaProveedor,iSizeTabla,this,true,"precio_ventaDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarprecio_ventaDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarprecio_ventaDetalleFacturaProveedor,this,true,"precio_ventaDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_novedad_productoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_novedad_productoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_novedad_productoDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_novedad_productoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_novedad_productoDetalleFacturaProveedor,true,"id_novedad_productoDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_centro_costoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_centro_costoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_centro_costoDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_centro_costoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_centro_costoDetalleFacturaProveedor,true,"id_centro_costoDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_cuenta_contable_costoDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_cuenta_contable_costoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_cuenta_contable_costoDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_cuenta_contable_costoDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_cuenta_contable_costoDetalleFacturaProveedor,true,"id_cuenta_contable_costoDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodega_enviarDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegaenviarsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_bodega_enviarDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_bodega_enviarDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegaenviarsForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_bodega_enviarDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_bodega_enviarDetalleFacturaProveedor,true,"id_bodega_enviarDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarlote_clienteDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarlote_clienteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarlote_clienteDetalleFacturaProveedor,iSizeTabla,this,true,"lote_clienteDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarlote_clienteDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarlote_clienteDetalleFacturaProveedor,this,true,"lote_clienteDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrardisponibleDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardisponibleDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardisponibleDetalleFacturaProveedor,iSizeTabla,this,true,"disponibleDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltardisponibleDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activardisponibleDetalleFacturaProveedor,this,true,"disponibleDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarserieDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarserieDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarserieDetalleFacturaProveedor,iSizeTabla,this,true,"serieDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarserieDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarserieDetalleFacturaProveedor,this,true,"serieDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarice_valorDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarice_valorDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarice_valorDetalleFacturaProveedor,iSizeTabla,this,true,"ice_valorDetalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallefacturaproveedorConstantesFunciones.resaltarice_valorDetalleFacturaProveedor,this.detallefacturaproveedorConstantesFunciones.activarice_valorDetalleFacturaProveedor,this,true,"ice_valorDetalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_anioDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_anioDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_anioDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_anioDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_anioDetalleFacturaProveedor,true,"id_anioDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES));

		if(this.detallefacturaproveedorConstantesFunciones.mostrarid_mesDetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_mesDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_mesDetalleFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detallefacturaproveedorConstantesFunciones.resaltarid_mesDetalleFacturaProveedor,this,this.detallefacturaproveedorConstantesFunciones.activarid_mesDetalleFacturaProveedor,true,"id_mesDetalleFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleFacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleFacturaProveedor.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleFacturaProveedor.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleFacturaProveedor.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleFacturaProveedor.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleFacturaProveedor.moveColumn(this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleFacturaProveedor.moveColumn(this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleFacturaProveedor.moveColumn(this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleFacturaProveedor.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleFacturaProveedor.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleFacturaProveedor,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleFacturaProveedor.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleFacturaProveedor.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleFacturaProveedor.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallefacturaproveedorLogic.getDetalleFacturaProveedors().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallefacturaproveedors.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleFacturaProveedor.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleFacturaProveedor();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleFacturaProveedor=false;
					
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleFacturaProveedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallefacturaproveedor.getsType().equals("DUPLICADO")
				   || this.detallefacturaproveedor.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleFacturaProveedor=true;
				
				} else {
					this.isEsNuevoDetalleFacturaProveedor=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					if(this.detallefacturaproveedor.getId()>=0 && !this.detallefacturaproveedor.getIsNew()) {						
						this.isEsNuevoDetalleFacturaProveedor=false;
						
					} else {
						this.isEsNuevoDetalleFacturaProveedor=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleFacturaProveedor(esRelaciones);						
				
				this.seleccionarDetalleFacturaProveedor(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallefacturaproveedor.getId()<0) {
					this.isEsNuevoDetalleFacturaProveedor=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleFacturaProveedor(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleFacturaProveedor(evt,rowIndex);
				}	
				
				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleFacturaProveedor: " + this.dDif); 
					}
				}								
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleFacturaProveedor(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallefacturaproveedor)) {
					if(this.detallefacturaproveedor.getId()>0) {
						this.detallefacturaproveedor.setIsDeleted(true);
						
						this.detallefacturaproveedorsEliminados.add(this.detallefacturaproveedor);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().remove(this.detallefacturaproveedor);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedors.remove(this.detallefacturaproveedor);				
					}
					
					
					((DetalleFacturaProveedorModel) this.jTableDatosDetalleFacturaProveedor.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleFacturaProveedor(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleFacturaProveedor) {
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleFacturaProveedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleFacturaProveedor.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedor);
				}
				
				//ARCHITECTURE
				try {
					

					//FacturaProveedor
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_factura_proveedorDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_factura_proveedorDetalleFacturaProveedor) {
						//this.cargarCombosFacturaProveedorsForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_factura_proveedor());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.facturaproveedorsForeignKey=new ArrayList<FacturaProveedor>();

						if(detallefacturaproveedor.getFacturaProveedor()!=null) {
							this.facturaproveedorsForeignKey.add(detallefacturaproveedor.getFacturaProveedor());
						}

						this.addItemDefectoCombosForeignKeyFacturaProveedor();
						this.cargarCombosFrameFacturaProveedorsForeignKey("Todos");
					}
					this.setActualFacturaProveedorForeignKey(this.detallefacturaproveedor.getid_factura_proveedor(),false,"Formulario");

					//Empresa
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_empresaDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_empresaDetalleFacturaProveedor) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_empresa());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallefacturaproveedor.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallefacturaproveedor.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallefacturaproveedor.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_sucursalDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_sucursalDetalleFacturaProveedor) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_sucursal());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallefacturaproveedor.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallefacturaproveedor.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallefacturaproveedor.getid_sucursal(),false,"Formulario");

					//Bodega
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_bodegaDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_bodegaDetalleFacturaProveedor) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_bodega());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallefacturaproveedor.getBodega()!=null) {
							this.bodegasForeignKey.add(detallefacturaproveedor.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallefacturaproveedor.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_productoDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_productoDetalleFacturaProveedor) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_producto());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallefacturaproveedor.getProducto()!=null) {
							this.productosForeignKey.add(detallefacturaproveedor.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallefacturaproveedor.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_unidadDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_unidadDetalleFacturaProveedor) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_unidad());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallefacturaproveedor.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallefacturaproveedor.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallefacturaproveedor.getid_unidad(),false,"Formulario");

					//Ejercicio
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_ejercicioDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_ejercicioDetalleFacturaProveedor) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detallefacturaproveedor.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detallefacturaproveedor.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detallefacturaproveedor.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_periodoDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_periodoDetalleFacturaProveedor) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_periodo());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detallefacturaproveedor.getPeriodo()!=null) {
							this.periodosForeignKey.add(detallefacturaproveedor.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detallefacturaproveedor.getid_periodo(),false,"Formulario");

					//NovedadProducto
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_novedad_productoDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_novedad_productoDetalleFacturaProveedor) {
						//this.cargarCombosNovedadProductosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_novedad_producto());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

						if(detallefacturaproveedor.getNovedadProducto()!=null) {
							this.novedadproductosForeignKey.add(detallefacturaproveedor.getNovedadProducto());
						}

						this.addItemDefectoCombosForeignKeyNovedadProducto();
						this.cargarCombosFrameNovedadProductosForeignKey("Todos");
					}
					this.setActualNovedadProductoForeignKey(this.detallefacturaproveedor.getid_novedad_producto(),false,"Formulario");

					//CentroCosto
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_centro_costoDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_centro_costoDetalleFacturaProveedor) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detallefacturaproveedor.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detallefacturaproveedor.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detallefacturaproveedor.getid_centro_costo(),false,"Formulario");

					//CuentaContableCosto
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_cuenta_contable_costoDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_cuenta_contable_costoDetalleFacturaProveedor) {
						//this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_cuenta_contable_costo());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

						if(detallefacturaproveedor.getCuentaContableCosto()!=null) {
							this.cuentacontablecostosForeignKey.add(detallefacturaproveedor.getCuentaContableCosto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCosto();
						this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
					}
					this.setActualCuentaContableCostoForeignKey(this.detallefacturaproveedor.getid_cuenta_contable_costo(),false,"Formulario");

					//BodegaEnviar
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_bodega_enviarDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_bodega_enviarDetalleFacturaProveedor) {
						//this.cargarCombosBodegaEnviarsForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_bodega_enviar());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.bodegaenviarsForeignKey=new ArrayList<Bodega>();

						if(detallefacturaproveedor.getBodegaEnviar()!=null) {
							this.bodegaenviarsForeignKey.add(detallefacturaproveedor.getBodegaEnviar());
						}

						this.addItemDefectoCombosForeignKeyBodegaEnviar();
						this.cargarCombosFrameBodegaEnviarsForeignKey("Todos");
					}
					this.setActualBodegaEnviarForeignKey(this.detallefacturaproveedor.getid_bodega_enviar(),false,"Formulario");

					//Anio
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_anioDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_anioDetalleFacturaProveedor) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_anio());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detallefacturaproveedor.getAnio()!=null) {
							this.aniosForeignKey.add(detallefacturaproveedor.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detallefacturaproveedor.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detallefacturaproveedorConstantesFunciones.cargarid_mesDetalleFacturaProveedor || this.detallefacturaproveedorConstantesFunciones.event_dependid_mesDetalleFacturaProveedor) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detallefacturaproveedor.getid_mes());
									//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detallefacturaproveedor.getMes()!=null) {
							this.messForeignKey.add(detallefacturaproveedor.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detallefacturaproveedor.getid_mes(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleFacturaProveedor("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleFacturaProveedor(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleFacturaProveedor(detallefacturaproveedor,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleFacturaProveedor(detallefacturaproveedor);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleFacturaProveedor(detallefacturaproveedor,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleFacturaProveedor(detallefacturaproveedor);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setText(detallefacturaproveedor.getId().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setText(detallefacturaproveedor.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setText(detallefacturaproveedor.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setText(detallefacturaproveedor.getcantidad_auxiliar().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setText(detallefacturaproveedor.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setText(detallefacturaproveedor.getlote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setDate(detallefacturaproveedor.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setDate(detallefacturaproveedor.getfecha_caducidad_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setSelected(detallefacturaproveedor.getcosto_iva());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setText(detallefacturaproveedor.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setText(detallefacturaproveedor.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setText(detallefacturaproveedor.getice().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento1().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setText(detallefacturaproveedor.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setText(detallefacturaproveedor.getprecio_venta().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setText(detallefacturaproveedor.getlote_cliente());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setText(detallefacturaproveedor.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setText(detallefacturaproveedor.getserie());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setText(detallefacturaproveedor.getice_valor().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleFacturaProveedor detallefacturaproveedorLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallefacturaproveedorLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleFacturaProveedor detallefacturaproveedorLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallefacturaproveedorLocal=this.detallefacturaproveedor;
			} else {
				detallefacturaproveedorLocal=this.detallefacturaproveedorAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallefacturaproveedorLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleFacturaProveedor(detallefacturaproveedorLocal,true);
					
					if(detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallefacturaproveedorLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallefacturaproveedorLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(detallefacturaproveedor,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(detallefacturaproveedor);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(detallefacturaproveedor,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.getText()==null || this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.getText()=="" || this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setText("0");
			}

			if(conColumnasBase) {detallefacturaproveedor.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelIdDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setnumero_comprobante(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelnumero_comprobanteDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidadDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setcantidad_auxiliar(Integer.parseInt(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcantidad_auxiliarDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuentoDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setiva(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelivaDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setlote(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelloteDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setfecha_elaboracion_lote(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_elaboracion_loteDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setfecha_caducidad_lote(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelfecha_caducidad_loteDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setcosto_iva(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_ivaDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setcosto_unitario(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_unitarioDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setcosto_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelcosto_totalDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setice(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeliceDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setdescuento1(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento1DetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setdescuento2(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescuento2DetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setdescripcion(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldescripcionDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setprecio_venta(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelprecio_ventaDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setlote_cliente(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabellote_clienteDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setdisponible(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabeldisponibleDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setserie(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelserieDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallefacturaproveedor.setice_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelice_valorDetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedorBean,DetalleFacturaProveedor detallefacturaproveedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedorOrigen,DetalleFacturaProveedor detallefacturaproveedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getId()!=null && !detallefacturaproveedorOrigen.getId().equals(0L))) {detallefacturaproveedor.setId(detallefacturaproveedorOrigen.getId());}}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getnumero_comprobante()!=null && !detallefacturaproveedorOrigen.getnumero_comprobante().equals(""))) {detallefacturaproveedor.setnumero_comprobante(detallefacturaproveedorOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getcantidad()!=null && !detallefacturaproveedorOrigen.getcantidad().equals(0))) {detallefacturaproveedor.setcantidad(detallefacturaproveedorOrigen.getcantidad());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getcantidad_auxiliar()!=null && !detallefacturaproveedorOrigen.getcantidad_auxiliar().equals(0))) {detallefacturaproveedor.setcantidad_auxiliar(detallefacturaproveedorOrigen.getcantidad_auxiliar());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getdescuento()!=null && !detallefacturaproveedorOrigen.getdescuento().equals(0.0))) {detallefacturaproveedor.setdescuento(detallefacturaproveedorOrigen.getdescuento());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getiva()!=null && !detallefacturaproveedorOrigen.getiva().equals(0.0))) {detallefacturaproveedor.setiva(detallefacturaproveedorOrigen.getiva());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getlote()!=null && !detallefacturaproveedorOrigen.getlote().equals(""))) {detallefacturaproveedor.setlote(detallefacturaproveedorOrigen.getlote());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getfecha_elaboracion_lote()!=null && !detallefacturaproveedorOrigen.getfecha_elaboracion_lote().equals(new Date()))) {detallefacturaproveedor.setfecha_elaboracion_lote(detallefacturaproveedorOrigen.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getfecha_caducidad_lote()!=null && !detallefacturaproveedorOrigen.getfecha_caducidad_lote().equals(new Date()))) {detallefacturaproveedor.setfecha_caducidad_lote(detallefacturaproveedorOrigen.getfecha_caducidad_lote());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getcosto_iva()!=null && !detallefacturaproveedorOrigen.getcosto_iva().equals(false))) {detallefacturaproveedor.setcosto_iva(detallefacturaproveedorOrigen.getcosto_iva());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getcosto_unitario()!=null && !detallefacturaproveedorOrigen.getcosto_unitario().equals(0.0))) {detallefacturaproveedor.setcosto_unitario(detallefacturaproveedorOrigen.getcosto_unitario());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getcosto_total()!=null && !detallefacturaproveedorOrigen.getcosto_total().equals(0.0))) {detallefacturaproveedor.setcosto_total(detallefacturaproveedorOrigen.getcosto_total());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getice()!=null && !detallefacturaproveedorOrigen.getice().equals(0.0))) {detallefacturaproveedor.setice(detallefacturaproveedorOrigen.getice());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getdescuento1()!=null && !detallefacturaproveedorOrigen.getdescuento1().equals(0.0))) {detallefacturaproveedor.setdescuento1(detallefacturaproveedorOrigen.getdescuento1());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getdescuento2()!=null && !detallefacturaproveedorOrigen.getdescuento2().equals(0.0))) {detallefacturaproveedor.setdescuento2(detallefacturaproveedorOrigen.getdescuento2());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getdescripcion()!=null && !detallefacturaproveedorOrigen.getdescripcion().equals(""))) {detallefacturaproveedor.setdescripcion(detallefacturaproveedorOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getprecio_venta()!=null && !detallefacturaproveedorOrigen.getprecio_venta().equals(0.0))) {detallefacturaproveedor.setprecio_venta(detallefacturaproveedorOrigen.getprecio_venta());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getlote_cliente()!=null && !detallefacturaproveedorOrigen.getlote_cliente().equals(""))) {detallefacturaproveedor.setlote_cliente(detallefacturaproveedorOrigen.getlote_cliente());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getdisponible()!=null && !detallefacturaproveedorOrigen.getdisponible().equals(0.0))) {detallefacturaproveedor.setdisponible(detallefacturaproveedorOrigen.getdisponible());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getserie()!=null && !detallefacturaproveedorOrigen.getserie().equals(""))) {detallefacturaproveedor.setserie(detallefacturaproveedorOrigen.getserie());}
			if(conDefault || (!conDefault && detallefacturaproveedorOrigen.getice_valor()!=null && !detallefacturaproveedorOrigen.getice_valor().equals(0.0))) {detallefacturaproveedor.setice_valor(detallefacturaproveedorOrigen.getice_valor());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setText(detallefacturaproveedor.getId().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setText(detallefacturaproveedor.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setText(detallefacturaproveedor.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setText(detallefacturaproveedor.getcantidad_auxiliar().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setText(detallefacturaproveedor.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setText(detallefacturaproveedor.getlote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setDate(detallefacturaproveedor.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setDate(detallefacturaproveedor.getfecha_caducidad_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setSelected(detallefacturaproveedor.getcosto_iva());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setText(detallefacturaproveedor.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setText(detallefacturaproveedor.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setText(detallefacturaproveedor.getice().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento1().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setText(detallefacturaproveedor.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setText(detallefacturaproveedor.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setText(detallefacturaproveedor.getprecio_venta().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setText(detallefacturaproveedor.getlote_cliente());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setText(detallefacturaproveedor.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setText(detallefacturaproveedor.getserie());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setText(detallefacturaproveedor.getice_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleFacturaProveedor(DetalleFacturaProveedorBean detallefacturaproveedorBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getnumero_comprobante());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getcantidad_auxiliar().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getiva().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getlote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setDate(detallefacturaproveedorBean.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setDate(detallefacturaproveedorBean.getfecha_caducidad_lote());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setSelected(detallefacturaproveedorBean.getcosto_iva());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getice().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setText(detallefacturaproveedorBean.getdescuento1().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setText(detallefacturaproveedorBean.getdescuento2().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getprecio_venta().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getlote_cliente());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getserie());
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setText(detallefacturaproveedorBean.getice_valor().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleFacturaProveedor(DetalleFacturaProveedorParameterReturnGeneral detallefacturaproveedorReturnGeneral,DetalleFacturaProveedorBean detallefacturaproveedorBean,Boolean conDefault) throws Exception { 
		try {
			DetalleFacturaProveedor detallefacturaproveedorLocal=new DetalleFacturaProveedor();
			
			detallefacturaproveedorLocal=detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallefacturaproveedorLocal.getId()!=null && !detallefacturaproveedorLocal.getId().equals(0L))) {detallefacturaproveedorBean.setId(detallefacturaproveedorLocal.getId());}}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getnumero_comprobante()!=null && !detallefacturaproveedorLocal.getnumero_comprobante().equals(""))) {detallefacturaproveedorBean.setnumero_comprobante(detallefacturaproveedorLocal.getnumero_comprobante());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getcantidad()!=null && !detallefacturaproveedorLocal.getcantidad().equals(0))) {detallefacturaproveedorBean.setcantidad(detallefacturaproveedorLocal.getcantidad());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getcantidad_auxiliar()!=null && !detallefacturaproveedorLocal.getcantidad_auxiliar().equals(0))) {detallefacturaproveedorBean.setcantidad_auxiliar(detallefacturaproveedorLocal.getcantidad_auxiliar());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getdescuento()!=null && !detallefacturaproveedorLocal.getdescuento().equals(0.0))) {detallefacturaproveedorBean.setdescuento(detallefacturaproveedorLocal.getdescuento());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getiva()!=null && !detallefacturaproveedorLocal.getiva().equals(0.0))) {detallefacturaproveedorBean.setiva(detallefacturaproveedorLocal.getiva());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getlote()!=null && !detallefacturaproveedorLocal.getlote().equals(""))) {detallefacturaproveedorBean.setlote(detallefacturaproveedorLocal.getlote());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getfecha_elaboracion_lote()!=null && !detallefacturaproveedorLocal.getfecha_elaboracion_lote().equals(new Date()))) {detallefacturaproveedorBean.setfecha_elaboracion_lote(detallefacturaproveedorLocal.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getfecha_caducidad_lote()!=null && !detallefacturaproveedorLocal.getfecha_caducidad_lote().equals(new Date()))) {detallefacturaproveedorBean.setfecha_caducidad_lote(detallefacturaproveedorLocal.getfecha_caducidad_lote());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getcosto_iva()!=null && !detallefacturaproveedorLocal.getcosto_iva().equals(false))) {detallefacturaproveedorBean.setcosto_iva(detallefacturaproveedorLocal.getcosto_iva());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getcosto_unitario()!=null && !detallefacturaproveedorLocal.getcosto_unitario().equals(0.0))) {detallefacturaproveedorBean.setcosto_unitario(detallefacturaproveedorLocal.getcosto_unitario());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getcosto_total()!=null && !detallefacturaproveedorLocal.getcosto_total().equals(0.0))) {detallefacturaproveedorBean.setcosto_total(detallefacturaproveedorLocal.getcosto_total());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getice()!=null && !detallefacturaproveedorLocal.getice().equals(0.0))) {detallefacturaproveedorBean.setice(detallefacturaproveedorLocal.getice());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getdescuento1()!=null && !detallefacturaproveedorLocal.getdescuento1().equals(0.0))) {detallefacturaproveedorBean.setdescuento1(detallefacturaproveedorLocal.getdescuento1());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getdescuento2()!=null && !detallefacturaproveedorLocal.getdescuento2().equals(0.0))) {detallefacturaproveedorBean.setdescuento2(detallefacturaproveedorLocal.getdescuento2());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getdescripcion()!=null && !detallefacturaproveedorLocal.getdescripcion().equals(""))) {detallefacturaproveedorBean.setdescripcion(detallefacturaproveedorLocal.getdescripcion());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getprecio_venta()!=null && !detallefacturaproveedorLocal.getprecio_venta().equals(0.0))) {detallefacturaproveedorBean.setprecio_venta(detallefacturaproveedorLocal.getprecio_venta());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getlote_cliente()!=null && !detallefacturaproveedorLocal.getlote_cliente().equals(""))) {detallefacturaproveedorBean.setlote_cliente(detallefacturaproveedorLocal.getlote_cliente());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getdisponible()!=null && !detallefacturaproveedorLocal.getdisponible().equals(0.0))) {detallefacturaproveedorBean.setdisponible(detallefacturaproveedorLocal.getdisponible());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getserie()!=null && !detallefacturaproveedorLocal.getserie().equals(""))) {detallefacturaproveedorBean.setserie(detallefacturaproveedorLocal.getserie());}
			if(conDefault || (!conDefault && detallefacturaproveedorLocal.getice_valor()!=null && !detallefacturaproveedorLocal.getice_valor().equals(0.0))) {detallefacturaproveedorBean.setice_valor(detallefacturaproveedorLocal.getice_valor());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleFacturaProveedorGenerico(Long idDetalleFacturaProveedorSeleccionado,JComboBox jComboBoxDetalleFacturaProveedor,List<DetalleFacturaProveedor> detallefacturaproveedorsLocal)throws Exception {
		try {
			DetalleFacturaProveedor  detallefacturaproveedorTemp=null;

			for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsLocal) {
				if(detallefacturaproveedorAux.getId()!=null && detallefacturaproveedorAux.getId().equals(idDetalleFacturaProveedorSeleccionado)) {
					detallefacturaproveedorTemp=detallefacturaproveedorAux;
					break;
				}
			}

			jComboBoxDetalleFacturaProveedor.setSelectedItem(detallefacturaproveedorTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleFacturaProveedorGenerico(JComboBox jComboBoxDetalleFacturaProveedor,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleFacturaProveedor.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleFacturaProveedor.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleFacturaProveedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefacturaproveedor=(DetalleFacturaProveedor) detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallefacturaproveedor =(DetalleFacturaProveedor) detallefacturaproveedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("FacturaProveedor")) {
			//sDescripcion=this.getActualFacturaProveedorForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getfacturaproveedor_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaProveedorForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getfacturaproveedor_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallefacturaproveedor.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallefacturaproveedor.getunidad_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("NovedadProducto")) {
			//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getnovedadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getnovedadproducto_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCosto")) {
			//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getcuentacontablecosto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getcuentacontablecosto_descripcion();
			}
		}

		if(sTipo.equals("BodegaEnviar")) {
			//sDescripcion=this.getActualBodegaEnviarForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getbodegaenviar_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaEnviarForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getbodegaenviar_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detallefacturaproveedor.getIsNew() && !detallefacturaproveedor.getIsChanged() && !detallefacturaproveedor.getIsDeleted()) {
				sDescripcion=detallefacturaproveedor.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detallefacturaproveedor.getmes_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleFacturaProveedor detallefacturaproveedorRow=new DetalleFacturaProveedor();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefacturaproveedorRow=(DetalleFacturaProveedor) detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallefacturaproveedorRow=(DetalleFacturaProveedor) detallefacturaproveedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));			
			this.jButtonDuplicarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor && this.isPermisoDuplicarDetalleFacturaProveedor));			
			this.jButtonCopiarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarDetalleFacturaProveedor && this.isPermisoCopiarDetalleFacturaProveedor));
			this.jButtonVerFormDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormDetalleFacturaProveedor && this.isPermisoVerFormDetalleFacturaProveedor));
			
			this.jButtonAbrirOrderByDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));			
			
			this.jButtonNuevoRelacionesDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));			
			this.jButtonNuevoGuardarCambiosDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarDetalleFacturaProveedor && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarDetalleFacturaProveedor && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarDetalleFacturaProveedor && this.isPermisoEliminarDetalleFacturaProveedor));
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarDetalleFacturaProveedor);							
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));						
			this.jButtonDuplicarToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor && this.isPermisoDuplicarDetalleFacturaProveedor));						
			this.jButtonCopiarToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarDetalleFacturaProveedor && this.isPermisoCopiarDetalleFacturaProveedor));			
			this.jButtonVerFormToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormDetalleFacturaProveedor && this.isPermisoVerFormDetalleFacturaProveedor));			
			this.jButtonAbrirOrderByToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));
			this.jButtonNuevoRelacionesToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));			
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarDetalleFacturaProveedor && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarDetalleFacturaProveedor  && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarDetalleFacturaProveedor && this.isPermisoEliminarDetalleFacturaProveedor));
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarToolBarDetalleFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarDetalleFacturaProveedor);				
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));			
			this.jMenuItemDuplicarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor && this.isPermisoDuplicarDetalleFacturaProveedor));			
			this.jMenuItemCopiarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarDetalleFacturaProveedor && this.isPermisoCopiarDetalleFacturaProveedor));			
			this.jMenuItemVerFormDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormDetalleFacturaProveedor && this.isPermisoVerFormDetalleFacturaProveedor));			
			this.jMenuItemAbrirOrderByDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));			
			//this.jMenuItemMostrarOcultarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));
			this.jMenuItemDetalleAbrirOrderByDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));			
			//this.jMenuItemDetalleMostrarOcultarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenDetalleFacturaProveedor && this.isPermisoOrdenDetalleFacturaProveedor));			
			this.jMenuItemNuevoRelacionesDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor));			
			this.jMenuItemNuevoGuardarCambiosDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoDetalleFacturaProveedor && this.isPermisoNuevoDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));									
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemModificarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarDetalleFacturaProveedor && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemActualizarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarDetalleFacturaProveedor && this.isPermisoActualizarDetalleFacturaProveedor));	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemEliminarDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarDetalleFacturaProveedor && this.isPermisoEliminarDetalleFacturaProveedor));
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemCancelarDetalleFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarDetalleFacturaProveedor);				
			}
			
			this.jMenuItemGuardarCambiosDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));						
			this.jMenuItemGuardarCambiosTablaDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=this.jButtonNuevoDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor=this.jButtonDuplicarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCopiarDetalleFacturaProveedor=this.jButtonCopiarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaVerFormDetalleFacturaProveedor=this.jButtonVerFormDetalleFacturaProveedor.isVisible();
			
			this.isVisibilidadCeldaOrdenDetalleFacturaProveedor=this.jButtonAbrirOrderByDetalleFacturaProveedor.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=this.jButtonNuevoRelacionesDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=this.jButtonModificarDetalleFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=this.jButtonGuardarCambiosTablaDetalleFacturaProveedor.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=this.jButtonNuevoToolBarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=this.jButtonNuevoRelacionesToolBarDetalleFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarToolBarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarToolBarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarToolBarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarToolBarDetalleFacturaProveedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=this.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=this.jButtonGuardarCambiosTablaToolBarDetalleFacturaProveedor.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=this.jMenuItemNuevoDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=this.jMenuItemNuevoRelacionesDetalleFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemModificarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemActualizarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemEliminarDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemCancelarDetalleFacturaProveedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=this.jMenuItemGuardarCambiosDetalleFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=this.jMenuItemGuardarCambiosTablaDetalleFacturaProveedor.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleFacturaProveedor(Boolean esInicializar) {
		if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
				//if(this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleFacturaProveedor();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleFacturaProveedor(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleFacturaProveedor() {
		this.jButtonNuevoDetalleFacturaProveedor.setVisible(this.isPermisoNuevoDetalleFacturaProveedor);			
		this.jButtonDuplicarDetalleFacturaProveedor.setVisible(this.isPermisoDuplicarDetalleFacturaProveedor);			
		this.jButtonCopiarDetalleFacturaProveedor.setVisible(this.isPermisoCopiarDetalleFacturaProveedor);			
		this.jButtonVerFormDetalleFacturaProveedor.setVisible(this.isPermisoVerFormDetalleFacturaProveedor);			
		
		this.jButtonAbrirOrderByDetalleFacturaProveedor.setVisible(this.isPermisoOrdenDetalleFacturaProveedor);					
		
		this.jButtonNuevoRelacionesDetalleFacturaProveedor.setVisible(this.isPermisoNuevoDetalleFacturaProveedor);			
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarDetalleFacturaProveedor.setVisible(this.isPermisoActualizarDetalleFacturaProveedor);	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.setVisible(this.isPermisoActualizarDetalleFacturaProveedor);	
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.setVisible(this.isPermisoEliminarDetalleFacturaProveedor);
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarDetalleFacturaProveedor);						
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.setVisible(this.isPermisoGuardarCambiosDetalleFacturaProveedor);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleFacturaProveedor.setVisible(this.isPermisoActualizarDetalleFacturaProveedor);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleFacturaProveedor() {
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarDetalleFacturaProveedor.setVisible(this.isPermisoActualizarDetalleFacturaProveedor);	
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.setVisible(this.isPermisoActualizarDetalleFacturaProveedor);	
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.setVisible(this.isPermisoEliminarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarDetalleFacturaProveedor);							
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarDetalleFacturaProveedor && this.isPermisoGuardarCambiosDetalleFacturaProveedor));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleFacturaProveedor() {
		if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleFacturaProveedor();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleFacturaProveedor() {
	}
	
	public void jTableDatosDetalleFacturaProveedorListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleFacturaProveedor(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallefacturaproveedor.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_factura_proveedorDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofacturaproveedor=true;

			idTienePermisofacturaproveedor=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(FacturaProveedorConstantesFunciones.CLASSNAME);

			if(idTienePermisofacturaproveedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.facturaproveedorBeanSwingJInternalFrame=new FacturaProveedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaproveedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaproveedorBeanSwingJInternalFrame.getFacturaProveedorLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_factura_proveedor()!=null) {
					this.facturaproveedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaproveedorBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_factura_proveedor());
					this.facturaproveedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaproveedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaproveedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaFacturaProveedor();
				}

				JInternalFrameBase jinternalFrame =this.facturaproveedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderfacturaproveedor=(TitledBorder)this.facturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosFacturaProveedor.getBorder();

				titledBorderfacturaproveedor.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Factura Proveedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_factura_proveedorDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_factura_proveedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura_proveedor = "+this.detallefacturaproveedor.getid_factura_proveedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallefacturaproveedor.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallefacturaproveedor.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallefacturaproveedor.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleFacturaProveedor=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallefacturaproveedor.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallefacturaproveedor.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detallefacturaproveedor.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detallefacturaproveedor.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.detallefacturaproveedor.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detallefacturaproveedor.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidad_auxiliarDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getcantidad_auxiliar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad_auxiliar = "+this.detallefacturaproveedor.getcantidad_auxiliar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detallefacturaproveedor.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detallefacturaproveedor.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonloteDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getlote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote like '%"+this.detallefacturaproveedor.getlote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getfecha_elaboracion_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_elaboracion_lote = '"+Funciones2.getStringPostgresDate(this.detallefacturaproveedor.getfecha_elaboracion_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caducidad_loteDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getfecha_caducidad_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caducidad_lote = '"+Funciones2.getStringPostgresDate(this.detallefacturaproveedor.getfecha_caducidad_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_ivaDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getcosto_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_iva = "+this.detallefacturaproveedor.getcosto_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_unitarioDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getcosto_unitario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_unitario = "+this.detallefacturaproveedor.getcosto_unitario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_totalDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getcosto_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_total = "+this.detallefacturaproveedor.getcosto_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detallefacturaproveedor.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento1DetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getdescuento1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento1 = "+this.detallefacturaproveedor.getdescuento1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento2DetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getdescuento2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento2 = "+this.detallefacturaproveedor.getdescuento2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallefacturaproveedor.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprecio_ventaDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getprecio_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where precio_venta = "+this.detallefacturaproveedor.getprecio_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_novedad_productoDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonovedadproducto=true;

			idTienePermisonovedadproducto=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(NovedadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisonovedadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.novedadproductoBeanSwingJInternalFrame=new NovedadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.novedadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.novedadproductoBeanSwingJInternalFrame.getNovedadProductoLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_novedad_producto()!=null) {
					this.novedadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.novedadproductoBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_novedad_producto());
					this.novedadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadProducto();
				}

				JInternalFrameBase jinternalFrame =this.novedadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBordernovedadproducto=(TitledBorder)this.novedadproductoBeanSwingJInternalFrame.jScrollPanelDatosNovedadProducto.getBorder();

				titledBordernovedadproducto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Novedad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_novedad_productoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_novedad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_novedad_producto = "+this.detallefacturaproveedor.getid_novedad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detallefacturaproveedor.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecosto=true;

			idTienePermisocuentacontablecosto=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_cuenta_contable_costo()!=null) {
					this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_cuenta_contable_costo());
					this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_cuenta_contable_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo = "+this.detallefacturaproveedor.getid_cuenta_contable_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodega_enviarDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodegaenviar=true;

			idTienePermisobodegaenviar=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodegaenviar) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.bodegaenviarBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaenviarBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaenviarBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_bodega_enviar()!=null) {
					this.bodegaenviarBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaenviarBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_bodega_enviar());
					this.bodegaenviarBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaenviarBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaenviarBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaenviarBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderbodegaenviar=(TitledBorder)this.bodegaenviarBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodegaenviar.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodega_enviarDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_bodega_enviar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega_enviar = "+this.detallefacturaproveedor.getid_bodega_enviar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlote_clienteDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getlote_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote_cliente like '%"+this.detallefacturaproveedor.getlote_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondisponibleDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getdisponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where disponible = "+this.detallefacturaproveedor.getdisponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserieDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getserie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie like '%"+this.detallefacturaproveedor.getserie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonice_valorDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getice_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice_valor = "+this.detallefacturaproveedor.getice_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detallefacturaproveedor.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleFacturaProveedor(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detallefacturaproveedorLogic.getConnexion());

				if(this.detallefacturaproveedor.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detallefacturaproveedor.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)this.jScrollPanelDatosDetalleFacturaProveedor.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleFacturaProveedor.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.getdetallefacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallefacturaproveedor==null) {
						this.detallefacturaproveedor = new DetalleFacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);
				}

				if(this.detallefacturaproveedor.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detallefacturaproveedor.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdAnio();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdBodega();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBodegaEnviarDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdBodegaEnviar();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdCentroCosto();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdCuentaContableCosto();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdEjercicio();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdEmpresa();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaProveedorDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdFacturaProveedor();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdMes();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdNovedadProductoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdNovedadProducto();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdPeriodo();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdProducto();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdSucursal();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUnidadDetalleFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);

			this.getDetalleFacturaProveedorsFK_IdUnidad();

			this.inicializarActualizarBindingDetalleFacturaProveedor(false);

			//if(DetalleFacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallefacturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetalleFacturaProveedor() {
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.dispose();
			this.jInternalFrameDetalleFormDetalleFacturaProveedor=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
			this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.dispose();
			this.jInternalFrameReporteDinamicoDetalleFacturaProveedor=null;
		}
		
		if(this.jInternalFrameImportacionDetalleFacturaProveedor!=null) {
			this.jInternalFrameImportacionDetalleFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleFacturaProveedor.dispose();
			this.jInternalFrameImportacionDetalleFacturaProveedor=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleFacturaProveedor();
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleFacturaProveedor")) {
				jButtonDuplicarDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleFacturaProveedor")) {
				jButtonCopiarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleFacturaProveedor")) {
				jButtonVerFormDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleFacturaProveedor")) {
				jButtonDuplicarDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleFacturaProveedor")) {
				jButtonDuplicarDetalleFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleFacturaProveedor")) {
				jButtonModificarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleFacturaProveedor")) {
				jButtonModificarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleFacturaProveedor")) {
				jButtonModificarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleFacturaProveedor")) {
				jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleFacturaProveedor")) {
				jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleFacturaProveedor")) {
				jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleFacturaProveedor")) {
				jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleFacturaProveedor")) {
				jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleFacturaProveedor")) {
				jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleFacturaProveedor")) {
				jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleFacturaProveedor")) {
				jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleFacturaProveedor")) {
				jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleFacturaProveedor")) {
				jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleFacturaProveedor")) {
				jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleFacturaProveedor")) {
				jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleFacturaProveedor")) {
				jButtonMostrarOcultarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleFacturaProveedor")) {
				jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleFacturaProveedor")) {
				jButtonCopiarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleFacturaProveedor")) {
				jButtonVerFormDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleFacturaProveedor")) {
				jButtonCopiarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleFacturaProveedor")) {
				jButtonVerFormDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleFacturaProveedor")) {
				jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleFacturaProveedor")) {
				jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleFacturaProveedor")) {
				jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleFacturaProveedor")) {
				jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleFacturaProveedor")) {
				jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleFacturaProveedor")) {
				jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleFacturaProveedor")) {
				jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleFacturaProveedor")) {
				jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleFacturaProveedor")) {
				jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleFacturaProveedor") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleFacturaProveedor")) {
				jButtonAbrirOrderByDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleFacturaProveedor") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleFacturaProveedor")) {
				jButtonMostrarOcultarDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleFacturaProveedor")) {
				jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleFacturaProveedor")) {
				jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleFacturaProveedor")) {
				jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleFacturaProveedor")) {
				jButtonCerrarReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleFacturaProveedor")) {
				jButtonGenerarReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleFacturaProveedor")) {
				
				jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetalleFacturaProveedor")) {
				jButtonCerrarImportacionDetalleFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleFacturaProveedor")) {
				
				jButtonGenerarImportacionDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetalleFacturaProveedor")) {
				
				jButtonAbrirImportacionDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetalleFacturaProveedor")) {
				jComboBoxTiposAccionesDetalleFacturaProveedorActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleFacturaProveedor")) {
				jComboBoxTiposRelacionesDetalleFacturaProveedorActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleFacturaProveedor")) {
				jComboBoxTiposAccionesDetalleFacturaProveedorActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleFacturaProveedor")) {
				
				jComboBoxTiposSeleccionarDetalleFacturaProveedorActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetalleFacturaProveedor")) {
				jTextFieldValorCampoGeneralDetalleFacturaProveedorActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDetalleFacturaProveedor")) {
				jButtonAbrirOrderByDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleFacturaProveedor")) {
				jButtonAbrirOrderByDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleFacturaProveedor")) {
				jButtonCerrarOrderByDetalleFacturaProveedorActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleFacturaProveedorBusqueda")) {
				this.jButtonidDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_factura_proveedorDetalleFacturaProveedorUpdate")) {
				this.jButtonid_factura_proveedorDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_factura_proveedorDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_factura_proveedorDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaProveedorUpdate")) {
				this.jButtonid_empresaDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_empresaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaProveedorUpdate")) {
				this.jButtonid_sucursalDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_sucursalDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaProveedorUpdate")) {
				this.jButtonid_bodegaDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_bodegaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				this.jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_productoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_productoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaProveedorUpdate")) {
				this.jButtonid_unidadDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_unidadDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaProveedorUpdate")) {
				this.jButtonid_ejercicioDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_ejercicioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_periodoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_periodoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleFacturaProveedorBusqueda")) {
				this.jButtonnumero_comprobanteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleFacturaProveedorBusqueda")) {
				this.jButtoncantidadDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_auxiliarDetalleFacturaProveedorBusqueda")) {
				this.jButtoncantidad_auxiliarDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleFacturaProveedorBusqueda")) {
				this.jButtondescuentoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleFacturaProveedorBusqueda")) {
				this.jButtonivaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonloteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_ivaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_unitarioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_totalDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleFacturaProveedorBusqueda")) {
				this.jButtoniceDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleFacturaProveedorBusqueda")) {
				this.jButtondescuento1DetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleFacturaProveedorBusqueda")) {
				this.jButtondescuento2DetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleFacturaProveedorBusqueda")) {
				this.jButtondescripcionDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precio_ventaDetalleFacturaProveedorBusqueda")) {
				this.jButtonprecio_ventaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_novedad_productoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_novedad_productoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_centro_costoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_centro_costoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleFacturaProveedorUpdate")) {
				this.jButtonid_bodega_enviarDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_bodega_enviarDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleFacturaProveedorBusqueda")) {
				this.jButtonlote_clienteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleFacturaProveedorBusqueda")) {
				this.jButtondisponibleDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleFacturaProveedorBusqueda")) {
				this.jButtonserieDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleFacturaProveedorBusqueda")) {
				this.jButtonice_valorDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaProveedorUpdate")) {
				this.jButtonid_anioDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_anioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaProveedorUpdate")) {
				this.jButtonid_mesDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_mesDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				this.jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAnioDetalleFacturaProveedor")) {
				this.jButtonFK_IdAnioDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdBodegaDetalleFacturaProveedor")) {
				this.jButtonFK_IdBodegaDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdBodegaEnviarDetalleFacturaProveedor")) {
				this.jButtonFK_IdBodegaEnviarDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoDetalleFacturaProveedor")) {
				this.jButtonFK_IdCentroCostoDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCostoDetalleFacturaProveedor")) {
				this.jButtonFK_IdCuentaContableCostoDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaProveedorDetalleFacturaProveedor")) {
				this.jButtonFK_IdFacturaProveedorDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMesDetalleFacturaProveedor")) {
				this.jButtonFK_IdMesDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdNovedadProductoDetalleFacturaProveedor")) {
				this.jButtonFK_IdNovedadProductoDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoDetalleFacturaProveedor")) {
				this.jButtonFK_IdProductoDetalleFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdUnidadDetalleFacturaProveedor")) {
				this.jButtonFK_IdUnidadDetalleFacturaProveedorActionPerformed(evt);
			}
			
			;
			
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleFacturaProveedor();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleFacturaProveedor detallefacturaproveedorLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallefacturaproveedorLocal=this.detallefacturaproveedor;
			} else {
				detallefacturaproveedorLocal=this.detallefacturaproveedorAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
							
				
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
								
						
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
								
				
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
							
				
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
								
				
				


				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleFacturaProveedor")) {
					jCheckBoxSeleccionarTodosDetalleFacturaProveedorItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleFacturaProveedor")) {
					jCheckBoxSeleccionadosDetalleFacturaProveedorItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleFacturaProveedor")) {
					
				}
				
				


				
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
												
				
				


				
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
				//recargarFormDetalleFacturaProveedorBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
				//recargarFormDetalleFacturaProveedorProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
				//recargarFormDetalleFacturaProveedorBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
				//recargarFormDetalleFacturaProveedorProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
			}
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallefacturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallefacturaproveedor);
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
				//recargarFormDetalleFacturaProveedorBodega(jComboBoxid_bodegaFK_IdBodegaDetalleFacturaProveedor,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor;
				}

				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
				//recargarFormDetalleFacturaProveedorProducto(jComboBoxid_productoFK_IdProductoDetalleFacturaProveedor,"FK_IdProducto");
			}
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleFacturaProveedor.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleFacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallefacturaproveedorAnterior =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleFacturaProveedor")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleFacturaProveedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleFacturaProveedor.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallefacturaproveedor =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallefacturaproveedor);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleFacturaProveedor")) {
				
				}
				
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleFacturaProveedor")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleFacturaProveedor.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleFacturaProveedor")) {
			
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleFacturaProveedor();
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleFacturaProveedor")) {
				jButtonDuplicarDetalleFacturaProveedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleFacturaProveedor")) {
				jButtonCopiarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleFacturaProveedor")) {
				jButtonVerFormDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleFacturaProveedor")) {
				jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleFacturaProveedor")) {
				jButtonModificarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleFacturaProveedor")) {
				jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleFacturaProveedor")) {
				jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleFacturaProveedor")) {
				jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleFacturaProveedor")) {
				jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleFacturaProveedor")) {
				jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleFacturaProveedor")) {
				jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleFacturaProveedor")) {
				jButtonAbrirOrderByDetalleFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleFacturaProveedor")) {
				jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleFacturaProveedor")) {
				jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleFacturaProveedor")) {
				jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleFacturaProveedorBusqueda")) {
				this.jButtonidDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_factura_proveedorDetalleFacturaProveedorUpdate")) {
				this.jButtonid_factura_proveedorDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_factura_proveedorDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_factura_proveedorDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaProveedorUpdate")) {
				this.jButtonid_empresaDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_empresaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaProveedorUpdate")) {
				this.jButtonid_sucursalDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_sucursalDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaProveedorUpdate")) {
				this.jButtonid_bodegaDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_bodegaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedor")) {
				this.jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_productoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_productoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaProveedorUpdate")) {
				this.jButtonid_unidadDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_unidadDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaProveedorUpdate")) {
				this.jButtonid_ejercicioDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_ejercicioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_periodoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_periodoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleFacturaProveedorBusqueda")) {
				this.jButtonnumero_comprobanteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleFacturaProveedorBusqueda")) {
				this.jButtoncantidadDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidad_auxiliarDetalleFacturaProveedorBusqueda")) {
				this.jButtoncantidad_auxiliarDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleFacturaProveedorBusqueda")) {
				this.jButtondescuentoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleFacturaProveedorBusqueda")) {
				this.jButtonivaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonloteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleFacturaProveedorBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_ivaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_unitarioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleFacturaProveedorBusqueda")) {
				this.jButtoncosto_totalDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleFacturaProveedorBusqueda")) {
				this.jButtoniceDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleFacturaProveedorBusqueda")) {
				this.jButtondescuento1DetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleFacturaProveedorBusqueda")) {
				this.jButtondescuento2DetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleFacturaProveedorBusqueda")) {
				this.jButtondescripcionDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precio_ventaDetalleFacturaProveedorBusqueda")) {
				this.jButtonprecio_ventaDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_novedad_productoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_novedad_productoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_centro_costoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_centro_costoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleFacturaProveedorUpdate")) {
				this.jButtonid_bodega_enviarDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_bodega_enviarDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleFacturaProveedorBusqueda")) {
				this.jButtonlote_clienteDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleFacturaProveedorBusqueda")) {
				this.jButtondisponibleDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleFacturaProveedorBusqueda")) {
				this.jButtonserieDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleFacturaProveedorBusqueda")) {
				this.jButtonice_valorDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaProveedorUpdate")) {
				this.jButtonid_anioDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_anioDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaProveedorUpdate")) {
				this.jButtonid_mesDetalleFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleFacturaProveedorBusqueda")) {
				this.jButtonid_mesDetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleFacturaProveedor();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleFacturaProveedor")) {
				closingInternalFrameDetalleFacturaProveedor();
				
			} else if(sTipo.equals("jButtonCancelarDetalleFacturaProveedor")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleFacturaProveedor = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleFacturaProveedorBeanSwingJInternalFrame jInternalFrameParent=(DetalleFacturaProveedorBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleFacturaProveedor.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleFacturaProveedorActionPerformed(null);
			}
			
			DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallefacturaproveedor,new Object(),this.detallefacturaproveedorParameterGeneral,this.detallefacturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleFacturaProveedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleFacturaProveedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleFacturaProveedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallefacturaproveedor)) {
			if(!esControlTabla) {
				if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);			
				}
				
				if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.procesarEventosDetalleFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this.detallefacturaproveedor,this.detallefacturaproveedorParameterGeneral,this.isEsNuevoDetalleFacturaProveedor,classes);//this.detallefacturaproveedorLogic.getDetalleFacturaProveedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral,this.detallefacturaproveedorBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleFacturaProveedor(classes,this.detallefacturaproveedorReturnGeneral,this.detallefacturaproveedorBean,false);
					}
						
					if(this.detallefacturaproveedorReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor());	
					}
						
					if(this.detallefacturaproveedorReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor(),classes);//this.detallefacturaproveedorBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleFacturaProveedor(this.detallefacturaproveedor,classes);//this.detallefacturaproveedorBean);									
				}
			
				if(DetalleFacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleFacturaProveedor(this.detallefacturaproveedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleFacturaProveedor(this.detallefacturaproveedor);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallefacturaproveedorAnterior!=null) {
						this.detallefacturaproveedor=this.detallefacturaproveedorAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.procesarEventosDetalleFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this.detallefacturaproveedor,this.detallefacturaproveedorParameterGeneral,this.isEsNuevoDetalleFacturaProveedor,classes);//this.detallefacturaproveedorLogic.getDetalleFacturaProveedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallefacturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor(),detallefacturaproveedorLogic.getDetalleFacturaProveedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor(),this.detallefacturaproveedors);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleFacturaProveedor.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleFacturaProveedor.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleFacturaProveedor();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleFacturaProveedor() throws Exception {
		
		DetalleFacturaProveedorModel detallefacturaproveedorModel=(DetalleFacturaProveedorModel)this.jTableDatosDetalleFacturaProveedor.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallefacturaproveedorModel.detallefacturaproveedors=this.detallefacturaproveedorLogic.getDetalleFacturaProveedors();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallefacturaproveedorModel.detallefacturaproveedors=this.detallefacturaproveedors;
		}
		
		
		((DetalleFacturaProveedorModel) this.jTableDatosDetalleFacturaProveedor.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleFacturaProveedor() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallefacturaproveedorAnterior(),this.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallefacturaproveedorAnterior(),this.detallefacturaproveedors);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleFacturaProveedor();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaproveedor,new Object(),generalEntityParameterGeneral,this.detallefacturaproveedorReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsOfDetalleFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleFacturaProveedorConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleFacturaProveedor(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleFacturaProveedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallefacturaproveedor,new Object(),generalEntityParameterGeneral,this.detallefacturaproveedorReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleFacturaProveedor(DetalleFacturaProveedorBean detallefacturaproveedorBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleFacturaProveedor(ArrayList<Classe> classes,DetalleFacturaProveedorReturnGeneral detallefacturaproveedorReturnGeneral,DetalleFacturaProveedorBean detallefacturaproveedorBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallefacturaproveedor)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor = new DetalleFacturaProveedorDetalleFormJInternalFrame(jDesktopPane,this.detallefacturaproveedorSessionBean.getConGuardarRelaciones(),this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.setVisible(false);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.detallefacturaproveedorLogic=this.detallefacturaproveedorLogic;
		
		this.cargarCombosFrameForeignKeyDetalleFacturaProveedor("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleFacturaProveedor();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleFacturaProveedor();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleFacturaProveedor("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleFacturaProveedor();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleFacturaProveedor"));
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarDetalleFacturaProveedor"));

		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleFacturaProveedor"));
					
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemModificarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"ActualizarDetalleFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleFacturaProveedor"));
						
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemActualizarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarDetalleFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleFacturaProveedor"));
								
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemEliminarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarDetalleFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleFacturaProveedor"));
					
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemCancelarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleFacturaProveedor"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemDetalleCerrarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFacturaProveedor"));
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFacturaProveedor"));
		
		
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleFacturaProveedor"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonidDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorBusqueda"));
		//jButtonid_productoDetalleFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonnumero_comprobanteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidad_auxiliarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_auxiliarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuentoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonloteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_caducidad_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_ivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_unitarioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_totalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoniceDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento1DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento2DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescripcionDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonprecio_ventaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"precio_ventaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonlote_clienteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondisponibleDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonserieDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonice_valorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleFacturaProveedor"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleFacturaProveedor"));
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleFacturaProveedor"));
		}
		
		this.jTableDatosDetalleFacturaProveedor.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleFacturaProveedor"));
		
		this.jTableDatosDetalleFacturaProveedor.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleFacturaProveedor"));
		
		this.jButtonNuevoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoDetalleFacturaProveedor"));
		
		this.jButtonDuplicarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"DuplicarDetalleFacturaProveedor"));
		
		this.jButtonCopiarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"CopiarDetalleFacturaProveedor"));
		
		this.jButtonVerFormDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"VerFormDetalleFacturaProveedor"));
		
		
		this.jButtonNuevoToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleFacturaProveedor"));
			
		this.jButtonDuplicarToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemNuevoDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleFacturaProveedor"));
			
		this.jMenuItemDuplicarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleFacturaProveedor"));		
		
		
		this.jButtonNuevoRelacionesDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleFacturaProveedor"));
		
		
		this.jButtonNuevoRelacionesToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemNuevoRelacionesDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleFacturaProveedor"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarDetalleFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonModificarToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleFacturaProveedor"));
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemModificarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"ActualizarDetalleFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonActualizarToolBarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleFacturaProveedor"));
				
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemActualizarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarDetalleFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonEliminarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleFacturaProveedor"));
						
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemEliminarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarDetalleFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonCancelarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleFacturaProveedor"));
			
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemCancelarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleFacturaProveedor"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleFacturaProveedor"));		
		
		
		this.jButtonCerrarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarDetalleFacturaProveedor"));
		
		
		this.jButtonCerrarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemCerrarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleFacturaProveedor"));
			
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jMenuItemDetalleCerrarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleFacturaProveedor"));
		}
		
		this.jButtonCopiarToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleFacturaProveedor"));
			
		this.jButtonVerFormToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleFacturaProveedor"));
		
		this.jMenuItemGuardarCambiosDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleFacturaProveedor"));
			
		this.jMenuItemCopiarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleFacturaProveedor"));		
		
		this.jMenuItemVerFormDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleFacturaProveedor"));		
		
		
		this.jButtonGuardarCambiosTablaDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleFacturaProveedor"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemGuardarCambiosTablaDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleFacturaProveedor"));		
		
		
		
		this.jButtonRecargarInformacionDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleFacturaProveedor"));
					
		this.jButtonRecargarInformacionToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleFacturaProveedor"));
		
		this.jMenuItemRecargarInformacionDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleFacturaProveedor"));		
		
		
		
		this.jButtonAnterioresDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"AnterioresDetalleFacturaProveedor"));
		
		
		this.jButtonAnterioresToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleFacturaProveedor"));
		
		this.jMenuItemAnterioresDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleFacturaProveedor"));		
		
		
		this.jButtonSiguientesDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"SiguientesDetalleFacturaProveedor"));
		
		
		this.jButtonSiguientesToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemSiguientesDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleFacturaProveedor"));
			
		this.jMenuItemAbrirOrderByDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleFacturaProveedor"));
			
		this.jMenuItemMostrarOcultarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleFacturaProveedor"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleFacturaProveedor"));
			
		this.jMenuItemDetalleMostarOcultarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleFacturaProveedor"));		
		
		
		this.jButtonNuevoGuardarCambiosDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleFacturaProveedor"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleFacturaProveedor"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleFacturaProveedor"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleFacturaProveedor.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleFacturaProveedor"));

		this.jCheckBoxSeleccionadosDetalleFacturaProveedor.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleFacturaProveedor"));
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleFacturaProveedor"));
		}
		
		
		this.jComboBoxTiposRelacionesDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleFacturaProveedor"));
			
		this.jComboBoxTiposAccionesDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleFacturaProveedor"));
					
		this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleFacturaProveedor"));
			
		this.jTextFieldValorCampoGeneralDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleFacturaProveedor"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonidDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorBusqueda"));
		//jButtonid_productoDetalleFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonnumero_comprobanteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidad_auxiliarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_auxiliarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuentoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonloteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_caducidad_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_ivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_unitarioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_totalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoniceDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento1DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento2DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescripcionDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonprecio_ventaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"precio_ventaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonlote_clienteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondisponibleDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonserieDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonice_valorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAnioDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdAnioDetalleFacturaProveedor"));

			this.jButtonFK_IdBodegaDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleFacturaProveedor"));

			this.jButtonFK_IdBodegaEnviarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaEnviarDetalleFacturaProveedor"));

			this.jButtonFK_IdCentroCostoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleFacturaProveedor"));

			this.jButtonFK_IdCuentaContableCostoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleFacturaProveedor"));

			this.jButtonFK_IdFacturaProveedorDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdFacturaProveedorDetalleFacturaProveedor"));

			this.jButtonFK_IdMesDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdMesDetalleFacturaProveedor"));

			this.jButtonFK_IdNovedadProductoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleFacturaProveedor"));

			this.jButtonFK_IdProductoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleFacturaProveedor"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedor"));

			this.jButtonFK_IdUnidadDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleFacturaProveedor"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetalleFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFacturaProveedor"));
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFacturaProveedor"));
				this.jInternalFrameReporteDinamicoDetalleFacturaProveedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFacturaProveedor"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleFacturaProveedor"));				
			//this.jButtonGenerarReporteDinamicoDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleFacturaProveedor"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleFacturaProveedor"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleFacturaProveedor!=null) {
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleFacturaProveedor"));
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleFacturaProveedor"));
				this.jInternalFrameImportacionDetalleFacturaProveedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleFacturaProveedor"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleFacturaProveedor"));
			
			this.jButtonAbrirOrderByToolBarDetalleFacturaProveedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleFacturaProveedor"));			
			
			if(this.jInternalFrameOrderByDetalleFacturaProveedor!=null) {
				this.jInternalFrameOrderByDetalleFacturaProveedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleFacturaProveedor"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTabbedPaneRelacionesDetalleFacturaProveedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleFacturaProveedor"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleFacturaProveedor();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleFacturaProveedor = (JInternalFrameBase)event.getSource();
	            	
	            DetalleFacturaProveedorBeanSwingJInternalFrame jInternalFrameParent=(DetalleFacturaProveedorBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleFacturaProveedor.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleFacturaProveedorActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleFacturaProveedor.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleFacturaProveedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleFacturaProveedor.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleFacturaProveedor.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleFacturaProveedor";
		inputMap = this.jButtonNuevoDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleFacturaProveedor";
		inputMap = this.jButtonNuevoRelacionesDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleFacturaProveedorActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleFacturaProveedor";
		inputMap = this.jButtonModificarDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleFacturaProveedor";
		inputMap = this.jButtonActualizarDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleFacturaProveedor";
		inputMap = this.jButtonEliminarDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleFacturaProveedor";
		inputMap = this.jButtonCancelarDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleFacturaProveedor";
		inputMap = this.jButtonCerrarDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleFacturaProveedor";
		inputMap = this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonGuardarCambiosDetalleFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleFacturaProveedor.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleFacturaProveedorItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonidDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_factura_proveedorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_proveedorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_empresaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_sucursalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodegaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleFacturaProveedorBusqueda"));
		//jButtonid_productoDetalleFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_unidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_ejercicioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_periodoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonnumero_comprobanteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidadDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncantidad_auxiliarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"cantidad_auxiliarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuentoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonloteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_elaboracion_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonfecha_caducidad_loteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_ivaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_unitarioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoncosto_totalDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtoniceDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento1DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescuento2DetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondescripcionDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonprecio_ventaDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"precio_ventaDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_novedad_productoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_centro_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_cuenta_contable_costoDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_bodega_enviarDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonlote_clienteDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtondisponibleDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonserieDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonice_valorDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_anioDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_mesDetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleFacturaProveedorBusqueda"));
		
		
		this.jButtonFK_IdAnioDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdAnioDetalleFacturaProveedor"));

		this.jButtonFK_IdBodegaDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleFacturaProveedor"));

		this.jButtonFK_IdBodegaEnviarDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdBodegaEnviarDetalleFacturaProveedor"));

		this.jButtonFK_IdCentroCostoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleFacturaProveedor"));

		this.jButtonFK_IdCuentaContableCostoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleFacturaProveedor"));

		this.jButtonFK_IdFacturaProveedorDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdFacturaProveedorDetalleFacturaProveedor"));

		this.jButtonFK_IdMesDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdMesDetalleFacturaProveedor"));

		this.jButtonFK_IdNovedadProductoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleFacturaProveedor"));

		this.jButtonFK_IdProductoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleFacturaProveedor"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_productoDetalleFacturaProveedor"));

		this.jButtonFK_IdUnidadDetalleFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleFacturaProveedor"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetalleFacturaProveedorActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleFacturaProveedor.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetalleFacturaProveedor(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
					detallefacturaproveedorAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedors) {
					detallefacturaproveedorAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleFacturaProveedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
						detallefacturaproveedorAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedors) {
						detallefacturaproveedorAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
					
						if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedors) {
						
						if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleFacturaProveedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleFacturaProveedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleFacturaProveedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleFacturaProveedor.getSelectedRows();
			
			DetalleFacturaProveedor detallefacturaproveedorLocal=new DetalleFacturaProveedor();
			
			//this.seleccionarTodosDetalleFacturaProveedor(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallefacturaproveedorLocal =(DetalleFacturaProveedor) this.detallefacturaproveedorLogic.getDetalleFacturaProveedors().toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallefacturaproveedorLocal =(DetalleFacturaProveedor) this.detallefacturaproveedors.toArray()[this.jTableDatosDetalleFacturaProveedor.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallefacturaproveedorLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
						detallefacturaproveedorAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedors) {
						detallefacturaproveedorAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleFacturaProveedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleFacturaProveedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleFacturaProveedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleFacturaProveedorItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleFacturaProveedorParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleFacturaProveedorActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleFacturaProveedor.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
				
						if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallefacturaproveedorAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallefacturaproveedorAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR)) {
							existe=true;
							detallefacturaproveedorAux.setcantidad_auxiliar(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallefacturaproveedorAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallefacturaproveedorAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallefacturaproveedorAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallefacturaproveedorAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallefacturaproveedorAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallefacturaproveedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA)) {
							existe=true;
							detallefacturaproveedorAux.setprecio_venta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallefacturaproveedorAux.setlote_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallefacturaproveedorAux.setdisponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallefacturaproveedorAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallefacturaproveedorAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedors) {
					
						if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallefacturaproveedorAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallefacturaproveedorAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR)) {
							existe=true;
							detallefacturaproveedorAux.setcantidad_auxiliar(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallefacturaproveedorAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallefacturaproveedorAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallefacturaproveedorAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallefacturaproveedorAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallefacturaproveedorAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallefacturaproveedorAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallefacturaproveedorAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallefacturaproveedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA)) {
							existe=true;
							detallefacturaproveedorAux.setprecio_venta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallefacturaproveedorAux.setlote_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallefacturaproveedorAux.setdisponible(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallefacturaproveedorAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallefacturaproveedorAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleFacturaProveedorActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleFacturaProveedor=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleFacturaProveedor.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleFacturaProveedor) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleFacturaProveedor(conSplash);
				
					this.generarReporteDetalleFacturaProveedorsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleFacturaProveedorsSeleccionados();
				//this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleFacturaProveedorsSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleFacturaProveedorsSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleFacturaProveedor();
				
				this.exportarDetalleFacturaProveedorsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleFacturaProveedors();
				//this.importarDetalleFacturaProveedors();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleFacturaProveedor();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleFacturaProveedorsSeleccionados();
				//this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleFacturaProveedor();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleFacturaProveedor)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleFacturaProveedor(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleFacturaProveedorBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleFacturaProveedor) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleFacturaProveedor(conSplash);
					
						//this.actualizarParametrosGeneralDetalleFacturaProveedor();
						
						this.generarReporteProcesoAccionDetalleFacturaProveedorsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle Factura ProveedorES SELECCIONADOS?", "MANTENIMIENTO DE Detalle Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleFacturaProveedor();
				
						this.actualizarParametrosGeneralDetalleFacturaProveedor();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallefacturaproveedorReturnGeneral=detallefacturaproveedorLogic.procesarAccionDetalleFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallefacturaproveedorLogic.getDetalleFacturaProveedors(),this.detallefacturaproveedorParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleFacturaProveedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleFacturaProveedor();
					
					DetalleFacturaProveedorBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleFacturaProveedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleFacturaProveedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxTiposAccionesFormularioDetalleFacturaProveedor.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleFacturaProveedor(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleFacturaProveedorActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleFacturaProveedor();
			
			if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
			DetalleFacturaProveedor detallefacturaproveedor=new DetalleFacturaProveedor();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleFacturaProveedor.getSelectedItem();
			
			
			
			
			detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallefacturaproveedorsSeleccionados.size()==1) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
					detallefacturaproveedor=detallefacturaproveedorAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleFacturaProveedor();
			
      		//this.finishProcessDetalleFacturaProveedor(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleFacturaProveedorReturnGeneral() throws Exception {
		if(this.detallefacturaproveedorReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallefacturaproveedorReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallefacturaproveedorReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallefacturaproveedorReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallefacturaproveedorReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallefacturaproveedorReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
		}
		
		if(this.detallefacturaproveedorReturnGeneral.getConRetornoLista() || this.detallefacturaproveedorReturnGeneral.getConRetornoObjeto()) {
			if(this.detallefacturaproveedorReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallefacturaproveedorLogic.setDetalleFacturaProveedors(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallefacturaproveedorReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallefacturaproveedorLogic.setDetalleFacturaProveedor(this.detallefacturaproveedorReturnGeneral.getDetalleFacturaProveedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleFacturaProveedor(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleFacturaProveedor() throws Exception {
		
		
	}
	
	public ArrayList<DetalleFacturaProveedor> getDetalleFacturaProveedorsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleFacturaProveedor) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorLogic.getDetalleFacturaProveedors()) {
					if(detallefacturaproveedorAux.getIsSelected()) {
						detallefacturaproveedorsSeleccionados.add(detallefacturaproveedorAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleFacturaProveedor detallefacturaproveedorAux:this.detallefacturaproveedors) {
					if(detallefacturaproveedorAux.getIsSelected()) {
						detallefacturaproveedorsSeleccionados.add(detallefacturaproveedorAux);				
					}
				}
			}
			
			if(detallefacturaproveedorsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallefacturaproveedorsSeleccionados.addAll(this.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallefacturaproveedorsSeleccionados.addAll(this.detallefacturaproveedors);				
					}
				}
			}
		} else {
			detallefacturaproveedorsSeleccionados.add(this.detallefacturaproveedor);
		}
		
		return detallefacturaproveedorsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleFacturaProveedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleFacturaProveedorsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleFacturaProveedorsSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleFacturaProveedorsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetalleFacturaProveedor();
		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetalleFacturaProveedor();
		
		
		//this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados ,detallefacturaproveedorImplementable,detallefacturaproveedorImplementableHome);
	}
	
	public void mostrarImportacionDetalleFacturaProveedors() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetalleFacturaProveedor();
		
		this.abrirFrameImportacionDetalleFacturaProveedor();		
		
			
		//this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados ,detallefacturaproveedorImplementable,detallefacturaproveedorImplementableHome);
	}
	
	public void importarDetalleFacturaProveedors() throws Exception {		
	
	}
	
	public void exportarDetalleFacturaProveedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleFacturaProveedorsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleFacturaProveedorsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleFacturaProveedor(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleFacturaProveedor(detallefacturaproveedorAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallefacturaproveedorAux.setsDetalleGeneralEntityReporte(detallefacturaproveedorAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleFacturaProveedor(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallefacturaproveedor.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getfacturaproveedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcantidad_auxiliar().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getlote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getfecha_elaboracion_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getfecha_caducidad_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcosto_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcosto_unitario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcosto_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getdescuento1().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getdescuento2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getprecio_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getnovedadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getcuentacontablecosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getbodegaenviar_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getlote_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getdisponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getserie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getice_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallefacturaproveedor.getmes_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleFacturaProveedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleFacturaProveedor(row);				
				iRow++;
			}				
			
			for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleFacturaProveedor(detallefacturaproveedorAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();		
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallefacturaproveedor.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallefacturaproveedors");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallefacturaproveedor");
			//elementRoot.appendChild(element);
		
			for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
				element = document.createElement("detallefacturaproveedor");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleFacturaProveedor(detallefacturaproveedorAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleFacturaProveedor(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOUNITARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO1);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCUENTO2);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_PRECIOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_DISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_ICEVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getfacturaproveedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcantidad_auxiliar());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getlote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getfecha_elaboracion_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getfecha_caducidad_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcosto_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcosto_unitario());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcosto_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getdescuento1());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getdescuento2());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getprecio_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getnovedadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getcuentacontablecosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getbodegaenviar_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getlote_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getdisponible());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getserie());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getice_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallefacturaproveedor.getmes_descripcion());				
	}
	
	public void setFilaDatosExportarXmlDetalleFacturaProveedor(DetalleFacturaProveedor detallefacturaproveedor,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleFacturaProveedorConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallefacturaproveedor.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleFacturaProveedorConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallefacturaproveedor.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementfacturaproveedor_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDFACTURAPROVEEDOR);
		elementfacturaproveedor_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getfacturaproveedor_descripcion()));
		element.appendChild(elementfacturaproveedor_descripcion);

		Element elementempresa_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementnumero_comprobante = document.createElement(DetalleFacturaProveedorConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(detallefacturaproveedor.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementcantidad = document.createElement(DetalleFacturaProveedorConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detallefacturaproveedor.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementcantidad_auxiliar = document.createElement(DetalleFacturaProveedorConstantesFunciones.CANTIDADAUXILIAR);
		elementcantidad_auxiliar.appendChild(document.createTextNode(detallefacturaproveedor.getcantidad_auxiliar().toString().trim()));
		element.appendChild(elementcantidad_auxiliar);

		Element elementdescuento = document.createElement(DetalleFacturaProveedorConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detallefacturaproveedor.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementiva = document.createElement(DetalleFacturaProveedorConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detallefacturaproveedor.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementlote = document.createElement(DetalleFacturaProveedorConstantesFunciones.LOTE);
		elementlote.appendChild(document.createTextNode(detallefacturaproveedor.getlote().trim()));
		element.appendChild(elementlote);

		Element elementfecha_elaboracion_lote = document.createElement(DetalleFacturaProveedorConstantesFunciones.FECHAELABORACIONLOTE);
		elementfecha_elaboracion_lote.appendChild(document.createTextNode(detallefacturaproveedor.getfecha_elaboracion_lote().toString().trim()));
		element.appendChild(elementfecha_elaboracion_lote);

		Element elementfecha_caducidad_lote = document.createElement(DetalleFacturaProveedorConstantesFunciones.FECHACADUCIDADLOTE);
		elementfecha_caducidad_lote.appendChild(document.createTextNode(detallefacturaproveedor.getfecha_caducidad_lote().toString().trim()));
		element.appendChild(elementfecha_caducidad_lote);

		Element elementcosto_iva = document.createElement(DetalleFacturaProveedorConstantesFunciones.COSTOIVA);
		elementcosto_iva.appendChild(document.createTextNode(detallefacturaproveedor.getcosto_iva().toString().trim()));
		element.appendChild(elementcosto_iva);

		Element elementcosto_unitario = document.createElement(DetalleFacturaProveedorConstantesFunciones.COSTOUNITARIO);
		elementcosto_unitario.appendChild(document.createTextNode(detallefacturaproveedor.getcosto_unitario().toString().trim()));
		element.appendChild(elementcosto_unitario);

		Element elementcosto_total = document.createElement(DetalleFacturaProveedorConstantesFunciones.COSTOTOTAL);
		elementcosto_total.appendChild(document.createTextNode(detallefacturaproveedor.getcosto_total().toString().trim()));
		element.appendChild(elementcosto_total);

		Element elementice = document.createElement(DetalleFacturaProveedorConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detallefacturaproveedor.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementdescuento1 = document.createElement(DetalleFacturaProveedorConstantesFunciones.DESCUENTO1);
		elementdescuento1.appendChild(document.createTextNode(detallefacturaproveedor.getdescuento1().toString().trim()));
		element.appendChild(elementdescuento1);

		Element elementdescuento2 = document.createElement(DetalleFacturaProveedorConstantesFunciones.DESCUENTO2);
		elementdescuento2.appendChild(document.createTextNode(detallefacturaproveedor.getdescuento2().toString().trim()));
		element.appendChild(elementdescuento2);

		Element elementdescripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallefacturaproveedor.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementprecio_venta = document.createElement(DetalleFacturaProveedorConstantesFunciones.PRECIOVENTA);
		elementprecio_venta.appendChild(document.createTextNode(detallefacturaproveedor.getprecio_venta().toString().trim()));
		element.appendChild(elementprecio_venta);

		Element elementnovedadproducto_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDNOVEDADPRODUCTO);
		elementnovedadproducto_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getnovedadproducto_descripcion()));
		element.appendChild(elementnovedadproducto_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcuentacontablecosto_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDCUENTACONTABLECOSTO);
		elementcuentacontablecosto_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getcuentacontablecosto_descripcion()));
		element.appendChild(elementcuentacontablecosto_descripcion);

		Element elementbodegaenviar_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDBODEGAENVIAR);
		elementbodegaenviar_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getbodegaenviar_descripcion()));
		element.appendChild(elementbodegaenviar_descripcion);

		Element elementlote_cliente = document.createElement(DetalleFacturaProveedorConstantesFunciones.LOTECLIENTE);
		elementlote_cliente.appendChild(document.createTextNode(detallefacturaproveedor.getlote_cliente().trim()));
		element.appendChild(elementlote_cliente);

		Element elementdisponible = document.createElement(DetalleFacturaProveedorConstantesFunciones.DISPONIBLE);
		elementdisponible.appendChild(document.createTextNode(detallefacturaproveedor.getdisponible().toString().trim()));
		element.appendChild(elementdisponible);

		Element elementserie = document.createElement(DetalleFacturaProveedorConstantesFunciones.SERIE);
		elementserie.appendChild(document.createTextNode(detallefacturaproveedor.getserie().trim()));
		element.appendChild(elementserie);

		Element elementice_valor = document.createElement(DetalleFacturaProveedorConstantesFunciones.ICEVALOR);
		elementice_valor.appendChild(document.createTextNode(detallefacturaproveedor.getice_valor().toString().trim()));
		element.appendChild(elementice_valor);

		Element elementanio_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleFacturaProveedorConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detallefacturaproveedor.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);
	}
	
	public void generarReporteGroupGenericoDetalleFacturaProveedorsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados=new ArrayList<DetalleFacturaProveedor>();
		
		detallefacturaproveedorsSeleccionados=this.getDetalleFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleFacturaProveedor(detallefacturaproveedorsSeleccionados);
		
		this.generarReporteDetalleFacturaProveedors("Todos",detallefacturaproveedorsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleFacturaProveedor(ArrayList<DetalleFacturaProveedor> detallefacturaproveedorsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleFacturaProveedor detallefacturaproveedorAux:detallefacturaproveedorsSeleccionados) {
				detallefacturaproveedorAux.setsDetalleGeneralEntityReporte(detallefacturaproveedorAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDFACTURAPROVEEDOR)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getfacturaproveedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_CANTIDADAUXILIAR)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getcantidad_auxiliar().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getlote());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallefacturaproveedorAux.getfecha_elaboracion_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallefacturaproveedorAux.getfecha_caducidad_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_COSTOIVA)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(detallefacturaproveedorAux.getcosto_iva()));
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDNOVEDADPRODUCTO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getnovedadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getcuentacontablecosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDBODEGAENVIAR)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getbodegaenviar_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_LOTECLIENTE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getlote_cliente());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_SERIE)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getserie());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleFacturaProveedorConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detallefacturaproveedorAux.setsDescripcionGeneralEntityReporte1(detallefacturaproveedorAux.getmes_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleFacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleFacturaProveedor(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaModificarDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarDetalleFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleFacturaProveedor=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleFacturaProveedorJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=true;
		} else {
			this.actualizarEstadoPanelsDetalleFacturaProveedor(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleFacturaProveedor=false;
			//this.isVisibilidadCeldaVerFormDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaDuplicarDetalleFacturaProveedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleFacturaProveedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(!detallefacturaproveedorSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;												
			}
			
			this.jButtonCerrarDetalleFacturaProveedor.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleFacturaProveedor=false;
		}
		
		if(!this.permiteMantenimiento(this.detallefacturaproveedor)) {
			this.isVisibilidadCeldaActualizarDetalleFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarDetalleFacturaProveedor=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleFacturaProveedor() {
	}
	
	public void actualizarEstadoPanelsDetalleFacturaProveedor(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionDetalleFacturaProveedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleFacturaProveedor!=null) {
				this.jScrollPanelDatosDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleFacturaProveedor!=null) {
				this.jPanelPaginacionDetalleFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
					this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallefacturaproveedorSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetalleFacturaProveedor!=null) {
				this.jPanelParametrosReportesDetalleFacturaProveedor.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaFacturaProveedor(Boolean isParaFacturaProveedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaProveedorNegation=!isParaFacturaProveedor;

			this.isVisibilidadFK_IdAnio=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaFacturaProveedor;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaFacturaProveedorNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAnio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAnio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdAnio=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdAnio=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdAnio=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAnio=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAnio=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaNovedadProducto(Boolean isParaNovedadProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaNovedadProductoNegation=!isParaNovedadProducto;

			this.isVisibilidadFK_IdAnio=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaNovedadProducto;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdAnio=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCosto(Boolean isParaCuentaContableCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoNegation=!isParaCuentaContableCosto;

			this.isVisibilidadFK_IdAnio=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableCosto;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodegaEnviar(Boolean isParaBodegaEnviar){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaEnviarNegation=!isParaBodegaEnviar;

			this.isVisibilidadFK_IdAnio=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaBodegaEnviar;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAnio=isParaAnio;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAnio=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdAnioDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCentroCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdFacturaProveedor=isParaMesNegation;
			if(!this.isVisibilidadFK_IdFacturaProveedor) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdMes=isParaMes;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdMesDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdNovedadProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdNovedadProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdProductoDetalleFacturaProveedor);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(jPanelFK_IdUnidadDetalleFacturaProveedor);}
		}
		
	}
	
	
	
	

	public String registrarSesionDetalleFacturaProveedorParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallefacturaproveedorSessionBean==null) {
				detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallefacturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallefacturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleFacturaProveedor(true);
			//productoSessionBean.setlidDetalleFacturaProveedorActual(this.idDetalleFacturaProveedorActual);

			detallefacturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleFacturaProveedor(true);
			detallefacturaproveedorSessionBean.setlIdDetalleFacturaProveedorActualForeignKey(this.idDetalleFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleFacturaProveedorSessionBean detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
		
		if(this.detallefacturaproveedorSessionBean==null) {
			this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
		}
		
		this.detallefacturaproveedorSessionBean.setsUltimaBusquedaDetalleFacturaProveedor(this.getsAccionBusqueda());
		this.detallefacturaproveedorSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallefacturaproveedorSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAnio")) {
			detallefacturaproveedorSessionBean.setid_anio(this.getid_anioFK_IdAnio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallefacturaproveedorSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdBodegaEnviar")) {
			detallefacturaproveedorSessionBean.setid_bodega_enviar(this.getid_bodega_enviarFK_IdBodegaEnviar());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detallefacturaproveedorSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
			detallefacturaproveedorSessionBean.setid_cuenta_contable_costo(this.getid_cuenta_contable_costoFK_IdCuentaContableCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detallefacturaproveedorSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallefacturaproveedorSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFacturaProveedor")) {
			detallefacturaproveedorSessionBean.setid_factura_proveedor(this.getid_factura_proveedorFK_IdFacturaProveedor());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMes")) {
			detallefacturaproveedorSessionBean.setid_mes(this.getid_mesFK_IdMes());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
			detallefacturaproveedorSessionBean.setid_novedad_producto(this.getid_novedad_productoFK_IdNovedadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detallefacturaproveedorSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallefacturaproveedorSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallefacturaproveedorSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallefacturaproveedorSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleFacturaProveedorSessionBean detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
		
		if(this.detallefacturaproveedorSessionBean==null) {
			this.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
		}
		
		if(this.detallefacturaproveedorSessionBean.getsUltimaBusquedaDetalleFacturaProveedor()!=null&&!this.detallefacturaproveedorSessionBean.getsUltimaBusquedaDetalleFacturaProveedor().equals("")) {
			this.setsAccionBusqueda(detallefacturaproveedorSessionBean.getsUltimaBusquedaDetalleFacturaProveedor());
			this.setiNumeroPaginacion(detallefacturaproveedorSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallefacturaproveedorSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAnio")) {
				this.setid_anioFK_IdAnio(detallefacturaproveedorSessionBean.getid_anio());
				detallefacturaproveedorSessionBean.setid_anio(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallefacturaproveedorSessionBean.getid_bodega());
				detallefacturaproveedorSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdBodegaEnviar")) {
				this.setid_bodega_enviarFK_IdBodegaEnviar(detallefacturaproveedorSessionBean.getid_bodega_enviar());
				detallefacturaproveedorSessionBean.setid_bodega_enviar(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detallefacturaproveedorSessionBean.getid_centro_costo());
				detallefacturaproveedorSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
				this.setid_cuenta_contable_costoFK_IdCuentaContableCosto(detallefacturaproveedorSessionBean.getid_cuenta_contable_costo());
				detallefacturaproveedorSessionBean.setid_cuenta_contable_costo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detallefacturaproveedorSessionBean.getid_ejercicio());
				detallefacturaproveedorSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallefacturaproveedorSessionBean.getid_empresa());
				detallefacturaproveedorSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFacturaProveedor")) {
				this.setid_factura_proveedorFK_IdFacturaProveedor(detallefacturaproveedorSessionBean.getid_factura_proveedor());
				detallefacturaproveedorSessionBean.setid_factura_proveedor(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMes")) {
				this.setid_mesFK_IdMes(detallefacturaproveedorSessionBean.getid_mes());
				detallefacturaproveedorSessionBean.setid_mes(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
				this.setid_novedad_productoFK_IdNovedadProducto(detallefacturaproveedorSessionBean.getid_novedad_producto());
				detallefacturaproveedorSessionBean.setid_novedad_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detallefacturaproveedorSessionBean.getid_periodo());
				detallefacturaproveedorSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallefacturaproveedorSessionBean.getid_producto());
				detallefacturaproveedorSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallefacturaproveedorSessionBean.getid_sucursal());
				detallefacturaproveedorSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallefacturaproveedorSessionBean.getid_unidad());
				detallefacturaproveedorSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallefacturaproveedorSessionBean.setsUltimaBusquedaDetalleFacturaProveedor("");
		this.detallefacturaproveedorSessionBean.setiNumeroPaginacion(DetalleFacturaProveedorConstantesFunciones.INUMEROPAGINACION);
		this.detallefacturaproveedorSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleFacturaProveedor() {
		this.updateBorderResaltarBusquedasFormularioDetalleFacturaProveedor();
		this.updateVisibilidadBusquedasFormularioDetalleFacturaProveedor();
		this.updateHabilitarBusquedasFormularioDetalleFacturaProveedor();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleFacturaProveedor() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponents().length>0) {
	

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdAnioDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdAnioDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdAnioDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCentroCostoDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCentroCostoDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdFacturaProveedorDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdFacturaProveedorDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdMesDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdMesDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdMesDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdNovedadProductoDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdNovedadProductoDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdProductoDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdProductoDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdProductoDetalleFacturaProveedor);
			}
		}

		if(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdUnidadDetalleFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdUnidadDetalleFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdUnidadDetalleFacturaProveedor);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleFacturaProveedor() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdAnioDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdAnioDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdAnioDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdBodegaDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdBodegaDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdBodegaEnviarDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdBodegaEnviarDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdCentroCostoDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdCentroCostoDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdFacturaProveedorDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdFacturaProveedorDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdMesDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdMesDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdMesDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdNovedadProductoDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdNovedadProductoDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdProductoDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdProductoDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdProductoDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdUnidadDetalleFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdUnidadDetalleFacturaProveedor);
			if(!this.detallefacturaproveedorConstantesFunciones.mostrarFK_IdUnidadDetalleFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetalleFacturaProveedor() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdAnioDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdAnioDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdAnioDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdBodegaDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdBodegaDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdBodegaEnviarDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdBodegaEnviarDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdCentroCostoDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdCentroCostoDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdCuentaContableCostoDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdCuentaContableCostoDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdFacturaProveedorDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdFacturaProveedorDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdMesDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdMesDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdMesDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdNovedadProductoDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdNovedadProductoDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdProductoDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdProductoDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdProductoDetalleFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdUnidadDetalleFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarFK_IdUnidadDetalleFacturaProveedor);
				this.jTabbedPaneBusquedasDetalleFacturaProveedor.setEnabledAt(index,this.detallefacturaproveedorConstantesFunciones.activarFK_IdUnidadDetalleFacturaProveedor);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetalleFacturaProveedor(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAnio")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdAnioDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdAnioDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdAnioDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdBodegaDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdBodegaEnviar")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdBodegaEnviarDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdCentroCostoDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCentroCostoDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCosto")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdCuentaContableCostoDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFacturaProveedor")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdFacturaProveedorDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdFacturaProveedorDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdFacturaProveedorDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMes")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdMesDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdMesDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdMesDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNovedadProducto")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdNovedadProductoDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdNovedadProductoDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdProductoDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdProductoDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdProductoDetalleFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleFacturaProveedor.indexOfComponent(this.jPanelFK_IdUnidadDetalleFacturaProveedor);

			this.jTabbedPaneBusquedasDetalleFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleFacturaProveedor.getComponent(index);

			this.detallefacturaproveedorConstantesFunciones.setResaltarFK_IdUnidadDetalleFacturaProveedor(resaltar);

			jPanel.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarFK_IdUnidadDetalleFacturaProveedor);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetalleFacturaProveedor.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleFacturaProveedor() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleFacturaProveedor();
		this.updateVisibilidadResaltarControlesFormularioDetalleFacturaProveedor();
		this.updateHabilitarResaltarControlesFormularioDetalleFacturaProveedor();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleFacturaProveedor() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallefacturaproveedorConstantesFunciones.resaltaridDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltaridDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_factura_proveedorDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_factura_proveedorDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_empresaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_empresaDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_sucursalDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_sucursalDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_bodegaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_bodegaDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_productoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_productoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_unidadDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_unidadDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_ejercicioDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_ejercicioDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_periodoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_periodoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarnumero_comprobanteDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarnumero_comprobanteDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarcantidadDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarcantidadDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarcantidad_auxiliarDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarcantidad_auxiliarDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltardescuentoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltardescuentoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarivaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarivaDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarloteDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarloteDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_elaboracion_loteDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_elaboracion_loteDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_caducidad_loteDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarfecha_caducidad_loteDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_ivaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setBorderPainted(true);this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_ivaDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_unitarioDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_unitarioDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_totalDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarcosto_totalDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltariceDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltariceDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltardescuento1DetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltardescuento1DetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltardescuento2DetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltardescuento2DetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltardescripcionDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltardescripcionDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarprecio_ventaDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarprecio_ventaDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_novedad_productoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_novedad_productoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_centro_costoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_centro_costoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_cuenta_contable_costoDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_cuenta_contable_costoDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_bodega_enviarDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_bodega_enviarDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarlote_clienteDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarlote_clienteDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltardisponibleDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltardisponibleDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarserieDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarserieDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarice_valorDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarice_valorDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_anioDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_anioDetalleFacturaProveedor);}
		if(this.detallefacturaproveedorConstantesFunciones.resaltarid_mesDetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setBorder(this.detallefacturaproveedorConstantesFunciones.resaltarid_mesDetalleFacturaProveedor);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleFacturaProveedor() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
	
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostraridDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelidDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostraridDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_factura_proveedorDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_factura_proveedorDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_factura_proveedorDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_empresaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_empresaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_empresaDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_sucursalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_sucursalDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_sucursalDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodegaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_bodegaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodegaDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_productoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_productoDetalleFacturaProveedor);
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_productoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_unidadDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_unidadDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_unidadDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_ejercicioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_ejercicioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_ejercicioDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_periodoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_periodoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_periodoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarnumero_comprobanteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelnumero_comprobanteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarnumero_comprobanteDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcantidadDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelcantidadDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcantidadDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcantidad_auxiliarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelcantidad_auxiliarDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcantidad_auxiliarDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuentoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneldescuentoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuentoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelivaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarivaDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarloteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelloteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarloteDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_elaboracion_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelfecha_elaboracion_loteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_elaboracion_loteDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_caducidad_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelfecha_caducidad_loteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarfecha_caducidad_loteDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_ivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelcosto_ivaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_ivaDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_unitarioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelcosto_unitarioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_unitarioDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_totalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelcosto_totalDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarcosto_totalDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrariceDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneliceDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrariceDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuento1DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneldescuento1DetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuento1DetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuento2DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneldescuento2DetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescuento2DetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescripcionDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneldescripcionDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardescripcionDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarprecio_ventaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelprecio_ventaDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarprecio_ventaDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_novedad_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_novedad_productoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_novedad_productoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_centro_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_centro_costoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_centro_costoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_cuenta_contable_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_cuenta_contable_costoDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_cuenta_contable_costoDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodega_enviarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_bodega_enviarDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_bodega_enviarDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarlote_clienteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanellote_clienteDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarlote_clienteDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardisponibleDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPaneldisponibleDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrardisponibleDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarserieDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelserieDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarserieDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarice_valorDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelice_valorDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarice_valorDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_anioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_anioDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_anioDetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_mesDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jPanelid_mesDetalleFacturaProveedor.setVisible(this.detallefacturaproveedorConstantesFunciones.mostrarid_mesDetalleFacturaProveedor);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleFacturaProveedor() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleFacturaProveedor!=null) {
	
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jLabelidDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activaridDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_factura_proveedorDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_factura_proveedorDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_empresaDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_empresaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_sucursalDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_sucursalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodegaDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_bodegaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_productoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_productoDetalleFacturaProveedor);
			this.jInternalFrameDetalleFormDetalleFacturaProveedor.jButtonid_productoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_unidadDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_unidadDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_ejercicioDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_ejercicioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_periodoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_periodoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldnumero_comprobanteDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarnumero_comprobanteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidadDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarcantidadDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcantidad_auxiliarDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarcantidad_auxiliarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuentoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activardescuentoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldivaDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldloteDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarloteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_elaboracion_loteDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarfecha_elaboracion_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jDateChooserfecha_caducidad_loteDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarfecha_caducidad_loteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jCheckBoxcosto_ivaDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarcosto_ivaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_unitarioDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarcosto_unitarioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldcosto_totalDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarcosto_totalDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldiceDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activariceDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento1DetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activardescuento1DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddescuento2DetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activardescuento2DetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextAreadescripcionDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activardescripcionDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldprecio_ventaDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarprecio_ventaDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_novedad_productoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_novedad_productoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_centro_costoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_centro_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_cuenta_contable_costoDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_cuenta_contable_costoDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_bodega_enviarDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_bodega_enviarDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldlote_clienteDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarlote_clienteDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFielddisponibleDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activardisponibleDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldserieDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarserieDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jTextFieldice_valorDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarice_valorDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_anioDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_anioDetalleFacturaProveedor);
		this.jInternalFrameDetalleFormDetalleFacturaProveedor.jComboBoxid_mesDetalleFacturaProveedor.setEnabled(this.detallefacturaproveedorConstantesFunciones.activarid_mesDetalleFacturaProveedor);
		}
	}
	
		
}