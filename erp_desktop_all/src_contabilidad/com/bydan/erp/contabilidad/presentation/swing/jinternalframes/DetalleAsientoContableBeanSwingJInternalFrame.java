/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.DetalleAsientoContableConstantesFunciones;
import com.bydan.erp.contabilidad.util.DetalleAsientoContableParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.DetalleAsientoContableParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.DetalleAsientoContableBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleAsientoContableBeanSwingJInternalFrame extends DetalleAsientoContableJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleAsientoContableBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleAsientoContable> detalleasientocontableValidator = new ClassValidator<DetalleAsientoContable>(DetalleAsientoContable.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleAsientoContable detalleasientocontable;	
	public DetalleAsientoContable detalleasientocontableAux;
	public DetalleAsientoContable detalleasientocontableAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleAsientoContable detalleasientocontableTotales;
	public Long idDetalleAsientoContableActual;
	public Long iIdNuevoDetalleAsientoContable=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

	public String sFinalQueryComboCentroActividad="";

	public List<CentroActividad> centroactividadsForeignKey;

	public List<CentroActividad> getcentroactividadsForeignKey() {
		return centroactividadsForeignKey;
	}

	public void setcentroactividadsForeignKey(List<CentroActividad> centroactividadsForeignKey) {
		this.centroactividadsForeignKey = centroactividadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroActividad centroactividadForeignKey;

	public CentroActividad getcentroactividadForeignKey() {
		return centroactividadForeignKey;
	}

	public void setcentroactividadForeignKey(CentroActividad centroactividadForeignKey) {
		this.centroactividadForeignKey = centroactividadForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboTipoCambio="";

	public List<TipoCambio> tipocambiosForeignKey;

	public List<TipoCambio> gettipocambiosForeignKey() {
		return tipocambiosForeignKey;
	}

	public void settipocambiosForeignKey(List<TipoCambio> tipocambiosForeignKey) {
		this.tipocambiosForeignKey = tipocambiosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCambio tipocambioForeignKey;

	public TipoCambio gettipocambioForeignKey() {
		return tipocambioForeignKey;
	}

	public void settipocambioForeignKey(TipoCambio tipocambioForeignKey) {
		this.tipocambioForeignKey = tipocambioForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	public Long idCuentaContableActual=0L;

	public Long getidCuentaContableActual() {
		return idCuentaContableActual;
	}

	public void setidCuentaContableActual(Long idCuentaContableActual) {
		this.idCuentaContableActual= idCuentaContableActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idTipoCambioActual=0L;

	public Long getidTipoCambioActual() {
		return idTipoCambioActual;
	}

	public void setidTipoCambioActual(Long idTipoCambioActual) {
		this.idTipoCambioActual= idTipoCambioActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleAsientoContable;
	public Boolean isPermisoNuevoDetalleAsientoContable;
	public Boolean isPermisoActualizarDetalleAsientoContable;
	public Boolean isPermisoActualizarOriginalDetalleAsientoContable;
	public Boolean isPermisoEliminarDetalleAsientoContable;
	public Boolean isPermisoGuardarCambiosDetalleAsientoContable;
	public Boolean isPermisoConsultaDetalleAsientoContable;
	public Boolean isPermisoBusquedaDetalleAsientoContable;
	public Boolean isPermisoReporteDetalleAsientoContable;
	public Boolean isPermisoPaginacionMedioDetalleAsientoContable;
	public Boolean isPermisoPaginacionAltoDetalleAsientoContable;
	public Boolean isPermisoPaginacionTodoDetalleAsientoContable;
	public Boolean isPermisoCopiarDetalleAsientoContable;
	public Boolean isPermisoVerFormDetalleAsientoContable;
	public Boolean isPermisoDuplicarDetalleAsientoContable;
	public Boolean isPermisoOrdenDetalleAsientoContable;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleAsientoContableParameterReturnGeneral detalleasientocontableReturnGeneral;
	public DetalleAsientoContableParameterReturnGeneral detalleasientocontableParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleAsientoContable=false;
	public Boolean esParaAccionDesdeFormularioDetalleAsientoContable=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleAsientoContableSessionBeanAdditional detalleasientocontableSessionBeanAdditional=null;
	
	public DetalleAsientoContableSessionBeanAdditional getDetalleAsientoContableSessionBeanAdditional() {
		return this.detalleasientocontableSessionBeanAdditional;
	}
	
	public void setDetalleAsientoContableSessionBeanAdditional(DetalleAsientoContableSessionBeanAdditional detalleasientocontableSessionBeanAdditional) {
		try {
			this.detalleasientocontableSessionBeanAdditional=detalleasientocontableSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleAsientoContableBeanSwingJInternalFrameAdditional detalleasientocontableBeanSwingJInternalFrameAdditional=null;
	//public class DetalleAsientoContableBeanSwingJInternalFrame
	
	public DetalleAsientoContableBeanSwingJInternalFrameAdditional getDetalleAsientoContableBeanSwingJInternalFrameAdditional() {
		return this.detalleasientocontableBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleAsientoContableBeanSwingJInternalFrameAdditional(DetalleAsientoContableBeanSwingJInternalFrameAdditional detalleasientocontableBeanSwingJInternalFrameAdditional) {
		try {
			this.detalleasientocontableBeanSwingJInternalFrameAdditional=detalleasientocontableBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleAsientoContableLogic detalleasientocontableLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleAsientoContable detalleasientocontableBean;
	public DetalleAsientoContableConstantesFunciones detalleasientocontableConstantesFunciones;
	//public DetalleAsientoContableParameterReturnGeneral detalleasientocontableReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public AsientoContableLogic asientocontableLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public CuentaContableLogic cuentacontableLogic;
	public CentroActividadLogic centroactividadLogic;
	public CentroCostoLogic centrocostoLogic;
	public TipoCambioLogic tipocambioLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleAsientoContable> detalleasientocontables;	
	//public List<DetalleAsientoContable> detalleasientocontablesEliminados;
	//public List<DetalleAsientoContable> detalleasientocontablesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleAsientoContable=true;
	public Boolean isVisibilidadCeldaCopiarDetalleAsientoContable=true;
	public Boolean isVisibilidadCeldaVerFormDetalleAsientoContable=true;
	public Boolean isVisibilidadCeldaOrdenDetalleAsientoContable=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaModificarDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaActualizarDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaEliminarDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaCancelarDetalleAsientoContable=false;
	public Boolean isVisibilidadCeldaGuardarDetalleAsientoContable=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCentroActividad=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCambio=false;
	
	public Long getiIdNuevoDetalleAsientoContable() {
		return this.iIdNuevoDetalleAsientoContable;
	}

	public void setiIdNuevoDetalleAsientoContable(Long iIdNuevoDetalleAsientoContable) {
		this.iIdNuevoDetalleAsientoContable = iIdNuevoDetalleAsientoContable;
	}
	
	public Long getidDetalleAsientoContableActual() {
		return this.idDetalleAsientoContableActual;
	}

	public void setidDetalleAsientoContableActual(Long idDetalleAsientoContableActual) {
		this.idDetalleAsientoContableActual = idDetalleAsientoContableActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleAsientoContable getdetalleasientocontable() {
		return this.detalleasientocontable;
	}

	public void setdetalleasientocontable(DetalleAsientoContable detalleasientocontable) {
		this.detalleasientocontable = detalleasientocontable;
	}
	
	public DetalleAsientoContable getdetalleasientocontableAux() {
		return this.detalleasientocontableAux;
	}

	public void setdetalleasientocontableAux(DetalleAsientoContable detalleasientocontableAux) {
		this.detalleasientocontableAux = detalleasientocontableAux;
	}				
	
	public DetalleAsientoContable getdetalleasientocontableAnterior() {
		return this.detalleasientocontableAnterior;
	}

	public void setdetalleasientocontableAnterior(DetalleAsientoContable detalleasientocontableAnterior) {
		this.detalleasientocontableAnterior = detalleasientocontableAnterior;
	}	
	
	public DetalleAsientoContable getdetalleasientocontableTotales() {
		return this.detalleasientocontableTotales;
	}

	public void setdetalleasientocontableTotales(DetalleAsientoContable detalleasientocontableTotales) {
		this.detalleasientocontableTotales = detalleasientocontableTotales;
	}	
	
	public DetalleAsientoContable getdetalleasientocontableBean() {
		return this.detalleasientocontableBean;
	}

	public void setdetalleasientocontableBean(DetalleAsientoContable detalleasientocontableBean) {
		this.detalleasientocontableBean = detalleasientocontableBean;
	}	
	
	public DetalleAsientoContableParameterReturnGeneral getdetalleasientocontableReturnGeneral() {
		return this.detalleasientocontableReturnGeneral;
	}

	public void setdetalleasientocontableReturnGeneral(DetalleAsientoContableParameterReturnGeneral detalleasientocontableReturnGeneral) {
		this.detalleasientocontableReturnGeneral = detalleasientocontableReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_centro_actividadFK_IdCentroActividad=null;

	public Long getid_centro_actividadFK_IdCentroActividad() {
		return this.id_centro_actividadFK_IdCentroActividad;
	}

	public void setid_centro_actividadFK_IdCentroActividad(Long id_centro_actividadFK_IdCentroActividad) {
		this.id_centro_actividadFK_IdCentroActividad = id_centro_actividadFK_IdCentroActividad;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contableFK_IdCuentaContable=-1L;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cambioFK_IdTipoCambio=null;

	public Long getid_tipo_cambioFK_IdTipoCambio() {
		return this.id_tipo_cambioFK_IdTipoCambio;
	}

	public void setid_tipo_cambioFK_IdTipoCambio(Long id_tipo_cambioFK_IdTipoCambio) {
		this.id_tipo_cambioFK_IdTipoCambio = id_tipo_cambioFK_IdTipoCambio;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleAsientoContableLogic getDetalleAsientoContableLogic()	{		
		return detalleasientocontableLogic;
	}

	public void setDetalleAsientoContableLogic(DetalleAsientoContableLogic detalleasientocontableLogic) {
		this.detalleasientocontableLogic = detalleasientocontableLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleAsientoContable() {
		return isEsNuevoDetalleAsientoContable;
	}

	public void setIsEsNuevoDetalleAsientoContable(Boolean isEsNuevoDetalleAsientoContable) {
		this.isEsNuevoDetalleAsientoContable = isEsNuevoDetalleAsientoContable;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleAsientoContable() {
		return esParaAccionDesdeFormularioDetalleAsientoContable;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleAsientoContable(Boolean esParaAccionDesdeFormularioDetalleAsientoContable) {
		this.esParaAccionDesdeFormularioDetalleAsientoContable = esParaAccionDesdeFormularioDetalleAsientoContable;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroActividadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centroactividadsForeignKey=new ArrayList<CentroActividad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroActividad centroactividadNulo = new CentroActividad();

			CentroActividadLogic centroactividadLogic=new CentroActividadLogic();

			//centroactividadLogic.getCentroActividadDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centroactividadLogic.getCentroActividadDataAccess().setIsForForeingKeyData(true);

					centroactividadLogic.getTodosCentroActividadsWithConnection(sFinalQuery,new Pagination());

					this.centroactividadsForeignKey=centroactividadLogic.getCentroActividads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centroactividadsForeignKey.add(0, centroactividadNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroActividad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centroactividadLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidCentroActividadActual());
					this.centroactividadsForeignKey.add(centroactividadLogic.getCentroActividad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCambiosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCambio tipocambioNulo = new TipoCambio();

			TipoCambioLogic tipocambioLogic=new TipoCambioLogic();

			//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocambioLogic.getTipoCambioDataAccess().setIsForForeingKeyData(true);

					tipocambioLogic.getTodosTipoCambiosWithConnection(sFinalQuery,new Pagination());

					this.tipocambiosForeignKey=tipocambioLogic.getTipoCambios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tipocambiosForeignKey.add(0, tipocambioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCambio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(detalleasientocontableSessionBean.getlidTipoCambioActual());
					this.tipocambiosForeignKey.add(tipocambioLogic.getTipoCambio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleAsientoContable.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleAsientoContableGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleAsientoContableGenerico!=null && jComboBoxid_empresaDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleAsientoContable.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleAsientoContableGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleAsientoContableGenerico!=null && jComboBoxid_sucursalDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableDetalleAsientoContableGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableDetalleAsientoContableGenerico!=null && jComboBoxid_asiento_contableDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleAsientoContable.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleAsientoContableGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleAsientoContableGenerico!=null && jComboBoxid_ejercicioDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleAsientoContable.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleAsientoContableGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleAsientoContableGenerico!=null && jComboBoxid_periodoDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleAsientoContable.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleAsientoContableGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleAsientoContableGenerico!=null && jComboBoxid_anioDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleAsientoContable.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleAsientoContableGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleAsientoContableGenerico!=null && jComboBoxid_mesDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableTemp!=null && jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable!=null) {
						jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.setSelectedItem(cuentacontableTemp);
					} else {
						if(jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable!=null) {
							//jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.setSelectedItem(cuentacontableTemp);
							if(jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.getItemCount()>0) {
								jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableDetalleAsientoContableGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableDetalleAsientoContableGenerico!=null && jComboBoxid_cuenta_contableDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroActividadForeignKey(Long idCentroActividadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centroactividadTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setCentroActividad(centroactividadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedItem(centroactividadTemp);
					}
				} else {
					//jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedItem(centroactividadTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCentroActividad") || sFormularioTipoBusqueda.equals("Todos")){
					if(centroactividadTemp!=null && jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable!=null) {
						jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.setSelectedItem(centroactividadTemp);
					} else {
						if(jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable!=null) {
							//jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.setSelectedItem(centroactividadTemp);
							if(jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.getItemCount()>0) {
								jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroActividadForeignKeyDescripcion(Long idCentroActividadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}


			sDescripcion=CentroActividadConstantesFunciones.getCentroActividadDescripcion(centroactividadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroActividadForeignKeyGenerico(Long idCentroActividadSeleccionado,JComboBox jComboBoxid_centro_actividadDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}

			if(centroactividadTemp!=null) {
				jComboBoxid_centro_actividadDetalleAsientoContableGenerico.setSelectedItem(centroactividadTemp);
			} else {
				if(jComboBoxid_centro_actividadDetalleAsientoContableGenerico!=null && jComboBoxid_centro_actividadDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_centro_actividadDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleAsientoContable.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleAsientoContableGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleAsientoContableGenerico!=null && jComboBoxid_centro_costoDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCambioForeignKey(Long idTipoCambioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocambioTemp!=null) {

					if(this.detalleasientocontable!=null) {
						this.detalleasientocontable.setTipoCambio(tipocambioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedItem(tipocambioTemp);
					}
				} else {
					//jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedItem(tipocambioTemp);
					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCambio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocambioTemp!=null && jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable!=null) {
						jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.setSelectedItem(tipocambioTemp);
					} else {
						if(jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable!=null) {
							//jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.setSelectedItem(tipocambioTemp);
							if(jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.getItemCount()>0) {
								jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCambioForeignKeyDescripcion(Long idTipoCambioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}


			sDescripcion=TipoCambioConstantesFunciones.getTipoCambioDescripcion(tipocambioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCambioForeignKeyGenerico(Long idTipoCambioSeleccionado,JComboBox jComboBoxid_tipo_cambioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioTemp=null;

			for(TipoCambio tipocambioAux:tipocambiosForeignKey) {
				if(tipocambioAux.getId()!=null && tipocambioAux.getId().equals(idTipoCambioSeleccionado)) {
					tipocambioTemp=tipocambioAux;
					break;
				}
			}

			if(tipocambioTemp!=null) {
				jComboBoxid_tipo_cambioDetalleAsientoContableGenerico.setSelectedItem(tipocambioTemp);
			} else {
				if(jComboBoxid_tipo_cambioDetalleAsientoContableGenerico!=null && jComboBoxid_tipo_cambioDetalleAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cambioDetalleAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_empresaDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleAsientoContableGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detalleasientocontable.setid_empresa(empresaAux.getId());
				detalleasientocontable.setempresa_descripcion(DetalleAsientoContableConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detalleasientocontable.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_sucursalDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleAsientoContableGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detalleasientocontable.setid_sucursal(sucursalAux.getId());
				detalleasientocontable.setsucursal_descripcion(DetalleAsientoContableConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detalleasientocontable.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_asiento_contableDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableDetalleAsientoContableGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				detalleasientocontable.setid_asiento_contable(asientocontableAux.getId());
				detalleasientocontable.setasientocontable_descripcion(DetalleAsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				detalleasientocontable.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_ejercicioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleAsientoContableGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detalleasientocontable.setid_ejercicio(ejercicioAux.getId());
				detalleasientocontable.setejercicio_descripcion(DetalleAsientoContableConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detalleasientocontable.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_periodoDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleAsientoContableGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detalleasientocontable.setid_periodo(periodoAux.getId());
				detalleasientocontable.setperiodo_descripcion(DetalleAsientoContableConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detalleasientocontable.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_anioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleAsientoContableGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detalleasientocontable.setid_anio(anioAux.getId());
				detalleasientocontable.setanio_descripcion(DetalleAsientoContableConstantesFunciones.getAnioDescripcion(anioAux));
				detalleasientocontable.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_mesDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleAsientoContableGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detalleasientocontable.setid_mes(mesAux.getId());
				detalleasientocontable.setmes_descripcion(DetalleAsientoContableConstantesFunciones.getMesDescripcion(mesAux));
				detalleasientocontable.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_cuenta_contableDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableDetalleAsientoContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				detalleasientocontable.setid_cuenta_contable(cuentacontableAux.getId());
				detalleasientocontable.setcuentacontable_descripcion(DetalleAsientoContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				detalleasientocontable.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroActividadForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_centro_actividadDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CentroActividad  centroactividadAux=new CentroActividad();

			if(jComboBoxid_centro_actividadDetalleAsientoContableGenerico==null) {
				centroactividadAux=(CentroActividad)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.getSelectedItem();
			} else {
				centroactividadAux=(CentroActividad)jComboBoxid_centro_actividadDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(centroactividadAux!=null) {
				detalleasientocontable.setid_centro_actividad(centroactividadAux.getId());
				detalleasientocontable.setcentroactividad_descripcion(DetalleAsientoContableConstantesFunciones.getCentroActividadDescripcion(centroactividadAux));
				detalleasientocontable.setCentroActividad(centroactividadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_centro_costoDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleAsientoContableGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detalleasientocontable.setid_centro_costo(centrocostoAux.getId());
				detalleasientocontable.setcentrocosto_descripcion(DetalleAsientoContableConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detalleasientocontable.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCambioForeignKey(DetalleAsientoContable detalleasientocontable,JComboBox jComboBoxid_tipo_cambioDetalleAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoCambio  tipocambioAux=new TipoCambio();

			if(jComboBoxid_tipo_cambioDetalleAsientoContableGenerico==null) {
				tipocambioAux=(TipoCambio)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.getSelectedItem();
			} else {
				tipocambioAux=(TipoCambio)jComboBoxid_tipo_cambioDetalleAsientoContableGenerico.getSelectedItem();
			}

			if(tipocambioAux!=null) {
				detalleasientocontable.setid_tipo_cambio(tipocambioAux.getId());
				detalleasientocontable.settipocambio_descripcion(DetalleAsientoContableConstantesFunciones.getTipoCambioDescripcion(tipocambioAux));
				detalleasientocontable.setTipoCambio(tipocambioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.addItem(asientocontable);
							}
						}

						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.addItem(cuentacontable);
							}
						}

						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroActividadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroActividad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.removeAllItems();

							for(CentroActividad centroactividad:this.centroactividadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.addItem(centroactividad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroActividad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.removeAllItems();

							for(CentroActividad centroactividad:this.centroactividadsForeignKey) {
								this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.addItem(centroactividad);
							}
						}

						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.addItem(centrocosto);
							}
						}

						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCambiosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCambio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.addItem(tipocambio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { 
					}

					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCambio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.removeAllItems();

							for(TipoCambio tipocambio:this.tipocambiosForeignKey) {
								this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.addItem(tipocambio);
							}
						}

						if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.setSelectedItem(cuentacontable);
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroActividadForeignKey(CentroActividad centroactividad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedItem(centroactividad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.setSelectedItem(centroactividad);
						} else {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCambioForeignKey(TipoCambio tipocambio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedItem(tipocambio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.setSelectedItem(tipocambio);
						} else {
							this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleAsientoContable() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleAsientoContableConstantesFunciones.refrescarForeignKeysDescripcionesDetalleAsientoContable(this.detalleasientocontableLogic.getDetalleAsientoContables());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleAsientoContableConstantesFunciones.refrescarForeignKeysDescripcionesDetalleAsientoContable(this.detalleasientocontables);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(CentroActividad.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(TipoCambio.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detalleasientocontableLogic.setDetalleAsientoContables(this.detalleasientocontables);
			detalleasientocontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleAsientoContableParameterReturnGeneral getDetalleAsientoContableParameterGeneral() {
		return this.detalleasientocontableParameterGeneral;
	}
	
	public void setDetalleAsientoContableParameterGeneral(DetalleAsientoContableParameterReturnGeneral detalleasientocontableParameterGeneral) {
		this.detalleasientocontableParameterGeneral = detalleasientocontableParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleAsientoContable() {
		return isPermisoTodoDetalleAsientoContable;
	}

	public void setIsPermisoTodoDetalleAsientoContable(Boolean isPermisoTodoDetalleAsientoContable) {
		this.isPermisoTodoDetalleAsientoContable = isPermisoTodoDetalleAsientoContable;
	}

	public Boolean getIsPermisoNuevoDetalleAsientoContable() {
		return isPermisoNuevoDetalleAsientoContable;
	}

	public void setIsPermisoNuevoDetalleAsientoContable(Boolean isPermisoNuevoDetalleAsientoContable) {
		this.isPermisoNuevoDetalleAsientoContable = isPermisoNuevoDetalleAsientoContable;
	}

	public Boolean getIsPermisoActualizarDetalleAsientoContable() {
		return isPermisoActualizarDetalleAsientoContable;
	}

	public void setIsPermisoActualizarDetalleAsientoContable(Boolean isPermisoActualizarDetalleAsientoContable) {
		this.isPermisoActualizarDetalleAsientoContable = isPermisoActualizarDetalleAsientoContable;
	}

	public Boolean getIsPermisoEliminarDetalleAsientoContable() {
		return isPermisoEliminarDetalleAsientoContable;
	}

	public void setIsPermisoEliminarDetalleAsientoContable(Boolean isPermisoEliminarDetalleAsientoContable) {
		this.isPermisoEliminarDetalleAsientoContable = isPermisoEliminarDetalleAsientoContable;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleAsientoContable() {
		return isPermisoGuardarCambiosDetalleAsientoContable;
	}

	public void setIsPermisoGuardarCambiosDetalleAsientoContable(Boolean isPermisoGuardarCambiosDetalleAsientoContable) {
		this.isPermisoGuardarCambiosDetalleAsientoContable = isPermisoGuardarCambiosDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoConsultaDetalleAsientoContable() {
		return isPermisoConsultaDetalleAsientoContable;
	}

	public void setIsPermisoConsultaDetalleAsientoContable(Boolean isPermisoConsultaDetalleAsientoContable) {
		this.isPermisoConsultaDetalleAsientoContable = isPermisoConsultaDetalleAsientoContable;
	}

	public Boolean getIsPermisoBusquedaDetalleAsientoContable() {
		return isPermisoBusquedaDetalleAsientoContable;
	}

	public void setIsPermisoBusquedaDetalleAsientoContable(Boolean isPermisoBusquedaDetalleAsientoContable) {
		this.isPermisoBusquedaDetalleAsientoContable = isPermisoBusquedaDetalleAsientoContable;
	}

	public Boolean getIsPermisoReporteDetalleAsientoContable() {
		return isPermisoReporteDetalleAsientoContable;
	}

	public void setIsPermisoReporteDetalleAsientoContable(Boolean isPermisoReporteDetalleAsientoContable) {
		this.isPermisoReporteDetalleAsientoContable = isPermisoReporteDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleAsientoContable() {
		return isPermisoPaginacionMedioDetalleAsientoContable;
	}

	public void setIsPermisoPaginacionMedioDetalleAsientoContable(Boolean isPermisoPaginacionMedioDetalleAsientoContable) {
		this.isPermisoPaginacionMedioDetalleAsientoContable = isPermisoPaginacionMedioDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleAsientoContable() {
		return isPermisoPaginacionTodoDetalleAsientoContable;
	}

	public void setIsPermisoPaginacionTodoDetalleAsientoContable(Boolean isPermisoPaginacionTodoDetalleAsientoContable) {
		this.isPermisoPaginacionTodoDetalleAsientoContable = isPermisoPaginacionTodoDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleAsientoContable() {
		return isPermisoPaginacionAltoDetalleAsientoContable;
	}

	public void setIsPermisoPaginacionAltoDetalleAsientoContable(Boolean isPermisoPaginacionAltoDetalleAsientoContable) {
		this.isPermisoPaginacionAltoDetalleAsientoContable = isPermisoPaginacionAltoDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoCopiarDetalleAsientoContable() {
		return isPermisoCopiarDetalleAsientoContable;
	}

	public void setIsPermisoCopiarDetalleAsientoContable(Boolean isPermisoCopiarDetalleAsientoContable) {
		this.isPermisoCopiarDetalleAsientoContable = isPermisoCopiarDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoVerFormDetalleAsientoContable() {
		return isPermisoVerFormDetalleAsientoContable;
	}

	public void setIsPermisoVerFormDetalleAsientoContable(Boolean isPermisoVerFormDetalleAsientoContable) {
		this.isPermisoVerFormDetalleAsientoContable = isPermisoVerFormDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoDuplicarDetalleAsientoContable() {
		return isPermisoDuplicarDetalleAsientoContable;
	}

	public void setIsPermisoDuplicarDetalleAsientoContable(Boolean isPermisoDuplicarDetalleAsientoContable) {
		this.isPermisoDuplicarDetalleAsientoContable = isPermisoDuplicarDetalleAsientoContable;
	}
	
	public Boolean getIsPermisoOrdenDetalleAsientoContable() {
		return isPermisoOrdenDetalleAsientoContable;
	}

	public void setIsPermisoOrdenDetalleAsientoContable(Boolean isPermisoOrdenDetalleAsientoContable) {
		this.isPermisoOrdenDetalleAsientoContable = isPermisoOrdenDetalleAsientoContable;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleAsientoContable() {
		return isVisibilidadCeldaNuevoDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaNuevoDetalleAsientoContable(Boolean isVisibilidadCeldaNuevoDetalleAsientoContable) {
		this.isVisibilidadCeldaNuevoDetalleAsientoContable = isVisibilidadCeldaNuevoDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleAsientoContable() {
		return isVisibilidadCeldaDuplicarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleAsientoContable(Boolean isVisibilidadCeldaDuplicarDetalleAsientoContable) {
		this.isVisibilidadCeldaDuplicarDetalleAsientoContable = isVisibilidadCeldaDuplicarDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleAsientoContable() {
		return isVisibilidadCeldaCopiarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaCopiarDetalleAsientoContable(Boolean isVisibilidadCeldaCopiarDetalleAsientoContable) {
		this.isVisibilidadCeldaCopiarDetalleAsientoContable = isVisibilidadCeldaCopiarDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleAsientoContable() {
		return isVisibilidadCeldaVerFormDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaVerFormDetalleAsientoContable(Boolean isVisibilidadCeldaVerFormDetalleAsientoContable) {
		this.isVisibilidadCeldaVerFormDetalleAsientoContable = isVisibilidadCeldaVerFormDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleAsientoContable() {
		return isVisibilidadCeldaOrdenDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaOrdenDetalleAsientoContable(Boolean isVisibilidadCeldaOrdenDetalleAsientoContable) {
		this.isVisibilidadCeldaOrdenDetalleAsientoContable = isVisibilidadCeldaOrdenDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleAsientoContable() {
		return isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleAsientoContable(Boolean isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable = isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleAsientoContable() {
		return isVisibilidadCeldaModificarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaModificarDetalleAsientoContable(Boolean isVisibilidadCeldaModificarDetalleAsientoContable) {
		this.isVisibilidadCeldaModificarDetalleAsientoContable = isVisibilidadCeldaModificarDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleAsientoContable() {
		return isVisibilidadCeldaActualizarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaActualizarDetalleAsientoContable(Boolean isVisibilidadCeldaActualizarDetalleAsientoContable) {
		this.isVisibilidadCeldaActualizarDetalleAsientoContable = isVisibilidadCeldaActualizarDetalleAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleAsientoContable() {
		return isVisibilidadCeldaEliminarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaEliminarDetalleAsientoContable(Boolean isVisibilidadCeldaEliminarDetalleAsientoContable) {
		this.isVisibilidadCeldaEliminarDetalleAsientoContable = isVisibilidadCeldaEliminarDetalleAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleAsientoContable() {
		return isVisibilidadCeldaCancelarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaCancelarDetalleAsientoContable(Boolean isVisibilidadCeldaCancelarDetalleAsientoContable) {
		this.isVisibilidadCeldaCancelarDetalleAsientoContable = isVisibilidadCeldaCancelarDetalleAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleAsientoContable() {
		return isVisibilidadCeldaGuardarDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaGuardarDetalleAsientoContable(Boolean isVisibilidadCeldaGuardarDetalleAsientoContable) {
		this.isVisibilidadCeldaGuardarDetalleAsientoContable = isVisibilidadCeldaGuardarDetalleAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleAsientoContable() {
		return isVisibilidadCeldaGuardarCambiosDetalleAsientoContable;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleAsientoContable(Boolean isVisibilidadCeldaGuardarCambiosDetalleAsientoContable) {
		this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable = isVisibilidadCeldaGuardarCambiosDetalleAsientoContable;
	}
		
	public DetalleAsientoContableSessionBean getdetalleasientocontableSessionBean() {
		return this.detalleasientocontableSessionBean;
	}
	
	public void setdetalleasientocontableSessionBean(DetalleAsientoContableSessionBean detalleasientocontableSessionBean) {
		this.detalleasientocontableSessionBean=detalleasientocontableSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCentroActividad() {
		return this.isVisibilidadFK_IdCentroActividad;
	}

	public void setisVisibilidadFK_IdCentroActividad(Boolean isVisibilidadFK_IdCentroActividad) {
		this.isVisibilidadFK_IdCentroActividad=isVisibilidadFK_IdCentroActividad;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCambio() {
		return this.isVisibilidadFK_IdTipoCambio;
	}

	public void setisVisibilidadFK_IdTipoCambio(Boolean isVisibilidadFK_IdTipoCambio) {
		this.isVisibilidadFK_IdTipoCambio=isVisibilidadFK_IdTipoCambio;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(DetalleAsientoContable detalleasientocontable)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarSucursalForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarAsientoContableForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarEjercicioForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarPeriodoForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarAnioForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarMesForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarCuentaContableForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarCentroActividadForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarCentroCostoForeignKey(detalleasientocontable,null);
				this.setActualParaGuardarTipoCambioForeignKey(detalleasientocontable,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(DetalleAsientoContable detalleasientocontable,DetalleAsientoContable detalleasientocontableAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleAsientoContable(detalleasientocontable);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detalleasientocontableAux.setId(detalleasientocontable.getId());
		detalleasientocontableAux.setVersionRow(detalleasientocontable.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleAsientoContable();
		
			int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detalleasientocontableValidator.getInvalidValues(this.detalleasientocontable);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detalleasientocontableLogic.setDatosCliente(datosCliente);
			detalleasientocontableLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detalleasientocontableAux=new  DetalleAsientoContable();
				
				detalleasientocontableAux.setIsNew(true);
				detalleasientocontableAux.setIsChanged(true);
				
				detalleasientocontableAux.setDetalleAsientoContableOriginal(this.detalleasientocontable);
				
				detalleasientocontableAux.setId(this.detalleasientocontable.getId());	
				detalleasientocontableAux.setVersionRow(this.detalleasientocontable.getVersionRow());	
				detalleasientocontableAux.setid_empresa(this.detalleasientocontable.getid_empresa());	
				detalleasientocontableAux.setid_sucursal(this.detalleasientocontable.getid_sucursal());	
				detalleasientocontableAux.setid_asiento_contable(this.detalleasientocontable.getid_asiento_contable());	
				detalleasientocontableAux.setnumero_documento(this.detalleasientocontable.getnumero_documento());	
				detalleasientocontableAux.setid_ejercicio(this.detalleasientocontable.getid_ejercicio());	
				detalleasientocontableAux.setid_periodo(this.detalleasientocontable.getid_periodo());	
				detalleasientocontableAux.setid_anio(this.detalleasientocontable.getid_anio());	
				detalleasientocontableAux.setid_mes(this.detalleasientocontable.getid_mes());	
				detalleasientocontableAux.setid_cuenta_contable(this.detalleasientocontable.getid_cuenta_contable());	
				detalleasientocontableAux.setdebito_local(this.detalleasientocontable.getdebito_local());	
				detalleasientocontableAux.setcredito_local(this.detalleasientocontable.getcredito_local());	
				detalleasientocontableAux.setdebito_extran(this.detalleasientocontable.getdebito_extran());	
				detalleasientocontableAux.setcredito_extran(this.detalleasientocontable.getcredito_extran());	
				
				if(this.detalleasientocontable.getid_centro_actividad()!=null && this.detalleasientocontable.getid_centro_actividad()>0L) {
					detalleasientocontableAux.setid_centro_actividad(this.detalleasientocontable.getid_centro_actividad());
				} else {
					detalleasientocontableAux.setid_centro_actividad(null);
				}	
				
				if(this.detalleasientocontable.getid_centro_costo()!=null && this.detalleasientocontable.getid_centro_costo()>0L) {
					detalleasientocontableAux.setid_centro_costo(this.detalleasientocontable.getid_centro_costo());
				} else {
					detalleasientocontableAux.setid_centro_costo(null);
				}	
				detalleasientocontableAux.setcotizacion(this.detalleasientocontable.getcotizacion());	
				detalleasientocontableAux.setdetalle(this.detalleasientocontable.getdetalle());	
				
				if(this.detalleasientocontable.getid_tipo_cambio()!=null && this.detalleasientocontable.getid_tipo_cambio()>0L) {
					detalleasientocontableAux.setid_tipo_cambio(this.detalleasientocontable.getid_tipo_cambio());
				} else {
					detalleasientocontableAux.setid_tipo_cambio(null);
				}	
				detalleasientocontableAux.setcon_centro_costo(this.detalleasientocontable.getcon_centro_costo());	
				detalleasientocontableAux.setfecha(this.detalleasientocontable.getfecha());	
				detalleasientocontableAux.setnumero_deposito(this.detalleasientocontable.getnumero_deposito());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleasientocontableAux,detalleasientocontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.saveDetalleAsientoContables();//WithConnection
						//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);
					
					this.refrescarForeignKeysDescripcionesDetalleAsientoContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleasientocontableLogic.saveDetalleAsientoContableRelaciones(detalleasientocontableAux);//WithConnection
								//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleasientocontableAux,detalleasientocontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detalleasientocontableAux=new  DetalleAsientoContable();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado() 
					|| (this.detalleasientocontableSessionBean.getEsGuardarRelacionado() && this.detalleasientocontable.getId()>=0)) {
						
					detalleasientocontableAux.setIsNew(false);
				}
				
				detalleasientocontableAux.setIsDeleted(false);
			
				detalleasientocontableAux.setId(this.detalleasientocontable.getId());	
				detalleasientocontableAux.setVersionRow(this.detalleasientocontable.getVersionRow());	
				detalleasientocontableAux.setid_empresa(this.detalleasientocontable.getid_empresa());	
				detalleasientocontableAux.setid_sucursal(this.detalleasientocontable.getid_sucursal());	
				detalleasientocontableAux.setid_asiento_contable(this.detalleasientocontable.getid_asiento_contable());	
				detalleasientocontableAux.setnumero_documento(this.detalleasientocontable.getnumero_documento());	
				detalleasientocontableAux.setid_ejercicio(this.detalleasientocontable.getid_ejercicio());	
				detalleasientocontableAux.setid_periodo(this.detalleasientocontable.getid_periodo());	
				detalleasientocontableAux.setid_anio(this.detalleasientocontable.getid_anio());	
				detalleasientocontableAux.setid_mes(this.detalleasientocontable.getid_mes());	
				detalleasientocontableAux.setid_cuenta_contable(this.detalleasientocontable.getid_cuenta_contable());	
				detalleasientocontableAux.setdebito_local(this.detalleasientocontable.getdebito_local());	
				detalleasientocontableAux.setcredito_local(this.detalleasientocontable.getcredito_local());	
				detalleasientocontableAux.setdebito_extran(this.detalleasientocontable.getdebito_extran());	
				detalleasientocontableAux.setcredito_extran(this.detalleasientocontable.getcredito_extran());	
				
				if(this.detalleasientocontable.getid_centro_actividad()!=null && this.detalleasientocontable.getid_centro_actividad()>0L) {
					detalleasientocontableAux.setid_centro_actividad(this.detalleasientocontable.getid_centro_actividad());
				} else {
					detalleasientocontableAux.setid_centro_actividad(null);
				}	
				
				if(this.detalleasientocontable.getid_centro_costo()!=null && this.detalleasientocontable.getid_centro_costo()>0L) {
					detalleasientocontableAux.setid_centro_costo(this.detalleasientocontable.getid_centro_costo());
				} else {
					detalleasientocontableAux.setid_centro_costo(null);
				}	
				detalleasientocontableAux.setcotizacion(this.detalleasientocontable.getcotizacion());	
				detalleasientocontableAux.setdetalle(this.detalleasientocontable.getdetalle());	
				
				if(this.detalleasientocontable.getid_tipo_cambio()!=null && this.detalleasientocontable.getid_tipo_cambio()>0L) {
					detalleasientocontableAux.setid_tipo_cambio(this.detalleasientocontable.getid_tipo_cambio());
				} else {
					detalleasientocontableAux.setid_tipo_cambio(null);
				}	
				detalleasientocontableAux.setcon_centro_costo(this.detalleasientocontable.getcon_centro_costo());	
				detalleasientocontableAux.setfecha(this.detalleasientocontable.getfecha());	
				detalleasientocontableAux.setnumero_deposito(this.detalleasientocontable.getnumero_deposito());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleasientocontableAux,detalleasientocontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.saveDetalleAsientoContables();//WithConnection
						//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);
					
					this.refrescarForeignKeysDescripcionesDetalleAsientoContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleasientocontableLogic.saveDetalleAsientoContableRelaciones(detalleasientocontableAux);//WithConnection
								//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalleasientocontableAux,detalleasientocontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalleasientocontable,detalleasientocontableAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detalleasientocontableAux=new  DetalleAsientoContable();
				
				detalleasientocontableAux.setIsNew(false);
				detalleasientocontableAux.setIsChanged(false);
				
				detalleasientocontableAux.setIsDeleted(true);
				
				detalleasientocontableAux.setId(this.detalleasientocontable.getId());	
				detalleasientocontableAux.setVersionRow(this.detalleasientocontable.getVersionRow());	
				detalleasientocontableAux.setid_empresa(this.detalleasientocontable.getid_empresa());	
				detalleasientocontableAux.setid_sucursal(this.detalleasientocontable.getid_sucursal());	
				detalleasientocontableAux.setid_asiento_contable(this.detalleasientocontable.getid_asiento_contable());	
				detalleasientocontableAux.setnumero_documento(this.detalleasientocontable.getnumero_documento());	
				detalleasientocontableAux.setid_ejercicio(this.detalleasientocontable.getid_ejercicio());	
				detalleasientocontableAux.setid_periodo(this.detalleasientocontable.getid_periodo());	
				detalleasientocontableAux.setid_anio(this.detalleasientocontable.getid_anio());	
				detalleasientocontableAux.setid_mes(this.detalleasientocontable.getid_mes());	
				detalleasientocontableAux.setid_cuenta_contable(this.detalleasientocontable.getid_cuenta_contable());	
				detalleasientocontableAux.setdebito_local(this.detalleasientocontable.getdebito_local());	
				detalleasientocontableAux.setcredito_local(this.detalleasientocontable.getcredito_local());	
				detalleasientocontableAux.setdebito_extran(this.detalleasientocontable.getdebito_extran());	
				detalleasientocontableAux.setcredito_extran(this.detalleasientocontable.getcredito_extran());	
				
				if(this.detalleasientocontable.getid_centro_actividad()!=null && this.detalleasientocontable.getid_centro_actividad()>0L) {
					detalleasientocontableAux.setid_centro_actividad(this.detalleasientocontable.getid_centro_actividad());
				} else {
					detalleasientocontableAux.setid_centro_actividad(null);
				}	
				
				if(this.detalleasientocontable.getid_centro_costo()!=null && this.detalleasientocontable.getid_centro_costo()>0L) {
					detalleasientocontableAux.setid_centro_costo(this.detalleasientocontable.getid_centro_costo());
				} else {
					detalleasientocontableAux.setid_centro_costo(null);
				}	
				detalleasientocontableAux.setcotizacion(this.detalleasientocontable.getcotizacion());	
				detalleasientocontableAux.setdetalle(this.detalleasientocontable.getdetalle());	
				
				if(this.detalleasientocontable.getid_tipo_cambio()!=null && this.detalleasientocontable.getid_tipo_cambio()>0L) {
					detalleasientocontableAux.setid_tipo_cambio(this.detalleasientocontable.getid_tipo_cambio());
				} else {
					detalleasientocontableAux.setid_tipo_cambio(null);
				}	
				detalleasientocontableAux.setcon_centro_costo(this.detalleasientocontable.getcon_centro_costo());	
				detalleasientocontableAux.setfecha(this.detalleasientocontable.getfecha());	
				detalleasientocontableAux.setnumero_deposito(this.detalleasientocontable.getnumero_deposito());	
				
				if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detalleasientocontableAux.getId()>=0) {	
						this.detalleasientocontablesEliminados.add(detalleasientocontableAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleasientocontableAux,detalleasientocontables);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.saveDetalleAsientoContables();//WithConnection
						//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalleasientocontableLogic.saveDetalleAsientoContableRelaciones(detalleasientocontableAux);//WithConnection
								//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detalleasientocontableAux,detalleasientocontableLogic.getDetalleAsientoContables());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detalleasientocontableAux,detalleasientocontables);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getDetalleAsientoContables().addAll(this.detalleasientocontablesEliminados);
					
					detalleasientocontableLogic.saveDetalleAsientoContables();//WithConnection
					//detalleasientocontableLogic.getSetVersionRowDetalleAsientoContables();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleAsientoContable();
				
				this.detalleasientocontablesEliminados= new ArrayList<DetalleAsientoContable>();		
			}
			
			if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(detalleasientocontableLogic.getDetalleAsientoContables());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(this.detalleasientocontables);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Asiento Contable GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detalleasientocontable=detalleasientocontableAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleAsientoContable();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleAsientoContable detalleasientocontableLocal) throws Exception {
		
		if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleAsientoContable detalleasientocontableLocal) throws Exception {	
		if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detalleasientocontableLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detalleasientocontableLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				detalleasientocontableLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detalleasientocontableLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detalleasientocontableLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detalleasientocontableLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detalleasientocontableLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				detalleasientocontableLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroActividadDetalleFormJInternalFrame.class)) {
				CentroActividadBeanSwingJInternalFrame centroactividadBeanSwingJInternalFrameLocal=(CentroActividadBeanSwingJInternalFrame) ((CentroActividadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centroactividadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroActividad(centroactividadBeanSwingJInternalFrameLocal.getcentroactividad(),true);
				centroactividadBeanSwingJInternalFrameLocal.actualizarLista(centroactividadBeanSwingJInternalFrameLocal.centroactividad,this.centroactividadsForeignKey);

				centroactividadBeanSwingJInternalFrameLocal.actualizarRelaciones(centroactividadBeanSwingJInternalFrameLocal.centroactividad);

				detalleasientocontableLocal.setCentroActividad(centroactividadBeanSwingJInternalFrameLocal.centroactividad);

				this.addItemDefectoCombosForeignKeyCentroActividad();
				this.cargarCombosFrameCentroActividadsForeignKey("Formulario");
				this.setActualCentroActividadForeignKey(centroactividadBeanSwingJInternalFrameLocal.centroactividad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detalleasientocontableLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCambioDetalleFormJInternalFrame.class)) {
				TipoCambioBeanSwingJInternalFrame tipocambioBeanSwingJInternalFrameLocal=(TipoCambioBeanSwingJInternalFrame) ((TipoCambioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocambioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCambio(tipocambioBeanSwingJInternalFrameLocal.gettipocambio(),true);
				tipocambioBeanSwingJInternalFrameLocal.actualizarLista(tipocambioBeanSwingJInternalFrameLocal.tipocambio,this.tipocambiosForeignKey);

				tipocambioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				detalleasientocontableLocal.setTipoCambio(tipocambioBeanSwingJInternalFrameLocal.tipocambio);

				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey("Formulario");
				this.setActualTipoCambioForeignKey(tipocambioBeanSwingJInternalFrameLocal.tipocambio.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleAsientoContableActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detalleasientocontableValidator.getInvalidValues(this.detalleasientocontable);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleAsientoContable detalleasientocontable,List<DetalleAsientoContable> detalleasientocontables) throws Exception {
		try	{		
			DetalleAsientoContableConstantesFunciones.actualizarLista(detalleasientocontable,detalleasientocontables,this.detalleasientocontableSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleAsientoContable detalleasientocontable,List<DetalleAsientoContable> detalleasientocontables) throws Exception {
		try	{			
			DetalleAsientoContableConstantesFunciones.actualizarSelectedLista(detalleasientocontable,detalleasientocontables);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleAsientoContable> detalleasientocontablesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detalleasientocontablesLocal=this.detalleasientocontableLogic.getDetalleAsientoContables();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detalleasientocontablesLocal=this.detalleasientocontables;
			}
			//ARCHITECTURE
		
			for(DetalleAsientoContable detalleasientocontableLocal:detalleasientocontablesLocal) {
				if(this.permiteMantenimiento(detalleasientocontableLocal) && detalleasientocontableLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleAsientoContableConstantesFunciones.getDetalleAsientoContableLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_empresaDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_sucursalDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_asiento_contableDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.NUMERODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelnumero_documentoDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_ejercicioDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_periodoDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_anioDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_mesDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_cuenta_contableDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.DEBITOLOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_localDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.CREDITOLOCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_localDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.DEBITOEXTRAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_extranDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.CREDITOEXTRAN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_extranDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDCENTROACTIVIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_centro_actividadDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_centro_costoDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcotizacionDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.DETALLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldetalleDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.IDTIPOCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_tipo_cambioDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.CONCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcon_centro_costoDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelfechaDetalleAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleAsientoContableConstantesFunciones.NUMERODEPOSITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelnumero_depositoDetalleAsientoContable,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_empresaDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_sucursalDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_asiento_contableDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelnumero_documentoDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_ejercicioDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_periodoDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_anioDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_mesDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_cuenta_contableDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_localDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_localDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_extranDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_extranDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_centro_actividadDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_centro_costoDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcotizacionDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldetalleDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelid_tipo_cambioDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcon_centro_costoDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelfechaDetalleAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelnumero_depositoDetalleAsientoContable,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleAsientoContable--;	
		
		
		this.detalleasientocontableAux=new DetalleAsientoContable();
		
		this.detalleasientocontableAux.setId(this.iIdNuevoDetalleAsientoContable);
		this.detalleasientocontableAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalleasientocontableLogic.getDetalleAsientoContables().add(this.detalleasientocontableAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detalleasientocontables.add(this.detalleasientocontableAux);
		}
		//ARCHITECTURE
		
		this.detalleasientocontable=this.detalleasientocontableAux;
		
		if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontable);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleAsientoContable(this.detalleasientocontable);
		}
				
		//this.setDefaultControlesDetalleAsientoContable();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleAsientoContable();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleAsientoContable();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleAsientoContable();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleAsientoContable(this.detalleasientocontableBean,this.detalleasientocontable,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
			classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detalleasientocontableReturnGeneral=detalleasientocontableLogic.procesarEventosDetalleAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleasientocontableLogic.getDetalleAsientoContables(),this.detalleasientocontable,this.detalleasientocontableParameterGeneral,this.isEsNuevoDetalleAsientoContable,classes);//this.detalleasientocontableLogic.getDetalleAsientoContable()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleAsientoContable(this.detalleasientocontableReturnGeneral,this.detalleasientocontableBean,false);
		
		if(this.detalleasientocontableReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable());
		}
		
		if(this.detalleasientocontableReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable(),classes);//this.detalleasientocontableBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleAsientoContable();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleAsientoContable();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.RecargarFormDetalleAsientoContable(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleAsientoContable(false);
						
			if(detalleasientocontableSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleAsientoContable();
			}
			
			this.actualizarVisualTableDatosDetalleAsientoContable();
			
			this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(this.getIndiceNuevoDetalleAsientoContable(), this.getIndiceNuevoDetalleAsientoContable());
			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
						
			this.actualizarEstadoCeldasBotonesDetalleAsientoContable("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleAsientoContable(Boolean isHabilitar) throws Exception {
		//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarnumero_documentoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activardebito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarcredito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activardebito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarcredito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarcotizacionDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activardetalleDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxcon_centro_costoDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarcon_centro_costoDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jDateChooserfechaDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarfechaDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_depositoDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarnumero_depositoDetalleAsientoContable);	
		//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_empresaDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_sucursalDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_asiento_contableDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_ejercicioDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_periodoDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_anioDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_mesDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_cuenta_contableDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_centro_actividadDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_centro_costoDetalleAsientoContable);//
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setEnabled(isHabilitar && this.detalleasientocontableConstantesFunciones.activarid_tipo_cambioDetalleAsientoContable);
	};
	
	public void setDefaultControlesDetalleAsientoContable() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleAsientoContable(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detalleasientocontableSessionBean.setConGuardarRelaciones(true);			
			this.detalleasientocontableSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.setVisible(true);
			
					
		} else {
			//this.detalleasientocontableSessionBean.setConGuardarRelaciones(false);			
			this.detalleasientocontableSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleAsientoContable() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
				if(detalleasientocontableAux.getId().equals(this.iIdNuevoDetalleAsientoContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontables) {
				if(detalleasientocontableAux.getId().equals(this.iIdNuevoDetalleAsientoContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
				if(detalleasientocontableAux.getId().equals(detalleasientocontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontables) {
				if(detalleasientocontableAux.getId().equals(detalleasientocontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleAsientoContable(DetalleAsientoContable detalleasientocontableOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
				if(detalleasientocontableAux.getDetalleAsientoContableOriginal().getId().equals(detalleasientocontableOriginal.getId())) {
					existe=true;
					detalleasientocontableOriginal.setId(detalleasientocontableAux.getId());
					detalleasientocontableOriginal.setVersionRow(detalleasientocontableAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontables) {
				if(detalleasientocontableAux.getDetalleAsientoContableOriginal().getId().equals(detalleasientocontableOriginal.getId())) {
					existe=true;
					detalleasientocontableOriginal.setId(detalleasientocontableAux.getId());
					detalleasientocontableOriginal.setVersionRow(detalleasientocontableAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleAsientoContable(Boolean esParaCancelar) throws Exception {
		detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
		detalleasientocontableAux=new DetalleAsientoContable();
		
		if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
					if(detalleasientocontableAux.getId()<0) {
						detalleasientocontablesAux.add(detalleasientocontableAux);
					}		
				}
				this.iIdNuevoDetalleAsientoContable=0L;
				this.detalleasientocontableLogic.getDetalleAsientoContables().removeAll(detalleasientocontablesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontables) {
					if(detalleasientocontableAux.getId()<0) {
						detalleasientocontablesAux.add(detalleasientocontableAux);
					}		
				}
				this.iIdNuevoDetalleAsientoContable=0L;
				this.detalleasientocontables.removeAll(detalleasientocontablesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleAsientoContable 
					&& this.detalleasientocontableLogic.getDetalleAsientoContables().size()>0
					) {
					detalleasientocontableAux=this.detalleasientocontableLogic.getDetalleAsientoContables().get(this.detalleasientocontableLogic.getDetalleAsientoContables().size() - 1);
				
					if(detalleasientocontableAux.getId()<0) {
						this.detalleasientocontableLogic.getDetalleAsientoContables().remove(detalleasientocontableAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleAsientoContable && this.detalleasientocontables.size()>0) {
					detalleasientocontableAux=this.detalleasientocontables.get(this.detalleasientocontables.size() - 1);
				
					if(detalleasientocontableAux.getId()<0) {
						this.detalleasientocontables.remove(detalleasientocontableAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleAsientoContable(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detalleasientocontable.getId()<0) {
				this.detalleasientocontableLogic.getDetalleAsientoContables().remove(this.detalleasientocontable);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detalleasientocontable.getId()<0) {
				this.detalleasientocontables.remove(this.detalleasientocontable);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleAsientoContable(List<DetalleAsientoContable> detalleasientocontablesAux) throws Exception {
		DetalleAsientoContableConstantesFunciones.setEstadosInicialesDetalleAsientoContable(detalleasientocontablesAux);
	}
	
	public void setEstadosInicialesDetalleAsientoContable(DetalleAsientoContable detalleasientocontableAux) throws Exception {
		DetalleAsientoContableConstantesFunciones.setEstadosInicialesDetalleAsientoContable(detalleasientocontableAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleAsientoContableActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleAsientoContableActual()) {
				if(!this.isEsNuevoDetalleAsientoContable) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleAsientoContable=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleAsientoContableActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Asiento Contable ?", "MANTENIMIENTO DE Detalle Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleAsientoContable detalleasientocontable) throws Exception {
		DetalleAsientoContableConstantesFunciones.seleccionarAsignar(this.detalleasientocontable,detalleasientocontable);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleAsientoContable=this.isPermisoActualizarOriginalDetalleAsientoContable;
			
			
			this.seleccionarAsignar(detalleasientocontable);
			
			

			idAsientoContableActual=detalleasientocontable.getid_asiento_contable();
			this.seleccionarAsientoContableActual();

			idCuentaContableActual=detalleasientocontable.getid_cuenta_contable();
			this.seleccionarCuentaContableActual();

			idCentroCostoActual=detalleasientocontable.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idTipoCambioActual=detalleasientocontable.getid_tipo_cambio();
			this.seleccionarTipoCambioActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleAsientoContableConstantesFunciones.quitarEspaciosDetalleAsientoContable(this.detalleasientocontable,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detalleasientocontableSessionBean.setsFuncionBusquedaRapida(this.detalleasientocontableSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableActual() throws Exception {
		try	{
			CuentaContable cuentacontableAux=new CuentaContable();

			if(this.idCuentaContableActual != null && this.idCuentaContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(this.idCuentaContableActual);
					cuentacontableAux= cuentacontableLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablesForeignKey=new ArrayList<CuentaContable>();
				cuentacontablesForeignKey.add(cuentacontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarTipoCambioActual() throws Exception {
		try	{
			TipoCambio tipocambioAux=new TipoCambio();

			if(this.idTipoCambioActual != null && this.idTipoCambioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocambioLogic.getEntityWithConnection(this.idTipoCambioActual);
					tipocambioAux= tipocambioLogic.getTipoCambio();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				tipocambiosForeignKey=new ArrayList<TipoCambio>();
				tipocambiosForeignKey.add(tipocambioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleAsientoContable) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleAsientoContable(esParaCancelar);				
				this.cancelarNuevoDetalleAsientoContable(esParaCancelar);								
			}
			
			this.detalleasientocontable=new DetalleAsientoContable();
			
			this.inicializarDetalleAsientoContable();
			
			this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleAsientoContable() throws Exception {
		try {
			DetalleAsientoContableConstantesFunciones.inicializarDetalleAsientoContable(this.detalleasientocontable);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detalleasientocontableLogic.getDetalleAsientoContables().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleAsientoContables(String sAccionBusqueda,List<DetalleAsientoContable> detalleasientocontablesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleAsientoContable"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleAsientoContableMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleAsientoContableMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleAsientoContable"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Asiento Contables");		
		parameters.put("busquedapor", DetalleAsientoContableConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleAsientoContable=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleAsientoContableConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleAsientoContableConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleAsientoContable=new JRBeanArrayDataSource(DetalleAsientoContableJInternalFrame.TraerDetalleAsientoContableBeans(detalleasientocontablesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleAsientoContable);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleAsientoContableConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleAsientoContableConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleAsientoContableBean.TraerDetalleAsientoContableBeans(detalleasientocontablesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoDetalleAsientoContableActionPerformed(null);
					//this.generarExcelReporteDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleAsientoContables(sAccionBusqueda,sTipoArchivoReporte,detalleasientocontablesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleAsientoContable> detalleasientocontablesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleAsientoContables");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleAsientoContable("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleAsientoContable detalleasientocontable : detalleasientocontablesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleAsientoContableConstantesFunciones.generarExcelReporteDataDetalleAsientoContable("NORMAL",row,workbook,detalleasientocontable,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleAsientoContable(String sTipo,Row row,Workbook workbook) {
		
		DetalleAsientoContableConstantesFunciones.generarExcelReporteHeaderDetalleAsientoContable(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleAsientoContable> detalleasientocontablesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleAsientoContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleAsientoContable detalleasientocontable : detalleasientocontablesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleAsientoContableConstantesFunciones.getDetalleAsientoContableDescripcion(detalleasientocontable));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getnumero_documento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcuentacontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getdebito_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcredito_local());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getdebito_extran());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcredito_extran());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcentroactividad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getdetalle());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.gettipocambio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(detalleasientocontable.getcon_centro_costo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalleasientocontable.getnumero_deposito());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleAsientoContable> detalleasientocontablesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleAsientoContable> detalleasientocontablesRespaldo=null;
		
		classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detalleasientocontableLogic.setDatosCliente(this.datosCliente);
		this.detalleasientocontableLogic.setDatosDeep(this.datosDeep);
		this.detalleasientocontableLogic.setIsConDeep(true);
		
		detalleasientocontablesRespaldo=this.detalleasientocontableLogic.getDetalleAsientoContables();
		
		this.detalleasientocontableLogic.setDetalleAsientoContables(detalleasientocontablesParaReportes);	
		this.detalleasientocontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detalleasientocontablesParaReportes=this.detalleasientocontableLogic.getDetalleAsientoContables();
		this.detalleasientocontableLogic.setDetalleAsientoContables(detalleasientocontablesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleAsientoContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleAsientoContable("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleAsientoContable detalleasientocontable : detalleasientocontablesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleAsientoContable("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleAsientoContableConstantesFunciones.generarExcelReporteDataDetalleAsientoContable("NORMAL",row,workbook,detalleasientocontable,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleAsientoContableConstantesFunciones.getDetalleAsientoContableDescripcion(detalleasientocontable));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessDetalleAsientoContable() throws Exception {		
		this.startProcessDetalleAsientoContable(true);
	}
	
	public void startProcessDetalleAsientoContable(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleAsientoContable ,this.jPanelParametrosReportesDetalleAsientoContable, this.jScrollPanelDatosDetalleAsientoContable,this.jPanelPaginacionDetalleAsientoContable, this.jScrollPanelDatosEdicionDetalleAsientoContable, this.jPanelAccionesDetalleAsientoContable,this.jPanelAccionesFormularioDetalleAsientoContable,this.jmenuBarDetalleAsientoContable,this.jmenuBarDetalleDetalleAsientoContable,this.jTtoolBarDetalleAsientoContable,this.jTtoolBarDetalleDetalleAsientoContable);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleAsientoContable=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleAsientoContable=this.jPanelParametrosReportesDetalleAsientoContable;
		//final JScrollPane jScrollPanelDatosDetalleAsientoContable=this.jScrollPanelDatosDetalleAsientoContable;
		final JTable jTableDatosDetalleAsientoContable=this.jTableDatosDetalleAsientoContable;		
		final JPanel jPanelPaginacionDetalleAsientoContable=this.jPanelPaginacionDetalleAsientoContable;
		//final JScrollPane jScrollPanelDatosEdicionDetalleAsientoContable=this.jScrollPanelDatosEdicionDetalleAsientoContable;
		final JPanel jPanelAccionesDetalleAsientoContable=this.jPanelAccionesDetalleAsientoContable;
		
		JPanel jPanelCamposAuxiliarDetalleAsientoContable=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleAsientoContable=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			jPanelCamposAuxiliarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelCamposDetalleAsientoContable;
			jPanelAccionesFormularioAuxiliarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelAccionesFormularioDetalleAsientoContable;
		}
		
		final JPanel jPanelCamposDetalleAsientoContable=jPanelCamposAuxiliarDetalleAsientoContable;
		final JPanel jPanelAccionesFormularioDetalleAsientoContable=jPanelAccionesFormularioAuxiliarDetalleAsientoContable;
		
		
		final JMenuBar jmenuBarDetalleAsientoContable=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleAsientoContable=new JMenuBar();
		final JToolBar jTtoolBarDetalleAsientoContable=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleAsientoContable=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleAsientoContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleAsientoContable;
			processRunnable.jTableDatos=jTableDatosDetalleAsientoContable;
			processRunnable.jPanelCampos=jPanelCamposDetalleAsientoContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleAsientoContable;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleAsientoContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleAsientoContable;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleAsientoContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleAsientoContable;
			processRunnable.jTtoolBar=jTtoolBarDetalleAsientoContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleAsientoContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleAsientoContable ,jPanelParametrosReportesDetalleAsientoContable,jTableDatosDetalleAsientoContable, /*jScrollPanelDatosDetalleAsientoContable,*/jPanelCamposDetalleAsientoContable,jPanelPaginacionDetalleAsientoContable, /*jScrollPanelDatosEdicionDetalleAsientoContable,*/ jPanelAccionesDetalleAsientoContable,jPanelAccionesFormularioDetalleAsientoContable,jmenuBarDetalleAsientoContable,jmenuBarDetalleDetalleAsientoContable,jTtoolBarDetalleAsientoContable,jTtoolBarDetalleDetalleAsientoContable);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleAsientoContable ,jPanelParametrosReportesDetalleAsientoContable, jScrollPanelDatosDetalleAsientoContable,jPanelPaginacionDetalleAsientoContable, jScrollPanelDatosEdicionDetalleAsientoContable, jPanelAccionesDetalleAsientoContable,jPanelAccionesFormularioDetalleAsientoContable,jmenuBarDetalleAsientoContable,jmenuBarDetalleDetalleAsientoContable,jTtoolBarDetalleAsientoContable,jTtoolBarDetalleDetalleAsientoContable);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleAsientoContable() {// throws Exception 
		this.finishProcessDetalleAsientoContable(true);
	}
	
	public void finishProcessDetalleAsientoContable(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleAsientoContable ,this.jPanelParametrosReportesDetalleAsientoContable, this.jScrollPanelDatosDetalleAsientoContable,this.jPanelPaginacionDetalleAsientoContable, this.jScrollPanelDatosEdicionDetalleAsientoContable, this.jPanelAccionesDetalleAsientoContable,this.jPanelAccionesFormularioDetalleAsientoContable,this.jmenuBarDetalleAsientoContable,this.jmenuBarDetalleDetalleAsientoContable,this.jTtoolBarDetalleAsientoContable,this.jTtoolBarDetalleDetalleAsientoContable);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleAsientoContable=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleAsientoContable=this.jPanelParametrosReportesDetalleAsientoContable;
		//final JScrollPane jScrollPanelDatosDetalleAsientoContable=this.jScrollPanelDatosDetalleAsientoContable;
		final JTable jTableDatosDetalleAsientoContable=this.jTableDatosDetalleAsientoContable;		
		final JPanel jPanelPaginacionDetalleAsientoContable=this.jPanelPaginacionDetalleAsientoContable;
		//final JScrollPane jScrollPanelDatosEdicionDetalleAsientoContable=this.jScrollPanelDatosEdicionDetalleAsientoContable;
		final JPanel jPanelAccionesDetalleAsientoContable=this.jPanelAccionesDetalleAsientoContable;
		
		JPanel jPanelCamposAuxiliarDetalleAsientoContable=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleAsientoContable=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			jPanelCamposAuxiliarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelCamposDetalleAsientoContable;
			jPanelAccionesFormularioAuxiliarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelAccionesFormularioDetalleAsientoContable;
		}
		
		final JPanel jPanelCamposDetalleAsientoContable=jPanelCamposAuxiliarDetalleAsientoContable;
		final JPanel jPanelAccionesFormularioDetalleAsientoContable=jPanelAccionesFormularioAuxiliarDetalleAsientoContable;
		
		
		final JMenuBar jmenuBarDetalleAsientoContable=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleAsientoContable=new JMenuBar();
		final JToolBar jTtoolBarDetalleAsientoContable=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleAsientoContable=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleAsientoContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleAsientoContable;
			processRunnable.jTableDatos=jTableDatosDetalleAsientoContable;
			processRunnable.jPanelCampos=jPanelCamposDetalleAsientoContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleAsientoContable;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleAsientoContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleAsientoContable;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleAsientoContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleAsientoContable;
			processRunnable.jTtoolBar=jTtoolBarDetalleAsientoContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleAsientoContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleAsientoContable ,jPanelParametrosReportesDetalleAsientoContable, jTableDatosDetalleAsientoContable,/*jScrollPanelDatosDetalleAsientoContable,*/jPanelCamposDetalleAsientoContable,jPanelPaginacionDetalleAsientoContable, /*jScrollPanelDatosEdicionDetalleAsientoContable,*/ jPanelAccionesDetalleAsientoContable,jPanelAccionesFormularioDetalleAsientoContable,jmenuBarDetalleAsientoContable,jmenuBarDetalleDetalleAsientoContable,jTtoolBarDetalleAsientoContable,jTtoolBarDetalleDetalleAsientoContable));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleAsientoContable(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleAsientoContable(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleAsientoContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleAsientoContable,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleAsientoContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleAsientoContable,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detalleasientocontableConstantesFunciones.getsFinalQueryDetalleAsientoContable();
		String  finalQueryPaginacionTodos=this.detalleasientocontableConstantesFunciones.getsFinalQueryDetalleAsientoContable();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleAsientoContableConstantesFunciones.getArrayColumnasGlobalesNoDetalleAsientoContable(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleAsientoContableConstantesFunciones.getArrayColumnasGlobalesDetalleAsientoContable(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleAsientoContableConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detalleasientocontablesEliminados= new ArrayList<DetalleAsientoContable>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleAsientoContable();
		
				///*DetalleAsientoContableSessionBean*/this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			
			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleAsientoContableConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleAsientoContableConstantesFunciones.getClassesForeignKeysOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detalleasientocontable."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detalleasientocontablesAux= new ArrayList<DetalleAsientoContable>();
			
				
			detalleasientocontableLogic.setDatosCliente(this.datosCliente);
			detalleasientocontableLogic.setDatosDeep(this.datosDeep);
			detalleasientocontableLogic.setIsConDeep(true);
			
			
			detalleasientocontableLogic.getDetalleAsientoContableDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detalleasientocontableLogic.getTodosDetalleAsientoContables(finalQueryGlobal,pagination);
					
					//detalleasientocontableLogic.getTodosDetalleAsientoContablesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detalleasientocontableLogic.getDetalleAsientoContables()==null|| detalleasientocontableLogic.getDetalleAsientoContables().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleasientocontablesAux= new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux= new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleasientocontableLogic.getTodosDetalleAsientoContables(finalQueryGlobal+"",this.pagination);												
							
							//detalleasientocontableLogic.getTodosDetalleAsientoContablesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleAsientoContables("Todos",detalleasientocontableLogic.getDetalleAsientoContables() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());					
							detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleAsientoContable=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleAsientoContable=this.idActual;
				
				} else if(this.idDetalleAsientoContableActual!=null && this.idDetalleAsientoContableActual!=0L) {
					idDetalleAsientoContable=idDetalleAsientoContableActual;
				}
				
					
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndicePorId(idDetalleAsientoContable);
				
				this.detalleasientocontables=new ArrayList<DetalleAsientoContable>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detalleasientocontableLogic.getEntity(idDetalleAsientoContable);
					
					//detalleasientocontableLogic.getEntityWithConnection(idDetalleAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
					detalleasientocontableLogic.getDetalleAsientoContables().add(detalleasientocontableLogic.getDetalleAsientoContable());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontables=new ArrayList<DetalleAsientoContable>();
					this.detalleasientocontables.add(detalleasientocontable);
				}
				
				if(detalleasientocontableLogic.getDetalleAsientoContable()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdAsientoContable",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdAsientoContable",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroActividad")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCentroActividad(finalQueryGlobal,pagination,id_centro_actividadFK_IdCentroActividad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCentroActividad(finalQueryGlobal,pagination,id_centro_actividadFK_IdCentroActividad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdCentroActividad",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdCentroActividad",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdCentroCosto",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdCentroCosto",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContable")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdCuentaContable",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdCuentaContable",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdEjercicio",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdEjercicio",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdEmpresa",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdEmpresa",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdPeriodo",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdPeriodo",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdSucursal",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdSucursal",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCambio")) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoCambio(id_tipo_cambioFK_IdTipoCambio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalleasientocontableLogic.getDetalleAsientoContablesFK_IdTipoCambio(finalQueryGlobal,pagination,id_tipo_cambioFK_IdTipoCambio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoCambio(id_tipo_cambioFK_IdTipoCambio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoCambio(id_tipo_cambioFK_IdTipoCambio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables()==null||detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalleasientocontables==null|| detalleasientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
						detalleasientocontablesAux.addAll(detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontablesAux=new ArrayList<DetalleAsientoContable>();
							detalleasientocontablesAux.addAll(detalleasientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalleasientocontableLogic.getDetalleAsientoContablesFK_IdTipoCambio(finalQueryGlobal,pagination,id_tipo_cambioFK_IdTipoCambio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoCambio(id_tipo_cambioFK_IdTipoCambio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleAsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoCambio(id_tipo_cambioFK_IdTipoCambio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleAsientoContables("FK_IdTipoCambio",detalleasientocontableLogic.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleAsientoContables("FK_IdTipoCambio",detalleasientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
						detalleasientocontableLogic.getDetalleAsientoContables().addAll(detalleasientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontables=new ArrayList<DetalleAsientoContable>();
							detalleasientocontables.addAll(detalleasientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleAsientoContable();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(detalleasientocontableLogic.getDetalleAsientoContables());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(this.detalleasientocontables);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleAsientoContable();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleasientocontableLogic.getDetalleAsientoContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleasientocontables.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalleasientocontableLogic.getDetalleAsientoContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalleasientocontables.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleAsientoContable detalleasientocontable) {
		Boolean permite=true;
		
		if(this.detalleasientocontable.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(detalleasientocontableLogic.getDetalleAsientoContables());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleAsientoContableConstantesFunciones.getTotalesListaDetalleAsientoContable(this.detalleasientocontables);
		}
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleAsientoContableConstantesFunciones.getOrderByListaDetalleAsientoContable();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleAsientoContableConstantesFunciones.getOrderByListaDetalleAsientoContable();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleAsientoContable detalleasientocontable:detalleasientocontableLogic.getDetalleAsientoContables()) {
				if(detalleasientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					detalleasientocontableTotales=detalleasientocontable;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleAsientoContable detalleasientocontable:this.detalleasientocontables) {
				if(detalleasientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					detalleasientocontableTotales=detalleasientocontable;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detalleasientocontableAux=new DetalleAsientoContable();
			this.detalleasientocontableAux.setsType(Constantes2.S_TOTALES);
			this.detalleasientocontableAux.setIsNew(false);
			this.detalleasientocontableAux.setIsChanged(false);
			this.detalleasientocontableAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleAsientoContableConstantesFunciones.TotalizarValoresFilaDetalleAsientoContable(this.detalleasientocontableLogic.getDetalleAsientoContables(),this.detalleasientocontableAux);
				
				this.detalleasientocontableLogic.getDetalleAsientoContables().add(this.detalleasientocontableAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleAsientoContableConstantesFunciones.TotalizarValoresFilaDetalleAsientoContable(this.detalleasientocontables,this.detalleasientocontableAux);
				
				this.detalleasientocontables.add(this.detalleasientocontableAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detalleasientocontableTotales=new DetalleAsientoContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleasientocontableLogic.getDetalleAsientoContables().remove(detalleasientocontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalleasientocontables.remove(detalleasientocontableTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detalleasientocontableTotales=new DetalleAsientoContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleAsientoContable detalleasientocontable:detalleasientocontableLogic.getDetalleAsientoContables()) {
				if(detalleasientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					detalleasientocontableTotales=detalleasientocontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleAsientoContableConstantesFunciones.TotalizarValoresFilaDetalleAsientoContable(this.detalleasientocontableLogic.getDetalleAsientoContables(),detalleasientocontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleAsientoContable detalleasientocontable:this.detalleasientocontables) {
				if(detalleasientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					detalleasientocontableTotales=detalleasientocontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleAsientoContableConstantesFunciones.TotalizarValoresFilaDetalleAsientoContable(this.detalleasientocontables,detalleasientocontableTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleAsientoContable() {
		this.isPermisoTodoDetalleAsientoContable=false;
		this.isPermisoNuevoDetalleAsientoContable=false;
		this.isPermisoActualizarDetalleAsientoContable=false;
		this.isPermisoActualizarOriginalDetalleAsientoContable=false;
		this.isPermisoEliminarDetalleAsientoContable=false;
		this.isPermisoGuardarCambiosDetalleAsientoContable=false;
		this.isPermisoConsultaDetalleAsientoContable=false;
		this.isPermisoBusquedaDetalleAsientoContable=false;
		this.isPermisoReporteDetalleAsientoContable=false;		
		this.isPermisoOrdenDetalleAsientoContable=false;		
		this.isPermisoPaginacionMedioDetalleAsientoContable=false;		
		this.isPermisoPaginacionAltoDetalleAsientoContable=false;
		this.isPermisoPaginacionTodoDetalleAsientoContable=false;
		this.isPermisoCopiarDetalleAsientoContable=false;		
		this.isPermisoVerFormDetalleAsientoContable=false;		
		this.isPermisoDuplicarDetalleAsientoContable=false;		
		this.isPermisoOrdenDetalleAsientoContable=false;		
	}
	
	public void setPermisosUsuarioDetalleAsientoContable(Boolean isPermiso) {
		this.isPermisoTodoDetalleAsientoContable=isPermiso;
		this.isPermisoNuevoDetalleAsientoContable=isPermiso;
		this.isPermisoActualizarDetalleAsientoContable=isPermiso;
		this.isPermisoActualizarOriginalDetalleAsientoContable=isPermiso;
		this.isPermisoEliminarDetalleAsientoContable=isPermiso;
		this.isPermisoGuardarCambiosDetalleAsientoContable=isPermiso;
		this.isPermisoConsultaDetalleAsientoContable=isPermiso;
		this.isPermisoBusquedaDetalleAsientoContable=isPermiso;
		this.isPermisoReporteDetalleAsientoContable=isPermiso;
		this.isPermisoOrdenDetalleAsientoContable=isPermiso;		
		this.isPermisoPaginacionMedioDetalleAsientoContable=isPermiso;		
		this.isPermisoPaginacionAltoDetalleAsientoContable=isPermiso;		
		this.isPermisoPaginacionTodoDetalleAsientoContable=isPermiso;		
		this.isPermisoCopiarDetalleAsientoContable=isPermiso;		
		this.isPermisoVerFormDetalleAsientoContable=isPermiso;		
		this.isPermisoDuplicarDetalleAsientoContable=isPermiso;
		this.isPermisoOrdenDetalleAsientoContable=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleAsientoContable(Boolean isPermiso) {
		//this.isPermisoTodoDetalleAsientoContable=isPermiso;
		this.isPermisoNuevoDetalleAsientoContable=isPermiso;
		this.isPermisoActualizarDetalleAsientoContable=isPermiso;
		this.isPermisoActualizarOriginalDetalleAsientoContable=isPermiso;
		this.isPermisoEliminarDetalleAsientoContable=isPermiso;
		this.isPermisoGuardarCambiosDetalleAsientoContable=isPermiso;
		//this.isPermisoConsultaDetalleAsientoContable=isPermiso;
		//this.isPermisoBusquedaDetalleAsientoContable=isPermiso;
		//this.isPermisoReporteDetalleAsientoContable=isPermiso;
		//this.isPermisoOrdenDetalleAsientoContable=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleAsientoContable=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleAsientoContable=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleAsientoContable=isPermiso;		
		//this.isPermisoCopiarDetalleAsientoContable=isPermiso;		
		//this.isPermisoDuplicarDetalleAsientoContable=isPermiso;
		//this.isPermisoOrdenDetalleAsientoContable=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleAsientoContableClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleAsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleAsientoContableClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleAsientoContableClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleAsientoContableClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleAsientoContableClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleAsientoContable() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleAsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleAsientoContableConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleAsientoContable=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleAsientoContable=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleAsientoContable=this.isPermisoActualizarDetalleAsientoContable;
			this.isPermisoEliminarDetalleAsientoContable=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleAsientoContable=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleAsientoContable=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleAsientoContable=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleAsientoContable=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleAsientoContable=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleAsientoContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleAsientoContable=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleAsientoContable=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleAsientoContable=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleAsientoContable=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleAsientoContable=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleAsientoContable=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleAsientoContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleAsientoContable.setToolTipText(this.jTableDatosDetalleAsientoContable.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleAsientoContable(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleAsientoContable(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleAsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleAsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleAsientoContable() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleAsientoContableListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
				this.centroactividadsForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.tipocambiosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleAsientoContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleAsientoContableJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleAsientoContableListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroActividadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroActividadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centroactividadsForeignKey==null||this.centroactividadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroActividadConstantesFunciones.getArrayColumnasGlobalesCentroActividad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroActividadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroActividadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroActividadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCambioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleAsientoContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleAsientoContableParameterReturnGeneral detalleasientocontableReturnGeneral=new DetalleAsientoContableParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_empresaDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_empresaDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_sucursalDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_sucursalDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_asiento_contableDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_asiento_contableDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_ejercicioDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_ejercicioDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_periodoDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_periodoDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_anioDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_anioDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_mesDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_mesDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_cuenta_contableDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_cuenta_contableDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}


				String finalQueryGlobalCentroActividad="";

				if(((this.centroactividadsForeignKey==null||this.centroactividadsForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_centro_actividadDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_centro_actividadDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroActividadConstantesFunciones.getArrayColumnasGlobalesCentroActividad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroActividad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroActividadConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroActividad=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroActividad, "");
						finalQueryGlobalCentroActividad+=CentroActividadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroActividadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroActividad=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidCentroActividadActual();
					}
				} else {
					finalQueryGlobalCentroActividad="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_centro_costoDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_centro_costoDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalTipoCambio="";

				if(((this.tipocambiosForeignKey==null||this.tipocambiosForeignKey.size()<=0) && this.detalleasientocontableConstantesFunciones.cargarid_tipo_cambioDetalleAsientoContable)
					 || (this.esRecargarFks && this.detalleasientocontableConstantesFunciones.cargarid_tipo_cambioDetalleAsientoContable)) {

					if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCambioConstantesFunciones.getArrayColumnasGlobalesTipoCambio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCambio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCambioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCambio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCambio, "");
						finalQueryGlobalTipoCambio+=TipoCambioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCambiosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCambio=" WHERE " + ConstantesSql.ID + "="+detalleasientocontableSessionBean.getlidTipoCambioActual();
					}
				} else {
					finalQueryGlobalTipoCambio="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detalleasientocontableReturnGeneral=detalleasientocontableLogic.cargarCombosLoteForeignKeyDetalleAsientoContable(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalAsientoContable,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalCuentaContable,finalQueryGlobalCentroActividad,finalQueryGlobalCentroCosto,finalQueryGlobalTipoCambio);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detalleasientocontableReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detalleasientocontableReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=detalleasientocontableReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detalleasientocontableReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detalleasientocontableReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detalleasientocontableReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detalleasientocontableReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=detalleasientocontableReturnGeneral.getcuentacontablesForeignKey();
			}

			if(!finalQueryGlobalCentroActividad.equals("NONE")) {
				this.centroactividadsForeignKey=detalleasientocontableReturnGeneral.getcentroactividadsForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detalleasientocontableReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalTipoCambio.equals("NONE")) {
				this.tipocambiosForeignKey=detalleasientocontableReturnGeneral.gettipocambiosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleAsientoContable()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyCuentaContable();
			this.addItemDefectoCombosForeignKeyCentroActividad();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyTipoCambio();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.detalleasientocontableSessionBean==null) {
				this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroActividad()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {
				CentroActividad centroactividad=new CentroActividad();
				CentroActividadConstantesFunciones.setCentroActividadDescripcion(centroactividad,Constantes.SMENSAJE_ESCOJA_OPCION);
				centroactividad.setId(null);

				if(!CentroActividadConstantesFunciones.ExisteEnLista(this.centroactividadsForeignKey,centroactividad,true)) {

					this.centroactividadsForeignKey.add(0,centroactividad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCambio()throws Exception {
		try {

			if(!this.detalleasientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoCambio()) {
				TipoCambio tipocambio=new TipoCambio();
				TipoCambioConstantesFunciones.setTipoCambioDescripcion(tipocambio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocambio.setId(null);

				if(!TipoCambioConstantesFunciones.ExisteEnLista(this.tipocambiosForeignKey,tipocambio,true)) {

					this.tipocambiosForeignKey.add(0,tipocambio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleAsientoContable()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleAsientoContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyDetalleAsientoContable()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detalleasientocontable.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleAsientoContable();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleAsientoContable(DetalleAsientoContable detalleasientocontable)throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(detalleasientocontable.getid_asiento_contable(),false,"Formulario");
			this.setActualCuentaContableForeignKey(detalleasientocontable.getid_cuenta_contable(),false,"Formulario");
			this.setActualCentroActividadForeignKey(detalleasientocontable.getid_centro_actividad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detalleasientocontable.getid_centro_costo(),false,"Formulario");
			this.setActualTipoCambioForeignKey(detalleasientocontable.getid_tipo_cambio(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detalleasientocontable.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableDetalleAsientoContable")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(detalleasientocontable.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				if(detalleasientocontable.getCuentaContable()!=null && !sTipoEvento.equals("id_cuenta_contableDetalleAsientoContable")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablesForeignKey.add(detalleasientocontable.getCuentaContable());

					this.addItemDefectoCombosForeignKeyCuentaContable();
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}

				if(detalleasientocontable.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoDetalleAsientoContable")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(detalleasientocontable.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(detalleasientocontable.getTipoCambio()!=null && !sTipoEvento.equals("id_tipo_cambioDetalleAsientoContable")) { //sTipoEvento Evita Bucle Infinito

					this.tipocambiosForeignKey=new ArrayList<TipoCambio>();
					this.tipocambiosForeignKey.add(detalleasientocontable.getTipoCambio());

					this.addItemDefectoCombosForeignKeyTipoCambio();
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleAsientoContable()throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(this.detalleasientocontableConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.detalleasientocontableConstantesFunciones.getid_cuenta_contable(),false,"Formulario");
			this.setActualCentroActividadForeignKey(this.detalleasientocontableConstantesFunciones.getid_centro_actividad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detalleasientocontableConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualTipoCambioForeignKey(this.detalleasientocontableConstantesFunciones.getid_tipo_cambio(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleAsientoContable()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleAsientoContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleAsientoContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleAsientoContable()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleAsientoContable()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");
			this.cargarCombosFrameCentroActividadsForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameTipoCambiosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleAsientoContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroActividadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleAsientoContable()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	






















	
	

	public DetalleAsientoContableBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleAsientoContableBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleAsientoContableBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean(); 
		this.detalleasientocontableConstantesFunciones=new DetalleAsientoContableConstantesFunciones(); 
		this.detalleasientocontableBean=new DetalleAsientoContable();//(this.detalleasientocontableConstantesFunciones); 		
		this.detalleasientocontableReturnGeneral=new DetalleAsientoContableParameterReturnGeneral(); 
		
		this.detalleasientocontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detalleasientocontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleAsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleAsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleAsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleAsientoContable(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detalleasientocontableConstantesFunciones=new DetalleAsientoContableConstantesFunciones(); 
			this.detalleasientocontableBean=new DetalleAsientoContable();//this.detalleasientocontableConstantesFunciones); 			
			this.detalleasientocontableReturnGeneral=new DetalleAsientoContableParameterReturnGeneral(); 
		
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Asiento Contable Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detalleasientocontable=new DetalleAsientoContable();
			this.detalleasientocontables = new ArrayList<DetalleAsientoContable>();
			this.detalleasientocontablesAux = new ArrayList<DetalleAsientoContable>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic=new DetalleAsientoContableLogic();
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			//this.detalleasientocontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detalleasientocontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleAsientoContable);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleAsientoContable);	
					}
					
					if(this.jInternalFrameImportacionDetalleAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleAsientoContable);							
					}
					*/
				}
				
				if(this.jInternalFrameTotalesDetalleAsientoContable!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleAsientoContable);
				}
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByDetalleAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleAsientoContable);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleAsientoContable);
				this.jInternalFrameDetalleFormDetalleAsientoContable.setVisible(false);
				this.jInternalFrameDetalleFormDetalleAsientoContable.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleAsientoContable);
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleAsientoContable);
					this.jInternalFrameImportacionDetalleAsientoContable.setVisible(false);
					this.jInternalFrameImportacionDetalleAsientoContable.setSelected(false);
				}
				
				*/
			}
			
			if(this.jInternalFrameTotalesDetalleAsientoContable!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleAsientoContable);
				this.jInternalFrameTotalesDetalleAsientoContable.setVisible(false);
				this.jInternalFrameTotalesDetalleAsientoContable.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByDetalleAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleAsientoContable);
					this.jInternalFrameOrderByDetalleAsientoContable.setVisible(false);
					this.jInternalFrameOrderByDetalleAsientoContable.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleAsientoContableActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleAsientoContableConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detalleasientocontableReturnGeneral=new DetalleAsientoContableParameterReturnGeneral();
			
			this.detalleasientocontableParameterGeneral=new DetalleAsientoContableParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detalleasientocontableLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleAsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleAsientoContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),this.detalleasientocontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleAsientoContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),this.detalleasientocontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaDuplicarDetalleAsientoContable=true;
			this.isVisibilidadCeldaCopiarDetalleAsientoContable=true;
			this.isVisibilidadCeldaVerFormDetalleAsientoContable=true;
			this.isVisibilidadCeldaOrdenDetalleAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCentroActividad=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCambio=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleAsientoContable();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleAsientoContable(false);
			
			this.setPermisosUsuarioDetalleAsientoContable();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado() 
				|| (this.detalleasientocontableSessionBean.getEsGuardarRelacionado() && this.detalleasientocontableSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleAsientoContableClasesRelacionadas();
			}
			
			if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleAsientoContableClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleAsientoContable();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleAsientoContable();
			}
			
			if(!this.isPermisoBusquedaDetalleAsientoContable) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleAsientoContable,this.isPermisoPaginacionMedioDetalleAsientoContable,this.isPermisoPaginacionTodoDetalleAsientoContable);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleAsientoContableConstantesFunciones.getTiposSeleccionarDetalleAsientoContable());
				
				this.tiposColumnasSelect=DetalleAsientoContableConstantesFunciones.getTiposSeleccionarDetalleAsientoContable(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleAsientoContable();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleAsientoContable(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleAsientoContable(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleAsientoContable() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.cuentacontableLogic=new CuentaContableLogic();
			this.centroactividadLogic=new CentroActividadLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.tipocambioLogic=new TipoCambioLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detalleasientocontableImplementable= (DetalleAsientoContableImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleAsientoContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detalleasientocontableImplementableHome= (DetalleAsientoContableImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleAsientoContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detalleasientocontables= new ArrayList<DetalleAsientoContable>();
			this.detalleasientocontablesEliminados= new ArrayList<DetalleAsientoContable>();
						
			this.isEsNuevoDetalleAsientoContable=false;
			this.esParaAccionDesdeFormularioDetalleAsientoContable=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idAsientoContableActual=0L;
			this.idCuentaContableActual=0L;
			this.idCentroCostoActual=0L;
			this.idTipoCambioActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			this.centroactividadsForeignKey=new ArrayList<CentroActividad>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.tipocambiosForeignKey=new ArrayList<TipoCambio>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleAsientoContable(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleAsientoContable();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleAsientoContableConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleAsientoContable(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleAsientoContable();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleAsientoContable();
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleAsientoContable.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleAsientoContable(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleAsientoContable: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleAsientoContable() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleAsientoContable")) {
				iIndex=this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleAsientoContable();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleAsientoContable(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleAsientoContable(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleAsientoContableListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleAsientoContable();
		
		this.cargarCombosFrameForeignKeyDetalleAsientoContable();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleAsientoContable();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleAsientoContable();
		}
	}
	
	

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroActividad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroActividadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroActividad();
				this.cargarCombosFrameCentroActividadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroActividad(this.centroactividadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCambio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCambioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCambio();
				this.cargarCombosFrameTipoCambiosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleAsientoContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			
			if(jTableDatosDetalleAsientoContable.getRowCount()>=1) {
				jTableDatosDetalleAsientoContable.removeRowSelectionInterval(0, jTableDatosDetalleAsientoContable.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleAsientoContable=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleAsientoContable(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleAsientoContable(true);			
			//this.detalleasientocontable=new DetalleAsientoContable();
			//this.detalleasientocontable.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleAsientoContable(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable() ;
			
			if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleAsientoContable(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detalleasientocontable);	
			this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);				
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleAsientoContable: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleAsientoContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleAsientoContable.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleAsientoContable.getSelectedRows().length;			
			}
			
			detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleAsientoContable--;			
				//DetalleAsientoContable detalleasientocontableAux= new DetalleAsientoContable();			
				//detalleasientocontableAux.setId(this.iIdNuevoDetalleAsientoContable);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleAsientoContable detalleasientocontableOrigen=new DetalleAsientoContable();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleAsientoContable detalleasientocontableOrigen : detalleasientocontablesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detalleasientocontableOrigen =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalleasientocontableOrigen =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleAsientoContable();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detalleasientocontable.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleAsientoContable(detalleasientocontableOrigen,this.detalleasientocontable,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleasientocontableLogic.getDetalleAsientoContables().add(this.detalleasientocontableAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleasientocontables.add(this.detalleasientocontableAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
				
				this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(this.getIndiceNuevoDetalleAsientoContable(), this.getIndiceNuevoDetalleAsientoContable());
				
				int iLastRow =  this.jTableDatosDetalleAsientoContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleAsientoContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleAsientoContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();									
		
			DetalleAsientoContable detalleasientocontableOrigen=new DetalleAsientoContable();
			DetalleAsientoContable detalleasientocontableDestino=new DetalleAsientoContable();
				
			detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleAsientoContable.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detalleasientocontablesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleAsientoContable.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableOrigen =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleasientocontableOrigen =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalleasientocontableDestino =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalleasientocontableDestino =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detalleasientocontableOrigen =detalleasientocontablesSeleccionados.get(0);
				detalleasientocontableDestino =detalleasientocontablesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleAsientoContable(detalleasientocontableOrigen,detalleasientocontableDestino,true,false);
				
				detalleasientocontableDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalleasientocontableDestino,detalleasientocontableLogic.getDetalleAsientoContables());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalleasientocontableDestino,detalleasientocontables);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
				
				//this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(this.getIndiceNuevoDetalleAsientoContable(), this.getIndiceNuevoDetalleAsientoContable());
				
				int iLastRow =  this.jTableDatosDetalleAsientoContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleAsientoContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleAsientoContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleAsientoContable.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesDetalleAsientoContable.setVisible(!isVisible);
			this.jPanelPaginacionDetalleAsientoContable.setVisible(!isVisible);
			this.jPanelAccionesDetalleAsientoContable.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleAsientoContable();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoDetalleAsientoContable();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionDetalleAsientoContable();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetalleAsientoContable();
			
			this.abrirFrameTotalesDetalleAsientoContable();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetalleAsientoContable();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByDetalleAsientoContable();
			
			this.abrirFrameOrderByDetalleAsientoContable();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByDetalleAsientoContable();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleAsientoContable(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleAsientoContable);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleAsientoContable.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleAsientoContable.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleAsientoContable.setSize(this.jInternalFrameDetalleFormDetalleAsientoContable.iWidthFormulario,this.jInternalFrameDetalleFormDetalleAsientoContable.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleAsientoContable.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleAsientoContable.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleAsientoContable.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleAsientoContable.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleAsientoContable.jContentPaneDetalleDetalleAsientoContable.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleAsientoContable.jContentPaneDetalleDetalleAsientoContable.getWidth(),DetalleAsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleAsientoContable.jContentPaneDetalleDetalleAsientoContable.getWidth(),DetalleAsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleAsientoContable.jContentPaneDetalleDetalleAsientoContable.getWidth(),DetalleAsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleAsientoContable.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleAsientoContable.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByDetalleAsientoContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleAsientoContable==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleAsientoContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleAsientoContable,false,this);
				} else {
					this.jInternalFrameOrderByDetalleAsientoContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleAsientoContable,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleAsientoContable);
				this.jInternalFrameOrderByDetalleAsientoContable.setVisible(false);
				this.jInternalFrameOrderByDetalleAsientoContable.setSelected(false);
				
				this.jInternalFrameOrderByDetalleAsientoContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleAsientoContable"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleAsientoContable();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionDetalleAsientoContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleAsientoContable==null) {
				
				this.jInternalFrameImportacionDetalleAsientoContable=new ImportacionJInternalFrame(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleAsientoContable);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleAsientoContable);
				this.jInternalFrameImportacionDetalleAsientoContable.setVisible(false);
				this.jInternalFrameImportacionDetalleAsientoContable.setSelected(false);


				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleAsientoContable"));
				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleAsientoContable"));
				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleAsientoContable"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoDetalleAsientoContable() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleAsientoContable==null) {
				this.jInternalFrameReporteDinamicoDetalleAsientoContable=new ReporteDinamicoJInternalFrame(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleAsientoContable);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleAsientoContable);
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleAsientoContable"));
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleAsientoContable"));
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleAsientoContable"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleAsientoContable();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	public void abrirInicializarFrameTotalesDetalleAsientoContable() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetalleAsientoContable==null) {
				this.jInternalFrameTotalesDetalleAsientoContable=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetalleAsientoContable,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleAsientoContable);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleAsientoContable);
				this.jInternalFrameTotalesDetalleAsientoContable.setVisible(false);
				this.jInternalFrameTotalesDetalleAsientoContable.setSelected(false);


				this.jInternalFrameTotalesDetalleAsientoContable.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleAsientoContable"));
								
				this.inicializarActualizarBindingTablaTotalesDetalleAsientoContable();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		
					
	public void cerrarFrameDetalleDetalleAsientoContable() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleAsientoContable);
			
	       	this.jInternalFrameDetalleFormDetalleAsientoContable.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleAsientoContable.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleAsientoContable.dispose();
			//this.jInternalFrameDetalleFormDetalleAsientoContable=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoDetalleAsientoContable() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleAsientoContable.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionDetalleAsientoContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleAsientoContable.setVisible(true);
	        this.jInternalFrameImportacionDetalleAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	public void abrirFrameTotalesDetalleAsientoContable() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleAsientoContable.setVisible(true);
	        this.jInternalFrameTotalesDetalleAsientoContable.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetalleAsientoContable() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleAsientoContable.setVisible(false);
	        this.jInternalFrameTotalesDetalleAsientoContable.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	/*
	public void abrirFrameOrderByDetalleAsientoContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleAsientoContable.setVisible(true);
	        this.jInternalFrameOrderByDetalleAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByDetalleAsientoContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleAsientoContable.setVisible(false);
	        this.jInternalFrameOrderByDetalleAsientoContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoDetalleAsientoContable() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleAsientoContable.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleAsientoContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionDetalleAsientoContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleAsientoContable.setVisible(false);
	        this.jInternalFrameImportacionDetalleAsientoContable.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	

				public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
						TitledBorder titledBorderCuentaContable=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContable.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContable(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleAsientoContable(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleAsientoContable(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleAsientoContable(true);
			//this.isEsNuevoDetalleAsientoContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleAsientoContable(false) ;
			
			if(detalleasientocontableSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleAsientoContable(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleAsientoContableActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleAsientoContable(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleAsientoContable(true);
			//this.isEsNuevoDetalleAsientoContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detalleasientocontable.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleAsientoContable(false) ;
			
			if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleAsientoContable(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("AsientoContable")) {
				if(!this.detalleasientocontableConstantesFunciones.cargarid_asiento_contableDetalleAsientoContable) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
			
			if(sType.equals("CuentaContable")) {
				if(!this.detalleasientocontableConstantesFunciones.cargarid_cuenta_contableDetalleAsientoContable) {
					this.cargarCombosCuentaContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable (id);

				this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.detalleasientocontableConstantesFunciones.cargarid_centro_costoDetalleAsientoContable) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("TipoCambio")) {
				if(!this.detalleasientocontableConstantesFunciones.cargarid_tipo_cambioDetalleAsientoContable) {
					this.cargarCombosTipoCambiosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
					this.cargarCombosFrameTipoCambiosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_tipo_cambio (id);

				this.recargarComboTablaTipoCambio(this.tipocambiosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroActividad(List<CentroActividad> centroactividadsForeignKey)throws Exception{
		TableColumn tableColumnCentroActividad=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD));
		TableCellEditor tableCellEditorCentroActividad =tableColumnCentroActividad.getCellEditor();

		CentroActividadTableCell centroactividadTableCellFk=(CentroActividadTableCell)tableCellEditorCentroActividad;

		if(centroactividadTableCellFk!=null) {
			centroactividadTableCellFk.setcentroactividadsForeignKey(centroactividadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centroactividadTableCellFk.setRowActual(intSelectedRow);
			//centroactividadTableCellFk.setcentroactividadsForeignKeyActual(centroactividadsForeignKey);
		//}


		if(centroactividadTableCellFk!=null) {
			centroactividadTableCellFk.RecargarCentroActividadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCambio(List<TipoCambio> tipocambiosForeignKey)throws Exception{
		TableColumn tableColumnTipoCambio=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO));
		TableCellEditor tableCellEditorTipoCambio =tableColumnTipoCambio.getCellEditor();

		TipoCambioTableCell tipocambioTableCellFk=(TipoCambioTableCell)tableCellEditorTipoCambio;

		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.settipocambiosForeignKey(tipocambiosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocambioTableCellFk.setRowActual(intSelectedRow);
			//tipocambioTableCellFk.settipocambiosForeignKeyActual(tipocambiosForeignKey);
		//}


		if(tipocambioTableCellFk!=null) {
			tipocambioTableCellFk.RecargarTipoCambiosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable (Long id) throws Exception {
		this.setActualCuentaContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_tipo_cambio (Long id) throws Exception {
		this.setActualTipoCambioForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleAsientoContable(false);
			
			//if(!this.isEsNuevoDetalleAsientoContable) {								
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				
			}
			
			if(this.permiteMantenimiento(this.detalleasientocontable)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleAsientoContable=true;
					this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
					this.isEsNuevoDetalleAsientoContable=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleAsientoContable=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleAsientoContable=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleAsientoContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(false);
				
				this.habilitarDeshabilitarControlesDetalleAsientoContable(false);
			
												
				
				if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleAsientoContable();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleAsientoContableActionPerformed(evt,detalleasientocontableSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleAsientoContable(this.detalleasientocontable,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detalleasientocontableSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detalleasientocontable.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				this.detalleasientocontable.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				this.detalleasientocontable.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detalleasientocontable)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleAsientoContableModel) this.jTableDatosDetalleAsientoContable.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleAsientoContable=true;
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
				this.isEsNuevoDetalleAsientoContable=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleAsientoContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(false);
				
				this.habilitarDeshabilitarControlesDetalleAsientoContable(false);
				
				
				
				if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleAsientoContable();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleAsientoContable.getRowCount()>=1) {
				jTableDatosDetalleAsientoContable.removeRowSelectionInterval(0, jTableDatosDetalleAsientoContable.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleAsientoContable(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleAsientoContable(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(false) ;
			
			this.isEsNuevoDetalleAsientoContable=false;
			
			if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleAsientoContable();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleAsientoContable(false);
				
				//SI ES MANUAL
				if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleAsientoContable();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleAsientoContable--;			
			//DetalleAsientoContable detalleasientocontableAux= new DetalleAsientoContable();			
			//detalleasientocontableAux.setId(this.iIdNuevoDetalleAsientoContable);
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleAsientoContable();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
			
			this.detalleasientocontable.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detalleasientocontableLogic.getDetalleAsientoContables().add(this.detalleasientocontableAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detalleasientocontables.add(this.detalleasientocontableAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			
			this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(this.getIndiceNuevoDetalleAsientoContable(), this.getIndiceNuevoDetalleAsientoContable());
			
			int iLastRow =  this.jTableDatosDetalleAsientoContable.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleAsientoContable.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleAsientoContable.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleAsientoContable(false);
			
			//SI ES MANUAL
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleAsientoContable();
			}
			
			//this.abrirFrameTreeDetalleAsientoContable();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle Asiento ContableS ?", "MANTENIMIENTO DE Detalle Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleAsientoContable.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleAsientoContable();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detalleasientocontableReturnGeneral=detalleasientocontableLogic.procesarImportacionDetalleAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detalleasientocontableParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleAsientoContableReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleAsientoContable.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleAsientoContable.setFileImportacion(this.jInternalFrameImportacionDetalleAsientoContable.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleAsientoContable.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleAsientoContable.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleAsientoContable.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleAsientoContable.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		

		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleAsientoContableBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleAsientoContableBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoLocal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoLocal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoLocal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoLocal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bitoExtran_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bitoExtran_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bitoExtran_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bitoExtran_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_editoExtran_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_editoExtran_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_editoExtran_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_editoExtran_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroActividad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroActividad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroActividad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroActividad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DETALLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talle_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talle_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talle_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talle_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDeposito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDeposito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDeposito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDeposito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoria="numero_documento";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL:
					sNombreCampoCategoria="debito_local";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL:
					sNombreCampoCategoria="credito_local";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN:
					sNombreCampoCategoria="debito_extran";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN:
					sNombreCampoCategoria="credito_extran";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					sNombreCampoCategoria="id_centro_actividad";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoria="detalle";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoria="id_tipo_cambio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO:
					sNombreCampoCategoria="con_centro_costo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO:
					sNombreCampoCategoria="numero_deposito";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoriaValor="numero_documento";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL:
					sNombreCampoCategoriaValor="debito_local";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL:
					sNombreCampoCategoriaValor="credito_local";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN:
					sNombreCampoCategoriaValor="debito_extran";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN:
					sNombreCampoCategoriaValor="credito_extran";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					sNombreCampoCategoriaValor="id_centro_actividad";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoriaValor="detalle";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO:
					sNombreCampoCategoriaValor="id_tipo_cambio";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO:
					sNombreCampoCategoriaValor="con_centro_costo";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO:
					sNombreCampoCategoriaValor="numero_deposito";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento C.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_documento");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_local");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Local",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_local");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Debito Extran",sNombreCampoCategoria,sNombreCampoCategoriaValor,"debito_extran");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Extran",sNombreCampoCategoria,sNombreCampoCategoriaValor,"credito_extran");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Actividad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_actividad");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DETALLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle",sNombreCampoCategoria,sNombreCampoCategoriaValor,"detalle");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cambio");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_centro_costo");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Deposito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_deposito");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleAsientoContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getnumero_documento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getdebito_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcredito_local());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getdebito_extran());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcredito_extran());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcentroactividad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_DETALLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getdetalle());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.gettipocambio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getcon_centro_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO);
					iRow++;

					for(DetalleAsientoContable detalleasientocontable:detalleasientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalleasientocontable.getnumero_deposito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleAsientoContable(row);				
			//	iRow++;
			//}				
			
			//for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleAsientoContable(detalleasientocontableAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleAsientoContable(false);
			
			//SI ES MANUAL
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleAsientoContable();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleAsientoContable(false);
			
			//SI ES MANUAL
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleAsientoContable();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleAsientoContable(false);
			
			//SI ES MANUAL
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleAsientoContable();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleAsientoContable() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleAsientoContable.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleAsientoContable.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleAsientoContable.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleAsientoContable.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleAsientoContable.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleAsientoContable.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleAsientoContable.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleAsientoContable(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleAsientoContable(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleAsientoContable(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleAsientoContable(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleAsientoContable(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleAsientoContable(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleAsientoContable(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleAsientoContable(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleAsientoContable() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleAsientoContable();
		
		this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleAsientoContable();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleAsientoContable() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleAsientoContable(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleAsientoContable(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleAsientoContable.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleAsientoContable.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleAsientoContable.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionNuevoDetalleAsientoContable.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionSinCerrarDetalleAsientoContable.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionSinMensajeDetalleAsientoContable.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleAsientoContable.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleAsientoContable.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteDetalleAsientoContable.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionNuevoDetalleAsientoContable.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionSinCerrarDetalleAsientoContable.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxPostAccionSinMensajeDetalleAsientoContable.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionDetalleAsientoContable.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleAsientoContable.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleAsientoContable.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleAsientoContable.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleAsientoContable.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleAsientoContable.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleAsientoContable.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleAsientoContable.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleAsientoContable.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleAsientoContable(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleAsientoContable(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleAsientoContable() throws Exception {
		try	{
			if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleAsientoContable();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleAsientoContable() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleAsientoContable() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleAsientoContable.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleAsientoContable.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleAsientoContable.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleAsientoContable.addItem(reporte);
			}
			
			
			if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleAsientoContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleAsientoContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleAsientoContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleAsientoContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleAsientoContable.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleAsientoContable.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleAsientoContable();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleAsientoContable() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleAsientoContableConstantesFunciones.getTiposSeleccionarDetalleAsientoContable(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleAsientoContableConstantesFunciones.getTiposSeleccionarDetalleAsientoContable(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleAsientoContableConstantesFunciones.getTiposSeleccionarDetalleAsientoContable(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualDetalleAsientoContable()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableDetalleAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.getSelectedItem()!=null){this.id_centro_actividadFK_IdCentroActividad=((CentroActividad)this.jComboBoxid_centro_actividadFK_IdCentroActividadDetalleAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.getSelectedItem()!=null){this.id_cuenta_contableFK_IdCuentaContable=((CuentaContable)this.jComboBoxid_cuenta_contableFK_IdCuentaContableDetalleAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.getSelectedItem()!=null){this.id_tipo_cambioFK_IdTipoCambio=((TipoCambio)this.jComboBoxid_tipo_cambioFK_IdTipoCambioDetalleAsientoContable.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleAsientoContable(Boolean esInicializar) throws Exception {				
		if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleAsientoContable();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleAsientoContable() throws Exception {
		this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByDetalleAsientoContable() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleAsientoContableOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContableOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	public void inicializarActualizarBindingTablaTotalesDetalleAsientoContable() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetalleAsientoContable(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detalleasientocontableLogic.getDetalleAsientoContables().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detalleasientocontables.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleAsientoContable.setModel(new DetalleAsientoContableModel(this.detalleasientocontableLogic.getDetalleAsientoContables(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleAsientoContable.setModel(new DetalleAsientoContableModel(this.detalleasientocontables,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetalleAsientoContable!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleAsientoContable.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
			}
							
			/*
			
			if(this.jInternalFrameOrderByDetalleAsientoContable!=null && this.jInternalFrameOrderByDetalleAsientoContable.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleAsientoContable();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO,detalleasientocontableConstantesFunciones.resaltarSeleccionarDetalleAsientoContable,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO,detalleasientocontableConstantesFunciones.resaltarSeleccionarDetalleAsientoContable,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_empresaDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_empresaDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_empresaDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_empresaDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_empresaDetalleAsientoContable,false,"id_empresaDetalleAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_sucursalDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_sucursalDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_sucursalDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_sucursalDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_sucursalDetalleAsientoContable,false,"id_sucursalDetalleAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_asiento_contableDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_asiento_contableDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_asiento_contableDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_asiento_contableDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_asiento_contableDetalleAsientoContable,true,"id_asiento_contableDetalleAsientoContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO));

		if(this.detalleasientocontableConstantesFunciones.mostrarnumero_documentoDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleasientocontableConstantesFunciones.resaltarnumero_documentoDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarnumero_documentoDetalleAsientoContable,iSizeTabla,this,true,"numero_documentoDetalleAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltarnumero_documentoDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarnumero_documentoDetalleAsientoContable,this,true,"numero_documentoDetalleAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_ejercicioDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_ejercicioDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_ejercicioDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_ejercicioDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_ejercicioDetalleAsientoContable,false,"id_ejercicioDetalleAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_periodoDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_periodoDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_periodoDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_periodoDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_periodoDetalleAsientoContable,false,"id_periodoDetalleAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDANIO));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_anioDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_anioDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_anioDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_anioDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_anioDetalleAsientoContable,true,"id_anioDetalleAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDMES));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_mesDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_mesDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_mesDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_mesDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_mesDetalleAsientoContable,true,"id_mesDetalleAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_cuenta_contableDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_cuenta_contableDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_cuenta_contableDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_cuenta_contableDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_cuenta_contableDetalleAsientoContable,true,"id_cuenta_contableDetalleAsientoContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL));

		if(this.detalleasientocontableConstantesFunciones.mostrardebito_localDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleasientocontableConstantesFunciones.resaltardebito_localDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardebito_localDetalleAsientoContable,iSizeTabla,this,true,"debito_localDetalleAsientoContable","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltardebito_localDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardebito_localDetalleAsientoContable,this,true,"debito_localDetalleAsientoContable","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL));

		if(this.detalleasientocontableConstantesFunciones.mostrarcredito_localDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleasientocontableConstantesFunciones.resaltarcredito_localDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcredito_localDetalleAsientoContable,iSizeTabla,this,true,"credito_localDetalleAsientoContable","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltarcredito_localDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcredito_localDetalleAsientoContable,this,true,"credito_localDetalleAsientoContable","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN));

		if(this.detalleasientocontableConstantesFunciones.mostrardebito_extranDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleasientocontableConstantesFunciones.resaltardebito_extranDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardebito_extranDetalleAsientoContable,iSizeTabla,this,true,"debito_extranDetalleAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltardebito_extranDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardebito_extranDetalleAsientoContable,this,true,"debito_extranDetalleAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN));

		if(this.detalleasientocontableConstantesFunciones.mostrarcredito_extranDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleasientocontableConstantesFunciones.resaltarcredito_extranDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcredito_extranDetalleAsientoContable,iSizeTabla,this,true,"credito_extranDetalleAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltarcredito_extranDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcredito_extranDetalleAsientoContable,this,true,"credito_extranDetalleAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_centro_actividadDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroActividadTableCell(this.centroactividadsForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_centro_actividadDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_centro_actividadDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new CentroActividadTableCell(this.centroactividadsForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_centro_actividadDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_centro_actividadDetalleAsientoContable,true,"id_centro_actividadDetalleAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.detalleasientocontableConstantesFunciones.mostrarid_centro_costoDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_centro_costoDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_centro_costoDetalleAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.detalleasientocontableConstantesFunciones.resaltarid_centro_costoDetalleAsientoContable,this,this.detalleasientocontableConstantesFunciones.activarid_centro_costoDetalleAsientoContable,true,"id_centro_costoDetalleAsientoContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION));

		if(this.detalleasientocontableConstantesFunciones.mostrarcotizacionDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalleasientocontableConstantesFunciones.resaltarcotizacionDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcotizacionDetalleAsientoContable,iSizeTabla,this,true,"cotizacionDetalleAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltarcotizacionDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activarcotizacionDetalleAsientoContable,this,true,"cotizacionDetalleAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,DetalleAsientoContableConstantesFunciones.LABEL_DETALLE));

		if(this.detalleasientocontableConstantesFunciones.mostrardetalleDetalleAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleAsientoContableConstantesFunciones.LABEL_DETALLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalleasientocontableConstantesFunciones.resaltardetalleDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardetalleDetalleAsientoContable,iSizeTabla,this,true,"detalleDetalleAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalleasientocontableConstantesFunciones.resaltardetalleDetalleAsientoContable,this.detalleasientocontableConstantesFunciones.activardetalleDetalleAsientoContable,this,true,"detalleDetalleAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200);
			//tableColumn.addPropertyChangeListener(new DetalleAsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleAsientoContable.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleAsientoContable.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleAsientoContable.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleAsientoContable.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleAsientoContable.moveColumn(this.jTableDatosDetalleAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleAsientoContable.moveColumn(this.jTableDatosDetalleAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleAsientoContable.moveColumn(this.jTableDatosDetalleAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleAsientoContable.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleAsientoContable.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleAsientoContable,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleAsientoContable.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleAsientoContable.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleAsientoContable.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleAsientoContable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detalleasientocontableLogic.getDetalleAsientoContables().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detalleasientocontables.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleAsientoContable.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleAsientoContable();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleAsientoContable=false;
					
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleAsientoContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detalleasientocontable.getsType().equals("DUPLICADO")
				   || this.detalleasientocontable.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleAsientoContable=true;
				
				} else {
					this.isEsNuevoDetalleAsientoContable=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					if(this.detalleasientocontable.getId()>=0 && !this.detalleasientocontable.getIsNew()) {						
						this.isEsNuevoDetalleAsientoContable=false;
						
					} else {
						this.isEsNuevoDetalleAsientoContable=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleAsientoContable(esRelaciones);						
				
				this.seleccionarDetalleAsientoContable(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detalleasientocontable.getId()<0) {
					this.isEsNuevoDetalleAsientoContable=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleAsientoContable(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleAsientoContable(evt,rowIndex);
				}	
				
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleAsientoContable: " + this.dDif); 
					}
				}								
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleAsientoContable(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detalleasientocontable)) {
					if(this.detalleasientocontable.getId()>0) {
						this.detalleasientocontable.setIsDeleted(true);
						
						this.detalleasientocontablesEliminados.add(this.detalleasientocontable);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalleasientocontableLogic.getDetalleAsientoContables().remove(this.detalleasientocontable);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalleasientocontables.remove(this.detalleasientocontable);				
					}
					
					
					((DetalleAsientoContableModel) this.jTableDatosDetalleAsientoContable.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleAsientoContable(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleAsientoContable(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleAsientoContable) {
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleAsientoContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleAsientoContable.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontable);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.detalleasientocontableConstantesFunciones.cargarid_empresaDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_empresaDetalleAsientoContable) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detalleasientocontable.getid_empresa());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detalleasientocontable.getEmpresa()!=null) {
							this.empresasForeignKey.add(detalleasientocontable.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detalleasientocontable.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detalleasientocontableConstantesFunciones.cargarid_sucursalDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_sucursalDetalleAsientoContable) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detalleasientocontable.getid_sucursal());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detalleasientocontable.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detalleasientocontable.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detalleasientocontable.getid_sucursal(),false,"Formulario");

					//AsientoContable
					if(!this.detalleasientocontableConstantesFunciones.cargarid_asiento_contableDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_asiento_contableDetalleAsientoContable) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.detalleasientocontable.getid_asiento_contable());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(detalleasientocontable.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(detalleasientocontable.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.detalleasientocontable.getid_asiento_contable(),false,"Formulario");

					//Ejercicio
					if(!this.detalleasientocontableConstantesFunciones.cargarid_ejercicioDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_ejercicioDetalleAsientoContable) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detalleasientocontable.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detalleasientocontable.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detalleasientocontable.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detalleasientocontable.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detalleasientocontableConstantesFunciones.cargarid_periodoDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_periodoDetalleAsientoContable) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detalleasientocontable.getid_periodo());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detalleasientocontable.getPeriodo()!=null) {
							this.periodosForeignKey.add(detalleasientocontable.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detalleasientocontable.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detalleasientocontableConstantesFunciones.cargarid_anioDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_anioDetalleAsientoContable) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detalleasientocontable.getid_anio());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detalleasientocontable.getAnio()!=null) {
							this.aniosForeignKey.add(detalleasientocontable.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detalleasientocontable.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detalleasientocontableConstantesFunciones.cargarid_mesDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_mesDetalleAsientoContable) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detalleasientocontable.getid_mes());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detalleasientocontable.getMes()!=null) {
							this.messForeignKey.add(detalleasientocontable.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detalleasientocontable.getid_mes(),false,"Formulario");

					//CuentaContable
					if(!this.detalleasientocontableConstantesFunciones.cargarid_cuenta_contableDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_cuenta_contableDetalleAsientoContable) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.detalleasientocontable.getid_cuenta_contable());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(detalleasientocontable.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(detalleasientocontable.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.detalleasientocontable.getid_cuenta_contable(),false,"Formulario");

					//CentroActividad
					if(!this.detalleasientocontableConstantesFunciones.cargarid_centro_actividadDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_centro_actividadDetalleAsientoContable) {
						//this.cargarCombosCentroActividadsForeignKeyLista(" where id="+this.detalleasientocontable.getid_centro_actividad());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.centroactividadsForeignKey=new ArrayList<CentroActividad>();

						if(detalleasientocontable.getCentroActividad()!=null) {
							this.centroactividadsForeignKey.add(detalleasientocontable.getCentroActividad());
						}

						this.addItemDefectoCombosForeignKeyCentroActividad();
						this.cargarCombosFrameCentroActividadsForeignKey("Todos");
					}
					this.setActualCentroActividadForeignKey(this.detalleasientocontable.getid_centro_actividad(),false,"Formulario");

					//CentroCosto
					if(!this.detalleasientocontableConstantesFunciones.cargarid_centro_costoDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_centro_costoDetalleAsientoContable) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detalleasientocontable.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detalleasientocontable.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detalleasientocontable.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detalleasientocontable.getid_centro_costo(),false,"Formulario");

					//TipoCambio
					if(!this.detalleasientocontableConstantesFunciones.cargarid_tipo_cambioDetalleAsientoContable || this.detalleasientocontableConstantesFunciones.event_dependid_tipo_cambioDetalleAsientoContable) {
						//this.cargarCombosTipoCambiosForeignKeyLista(" where id="+this.detalleasientocontable.getid_tipo_cambio());
									//this.inicializarActualizarBindingDetalleAsientoContable(false,false);
						this.tipocambiosForeignKey=new ArrayList<TipoCambio>();

						if(detalleasientocontable.getTipoCambio()!=null) {
							this.tipocambiosForeignKey.add(detalleasientocontable.getTipoCambio());
						}

						this.addItemDefectoCombosForeignKeyTipoCambio();
						this.cargarCombosFrameTipoCambiosForeignKey("Todos");
					}
					this.setActualTipoCambioForeignKey(this.detalleasientocontable.getid_tipo_cambio(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleAsientoContable("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleAsientoContable(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleAsientoContable() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleAsientoContable(DetalleAsientoContable detalleasientocontable) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleAsientoContable(detalleasientocontable,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleAsientoContable(detalleasientocontable);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleAsientoContable(detalleasientocontable,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleAsientoContable(detalleasientocontable);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleAsientoContable(DetalleAsientoContable detalleasientocontable) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setText(detalleasientocontable.getnumero_documento());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setText(detalleasientocontable.getdebito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setText(detalleasientocontable.getcredito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setText(detalleasientocontable.getdebito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setText(detalleasientocontable.getcredito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setText(detalleasientocontable.getcotizacion().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setText(detalleasientocontable.getdetalle());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleAsientoContable detalleasientocontableLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detalleasientocontableLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleAsientoContable detalleasientocontableLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detalleasientocontableLocal=this.detalleasientocontable;
			} else {
				detalleasientocontableLocal=this.detalleasientocontableAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detalleasientocontableLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleAsientoContable(detalleasientocontableLocal,true);
					
					if(detalleasientocontableSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detalleasientocontableLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detalleasientocontableLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleAsientoContable(detalleasientocontable,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(detalleasientocontable);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleAsientoContable(detalleasientocontable,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			detalleasientocontable.setnumero_documento(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelnumero_documentoDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setdebito_local(Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_localDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setcredito_local(Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_localDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setdebito_extran(Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldebito_extranDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setcredito_extran(Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcredito_extranDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelcotizacionDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalleasientocontable.setdetalle(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleAsientoContableConstantesFunciones.LABEL_DETALLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleAsientoContable.jLabeldetalleDetalleAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleAsientoContable(DetalleAsientoContable detalleasientocontableBean,DetalleAsientoContable detalleasientocontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleAsientoContable(DetalleAsientoContable detalleasientocontableOrigen,DetalleAsientoContable detalleasientocontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalleasientocontableOrigen.getId()!=null && !detalleasientocontableOrigen.getId().equals(0L))) {detalleasientocontable.setId(detalleasientocontableOrigen.getId());}}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getnumero_documento()!=null && !detalleasientocontableOrigen.getnumero_documento().equals(""))) {detalleasientocontable.setnumero_documento(detalleasientocontableOrigen.getnumero_documento());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getdebito_local()!=null && !detalleasientocontableOrigen.getdebito_local().equals(0.0))) {detalleasientocontable.setdebito_local(detalleasientocontableOrigen.getdebito_local());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getcredito_local()!=null && !detalleasientocontableOrigen.getcredito_local().equals(0.0))) {detalleasientocontable.setcredito_local(detalleasientocontableOrigen.getcredito_local());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getdebito_extran()!=null && !detalleasientocontableOrigen.getdebito_extran().equals(0.0))) {detalleasientocontable.setdebito_extran(detalleasientocontableOrigen.getdebito_extran());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getcredito_extran()!=null && !detalleasientocontableOrigen.getcredito_extran().equals(0.0))) {detalleasientocontable.setcredito_extran(detalleasientocontableOrigen.getcredito_extran());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getcotizacion()!=null && !detalleasientocontableOrigen.getcotizacion().equals(0.0))) {detalleasientocontable.setcotizacion(detalleasientocontableOrigen.getcotizacion());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getdetalle()!=null && !detalleasientocontableOrigen.getdetalle().equals(""))) {detalleasientocontable.setdetalle(detalleasientocontableOrigen.getdetalle());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getcon_centro_costo()!=null && !detalleasientocontableOrigen.getcon_centro_costo().equals(false))) {detalleasientocontable.setcon_centro_costo(detalleasientocontableOrigen.getcon_centro_costo());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getfecha()!=null && !detalleasientocontableOrigen.getfecha().equals(new Date()))) {detalleasientocontable.setfecha(detalleasientocontableOrigen.getfecha());}
			if(conDefault || (!conDefault && detalleasientocontableOrigen.getnumero_deposito()!=null && !detalleasientocontableOrigen.getnumero_deposito().equals(""))) {detalleasientocontable.setnumero_deposito(detalleasientocontableOrigen.getnumero_deposito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleAsientoContable(DetalleAsientoContable detalleasientocontable) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setText(detalleasientocontable.getnumero_documento());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setText(detalleasientocontable.getdebito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setText(detalleasientocontable.getcredito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setText(detalleasientocontable.getdebito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setText(detalleasientocontable.getcredito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setText(detalleasientocontable.getcotizacion().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setText(detalleasientocontable.getdetalle());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleAsientoContable(DetalleAsientoContableBean detalleasientocontableBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setText(detalleasientocontableBean.getnumero_documento());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setText(detalleasientocontableBean.getdebito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setText(detalleasientocontableBean.getcredito_local().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setText(detalleasientocontableBean.getdebito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setText(detalleasientocontableBean.getcredito_extran().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setText(detalleasientocontableBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setText(detalleasientocontableBean.getdetalle());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleAsientoContable(DetalleAsientoContableParameterReturnGeneral detalleasientocontableReturnGeneral,DetalleAsientoContableBean detalleasientocontableBean,Boolean conDefault) throws Exception { 
		try {
			DetalleAsientoContable detalleasientocontableLocal=new DetalleAsientoContable();
			
			detalleasientocontableLocal=detalleasientocontableReturnGeneral.getDetalleAsientoContable();
			
			
			if(conDefault || (!conDefault && detalleasientocontableLocal.getnumero_documento()!=null && !detalleasientocontableLocal.getnumero_documento().equals(""))) {detalleasientocontableBean.setnumero_documento(detalleasientocontableLocal.getnumero_documento());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getdebito_local()!=null && !detalleasientocontableLocal.getdebito_local().equals(0.0))) {detalleasientocontableBean.setdebito_local(detalleasientocontableLocal.getdebito_local());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getcredito_local()!=null && !detalleasientocontableLocal.getcredito_local().equals(0.0))) {detalleasientocontableBean.setcredito_local(detalleasientocontableLocal.getcredito_local());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getdebito_extran()!=null && !detalleasientocontableLocal.getdebito_extran().equals(0.0))) {detalleasientocontableBean.setdebito_extran(detalleasientocontableLocal.getdebito_extran());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getcredito_extran()!=null && !detalleasientocontableLocal.getcredito_extran().equals(0.0))) {detalleasientocontableBean.setcredito_extran(detalleasientocontableLocal.getcredito_extran());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getcotizacion()!=null && !detalleasientocontableLocal.getcotizacion().equals(0.0))) {detalleasientocontableBean.setcotizacion(detalleasientocontableLocal.getcotizacion());}
			if(conDefault || (!conDefault && detalleasientocontableLocal.getdetalle()!=null && !detalleasientocontableLocal.getdetalle().equals(""))) {detalleasientocontableBean.setdetalle(detalleasientocontableLocal.getdetalle());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleAsientoContableGenerico(Long idDetalleAsientoContableSeleccionado,JComboBox jComboBoxDetalleAsientoContable,List<DetalleAsientoContable> detalleasientocontablesLocal)throws Exception {
		try {
			DetalleAsientoContable  detalleasientocontableTemp=null;

			for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesLocal) {
				if(detalleasientocontableAux.getId()!=null && detalleasientocontableAux.getId().equals(idDetalleAsientoContableSeleccionado)) {
					detalleasientocontableTemp=detalleasientocontableAux;
					break;
				}
			}

			jComboBoxDetalleAsientoContable.setSelectedItem(detalleasientocontableTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleAsientoContableGenerico(JComboBox jComboBoxDetalleAsientoContable,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleAsientoContable.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleAsientoContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleAsientoContable.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleAsientoContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleasientocontable=(DetalleAsientoContable) detalleasientocontableLogic.getDetalleAsientoContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleasientocontable =(DetalleAsientoContable) detalleasientocontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getmes_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getcuentacontable_descripcion();
			}
		}

		if(sTipo.equals("CentroActividad")) {
			//sDescripcion=this.getActualCentroActividadForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getcentroactividad_descripcion();
			} else {
				//sDescripcion=this.getActualCentroActividadForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getcentroactividad_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("TipoCambio")) {
			//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
			if(!detalleasientocontable.getIsNew() && !detalleasientocontable.getIsChanged() && !detalleasientocontable.getIsDeleted()) {
				sDescripcion=detalleasientocontable.gettipocambio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCambioForeignKeyDescripcion((Long)value);
				sDescripcion=detalleasientocontable.gettipocambio_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleAsientoContable detalleasientocontableRow=new DetalleAsientoContable();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleasientocontableRow=(DetalleAsientoContable) detalleasientocontableLogic.getDetalleAsientoContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalleasientocontableRow=(DetalleAsientoContable) detalleasientocontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleAsientoContable(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));			
			this.jButtonDuplicarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarDetalleAsientoContable && this.isPermisoDuplicarDetalleAsientoContable));			
			this.jButtonCopiarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaCopiarDetalleAsientoContable && this.isPermisoCopiarDetalleAsientoContable));
			this.jButtonVerFormDetalleAsientoContable.setVisible((this.isVisibilidadCeldaVerFormDetalleAsientoContable && this.isPermisoVerFormDetalleAsientoContable));
			/*
			this.jButtonAbrirOrderByDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));			
			*/
			this.jButtonNuevoRelacionesDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));			
			this.jButtonNuevoGuardarCambiosDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaModificarDetalleAsientoContable && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaActualizarDetalleAsientoContable && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaEliminarDetalleAsientoContable && this.isPermisoEliminarDetalleAsientoContable));
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.setVisible(this.isVisibilidadCeldaCancelarDetalleAsientoContable);							
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));						
			this.jButtonDuplicarToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarDetalleAsientoContable && this.isPermisoDuplicarDetalleAsientoContable));						
			this.jButtonCopiarToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaCopiarDetalleAsientoContable && this.isPermisoCopiarDetalleAsientoContable));			
			this.jButtonVerFormToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaVerFormDetalleAsientoContable && this.isPermisoVerFormDetalleAsientoContable));			
			this.jButtonAbrirOrderByToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));
			this.jButtonNuevoRelacionesToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));			
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaModificarDetalleAsientoContable && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaActualizarDetalleAsientoContable  && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaEliminarDetalleAsientoContable && this.isPermisoEliminarDetalleAsientoContable));
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarToolBarDetalleAsientoContable.setVisible(this.isVisibilidadCeldaCancelarDetalleAsientoContable);				
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));			
			this.jMenuItemDuplicarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarDetalleAsientoContable && this.isPermisoDuplicarDetalleAsientoContable));			
			this.jMenuItemCopiarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaCopiarDetalleAsientoContable && this.isPermisoCopiarDetalleAsientoContable));			
			this.jMenuItemVerFormDetalleAsientoContable.setVisible((this.isVisibilidadCeldaVerFormDetalleAsientoContable && this.isPermisoVerFormDetalleAsientoContable));			
			this.jMenuItemAbrirOrderByDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));			
			//this.jMenuItemMostrarOcultarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));
			this.jMenuItemDetalleAbrirOrderByDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));			
			//this.jMenuItemDetalleMostrarOcultarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaOrdenDetalleAsientoContable && this.isPermisoOrdenDetalleAsientoContable));			
			this.jMenuItemNuevoRelacionesDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable));			
			this.jMenuItemNuevoGuardarCambiosDetalleAsientoContable.setVisible((this.isVisibilidadCeldaNuevoDetalleAsientoContable && this.isPermisoNuevoDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));									
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemModificarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaModificarDetalleAsientoContable && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemActualizarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaActualizarDetalleAsientoContable && this.isPermisoActualizarDetalleAsientoContable));	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemEliminarDetalleAsientoContable.setVisible((this.isVisibilidadCeldaEliminarDetalleAsientoContable && this.isPermisoEliminarDetalleAsientoContable));
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemCancelarDetalleAsientoContable.setVisible(this.isVisibilidadCeldaCancelarDetalleAsientoContable);				
			}
			
			this.jMenuItemGuardarCambiosDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));						
			this.jMenuItemGuardarCambiosTablaDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=this.jButtonNuevoDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleAsientoContable=this.jButtonDuplicarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaCopiarDetalleAsientoContable=this.jButtonCopiarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaVerFormDetalleAsientoContable=this.jButtonVerFormDetalleAsientoContable.isVisible();
			/*
			this.isVisibilidadCeldaOrdenDetalleAsientoContable=this.jButtonAbrirOrderByDetalleAsientoContable.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=this.jButtonNuevoRelacionesDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaModificarDetalleAsientoContable=this.jButtonModificarDetalleAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=this.jButtonGuardarCambiosTablaDetalleAsientoContable.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=this.jButtonNuevoToolBarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=this.jButtonNuevoRelacionesToolBarDetalleAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.isVisibilidadCeldaModificarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarToolBarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarToolBarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarToolBarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarToolBarDetalleAsientoContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleAsientoContable=this.jButtonGuardarCambiosToolBarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=this.jButtonGuardarCambiosTablaToolBarDetalleAsientoContable.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=this.jMenuItemNuevoDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=this.jMenuItemNuevoRelacionesDetalleAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.isVisibilidadCeldaModificarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemModificarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemActualizarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemEliminarDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemCancelarDetalleAsientoContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleAsientoContable=this.jMenuItemGuardarCambiosDetalleAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=this.jMenuItemGuardarCambiosTablaDetalleAsientoContable.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleAsientoContable(Boolean esInicializar) {
		if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
				//if(this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleAsientoContable();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleAsientoContable(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleAsientoContable() {
		this.jButtonNuevoDetalleAsientoContable.setVisible(this.isPermisoNuevoDetalleAsientoContable);			
		this.jButtonDuplicarDetalleAsientoContable.setVisible(this.isPermisoDuplicarDetalleAsientoContable);			
		this.jButtonCopiarDetalleAsientoContable.setVisible(this.isPermisoCopiarDetalleAsientoContable);			
		this.jButtonVerFormDetalleAsientoContable.setVisible(this.isPermisoVerFormDetalleAsientoContable);			
		/*
		this.jButtonAbrirOrderByDetalleAsientoContable.setVisible(this.isPermisoOrdenDetalleAsientoContable);					
		*/
		this.jButtonNuevoRelacionesDetalleAsientoContable.setVisible(this.isPermisoNuevoDetalleAsientoContable);			
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarDetalleAsientoContable.setVisible(this.isPermisoActualizarDetalleAsientoContable);	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.setVisible(this.isPermisoActualizarDetalleAsientoContable);	
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.setVisible(this.isPermisoEliminarDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.setVisible(this.isVisibilidadCeldaCancelarDetalleAsientoContable);						
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.setVisible(this.isPermisoGuardarCambiosDetalleAsientoContable);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleAsientoContable.setVisible(this.isPermisoActualizarDetalleAsientoContable);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleAsientoContable() {
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarDetalleAsientoContable.setVisible(this.isPermisoActualizarDetalleAsientoContable);	
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.setVisible(this.isPermisoActualizarDetalleAsientoContable);	
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.setVisible(this.isPermisoEliminarDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.setVisible(this.isVisibilidadCeldaCancelarDetalleAsientoContable);							
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.setVisible((this.isVisibilidadCeldaGuardarDetalleAsientoContable && this.isPermisoGuardarCambiosDetalleAsientoContable));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleAsientoContable() {
		if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleAsientoContable();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleAsientoContable() {
	}
	
	public void jTableDatosDetalleAsientoContableListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleAsientoContable(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detalleasientocontable.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detalleasientocontable.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detalleasientocontable.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableDetalleAsientoContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleAsientoContable=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosDetalleAsientoContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.detalleasientocontable.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_documentoDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getnumero_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_documento like '%"+this.detalleasientocontable.getnumero_documento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detalleasientocontable.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detalleasientocontable.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detalleasientocontable.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detalleasientocontable.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="CuentaContable";

			if(!this.sFinalQueryGeneral_cuentacontable.equals("")) {
				this.cuentacontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontable);
				this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleAsientoContable=null;
			TitledBorder titledBordercuentacontable=null;

			if(!this.jScrollPanelDatosDetalleAsientoContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contableDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.detalleasientocontable.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_localDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getdebito_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_local = "+this.detalleasientocontable.getdebito_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_localDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getcredito_local()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_local = "+this.detalleasientocontable.getcredito_local().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondebito_extranDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getdebito_extran()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where debito_extran = "+this.detalleasientocontable.getdebito_extran().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncredito_extranDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getcredito_extran()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where credito_extran = "+this.detalleasientocontable.getcredito_extran().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_actividadDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentroactividad=true;

			idTienePermisocentroactividad=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(CentroActividadConstantesFunciones.CLASSNAME);

			if(idTienePermisocentroactividad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.centroactividadBeanSwingJInternalFrame=new CentroActividadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centroactividadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centroactividadBeanSwingJInternalFrame.getCentroActividadLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_centro_actividad()!=null) {
					this.centroactividadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centroactividadBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_centro_actividad());
					this.centroactividadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centroactividadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centroactividadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroActividad();
				}

				JInternalFrameBase jinternalFrame =this.centroactividadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordercentroactividad=(TitledBorder)this.centroactividadBeanSwingJInternalFrame.jScrollPanelDatosCentroActividad.getBorder();

				titledBordercentroactividad.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Centro Actividad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_actividadDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_centro_actividad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_actividad = "+this.detalleasientocontable.getid_centro_actividad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleAsientoContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleAsientoContable=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosDetalleAsientoContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detalleasientocontable.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.detalleasientocontable.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondetalleDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getdetalle()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where detalle like '%"+this.detalleasientocontable.getdetalle()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="TipoCambio";

			if(!this.sFinalQueryGeneral_tipocambio.equals("")) {
				this.tipocambioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_tipocambio);
				this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.tipocambioBeanSwingJInternalFrame.procesarBusqueda(this.tipocambioBeanSwingJInternalFrame.sAccionBusqueda);
				this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTipoCambio(false);
			}

			if(!this.sFinalQueryComboTipoCambio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleAsientoContable=null;
			TitledBorder titledBordertipocambio=null;

			if(!this.jScrollPanelDatosDetalleAsientoContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Tipo Cambio");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_tipo_cambioDetalleAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocambio=true;

			idTienePermisotipocambio=this.tienePermisosUsuarioEnPaginaWebDetalleAsientoContable(TipoCambioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocambio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);

				this.tipocambioBeanSwingJInternalFrame=new TipoCambioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocambioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocambioBeanSwingJInternalFrame.getTipoCambioLogic().setConnexion(this.detalleasientocontableLogic.getConnexion());

				if(this.detalleasientocontable.getid_tipo_cambio()!=null) {
					this.tipocambioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocambioBeanSwingJInternalFrame.setIdActual(this.detalleasientocontable.getid_tipo_cambio());
					this.tipocambioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocambioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCambio();
				}

				JInternalFrameBase jinternalFrame =this.tipocambioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)this.jScrollPanelDatosDetalleAsientoContable.getBorder();
				TitledBorder titledBordertipocambio=(TitledBorder)this.tipocambioBeanSwingJInternalFrame.jScrollPanelDatosTipoCambio.getBorder();

				titledBordertipocambio.setTitle(titledBorderDetalleAsientoContable.getTitle() + " -> Tipo Cambio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalleasientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cambioDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getid_tipo_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cambio = "+this.detalleasientocontable.getid_tipo_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_centro_costoDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getcon_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_centro_costo = "+this.detalleasientocontable.getcon_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.detalleasientocontable.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_depositoDetalleAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.getdetalleasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalleasientocontable==null) {
						this.detalleasientocontable = new DetalleAsientoContable();
					}

					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);
				}

				if(this.detalleasientocontable.getnumero_deposito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_deposito like '%"+this.detalleasientocontable.getnumero_deposito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameDetalleAsientoContable() {
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleAsientoContable.dispose();
			this.jInternalFrameDetalleFormDetalleAsientoContable=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
			this.jInternalFrameReporteDinamicoDetalleAsientoContable.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleAsientoContable.dispose();
			this.jInternalFrameReporteDinamicoDetalleAsientoContable=null;
		}
		
		if(this.jInternalFrameImportacionDetalleAsientoContable!=null) {
			this.jInternalFrameImportacionDetalleAsientoContable.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleAsientoContable.dispose();
			this.jInternalFrameImportacionDetalleAsientoContable=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleAsientoContable();
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleAsientoContable")) {
				jButtonDuplicarDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleAsientoContable")) {
				jButtonCopiarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleAsientoContable")) {
				jButtonVerFormDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleAsientoContable")) {
				jButtonDuplicarDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleAsientoContable")) {
				jButtonDuplicarDetalleAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleAsientoContable")) {
				jButtonModificarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleAsientoContable")) {
				jButtonModificarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleAsientoContable")) {
				jButtonModificarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleAsientoContable")) {
				jButtonActualizarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleAsientoContable")) {
				jButtonActualizarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleAsientoContable")) {
				jButtonActualizarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleAsientoContable")) {
				jButtonEliminarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleAsientoContable")) {
				jButtonEliminarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleAsientoContable")) {
				jButtonEliminarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleAsientoContable")) {
				jButtonCancelarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleAsientoContable")) {
				jButtonCancelarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleAsientoContable")) {
				jButtonCancelarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleAsientoContable")) {
				jButtonCerrarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleAsientoContable")) {
				jButtonCerrarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleAsientoContable")) {
				jButtonCerrarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleAsientoContable")) {
				jButtonMostrarOcultarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleAsientoContable")) {
				jButtonCancelarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleAsientoContable")) {
				jButtonCopiarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleAsientoContable")) {
				jButtonVerFormDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleAsientoContable")) {
				jButtonCopiarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleAsientoContable")) {
				jButtonVerFormDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleAsientoContable")) {
				jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleAsientoContable")) {
				jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleAsientoContable")) {
				jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleAsientoContable")) {
				jButtonAnterioresDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleAsientoContable")) {
				jButtonAnterioresDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleAsientoContable")) {
				jButtonAnterioresDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleAsientoContable")) {
				jButtonSiguientesDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleAsientoContable")) {
				jButtonSiguientesDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleAsientoContable")) {
				jButtonSiguientesDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleAsientoContable") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleAsientoContable")) {
				jButtonAbrirOrderByDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleAsientoContable") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleAsientoContable")) {
				jButtonMostrarOcultarDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleAsientoContable")) {
				jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleAsientoContable")) {
				jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleAsientoContable")) {
				jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleAsientoContable")) {
				jButtonCerrarReporteDinamicoDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleAsientoContable")) {
				jButtonGenerarReporteDinamicoDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleAsientoContable")) {
				/*
				jButtonGenerarExcelReporteDinamicoDetalleAsientoContableActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionDetalleAsientoContable")) {
				jButtonCerrarImportacionDetalleAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleAsientoContable")) {
				/*
				jButtonGenerarImportacionDetalleAsientoContableActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionDetalleAsientoContable")) {
				/*
				jButtonAbrirImportacionDetalleAsientoContableActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesDetalleAsientoContable")) {
				jComboBoxTiposAccionesDetalleAsientoContableActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleAsientoContable")) {
				jComboBoxTiposRelacionesDetalleAsientoContableActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleAsientoContable")) {
				jComboBoxTiposAccionesDetalleAsientoContableActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleAsientoContable")) {
				/*
				jComboBoxTiposSeleccionarDetalleAsientoContableActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralDetalleAsientoContable")) {
				jTextFieldValorCampoGeneralDetalleAsientoContableActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetalleAsientoContable")) {
				jButtonAbrirTotalesDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetalleAsientoContable")) {
				jButtonCerrarTotalesDetalleAsientoContableActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetalleAsientoContable")) {
				jButtonAbrirOrderByDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleAsientoContable")) {
				jButtonAbrirOrderByDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleAsientoContable")) {
				jButtonCerrarOrderByDetalleAsientoContableActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleAsientoContableBusqueda")) {
				this.jButtonidDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleAsientoContableUpdate")) {
				this.jButtonid_empresaDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleAsientoContableBusqueda")) {
				this.jButtonid_empresaDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleAsientoContableUpdate")) {
				this.jButtonid_sucursalDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleAsientoContableBusqueda")) {
				this.jButtonid_sucursalDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContable")) {
				this.jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContableUpdate")) {
				this.jButtonid_asiento_contableDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContableBusqueda")) {
				this.jButtonid_asiento_contableDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoDetalleAsientoContableBusqueda")) {
				this.jButtonnumero_documentoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleAsientoContableUpdate")) {
				this.jButtonid_ejercicioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleAsientoContableBusqueda")) {
				this.jButtonid_ejercicioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleAsientoContableUpdate")) {
				this.jButtonid_periodoDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleAsientoContableBusqueda")) {
				this.jButtonid_periodoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleAsientoContableUpdate")) {
				this.jButtonid_anioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleAsientoContableBusqueda")) {
				this.jButtonid_anioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleAsientoContableUpdate")) {
				this.jButtonid_mesDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleAsientoContableBusqueda")) {
				this.jButtonid_mesDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContable")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableUpdate")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableBusqueda")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_localDetalleAsientoContableBusqueda")) {
				this.jButtondebito_localDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_localDetalleAsientoContableBusqueda")) {
				this.jButtoncredito_localDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_extranDetalleAsientoContableBusqueda")) {
				this.jButtondebito_extranDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_extranDetalleAsientoContableBusqueda")) {
				this.jButtoncredito_extranDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_actividadDetalleAsientoContableUpdate")) {
				this.jButtonid_centro_actividadDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_actividadDetalleAsientoContableBusqueda")) {
				this.jButtonid_centro_actividadDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContable")) {
				this.jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableUpdate")) {
				this.jButtonid_centro_costoDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableBusqueda")) {
				this.jButtonid_centro_costoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionDetalleAsientoContableBusqueda")) {
				this.jButtoncotizacionDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleDetalleAsientoContableBusqueda")) {
				this.jButtondetalleDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContable")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContableUpdate")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContableBusqueda")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_centro_costoDetalleAsientoContableBusqueda")) {
				this.jButtoncon_centro_costoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaDetalleAsientoContableBusqueda")) {
				this.jButtonfechaDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_depositoDetalleAsientoContableBusqueda")) {
				this.jButtonnumero_depositoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContable")) {
				this.jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("id_centro_costoDetalleAsientoContable")) {
				this.jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContable")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContable")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
			}
			
			
			;
			
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleAsientoContable();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				


			if(sTipo.equals("debito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("credito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleAsientoContable detalleasientocontableLocal=null;
			
			if(!this.getEsControlTabla()) {
				detalleasientocontableLocal=this.detalleasientocontable;
			} else {
				detalleasientocontableLocal=this.detalleasientocontableAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("debito_localDetalleAsientoContable")) {
					if(detalleasientocontableLocal.getdebito_local()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("credito_localDetalleAsientoContable")) {
					if(detalleasientocontableLocal.getcredito_local()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
							
				
				


			if(sTipo.equals("debito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("credito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("debito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("credito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
								
						
				


				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
								
				
				


				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
							
				
				


				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
								
				
				


			if(sTipo.equals("debito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("credito_localDetalleAsientoContable")) {
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleAsientoContable")) {
					jCheckBoxSeleccionarTodosDetalleAsientoContableItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleAsientoContable")) {
					jCheckBoxSeleccionadosDetalleAsientoContableItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleAsientoContable")) {
					
				}
				
				


				
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
												
				
				


				
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleAsientoContableActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalleasientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalleasientocontable);
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleAsientoContable.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleAsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalleasientocontableAnterior =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleAsientoContable")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleAsientoContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleAsientoContable.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detalleasientocontable =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detalleasientocontable);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleAsientoContable")) {
				
				}
				
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleAsientoContable")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleAsientoContable.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleAsientoContable")) {
			
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleAsientoContable();
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleAsientoContable")) {
				jButtonDuplicarDetalleAsientoContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleAsientoContable")) {
				jButtonCopiarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleAsientoContable")) {
				jButtonVerFormDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleAsientoContable")) {
				jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleAsientoContable")) {
				jButtonModificarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleAsientoContable")) {
				jButtonActualizarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleAsientoContable")) {
				jButtonEliminarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleAsientoContable")) {
				jButtonCancelarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleAsientoContable")) {
				jButtonCerrarDetalleAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleAsientoContable")) {
				jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleAsientoContable")) {
				jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleAsientoContable")) {
				jButtonAbrirOrderByDetalleAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleAsientoContable")) {
				jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleAsientoContable")) {
				jButtonAnterioresDetalleAsientoContableActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleAsientoContable")) {
				jButtonSiguientesDetalleAsientoContableActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleAsientoContableBusqueda")) {
				this.jButtonidDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleAsientoContableUpdate")) {
				this.jButtonid_empresaDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleAsientoContableBusqueda")) {
				this.jButtonid_empresaDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleAsientoContableUpdate")) {
				this.jButtonid_sucursalDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleAsientoContableBusqueda")) {
				this.jButtonid_sucursalDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContable")) {
				this.jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContableUpdate")) {
				this.jButtonid_asiento_contableDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableDetalleAsientoContableBusqueda")) {
				this.jButtonid_asiento_contableDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoDetalleAsientoContableBusqueda")) {
				this.jButtonnumero_documentoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleAsientoContableUpdate")) {
				this.jButtonid_ejercicioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleAsientoContableBusqueda")) {
				this.jButtonid_ejercicioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleAsientoContableUpdate")) {
				this.jButtonid_periodoDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleAsientoContableBusqueda")) {
				this.jButtonid_periodoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleAsientoContableUpdate")) {
				this.jButtonid_anioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleAsientoContableBusqueda")) {
				this.jButtonid_anioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleAsientoContableUpdate")) {
				this.jButtonid_mesDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleAsientoContableBusqueda")) {
				this.jButtonid_mesDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContable")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableUpdate")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableDetalleAsientoContableBusqueda")) {
				this.jButtonid_cuenta_contableDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_localDetalleAsientoContableBusqueda")) {
				this.jButtondebito_localDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_localDetalleAsientoContableBusqueda")) {
				this.jButtoncredito_localDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("debito_extranDetalleAsientoContableBusqueda")) {
				this.jButtondebito_extranDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("credito_extranDetalleAsientoContableBusqueda")) {
				this.jButtoncredito_extranDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_actividadDetalleAsientoContableUpdate")) {
				this.jButtonid_centro_actividadDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_actividadDetalleAsientoContableBusqueda")) {
				this.jButtonid_centro_actividadDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContable")) {
				this.jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableUpdate")) {
				this.jButtonid_centro_costoDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleAsientoContableBusqueda")) {
				this.jButtonid_centro_costoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionDetalleAsientoContableBusqueda")) {
				this.jButtoncotizacionDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleDetalleAsientoContableBusqueda")) {
				this.jButtondetalleDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContable")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContableUpdate")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cambioDetalleAsientoContableBusqueda")) {
				this.jButtonid_tipo_cambioDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_centro_costoDetalleAsientoContableBusqueda")) {
				this.jButtoncon_centro_costoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaDetalleAsientoContableBusqueda")) {
				this.jButtonfechaDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_depositoDetalleAsientoContableBusqueda")) {
				this.jButtonnumero_depositoDetalleAsientoContableBusquedaActionPerformed(evt);
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleAsientoContable();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleAsientoContable")) {
				closingInternalFrameDetalleAsientoContable();
				
			} else if(sTipo.equals("jButtonCancelarDetalleAsientoContable")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleAsientoContable = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleAsientoContableBeanSwingJInternalFrame jInternalFrameParent=(DetalleAsientoContableBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleAsientoContable.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleAsientoContableActionPerformed(null);
			}
			
			DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalleasientocontable,new Object(),this.detalleasientocontableParameterGeneral,this.detalleasientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleAsientoContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleAsientoContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleAsientoContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detalleasientocontable)) {
			if(!esControlTabla) {
				if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);			
				}
				
				if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleAsientoContable(this.detalleasientocontable,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleasientocontableReturnGeneral=detalleasientocontableLogic.procesarEventosDetalleAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleasientocontableLogic.getDetalleAsientoContables(),this.detalleasientocontable,this.detalleasientocontableParameterGeneral,this.isEsNuevoDetalleAsientoContable,classes);//this.detalleasientocontableLogic.getDetalleAsientoContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleAsientoContable(this.detalleasientocontableReturnGeneral,this.detalleasientocontableBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleAsientoContable(classes,this.detalleasientocontableReturnGeneral,this.detalleasientocontableBean,false);
					}
						
					if(this.detalleasientocontableReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable());	
					}
						
					if(this.detalleasientocontableReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable(),classes);//this.detalleasientocontableBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleAsientoContable(this.detalleasientocontable,classes);//this.detalleasientocontableBean);									
				}
			
				if(DetalleAsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleAsientoContable(this.detalleasientocontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleAsientoContable(this.detalleasientocontable);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detalleasientocontableAnterior!=null) {
						this.detalleasientocontable=this.detalleasientocontableAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalleasientocontableReturnGeneral=detalleasientocontableLogic.procesarEventosDetalleAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleasientocontableLogic.getDetalleAsientoContables(),this.detalleasientocontable,this.detalleasientocontableParameterGeneral,this.isEsNuevoDetalleAsientoContable,classes);//this.detalleasientocontableLogic.getDetalleAsientoContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalleasientocontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalleasientocontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable(),detalleasientocontableLogic.getDetalleAsientoContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable(),this.detalleasientocontables);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleAsientoContable.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleAsientoContable.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleAsientoContable();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleAsientoContable() throws Exception {
		
		DetalleAsientoContableModel detalleasientocontableModel=(DetalleAsientoContableModel)this.jTableDatosDetalleAsientoContable.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalleasientocontableModel.detalleasientocontables=this.detalleasientocontableLogic.getDetalleAsientoContables();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detalleasientocontableModel.detalleasientocontables=this.detalleasientocontables;
		}
		
		
		((DetalleAsientoContableModel) this.jTableDatosDetalleAsientoContable.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleAsientoContable() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetalleasientocontableAnterior(),this.detalleasientocontableLogic.getDetalleAsientoContables());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetalleasientocontableAnterior(),this.detalleasientocontables);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleAsientoContable();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleasientocontable,new Object(),generalEntityParameterGeneral,this.detalleasientocontableReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detalleasientocontableSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsOfDetalleAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleAsientoContableConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleAsientoContable(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleAsientoContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleAsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalleasientocontable,new Object(),generalEntityParameterGeneral,this.detalleasientocontableReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleAsientoContable(DetalleAsientoContableBean detalleasientocontableBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleAsientoContable(ArrayList<Classe> classes,DetalleAsientoContableReturnGeneral detalleasientocontableReturnGeneral,DetalleAsientoContableBean detalleasientocontableBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detalleasientocontable)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleAsientoContable = new DetalleAsientoContableDetalleFormJInternalFrame(jDesktopPane,this.detalleasientocontableSessionBean.getConGuardarRelaciones(),this.detalleasientocontableSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.setVisible(false);
		this.jInternalFrameDetalleFormDetalleAsientoContable.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.detalleasientocontableLogic=this.detalleasientocontableLogic;
		
		this.cargarCombosFrameForeignKeyDetalleAsientoContable("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleAsientoContable();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleAsientoContable();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleAsientoContable("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleAsientoContable();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleAsientoContable"));
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarDetalleAsientoContable"));

		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleAsientoContable"));
					
		this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemModificarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleAsientoContable"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"ActualizarDetalleAsientoContable"));
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleAsientoContable"));
						
		this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemActualizarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleAsientoContable"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarDetalleAsientoContable"));
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleAsientoContable"));
								
		this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemEliminarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleAsientoContable"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarDetalleAsientoContable"));
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleAsientoContable"));
					
		this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemCancelarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleAsientoContable"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemDetalleCerrarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleAsientoContable"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleAsientoContable"));
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleAsientoContable"));
		*/
		
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleAsientoContable"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.addFocusListener(new TextFieldFocusListener(this,"debito_localDetalleAsientoContable"));
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.addActionListener(new TextFieldActionListener(this,"debito_localDetalleAsientoContable"));
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddebito_localDetalleAsientoContable,"debito_localDetalleAsientoContable"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.addFocusListener(new TextFieldFocusListener(this,"credito_localDetalleAsientoContable"));
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.addActionListener(new TextFieldActionListener(this,"credito_localDetalleAsientoContable"));
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcredito_localDetalleAsientoContable,"credito_localDetalleAsientoContable"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonidDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableBusqueda"));
		//jButtonid_asiento_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_documentoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableBusqueda"));
		//jButtonid_cuenta_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContable"));
		//jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_extranDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_extranDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableBusqueda"));
		//jButtonid_centro_costoDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContable"));
		//jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncotizacionDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondetalleDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"detalleDetalleAsientoContableBusqueda"));
		//jButtonid_tipo_cambioDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncon_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonfechaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_depositoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_depositoDetalleAsientoContableBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleAsientoContable"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleAsientoContable"));
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleAsientoContable"));
		}
		
		this.jTableDatosDetalleAsientoContable.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleAsientoContable"));
		
		this.jTableDatosDetalleAsientoContable.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleAsientoContable"));
		
		this.jButtonNuevoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoDetalleAsientoContable"));
		
		this.jButtonDuplicarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"DuplicarDetalleAsientoContable"));
		
		this.jButtonCopiarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"CopiarDetalleAsientoContable"));
		
		this.jButtonVerFormDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"VerFormDetalleAsientoContable"));
		
		/*
		this.jButtonNuevoToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleAsientoContable"));
			
		this.jButtonDuplicarToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleAsientoContable"));
			
		this.jMenuItemNuevoDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleAsientoContable"));
			
		this.jMenuItemDuplicarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleAsientoContable"));		
		*/
		
		this.jButtonNuevoRelacionesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleAsientoContable"));
		
		/*
		this.jButtonNuevoRelacionesToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleAsientoContable"));
			
		this.jMenuItemNuevoRelacionesDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleAsientoContable"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarDetalleAsientoContable"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonModificarToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleAsientoContable"));
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemModificarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleAsientoContable"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"ActualizarDetalleAsientoContable"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonActualizarToolBarDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleAsientoContable"));
				
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemActualizarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleAsientoContable"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarDetalleAsientoContable"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonEliminarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleAsientoContable"));
						
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemEliminarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleAsientoContable"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarDetalleAsientoContable"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonCancelarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleAsientoContable"));
			
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemCancelarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleAsientoContable"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleAsientoContable"));		
		*/
		
		this.jButtonCerrarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarDetalleAsientoContable"));
		
		/*
		this.jButtonCerrarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleAsientoContable"));
			
		this.jMenuItemCerrarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleAsientoContable"));
			
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jMenuItemDetalleCerrarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleAsientoContable"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleAsientoContable"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleAsientoContable"));
		}
		
		this.jButtonCopiarToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleAsientoContable"));
			
		this.jButtonVerFormToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleAsientoContable"));
		
		this.jMenuItemGuardarCambiosDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleAsientoContable"));
			
		this.jMenuItemCopiarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleAsientoContable"));		
		
		this.jMenuItemVerFormDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleAsientoContable"));		
		*/
		
		this.jButtonGuardarCambiosTablaDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleAsientoContable"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleAsientoContable"));
			
		this.jMenuItemGuardarCambiosTablaDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleAsientoContable"));		
		*/
		
		/*
		this.jButtonRecargarInformacionDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleAsientoContable"));
					
		this.jButtonRecargarInformacionToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleAsientoContable"));
		
		this.jMenuItemRecargarInformacionDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleAsientoContable"));		
		*/
		
		
		this.jButtonAnterioresDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"AnterioresDetalleAsientoContable"));
		
		/*
		this.jButtonAnterioresToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleAsientoContable"));
		
		this.jMenuItemAnterioresDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleAsientoContable"));		
		*/
		
		this.jButtonSiguientesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"SiguientesDetalleAsientoContable"));
		
		/*
		this.jButtonSiguientesToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleAsientoContable"));
			
		this.jMenuItemSiguientesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleAsientoContable"));
			
		this.jMenuItemAbrirOrderByDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleAsientoContable"));
			
		this.jMenuItemMostrarOcultarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleAsientoContable"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleAsientoContable"));
			
		this.jMenuItemDetalleMostarOcultarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleAsientoContable"));		
		*/
		
		this.jButtonNuevoGuardarCambiosDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleAsientoContable"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleAsientoContable"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleAsientoContable"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleAsientoContable.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleAsientoContable"));

		this.jCheckBoxSeleccionadosDetalleAsientoContable.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleAsientoContable"));
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleAsientoContable"));
		}
		
		/*
		this.jComboBoxTiposRelacionesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleAsientoContable"));
			
		this.jComboBoxTiposAccionesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleAsientoContable"));
					
		this.jComboBoxTiposSeleccionarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleAsientoContable"));
			
		this.jTextFieldValorCampoGeneralDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleAsientoContable"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.addFocusListener(new TextFieldFocusListener(this,"debito_localDetalleAsientoContable"));
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.addActionListener(new TextFieldActionListener(this,"debito_localDetalleAsientoContable"));
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddebito_localDetalleAsientoContable,"debito_localDetalleAsientoContable"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.addFocusListener(new TextFieldFocusListener(this,"credito_localDetalleAsientoContable"));
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.addActionListener(new TextFieldActionListener(this,"credito_localDetalleAsientoContable"));
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcredito_localDetalleAsientoContable,"credito_localDetalleAsientoContable"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonidDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableBusqueda"));
		//jButtonid_asiento_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_documentoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableBusqueda"));
		//jButtonid_cuenta_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContable"));
		//jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_extranDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_extranDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableBusqueda"));
		//jButtonid_centro_costoDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContable"));
		//jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncotizacionDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondetalleDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"detalleDetalleAsientoContableBusqueda"));
		//jButtonid_tipo_cambioDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncon_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonfechaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_depositoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_depositoDetalleAsientoContableBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonFK_IdAsientoContableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableDetalleAsientoContable"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContable"));

			this.jButtonFK_IdCentroActividadDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroActividadDetalleAsientoContable"));

			this.jButtonFK_IdCentroCostoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleAsientoContable"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContable"));

			this.jButtonFK_IdCuentaContableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDetalleAsientoContable"));

			this.jButtonBuscarFK_IdCuentaContableid_cuenta_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContable"));

			this.jButtonFK_IdTipoCambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoCambioDetalleAsientoContable"));

			this.jButtonBuscarFK_IdTipoCambioid_tipo_cambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContable"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoDetalleAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleAsientoContable"));
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleAsientoContable"));
				this.jInternalFrameReporteDinamicoDetalleAsientoContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleAsientoContable"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleAsientoContable"));				
			//this.jButtonGenerarReporteDinamicoDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleAsientoContable"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleAsientoContable"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleAsientoContable!=null) {
				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleAsientoContable"));
				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleAsientoContable"));
				this.jInternalFrameImportacionDetalleAsientoContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleAsientoContable"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleAsientoContable"));
			
			this.jButtonAbrirOrderByToolBarDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleAsientoContable"));			
			
			if(this.jInternalFrameOrderByDetalleAsientoContable!=null) {
				this.jInternalFrameOrderByDetalleAsientoContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleAsientoContable"));				
			}
			*/
			
		}
		
		this.jButtonAbrirTotalesDetalleAsientoContable.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetalleAsientoContable"));
		
		if(this.jInternalFrameTotalesDetalleAsientoContable!=null) {
			this.jInternalFrameTotalesDetalleAsientoContable.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleAsientoContable"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleAsientoContable.jTabbedPaneRelacionesDetalleAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleAsientoContable"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleAsientoContable();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleAsientoContable = (JInternalFrameBase)event.getSource();
	            	
	            DetalleAsientoContableBeanSwingJInternalFrame jInternalFrameParent=(DetalleAsientoContableBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleAsientoContable.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleAsientoContableActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleAsientoContable.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleAsientoContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleAsientoContable.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleAsientoContable.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleAsientoContable";
		inputMap = this.jButtonNuevoDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleAsientoContable";
		inputMap = this.jButtonNuevoRelacionesDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleAsientoContableActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleAsientoContable";
		inputMap = this.jButtonModificarDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleAsientoContable";
		inputMap = this.jButtonActualizarDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleAsientoContable";
		inputMap = this.jButtonEliminarDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleAsientoContable";
		inputMap = this.jButtonCancelarDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleAsientoContable";
		inputMap = this.jButtonCerrarDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleAsientoContable";
		inputMap = this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonGuardarCambiosDetalleAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleAsientoContable.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleAsientoContableItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonidDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_empresaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_sucursalDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleAsientoContableBusqueda"));
		//jButtonid_asiento_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_documentoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_ejercicioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_periodoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_anioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_mesDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleAsientoContableBusqueda"));
		//jButtonid_cuenta_contableDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContable"));
		//jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_localDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_localDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondebito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"debito_extranDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncredito_extranDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"credito_extranDetalleAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_actividadDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadDetalleAsientoContableBusqueda"));
		//jButtonid_centro_costoDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContable"));
		//jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncotizacionDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtondetalleDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"detalleDetalleAsientoContableBusqueda"));
		//jButtonid_tipo_cambioDetalleAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_tipo_cambioDetalleAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtoncon_centro_costoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonfechaDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaDetalleAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonnumero_depositoDetalleAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_depositoDetalleAsientoContableBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableDetalleAsientoContable"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_asiento_contableDetalleAsientoContable"));

		this.jButtonFK_IdCentroActividadDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroActividadDetalleAsientoContable"));

		this.jButtonFK_IdCentroCostoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleAsientoContable"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleAsientoContable"));

		this.jButtonFK_IdCuentaContableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDetalleAsientoContable"));

		this.jButtonBuscarFK_IdCuentaContableid_cuenta_contableDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDetalleAsientoContable"));

		this.jButtonFK_IdTipoCambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoCambioDetalleAsientoContable"));

		this.jButtonBuscarFK_IdTipoCambioid_tipo_cambioDetalleAsientoContable.addActionListener(new ButtonActionListener(this,"id_tipo_cambioDetalleAsientoContable"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarDetalleAsientoContableActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleAsientoContable.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosDetalleAsientoContable(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
					detalleasientocontableAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontables) {
					detalleasientocontableAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleAsientoContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
						detalleasientocontableAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontables) {
						detalleasientocontableAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
					
						if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO)) {
							existe=true;
							detalleasientocontableAux.setcon_centro_costo(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontables) {
						
						if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO)) {
							existe=true;
							detalleasientocontableAux.setcon_centro_costo(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleAsientoContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleAsientoContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleAsientoContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleAsientoContable.getSelectedRows();
			
			DetalleAsientoContable detalleasientocontableLocal=new DetalleAsientoContable();
			
			//this.seleccionarTodosDetalleAsientoContable(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleasientocontableLocal =(DetalleAsientoContable) this.detalleasientocontableLogic.getDetalleAsientoContables().toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detalleasientocontableLocal =(DetalleAsientoContable) this.detalleasientocontables.toArray()[this.jTableDatosDetalleAsientoContable.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detalleasientocontableLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
						detalleasientocontableAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontables) {
						detalleasientocontableAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleAsientoContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleAsientoContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleAsientoContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleAsientoContableItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleAsientoContableParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleAsientoContableActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleAsientoContable.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontableLogic.getDetalleAsientoContables()) {
				
						if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							detalleasientocontableAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL)) {
							existe=true;
							detalleasientocontableAux.setdebito_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL)) {
							existe=true;
							detalleasientocontableAux.setcredito_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN)) {
							existe=true;
							detalleasientocontableAux.setdebito_extran(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN)) {
							existe=true;
							detalleasientocontableAux.setcredito_extran(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							detalleasientocontableAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							detalleasientocontableAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							detalleasientocontableAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO)) {
							existe=true;
							detalleasientocontableAux.setnumero_deposito(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontables) {
					
						if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							detalleasientocontableAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL)) {
							existe=true;
							detalleasientocontableAux.setdebito_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL)) {
							existe=true;
							detalleasientocontableAux.setcredito_local(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN)) {
							existe=true;
							detalleasientocontableAux.setdebito_extran(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN)) {
							existe=true;
							detalleasientocontableAux.setcredito_extran(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							detalleasientocontableAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							detalleasientocontableAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							detalleasientocontableAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO)) {
							existe=true;
							detalleasientocontableAux.setnumero_deposito(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleAsientoContableActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleAsientoContable=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleAsientoContable.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleAsientoContable) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleAsientoContable(conSplash);
				
					this.generarReporteDetalleAsientoContablesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleAsientoContablesSeleccionados();
				//this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleAsientoContablesSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleAsientoContablesSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleAsientoContable();
				
				this.exportarDetalleAsientoContablesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleAsientoContables();
				//this.importarDetalleAsientoContables();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleAsientoContable();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleAsientoContablesSeleccionados();
				//this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleAsientoContable();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleAsientoContable)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleAsientoContable(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleAsientoContableBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleAsientoContable) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleAsientoContable(conSplash);
					
						//this.actualizarParametrosGeneralDetalleAsientoContable();
						
						this.generarReporteProcesoAccionDetalleAsientoContablesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleAsientoContableBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle Asiento ContableS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleAsientoContable();
				
						this.actualizarParametrosGeneralDetalleAsientoContable();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detalleasientocontableReturnGeneral=detalleasientocontableLogic.procesarAccionDetalleAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detalleasientocontableLogic.getDetalleAsientoContables(),this.detalleasientocontableParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleAsientoContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleAsientoContable();
					
					DetalleAsientoContableBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleAsientoContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleAsientoContable.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxTiposAccionesFormularioDetalleAsientoContable.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleAsientoContable(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleAsientoContableActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleAsientoContable();
			
			if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
			DetalleAsientoContable detalleasientocontable=new DetalleAsientoContable();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleAsientoContable(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleAsientoContable.getSelectedItem();
			*/
			
			
			
			detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
			//this.sTipoAccion;
			
			if(detalleasientocontablesSeleccionados.size()==1) {
				for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
					detalleasientocontable=detalleasientocontableAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleAsientoContable();
			
      		//this.finishProcessDetalleAsientoContable(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleAsientoContableReturnGeneral() throws Exception {
		if(this.detalleasientocontableReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detalleasientocontableReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detalleasientocontableReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detalleasientocontableReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detalleasientocontableReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detalleasientocontableReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleAsientoContable(false);
		}
		
		if(this.detalleasientocontableReturnGeneral.getConRetornoLista() || this.detalleasientocontableReturnGeneral.getConRetornoObjeto()) {
			if(this.detalleasientocontableReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleasientocontableLogic.setDetalleAsientoContables(this.detalleasientocontableReturnGeneral.getDetalleAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detalleasientocontableReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalleasientocontableLogic.setDetalleAsientoContable(this.detalleasientocontableReturnGeneral.getDetalleAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleAsientoContable(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleAsientoContable() throws Exception {
		
		
	}
	
	public ArrayList<DetalleAsientoContable> getDetalleAsientoContablesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleAsientoContable) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontableLogic.getDetalleAsientoContables()) {
					if(detalleasientocontableAux.getIsSelected()) {
						detalleasientocontablesSeleccionados.add(detalleasientocontableAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleAsientoContable detalleasientocontableAux:this.detalleasientocontables) {
					if(detalleasientocontableAux.getIsSelected()) {
						detalleasientocontablesSeleccionados.add(detalleasientocontableAux);				
					}
				}
			}
			
			if(detalleasientocontablesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detalleasientocontablesSeleccionados.addAll(this.detalleasientocontableLogic.getDetalleAsientoContables());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detalleasientocontablesSeleccionados.addAll(this.detalleasientocontables);				
					}
				}
			}
		} else {
			detalleasientocontablesSeleccionados.add(this.detalleasientocontable);
		}
		
		return detalleasientocontablesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleAsientoContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleAsientoContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleAsientoContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleAsientoContablesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleAsientoContablesSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Asiento Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleAsientoContablesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoDetalleAsientoContable();
		*/
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoDetalleAsientoContable();
		*/
		
		//this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados ,detalleasientocontableImplementable,detalleasientocontableImplementableHome);
	}
	
	public void mostrarImportacionDetalleAsientoContables() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionDetalleAsientoContable();
		
		this.abrirFrameImportacionDetalleAsientoContable();		
		*/
			
		//this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados ,detalleasientocontableImplementable,detalleasientocontableImplementableHome);
	}
	
	public void importarDetalleAsientoContables() throws Exception {		
	
	}
	
	public void exportarDetalleAsientoContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleAsientoContablesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleAsientoContablesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleAsientoContablesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Asiento Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleAsientoContable(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleAsientoContable(detalleasientocontableAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detalleasientocontableAux.setsDetalleGeneralEntityReporte(detalleasientocontableAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleAsientoContable(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_DETALLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detalleasientocontable.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getnumero_documento();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcuentacontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getdebito_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcredito_local().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getdebito_extran().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcredito_extran().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcentroactividad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getdetalle();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.gettipocambio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getcon_centro_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalleasientocontable.getnumero_deposito();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleAsientoContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleAsientoContable(row);				
				iRow++;
			}				
			
			for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleAsientoContable(detalleasientocontableAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleAsientoContablesSeleccionados() throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();		
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalleasientocontable.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detalleasientocontables");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detalleasientocontable");
			//elementRoot.appendChild(element);
		
			for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
				element = document.createElement("detalleasientocontable");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleAsientoContable(detalleasientocontableAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleAsientoContable(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOLOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOLOCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DEBITOEXTRAN);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CREDITOEXTRAN);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getnumero_documento());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcuentacontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getdebito_local());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcredito_local());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getdebito_extran());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcredito_extran());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcentroactividad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getdetalle());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.gettipocambio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getcon_centro_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(detalleasientocontable.getnumero_deposito());				
	}
	
	public void setFilaDatosExportarXmlDetalleAsientoContable(DetalleAsientoContable detalleasientocontable,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleAsientoContableConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detalleasientocontable.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleAsientoContableConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detalleasientocontable.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detalleasientocontable.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detalleasientocontable.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementasientocontable_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(detalleasientocontable.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementnumero_documento = document.createElement(DetalleAsientoContableConstantesFunciones.NUMERODOCUMENTO);
		elementnumero_documento.appendChild(document.createTextNode(detalleasientocontable.getnumero_documento().trim()));
		element.appendChild(elementnumero_documento);

		Element elementejercicio_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detalleasientocontable.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detalleasientocontable.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detalleasientocontable.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detalleasientocontable.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementcuentacontable_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(detalleasientocontable.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);

		Element elementdebito_local = document.createElement(DetalleAsientoContableConstantesFunciones.DEBITOLOCAL);
		elementdebito_local.appendChild(document.createTextNode(detalleasientocontable.getdebito_local().toString().trim()));
		element.appendChild(elementdebito_local);

		Element elementcredito_local = document.createElement(DetalleAsientoContableConstantesFunciones.CREDITOLOCAL);
		elementcredito_local.appendChild(document.createTextNode(detalleasientocontable.getcredito_local().toString().trim()));
		element.appendChild(elementcredito_local);

		Element elementdebito_extran = document.createElement(DetalleAsientoContableConstantesFunciones.DEBITOEXTRAN);
		elementdebito_extran.appendChild(document.createTextNode(detalleasientocontable.getdebito_extran().toString().trim()));
		element.appendChild(elementdebito_extran);

		Element elementcredito_extran = document.createElement(DetalleAsientoContableConstantesFunciones.CREDITOEXTRAN);
		elementcredito_extran.appendChild(document.createTextNode(detalleasientocontable.getcredito_extran().toString().trim()));
		element.appendChild(elementcredito_extran);

		Element elementcentroactividad_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDCENTROACTIVIDAD);
		elementcentroactividad_descripcion.appendChild(document.createTextNode(detalleasientocontable.getcentroactividad_descripcion()));
		element.appendChild(elementcentroactividad_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detalleasientocontable.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcotizacion = document.createElement(DetalleAsientoContableConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(detalleasientocontable.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementdetalle = document.createElement(DetalleAsientoContableConstantesFunciones.DETALLE);
		elementdetalle.appendChild(document.createTextNode(detalleasientocontable.getdetalle().trim()));
		element.appendChild(elementdetalle);

		Element elementtipocambio_descripcion = document.createElement(DetalleAsientoContableConstantesFunciones.IDTIPOCAMBIO);
		elementtipocambio_descripcion.appendChild(document.createTextNode(detalleasientocontable.gettipocambio_descripcion()));
		element.appendChild(elementtipocambio_descripcion);

		Element elementcon_centro_costo = document.createElement(DetalleAsientoContableConstantesFunciones.CONCENTROCOSTO);
		elementcon_centro_costo.appendChild(document.createTextNode(detalleasientocontable.getcon_centro_costo().toString().trim()));
		element.appendChild(elementcon_centro_costo);

		Element elementfecha = document.createElement(DetalleAsientoContableConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(detalleasientocontable.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementnumero_deposito = document.createElement(DetalleAsientoContableConstantesFunciones.NUMERODEPOSITO);
		elementnumero_deposito.appendChild(document.createTextNode(detalleasientocontable.getnumero_deposito().trim()));
		element.appendChild(elementnumero_deposito);
	}
	
	public void generarReporteGroupGenericoDetalleAsientoContablesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados=new ArrayList<DetalleAsientoContable>();
		
		detalleasientocontablesSeleccionados=this.getDetalleAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleAsientoContable(detalleasientocontablesSeleccionados);
		
		this.generarReporteDetalleAsientoContables("Todos",detalleasientocontablesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleAsientoContable(ArrayList<DetalleAsientoContable> detalleasientocontablesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleAsientoContable detalleasientocontableAux:detalleasientocontablesSeleccionados) {
				detalleasientocontableAux.setsDetalleGeneralEntityReporte(detalleasientocontableAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getnumero_documento());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getcuentacontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROACTIVIDAD)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getcentroactividad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_DETALLE)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getdetalle());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_IDTIPOCAMBIO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.gettipocambio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_CONCENTROCOSTO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(detalleasientocontableAux.getcon_centro_costo()));
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalleasientocontableAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(DetalleAsientoContableConstantesFunciones.LABEL_NUMERODEPOSITO)) {
					existe=true;
					detalleasientocontableAux.setsDescripcionGeneralEntityReporte1(detalleasientocontableAux.getnumero_deposito());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleAsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleAsientoContable(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleAsientoContable=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=true;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=true;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=true;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=true;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=true;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
			this.isVisibilidadCeldaModificarDetalleAsientoContable=true;
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
			this.isVisibilidadCeldaCancelarDetalleAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleAsientoContable=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleAsientoContableJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=true;
		} else {
			this.actualizarEstadoPanelsDetalleAsientoContable(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleAsientoContable=false;
			//this.isVisibilidadCeldaVerFormDetalleAsientoContable=false;
			this.isVisibilidadCeldaDuplicarDetalleAsientoContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detalleasientocontableSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleAsientoContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			if(!detalleasientocontableSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;												
			}
			
			this.jButtonCerrarDetalleAsientoContable.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleAsientoContable=false;
		}
		
		if(!this.permiteMantenimiento(this.detalleasientocontable)) {
			this.isVisibilidadCeldaActualizarDetalleAsientoContable=false;
			this.isVisibilidadCeldaEliminarDetalleAsientoContable=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleAsientoContable() {
	}
	
	public void actualizarEstadoPanelsDetalleAsientoContable(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleAsientoContable!=null) {
				this.jScrollPanelDatosEdicionDetalleAsientoContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleAsientoContable!=null) {
				this.jScrollPanelDatosDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleAsientoContable!=null) {
				this.jPanelPaginacionDetalleAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
					this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detalleasientocontableSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleAsientoContable!=null) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesDetalleAsientoContable!=null) {
				this.jPanelParametrosReportesDetalleAsientoContable.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadFK_IdAsientoContable=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContable;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCentroActividad(Boolean isParaCentroActividad){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCentroActividadNegation=!isParaCentroActividad;

			this.isVisibilidadFK_IdAsientoContable=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaCentroActividad;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdAsientoContable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaTipoCambio(Boolean isParaTipoCambio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCambioNegation=!isParaTipoCambio;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdAsientoContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroActividad=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroActividadDetalleAsientoContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCentroCostoDetalleAsientoContable);}

			this.isVisibilidadFK_IdCuentaContable=isParaTipoCambioNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdCuentaContableDetalleAsientoContable);}

			this.isVisibilidadFK_IdTipoCambio=isParaTipoCambio;
			if(!this.isVisibilidadFK_IdTipoCambio) {this.jTabbedPaneBusquedasDetalleAsientoContable.remove(jPanelFK_IdTipoCambioDetalleAsientoContable);}
		}
		*/
	}
	
	
	
	

	public String registrarSesionDetalleAsientoContableParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(detalleasientocontableSessionBean==null) {
				detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(detalleasientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.detalleasientocontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionDetalleAsientoContable(true);
			//asientocontableSessionBean.setlidDetalleAsientoContableActual(this.idDetalleAsientoContableActual);

			detalleasientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleAsientoContable(true);
			detalleasientocontableSessionBean.setlIdDetalleAsientoContableActualForeignKey(this.idDetalleAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleAsientoContableParaBusquedaCuentaContables() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(detalleasientocontableSessionBean==null) {
				detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableSessionBean.setsPathNavegacionActual(detalleasientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableSessionBean.getisPaginaPopup();
			cuentacontableSessionBean.setisPaginaPopup(false);
			cuentacontableSessionBean.setEstaModoBusqueda(true);
			cuentacontableSessionBean.setsFuncionBusquedaRapida("window.opener.detalleasientocontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable(TO_REPLACE);");
			cuentacontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionDetalleAsientoContable(true);
			//cuentacontableSessionBean.setlidDetalleAsientoContableActual(this.idDetalleAsientoContableActual);

			detalleasientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleAsientoContable(true);
			detalleasientocontableSessionBean.setlIdDetalleAsientoContableActualForeignKey(this.idDetalleAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleAsientoContableParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(detalleasientocontableSessionBean==null) {
				detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(detalleasientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.detalleasientocontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleAsientoContable(true);
			//centrocostoSessionBean.setlidDetalleAsientoContableActual(this.idDetalleAsientoContableActual);

			detalleasientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleAsientoContable(true);
			detalleasientocontableSessionBean.setlIdDetalleAsientoContableActualForeignKey(this.idDetalleAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleAsientoContableParaBusquedaTipoCambios() throws Exception {
		Boolean isPaginaPopupTipoCambio=false;

		try {

			if(detalleasientocontableSessionBean==null) {
				detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			if(tipocambioSessionBean==null) {
				tipocambioSessionBean=new TipoCambioSessionBean();
			}

			tipocambioSessionBean.setsPathNavegacionActual(detalleasientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TipoCambioConstantesFunciones.SCLASSWEBTITULO);
			tipocambioSessionBean.setisPermiteRecargarInformacion(false);
			tipocambioSessionBean.setisPaginaPopup(true);
			isPaginaPopupTipoCambio=tipocambioSessionBean.getisPaginaPopup();
			tipocambioSessionBean.setisPaginaPopup(false);
			tipocambioSessionBean.setEstaModoBusqueda(true);
			tipocambioSessionBean.setsFuncionBusquedaRapida("window.opener.detalleasientocontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_tipo_cambio(TO_REPLACE);");
			tipocambioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTipoCambio(true);
			tipocambioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTipoCambio(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
			//tipocambioSessionBean.setisBusquedaDesdeForeignKeySesionDetalleAsientoContable(true);
			//tipocambioSessionBean.setlidDetalleAsientoContableActual(this.idDetalleAsientoContableActual);

			detalleasientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleAsientoContable(true);
			detalleasientocontableSessionBean.setlIdDetalleAsientoContableActualForeignKey(this.idDetalleAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleAsientoContableSessionBean detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
		
		if(this.detalleasientocontableSessionBean==null) {
			this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
		}
		
		this.detalleasientocontableSessionBean.setsUltimaBusquedaDetalleAsientoContable(this.getsAccionBusqueda());
		this.detalleasientocontableSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detalleasientocontableSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			detalleasientocontableSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroActividad")) {
			detalleasientocontableSessionBean.setid_centro_actividad(this.getid_centro_actividadFK_IdCentroActividad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detalleasientocontableSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
			detalleasientocontableSessionBean.setid_cuenta_contable(this.getid_cuenta_contableFK_IdCuentaContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detalleasientocontableSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detalleasientocontableSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detalleasientocontableSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detalleasientocontableSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCambio")) {
			detalleasientocontableSessionBean.setid_tipo_cambio(this.getid_tipo_cambioFK_IdTipoCambio());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleAsientoContableSessionBean detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
		
		if(this.detalleasientocontableSessionBean==null) {
			this.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
		}
		
		if(this.detalleasientocontableSessionBean.getsUltimaBusquedaDetalleAsientoContable()!=null&&!this.detalleasientocontableSessionBean.getsUltimaBusquedaDetalleAsientoContable().equals("")) {
			this.setsAccionBusqueda(detalleasientocontableSessionBean.getsUltimaBusquedaDetalleAsientoContable());
			this.setiNumeroPaginacion(detalleasientocontableSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detalleasientocontableSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(detalleasientocontableSessionBean.getid_asiento_contable());
				detalleasientocontableSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroActividad")) {
				this.setid_centro_actividadFK_IdCentroActividad(detalleasientocontableSessionBean.getid_centro_actividad());
				detalleasientocontableSessionBean.setid_centro_actividad(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detalleasientocontableSessionBean.getid_centro_costo());
				detalleasientocontableSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
				this.setid_cuenta_contableFK_IdCuentaContable(detalleasientocontableSessionBean.getid_cuenta_contable());
				detalleasientocontableSessionBean.setid_cuenta_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detalleasientocontableSessionBean.getid_ejercicio());
				detalleasientocontableSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detalleasientocontableSessionBean.getid_empresa());
				detalleasientocontableSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detalleasientocontableSessionBean.getid_periodo());
				detalleasientocontableSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detalleasientocontableSessionBean.getid_sucursal());
				detalleasientocontableSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCambio")) {
				this.setid_tipo_cambioFK_IdTipoCambio(detalleasientocontableSessionBean.getid_tipo_cambio());
				detalleasientocontableSessionBean.setid_tipo_cambio(null);
			}
		}
		
		this.detalleasientocontableSessionBean.setsUltimaBusquedaDetalleAsientoContable("");
		this.detalleasientocontableSessionBean.setiNumeroPaginacion(DetalleAsientoContableConstantesFunciones.INUMEROPAGINACION);
		this.detalleasientocontableSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleAsientoContable(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleAsientoContable() {
		this.updateBorderResaltarBusquedasFormularioDetalleAsientoContable();
		this.updateVisibilidadBusquedasFormularioDetalleAsientoContable();
		this.updateHabilitarBusquedasFormularioDetalleAsientoContable();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleAsientoContable() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleAsientoContable.getComponents().length>0) {
	

		if(this.detalleasientocontableConstantesFunciones.resaltarFK_IdAsientoContableDetalleAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdAsientoContableDetalleAsientoContable);
			}
		}

		if(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroActividadDetalleAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroActividadDetalleAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroActividadDetalleAsientoContable);
			}
		}

		if(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroCostoDetalleAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroCostoDetalleAsientoContable);
			}
		}

		if(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCuentaContableDetalleAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCuentaContableDetalleAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCuentaContableDetalleAsientoContable);
			}
		}

		if(this.detalleasientocontableConstantesFunciones.resaltarFK_IdTipoCambioDetalleAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdTipoCambioDetalleAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdTipoCambioDetalleAsientoContable);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleAsientoContable() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleAsientoContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleasientocontableConstantesFunciones.mostrarFK_IdAsientoContableDetalleAsientoContable);
			if(!this.detalleasientocontableConstantesFunciones.mostrarFK_IdAsientoContableDetalleAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroActividadDetalleAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleasientocontableConstantesFunciones.mostrarFK_IdCentroActividadDetalleAsientoContable);
			if(!this.detalleasientocontableConstantesFunciones.mostrarFK_IdCentroActividadDetalleAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleasientocontableConstantesFunciones.mostrarFK_IdCentroCostoDetalleAsientoContable);
			if(!this.detalleasientocontableConstantesFunciones.mostrarFK_IdCentroCostoDetalleAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCuentaContableDetalleAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleasientocontableConstantesFunciones.mostrarFK_IdCuentaContableDetalleAsientoContable);
			if(!this.detalleasientocontableConstantesFunciones.mostrarFK_IdCuentaContableDetalleAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdTipoCambioDetalleAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalleasientocontableConstantesFunciones.mostrarFK_IdTipoCambioDetalleAsientoContable);
			if(!this.detalleasientocontableConstantesFunciones.mostrarFK_IdTipoCambioDetalleAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasDetalleAsientoContable.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioDetalleAsientoContable() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleAsientoContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleasientocontableConstantesFunciones.activarFK_IdAsientoContableDetalleAsientoContable);
				this.jTabbedPaneBusquedasDetalleAsientoContable.setEnabledAt(index,this.detalleasientocontableConstantesFunciones.activarFK_IdAsientoContableDetalleAsientoContable);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroActividadDetalleAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleasientocontableConstantesFunciones.activarFK_IdCentroActividadDetalleAsientoContable);
				this.jTabbedPaneBusquedasDetalleAsientoContable.setEnabledAt(index,this.detalleasientocontableConstantesFunciones.activarFK_IdCentroActividadDetalleAsientoContable);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleasientocontableConstantesFunciones.activarFK_IdCentroCostoDetalleAsientoContable);
				this.jTabbedPaneBusquedasDetalleAsientoContable.setEnabledAt(index,this.detalleasientocontableConstantesFunciones.activarFK_IdCentroCostoDetalleAsientoContable);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCuentaContableDetalleAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleasientocontableConstantesFunciones.activarFK_IdCuentaContableDetalleAsientoContable);
				this.jTabbedPaneBusquedasDetalleAsientoContable.setEnabledAt(index,this.detalleasientocontableConstantesFunciones.activarFK_IdCuentaContableDetalleAsientoContable);
			}

			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdTipoCambioDetalleAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalleasientocontableConstantesFunciones.activarFK_IdTipoCambioDetalleAsientoContable);
				this.jTabbedPaneBusquedasDetalleAsientoContable.setEnabledAt(index,this.detalleasientocontableConstantesFunciones.activarFK_IdTipoCambioDetalleAsientoContable);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaDetalleAsientoContable(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdAsientoContableDetalleAsientoContable);

			this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);

			this.detalleasientocontableConstantesFunciones.setResaltarFK_IdAsientoContableDetalleAsientoContable(resaltar);

			jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdAsientoContableDetalleAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroActividad")) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroActividadDetalleAsientoContable);

			this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);

			this.detalleasientocontableConstantesFunciones.setResaltarFK_IdCentroActividadDetalleAsientoContable(resaltar);

			jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroActividadDetalleAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleAsientoContable);

			this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);

			this.detalleasientocontableConstantesFunciones.setResaltarFK_IdCentroCostoDetalleAsientoContable(resaltar);

			jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCentroCostoDetalleAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContable")) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdCuentaContableDetalleAsientoContable);

			this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);

			this.detalleasientocontableConstantesFunciones.setResaltarFK_IdCuentaContableDetalleAsientoContable(resaltar);

			jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdCuentaContableDetalleAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCambio")) {
			index= this.jTabbedPaneBusquedasDetalleAsientoContable.indexOfComponent(this.jPanelFK_IdTipoCambioDetalleAsientoContable);

			this.jTabbedPaneBusquedasDetalleAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleAsientoContable.getComponent(index);

			this.detalleasientocontableConstantesFunciones.setResaltarFK_IdTipoCambioDetalleAsientoContable(resaltar);

			jPanel.setBorder(this.detalleasientocontableConstantesFunciones.resaltarFK_IdTipoCambioDetalleAsientoContable);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarDetalleAsientoContable.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleAsientoContable() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleAsientoContable();
		this.updateVisibilidadResaltarControlesFormularioDetalleAsientoContable();
		this.updateHabilitarResaltarControlesFormularioDetalleAsientoContable();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleAsientoContable() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detalleasientocontableConstantesFunciones.resaltaridDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelidDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltaridDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_empresaDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_empresaDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_sucursalDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_sucursalDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_asiento_contableDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_asiento_contableDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarnumero_documentoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarnumero_documentoDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_ejercicioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_ejercicioDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_periodoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_periodoDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_anioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_anioDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_mesDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_mesDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_cuenta_contableDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_cuenta_contableDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltardebito_localDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltardebito_localDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarcredito_localDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarcredito_localDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltardebito_extranDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltardebito_extranDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarcredito_extranDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarcredito_extranDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_centro_actividadDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_centro_actividadDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_centro_costoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_centro_costoDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarcotizacionDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarcotizacionDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltardetalleDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltardetalleDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarid_tipo_cambioDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarid_tipo_cambioDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarcon_centro_costoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxcon_centro_costoDetalleAsientoContable.setBorderPainted(true);this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxcon_centro_costoDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarcon_centro_costoDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarfechaDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jDateChooserfechaDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarfechaDetalleAsientoContable);}
		if(this.detalleasientocontableConstantesFunciones.resaltarnumero_depositoDetalleAsientoContable!=null && this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_depositoDetalleAsientoContable.setBorder(this.detalleasientocontableConstantesFunciones.resaltarnumero_depositoDetalleAsientoContable);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleAsientoContable() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
	
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelidDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostraridDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelidDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostraridDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_empresaDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_empresaDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_empresaDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_sucursalDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_sucursalDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_sucursalDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_asiento_contableDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_asiento_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_asiento_contableDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_asiento_contableDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarnumero_documentoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelnumero_documentoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarnumero_documentoDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_ejercicioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_ejercicioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_ejercicioDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_periodoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_periodoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_periodoDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_anioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_anioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_anioDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_mesDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_mesDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_mesDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_cuenta_contableDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_cuenta_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_cuenta_contableDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_cuenta_contableDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardebito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPaneldebito_localDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardebito_localDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcredito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelcredito_localDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcredito_localDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardebito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPaneldebito_extranDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardebito_extranDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcredito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelcredito_extranDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcredito_extranDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_centro_actividadDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_centro_actividadDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_centro_actividadDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_centro_costoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_centro_costoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_centro_costoDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_centro_costoDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcotizacionDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelcotizacionDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcotizacionDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardetalleDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPaneldetalleDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrardetalleDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_tipo_cambioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelid_tipo_cambioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_tipo_cambioDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarid_tipo_cambioDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxcon_centro_costoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcon_centro_costoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelcon_centro_costoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarcon_centro_costoDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jDateChooserfechaDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarfechaDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelfechaDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarfechaDetalleAsientoContable);
		//this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_depositoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarnumero_depositoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jPanelnumero_depositoDetalleAsientoContable.setVisible(this.detalleasientocontableConstantesFunciones.mostrarnumero_depositoDetalleAsientoContable);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleAsientoContable() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleAsientoContable!=null) {
	
		this.jInternalFrameDetalleFormDetalleAsientoContable.jLabelidDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activaridDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_empresaDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_empresaDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_sucursalDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_sucursalDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_asiento_contableDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_asiento_contableDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_asiento_contableDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_asiento_contableDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_documentoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarnumero_documentoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_ejercicioDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_ejercicioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_periodoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_periodoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_anioDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_anioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_mesDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_mesDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_cuenta_contableDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_cuenta_contableDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_cuenta_contableDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_cuenta_contableDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_localDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activardebito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_localDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarcredito_localDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFielddebito_extranDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activardebito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcredito_extranDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarcredito_extranDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_actividadDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_centro_actividadDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_centro_costoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_centro_costoDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_centro_costoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_centro_costoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldcotizacionDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarcotizacionDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextAreadetalleDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activardetalleDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jComboBoxid_tipo_cambioDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_tipo_cambioDetalleAsientoContable);
			this.jInternalFrameDetalleFormDetalleAsientoContable.jButtonid_tipo_cambioDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarid_tipo_cambioDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jCheckBoxcon_centro_costoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarcon_centro_costoDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jDateChooserfechaDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarfechaDetalleAsientoContable);
		this.jInternalFrameDetalleFormDetalleAsientoContable.jTextFieldnumero_depositoDetalleAsientoContable.setEnabled(this.detalleasientocontableConstantesFunciones.activarnumero_depositoDetalleAsientoContable);
		}
	}
	
		
}