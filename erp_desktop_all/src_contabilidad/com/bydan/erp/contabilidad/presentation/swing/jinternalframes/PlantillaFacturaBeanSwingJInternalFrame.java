/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.PlantillaFacturaConstantesFunciones;
import com.bydan.erp.contabilidad.util.PlantillaFacturaParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.PlantillaFacturaParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.PlantillaFacturaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class PlantillaFacturaBeanSwingJInternalFrame extends PlantillaFacturaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(PlantillaFacturaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<PlantillaFactura> plantillafacturaValidator = new ClassValidator<PlantillaFactura>(PlantillaFactura.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public PlantillaFactura plantillafactura;	
	public PlantillaFactura plantillafacturaAux;
	public PlantillaFactura plantillafacturaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public PlantillaFactura plantillafacturaTotales;
	public Long idPlantillaFacturaActual;
	public Long iIdNuevoPlantillaFactura=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboCuentaContableAplicada="";

	public List<CuentaContable> cuentacontableaplicadasForeignKey;

	public List<CuentaContable> getcuentacontableaplicadasForeignKey() {
		return cuentacontableaplicadasForeignKey;
	}

	public void setcuentacontableaplicadasForeignKey(List<CuentaContable> cuentacontableaplicadasForeignKey) {
		this.cuentacontableaplicadasForeignKey = cuentacontableaplicadasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableaplicadaForeignKey;

	public CuentaContable getcuentacontableaplicadaForeignKey() {
		return cuentacontableaplicadaForeignKey;
	}

	public void setcuentacontableaplicadaForeignKey(CuentaContable cuentacontableaplicadaForeignKey) {
		this.cuentacontableaplicadaForeignKey = cuentacontableaplicadaForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoBien="";

	public List<CuentaContable> cuentacontablecreditobiensForeignKey;

	public List<CuentaContable> getcuentacontablecreditobiensForeignKey() {
		return cuentacontablecreditobiensForeignKey;
	}

	public void setcuentacontablecreditobiensForeignKey(List<CuentaContable> cuentacontablecreditobiensForeignKey) {
		this.cuentacontablecreditobiensForeignKey = cuentacontablecreditobiensForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditobienForeignKey;

	public CuentaContable getcuentacontablecreditobienForeignKey() {
		return cuentacontablecreditobienForeignKey;
	}

	public void setcuentacontablecreditobienForeignKey(CuentaContable cuentacontablecreditobienForeignKey) {
		this.cuentacontablecreditobienForeignKey = cuentacontablecreditobienForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoServicio="";

	public List<CuentaContable> cuentacontablecreditoserviciosForeignKey;

	public List<CuentaContable> getcuentacontablecreditoserviciosForeignKey() {
		return cuentacontablecreditoserviciosForeignKey;
	}

	public void setcuentacontablecreditoserviciosForeignKey(List<CuentaContable> cuentacontablecreditoserviciosForeignKey) {
		this.cuentacontablecreditoserviciosForeignKey = cuentacontablecreditoserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoservicioForeignKey;

	public CuentaContable getcuentacontablecreditoservicioForeignKey() {
		return cuentacontablecreditoservicioForeignKey;
	}

	public void setcuentacontablecreditoservicioForeignKey(CuentaContable cuentacontablecreditoservicioForeignKey) {
		this.cuentacontablecreditoservicioForeignKey = cuentacontablecreditoservicioForeignKey;
	}

	public String sFinalQueryComboTipoRetencionFuenteBien="";

	public List<TipoRetencion> tiporetencionfuentebiensForeignKey;

	public List<TipoRetencion> gettiporetencionfuentebiensForeignKey() {
		return tiporetencionfuentebiensForeignKey;
	}

	public void settiporetencionfuentebiensForeignKey(List<TipoRetencion> tiporetencionfuentebiensForeignKey) {
		this.tiporetencionfuentebiensForeignKey = tiporetencionfuentebiensForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionfuentebienForeignKey;

	public TipoRetencion gettiporetencionfuentebienForeignKey() {
		return tiporetencionfuentebienForeignKey;
	}

	public void settiporetencionfuentebienForeignKey(TipoRetencion tiporetencionfuentebienForeignKey) {
		this.tiporetencionfuentebienForeignKey = tiporetencionfuentebienForeignKey;
	}

	public String sFinalQueryComboTipoRetencionFuenteServicio="";

	public List<TipoRetencion> tiporetencionfuenteserviciosForeignKey;

	public List<TipoRetencion> gettiporetencionfuenteserviciosForeignKey() {
		return tiporetencionfuenteserviciosForeignKey;
	}

	public void settiporetencionfuenteserviciosForeignKey(List<TipoRetencion> tiporetencionfuenteserviciosForeignKey) {
		this.tiporetencionfuenteserviciosForeignKey = tiporetencionfuenteserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionfuenteservicioForeignKey;

	public TipoRetencion gettiporetencionfuenteservicioForeignKey() {
		return tiporetencionfuenteservicioForeignKey;
	}

	public void settiporetencionfuenteservicioForeignKey(TipoRetencion tiporetencionfuenteservicioForeignKey) {
		this.tiporetencionfuenteservicioForeignKey = tiporetencionfuenteservicioForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIvaBien="";

	public List<TipoRetencion> tiporetencionivabiensForeignKey;

	public List<TipoRetencion> gettiporetencionivabiensForeignKey() {
		return tiporetencionivabiensForeignKey;
	}

	public void settiporetencionivabiensForeignKey(List<TipoRetencion> tiporetencionivabiensForeignKey) {
		this.tiporetencionivabiensForeignKey = tiporetencionivabiensForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionivabienForeignKey;

	public TipoRetencion gettiporetencionivabienForeignKey() {
		return tiporetencionivabienForeignKey;
	}

	public void settiporetencionivabienForeignKey(TipoRetencion tiporetencionivabienForeignKey) {
		this.tiporetencionivabienForeignKey = tiporetencionivabienForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIvaServicio="";

	public List<TipoRetencion> tiporetencionivaserviciosForeignKey;

	public List<TipoRetencion> gettiporetencionivaserviciosForeignKey() {
		return tiporetencionivaserviciosForeignKey;
	}

	public void settiporetencionivaserviciosForeignKey(List<TipoRetencion> tiporetencionivaserviciosForeignKey) {
		this.tiporetencionivaserviciosForeignKey = tiporetencionivaserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionivaservicioForeignKey;

	public TipoRetencion gettiporetencionivaservicioForeignKey() {
		return tiporetencionivaservicioForeignKey;
	}

	public void settiporetencionivaservicioForeignKey(TipoRetencion tiporetencionivaservicioForeignKey) {
		this.tiporetencionivaservicioForeignKey = tiporetencionivaservicioForeignKey;
	}

	public String sFinalQueryComboCuentaContableGasto="";

	public List<CuentaContable> cuentacontablegastosForeignKey;

	public List<CuentaContable> getcuentacontablegastosForeignKey() {
		return cuentacontablegastosForeignKey;
	}

	public void setcuentacontablegastosForeignKey(List<CuentaContable> cuentacontablegastosForeignKey) {
		this.cuentacontablegastosForeignKey = cuentacontablegastosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablegastoForeignKey;

	public CuentaContable getcuentacontablegastoForeignKey() {
		return cuentacontablegastoForeignKey;
	}

	public void setcuentacontablegastoForeignKey(CuentaContable cuentacontablegastoForeignKey) {
		this.cuentacontablegastoForeignKey = cuentacontablegastoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCuentaContableAplicadaActual=0L;

	public Long getidCuentaContableAplicadaActual() {
		return idCuentaContableAplicadaActual;
	}

	public void setidCuentaContableAplicadaActual(Long idCuentaContableAplicadaActual) {
		this.idCuentaContableAplicadaActual= idCuentaContableAplicadaActual;
	}
	public Long idCuentaContableCreditoBienActual=0L;

	public Long getidCuentaContableCreditoBienActual() {
		return idCuentaContableCreditoBienActual;
	}

	public void setidCuentaContableCreditoBienActual(Long idCuentaContableCreditoBienActual) {
		this.idCuentaContableCreditoBienActual= idCuentaContableCreditoBienActual;
	}
	public Long idCuentaContableCreditoServicioActual=0L;

	public Long getidCuentaContableCreditoServicioActual() {
		return idCuentaContableCreditoServicioActual;
	}

	public void setidCuentaContableCreditoServicioActual(Long idCuentaContableCreditoServicioActual) {
		this.idCuentaContableCreditoServicioActual= idCuentaContableCreditoServicioActual;
	}
	public Long idCuentaContableGastoActual=0L;

	public Long getidCuentaContableGastoActual() {
		return idCuentaContableGastoActual;
	}

	public void setidCuentaContableGastoActual(Long idCuentaContableGastoActual) {
		this.idCuentaContableGastoActual= idCuentaContableGastoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoPlantillaFactura;
	public Boolean isPermisoNuevoPlantillaFactura;
	public Boolean isPermisoActualizarPlantillaFactura;
	public Boolean isPermisoActualizarOriginalPlantillaFactura;
	public Boolean isPermisoEliminarPlantillaFactura;
	public Boolean isPermisoGuardarCambiosPlantillaFactura;
	public Boolean isPermisoConsultaPlantillaFactura;
	public Boolean isPermisoBusquedaPlantillaFactura;
	public Boolean isPermisoReportePlantillaFactura;
	public Boolean isPermisoPaginacionMedioPlantillaFactura;
	public Boolean isPermisoPaginacionAltoPlantillaFactura;
	public Boolean isPermisoPaginacionTodoPlantillaFactura;
	public Boolean isPermisoCopiarPlantillaFactura;
	public Boolean isPermisoVerFormPlantillaFactura;
	public Boolean isPermisoDuplicarPlantillaFactura;
	public Boolean isPermisoOrdenPlantillaFactura;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public PlantillaFacturaParameterReturnGeneral plantillafacturaReturnGeneral;
	public PlantillaFacturaParameterReturnGeneral plantillafacturaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoPlantillaFactura=false;
	public Boolean esParaAccionDesdeFormularioPlantillaFactura=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected PlantillaFacturaSessionBeanAdditional plantillafacturaSessionBeanAdditional=null;
	
	public PlantillaFacturaSessionBeanAdditional getPlantillaFacturaSessionBeanAdditional() {
		return this.plantillafacturaSessionBeanAdditional;
	}
	
	public void setPlantillaFacturaSessionBeanAdditional(PlantillaFacturaSessionBeanAdditional plantillafacturaSessionBeanAdditional) {
		try {
			this.plantillafacturaSessionBeanAdditional=plantillafacturaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected PlantillaFacturaBeanSwingJInternalFrameAdditional plantillafacturaBeanSwingJInternalFrameAdditional=null;
	//public class PlantillaFacturaBeanSwingJInternalFrame
	
	public PlantillaFacturaBeanSwingJInternalFrameAdditional getPlantillaFacturaBeanSwingJInternalFrameAdditional() {
		return this.plantillafacturaBeanSwingJInternalFrameAdditional;
	}
	
	public void setPlantillaFacturaBeanSwingJInternalFrameAdditional(PlantillaFacturaBeanSwingJInternalFrameAdditional plantillafacturaBeanSwingJInternalFrameAdditional) {
		try {
			this.plantillafacturaBeanSwingJInternalFrameAdditional=plantillafacturaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public PlantillaFacturaLogic plantillafacturaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public PlantillaFactura plantillafacturaBean;
	public PlantillaFacturaConstantesFunciones plantillafacturaConstantesFunciones;
	//public PlantillaFacturaParameterReturnGeneral plantillafacturaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public CuentaContableLogic cuentacontableaplicadaLogic;
	public CuentaContableLogic cuentacontablecreditobienLogic;
	public CuentaContableLogic cuentacontablecreditoservicioLogic;
	public TipoRetencionLogic tiporetencionfuentebienLogic;
	public TipoRetencionLogic tiporetencionfuenteservicioLogic;
	public TipoRetencionLogic tiporetencionivabienLogic;
	public TipoRetencionLogic tiporetencionivaservicioLogic;
	public CuentaContableLogic cuentacontablegastoLogic;
	
	//PARAMETROS
	
	
	//public List<PlantillaFactura> plantillafacturas;	
	//public List<PlantillaFactura> plantillafacturasEliminados;
	//public List<PlantillaFactura> plantillafacturasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoPlantillaFactura=false;
	public Boolean isVisibilidadCeldaDuplicarPlantillaFactura=true;
	public Boolean isVisibilidadCeldaCopiarPlantillaFactura=true;
	public Boolean isVisibilidadCeldaVerFormPlantillaFactura=true;
	public Boolean isVisibilidadCeldaOrdenPlantillaFactura=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
	public Boolean isVisibilidadCeldaModificarPlantillaFactura=false;
	public Boolean isVisibilidadCeldaActualizarPlantillaFactura=false;
	public Boolean isVisibilidadCeldaEliminarPlantillaFactura=false;
	public Boolean isVisibilidadCeldaCancelarPlantillaFactura=false;
	public Boolean isVisibilidadCeldaGuardarPlantillaFactura=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNombre=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoBien=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFinServicio=false;
	public Boolean isVisibilidadFK_IdCuentaContableGasto=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdTipoRetencionFuenteBien=false;
	public Boolean isVisibilidadFK_IdTipoRetencionFuenteServicio=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIvaBien=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIvaServicio=false;
	
	public Long getiIdNuevoPlantillaFactura() {
		return this.iIdNuevoPlantillaFactura;
	}

	public void setiIdNuevoPlantillaFactura(Long iIdNuevoPlantillaFactura) {
		this.iIdNuevoPlantillaFactura = iIdNuevoPlantillaFactura;
	}
	
	public Long getidPlantillaFacturaActual() {
		return this.idPlantillaFacturaActual;
	}

	public void setidPlantillaFacturaActual(Long idPlantillaFacturaActual) {
		this.idPlantillaFacturaActual = idPlantillaFacturaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public PlantillaFactura getplantillafactura() {
		return this.plantillafactura;
	}

	public void setplantillafactura(PlantillaFactura plantillafactura) {
		this.plantillafactura = plantillafactura;
	}
	
	public PlantillaFactura getplantillafacturaAux() {
		return this.plantillafacturaAux;
	}

	public void setplantillafacturaAux(PlantillaFactura plantillafacturaAux) {
		this.plantillafacturaAux = plantillafacturaAux;
	}				
	
	public PlantillaFactura getplantillafacturaAnterior() {
		return this.plantillafacturaAnterior;
	}

	public void setplantillafacturaAnterior(PlantillaFactura plantillafacturaAnterior) {
		this.plantillafacturaAnterior = plantillafacturaAnterior;
	}	
	
	public PlantillaFactura getplantillafacturaTotales() {
		return this.plantillafacturaTotales;
	}

	public void setplantillafacturaTotales(PlantillaFactura plantillafacturaTotales) {
		this.plantillafacturaTotales = plantillafacturaTotales;
	}	
	
	public PlantillaFactura getplantillafacturaBean() {
		return this.plantillafacturaBean;
	}

	public void setplantillafacturaBean(PlantillaFactura plantillafacturaBean) {
		this.plantillafacturaBean = plantillafacturaBean;
	}	
	
	public PlantillaFacturaParameterReturnGeneral getplantillafacturaReturnGeneral() {
		return this.plantillafacturaReturnGeneral;
	}

	public void setplantillafacturaReturnGeneral(PlantillaFacturaParameterReturnGeneral plantillafacturaReturnGeneral) {
		this.plantillafacturaReturnGeneral = plantillafacturaReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String nombreBusquedaPorNombre="";

	public String getnombreBusquedaPorNombre() {
		return this.nombreBusquedaPorNombre;
	}

	public void setnombreBusquedaPorNombre(String nombreBusquedaPorNombre) {
		this.nombreBusquedaPorNombre = nombreBusquedaPorNombre;
	}

	public Long id_cuenta_contable_aplicadaFK_IdCuentaContableCredito=null;

	public Long getid_cuenta_contable_aplicadaFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_aplicadaFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_aplicadaFK_IdCuentaContableCredito(Long id_cuenta_contable_aplicadaFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_aplicadaFK_IdCuentaContableCredito = id_cuenta_contable_aplicadaFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien=null;

	public Long getid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien() {
		return this.id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien;
	}

	public void setid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien(Long id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien) {
		this.id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien = id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien;
	}

	public Long id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio=null;

	public Long getid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio() {
		return this.id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio;
	}

	public void setid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio(Long id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio) {
		this.id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio = id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio;
	}

	public Long id_cuenta_contable_gastoFK_IdCuentaContableGasto=null;

	public Long getid_cuenta_contable_gastoFK_IdCuentaContableGasto() {
		return this.id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public void setid_cuenta_contable_gastoFK_IdCuentaContableGasto(Long id_cuenta_contable_gastoFK_IdCuentaContableGasto) {
		this.id_cuenta_contable_gastoFK_IdCuentaContableGasto = id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien=null;

	public Long getid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien() {
		return this.id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien;
	}

	public void setid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien(Long id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien) {
		this.id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien = id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien;
	}

	public Long id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio=null;

	public Long getid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio() {
		return this.id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio;
	}

	public void setid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio(Long id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio) {
		this.id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio = id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio;
	}

	public Long id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien=null;

	public Long getid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien() {
		return this.id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien;
	}

	public void setid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien(Long id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien) {
		this.id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien = id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien;
	}

	public Long id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio=null;

	public Long getid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio() {
		return this.id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio;
	}

	public void setid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio(Long id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio) {
		this.id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio = id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public PlantillaFacturaLogic getPlantillaFacturaLogic()	{		
		return plantillafacturaLogic;
	}

	public void setPlantillaFacturaLogic(PlantillaFacturaLogic plantillafacturaLogic) {
		this.plantillafacturaLogic = plantillafacturaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoPlantillaFactura() {
		return isEsNuevoPlantillaFactura;
	}

	public void setIsEsNuevoPlantillaFactura(Boolean isEsNuevoPlantillaFactura) {
		this.isEsNuevoPlantillaFactura = isEsNuevoPlantillaFactura;
	}

	public Boolean getEsParaAccionDesdeFormularioPlantillaFactura() {
		return esParaAccionDesdeFormularioPlantillaFactura;
	}
	
	public void setEsParaAccionDesdeFormularioPlantillaFactura(Boolean esParaAccionDesdeFormularioPlantillaFactura) {
		this.esParaAccionDesdeFormularioPlantillaFactura = esParaAccionDesdeFormularioPlantillaFactura;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableAplicadasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableaplicadasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableAplicada()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableaplicadaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableaplicadasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableAplicada(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidCuentaContableAplicadaActual());
					this.cuentacontableaplicadasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoBiensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditobiensForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablecreditobienNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoBien()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditobienLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditobiensForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablecreditobiensForeignKey.add(0, cuentacontablecreditobienNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoBien(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidCuentaContableCreditoBienActual());
					this.cuentacontablecreditobiensForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditoserviciosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablecreditoservicioNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoservicioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditoserviciosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablecreditoserviciosForeignKey.add(0, cuentacontablecreditoservicioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidCuentaContableCreditoServicioActual());
					this.cuentacontablecreditoserviciosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionFuenteBiensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionfuentebiensForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencion tiporetencionfuentebienNulo = new TipoRetencion();

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteBien()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionfuentebienLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionfuentebiensForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tiporetencionfuentebiensForeignKey.add(0, tiporetencionfuentebienNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionFuenteBien(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidTipoRetencionFuenteBienActual());
					this.tiporetencionfuentebiensForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionFuenteServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionfuenteserviciosForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencion tiporetencionfuenteservicioNulo = new TipoRetencion();

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionfuenteservicioLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionfuenteserviciosForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tiporetencionfuenteserviciosForeignKey.add(0, tiporetencionfuenteservicioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionFuenteServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidTipoRetencionFuenteServicioActual());
					this.tiporetencionfuenteserviciosForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIvaBiensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionivabiensForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencion tiporetencionivabienNulo = new TipoRetencion();

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaBien()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionivabienLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionivabiensForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tiporetencionivabiensForeignKey.add(0, tiporetencionivabienNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIvaBien(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidTipoRetencionIvaBienActual());
					this.tiporetencionivabiensForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIvaServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionivaserviciosForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencion tiporetencionivaservicioNulo = new TipoRetencion();

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionivaservicioLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionivaserviciosForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.tiporetencionivaserviciosForeignKey.add(0, tiporetencionivaservicioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIvaServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidTipoRetencionIvaServicioActual());
					this.tiporetencionivaserviciosForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableGastosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablegastoNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablegastoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablegastosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablegastosForeignKey.add(0, cuentacontablegastoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableGasto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(plantillafacturaSessionBean.getlidCuentaContableGastoActual());
					this.cuentacontablegastosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaPlantillaFactura.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaPlantillaFacturaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaPlantillaFacturaGenerico!=null && jComboBoxid_empresaPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_empresaPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableAplicadaForeignKey(Long idCuentaContableAplicadaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableaplicadaTemp=null;

			for(CuentaContable cuentacontableaplicadaAux:cuentacontableaplicadasForeignKey) {
				if(cuentacontableaplicadaAux.getId()!=null && cuentacontableaplicadaAux.getId().equals(idCuentaContableAplicadaSeleccionado)) {
					cuentacontableaplicadaTemp=cuentacontableaplicadaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableaplicadaTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setCuentaContableAplicada(cuentacontableaplicadaTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedItem(cuentacontableaplicadaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedItem(cuentacontableaplicadaTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableAplicadaForeignKeyDescripcion(Long idCuentaContableAplicadaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableaplicadaTemp=null;

			for(CuentaContable cuentacontableaplicadaAux:cuentacontableaplicadasForeignKey) {
				if(cuentacontableaplicadaAux.getId()!=null && cuentacontableaplicadaAux.getId().equals(idCuentaContableAplicadaSeleccionado)) {
					cuentacontableaplicadaTemp=cuentacontableaplicadaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableaplicadaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableAplicadaForeignKeyGenerico(Long idCuentaContableAplicadaSeleccionado,JComboBox jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableaplicadaTemp=null;

			for(CuentaContable cuentacontableaplicadaAux:cuentacontableaplicadasForeignKey) {
				if(cuentacontableaplicadaAux.getId()!=null && cuentacontableaplicadaAux.getId().equals(idCuentaContableAplicadaSeleccionado)) {
					cuentacontableaplicadaTemp=cuentacontableaplicadaAux;
					break;
				}
			}

			if(cuentacontableaplicadaTemp!=null) {
				jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico.setSelectedItem(cuentacontableaplicadaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico!=null && jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoBienForeignKey(Long idCuentaContableCreditoBienSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditobienTemp=null;

			for(CuentaContable cuentacontablecreditobienAux:cuentacontablecreditobiensForeignKey) {
				if(cuentacontablecreditobienAux.getId()!=null && cuentacontablecreditobienAux.getId().equals(idCuentaContableCreditoBienSeleccionado)) {
					cuentacontablecreditobienTemp=cuentacontablecreditobienAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditobienTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setCuentaContableCreditoBien(cuentacontablecreditobienTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedItem(cuentacontablecreditobienTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedItem(cuentacontablecreditobienTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoBien") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditobienTemp!=null && jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura!=null) {
						jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.setSelectedItem(cuentacontablecreditobienTemp);
					} else {
						if(jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura!=null) {
							//jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.setSelectedItem(cuentacontablecreditobienTemp);
							if(jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.getItemCount()>0) {
								jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoBienForeignKeyDescripcion(Long idCuentaContableCreditoBienSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditobienTemp=null;

			for(CuentaContable cuentacontablecreditobienAux:cuentacontablecreditobiensForeignKey) {
				if(cuentacontablecreditobienAux.getId()!=null && cuentacontablecreditobienAux.getId().equals(idCuentaContableCreditoBienSeleccionado)) {
					cuentacontablecreditobienTemp=cuentacontablecreditobienAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditobienTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoBienForeignKeyGenerico(Long idCuentaContableCreditoBienSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditobienTemp=null;

			for(CuentaContable cuentacontablecreditobienAux:cuentacontablecreditobiensForeignKey) {
				if(cuentacontablecreditobienAux.getId()!=null && cuentacontablecreditobienAux.getId().equals(idCuentaContableCreditoBienSeleccionado)) {
					cuentacontablecreditobienTemp=cuentacontablecreditobienAux;
					break;
				}
			}

			if(cuentacontablecreditobienTemp!=null) {
				jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico.setSelectedItem(cuentacontablecreditobienTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico!=null && jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoServicioForeignKey(Long idCuentaContableCreditoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoservicioTemp=null;

			for(CuentaContable cuentacontablecreditoservicioAux:cuentacontablecreditoserviciosForeignKey) {
				if(cuentacontablecreditoservicioAux.getId()!=null && cuentacontablecreditoservicioAux.getId().equals(idCuentaContableCreditoServicioSeleccionado)) {
					cuentacontablecreditoservicioTemp=cuentacontablecreditoservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoservicioTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setCuentaContableCreditoServicio(cuentacontablecreditoservicioTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicioTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFinServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditoservicioTemp!=null && jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura!=null) {
						jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicioTemp);
					} else {
						if(jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura!=null) {
							//jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicioTemp);
							if(jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.getItemCount()>0) {
								jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoServicioForeignKeyDescripcion(Long idCuentaContableCreditoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoservicioTemp=null;

			for(CuentaContable cuentacontablecreditoservicioAux:cuentacontablecreditoserviciosForeignKey) {
				if(cuentacontablecreditoservicioAux.getId()!=null && cuentacontablecreditoservicioAux.getId().equals(idCuentaContableCreditoServicioSeleccionado)) {
					cuentacontablecreditoservicioTemp=cuentacontablecreditoservicioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoServicioForeignKeyGenerico(Long idCuentaContableCreditoServicioSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoservicioTemp=null;

			for(CuentaContable cuentacontablecreditoservicioAux:cuentacontablecreditoserviciosForeignKey) {
				if(cuentacontablecreditoservicioAux.getId()!=null && cuentacontablecreditoservicioAux.getId().equals(idCuentaContableCreditoServicioSeleccionado)) {
					cuentacontablecreditoservicioTemp=cuentacontablecreditoservicioAux;
					break;
				}
			}

			if(cuentacontablecreditoservicioTemp!=null) {
				jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico.setSelectedItem(cuentacontablecreditoservicioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico!=null && jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionFuenteBienForeignKey(Long idTipoRetencionFuenteBienSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuentebienTemp=null;

			for(TipoRetencion tiporetencionfuentebienAux:tiporetencionfuentebiensForeignKey) {
				if(tiporetencionfuentebienAux.getId()!=null && tiporetencionfuentebienAux.getId().equals(idTipoRetencionFuenteBienSeleccionado)) {
					tiporetencionfuentebienTemp=tiporetencionfuentebienAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionfuentebienTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setTipoRetencionFuenteBien(tiporetencionfuentebienTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedItem(tiporetencionfuentebienTemp);
					}
				} else {
					//jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedItem(tiporetencionfuentebienTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuenteBien") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionfuentebienTemp!=null && jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura!=null) {
						jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.setSelectedItem(tiporetencionfuentebienTemp);
					} else {
						if(jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura!=null) {
							//jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.setSelectedItem(tiporetencionfuentebienTemp);
							if(jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.getItemCount()>0) {
								jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionFuenteBienForeignKeyDescripcion(Long idTipoRetencionFuenteBienSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionfuentebienTemp=null;

			for(TipoRetencion tiporetencionfuentebienAux:tiporetencionfuentebiensForeignKey) {
				if(tiporetencionfuentebienAux.getId()!=null && tiporetencionfuentebienAux.getId().equals(idTipoRetencionFuenteBienSeleccionado)) {
					tiporetencionfuentebienTemp=tiporetencionfuentebienAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionfuentebienTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionFuenteBienForeignKeyGenerico(Long idTipoRetencionFuenteBienSeleccionado,JComboBox jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuentebienTemp=null;

			for(TipoRetencion tiporetencionfuentebienAux:tiporetencionfuentebiensForeignKey) {
				if(tiporetencionfuentebienAux.getId()!=null && tiporetencionfuentebienAux.getId().equals(idTipoRetencionFuenteBienSeleccionado)) {
					tiporetencionfuentebienTemp=tiporetencionfuentebienAux;
					break;
				}
			}

			if(tiporetencionfuentebienTemp!=null) {
				jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico.setSelectedItem(tiporetencionfuentebienTemp);
			} else {
				if(jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico!=null && jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionFuenteServicioForeignKey(Long idTipoRetencionFuenteServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuenteservicioTemp=null;

			for(TipoRetencion tiporetencionfuenteservicioAux:tiporetencionfuenteserviciosForeignKey) {
				if(tiporetencionfuenteservicioAux.getId()!=null && tiporetencionfuenteservicioAux.getId().equals(idTipoRetencionFuenteServicioSeleccionado)) {
					tiporetencionfuenteservicioTemp=tiporetencionfuenteservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionfuenteservicioTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setTipoRetencionFuenteServicio(tiporetencionfuenteservicioTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicioTemp);
					}
				} else {
					//jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicioTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuenteServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionfuenteservicioTemp!=null && jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura!=null) {
						jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicioTemp);
					} else {
						if(jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura!=null) {
							//jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicioTemp);
							if(jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.getItemCount()>0) {
								jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionFuenteServicioForeignKeyDescripcion(Long idTipoRetencionFuenteServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionfuenteservicioTemp=null;

			for(TipoRetencion tiporetencionfuenteservicioAux:tiporetencionfuenteserviciosForeignKey) {
				if(tiporetencionfuenteservicioAux.getId()!=null && tiporetencionfuenteservicioAux.getId().equals(idTipoRetencionFuenteServicioSeleccionado)) {
					tiporetencionfuenteservicioTemp=tiporetencionfuenteservicioAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionfuenteservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionFuenteServicioForeignKeyGenerico(Long idTipoRetencionFuenteServicioSeleccionado,JComboBox jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuenteservicioTemp=null;

			for(TipoRetencion tiporetencionfuenteservicioAux:tiporetencionfuenteserviciosForeignKey) {
				if(tiporetencionfuenteservicioAux.getId()!=null && tiporetencionfuenteservicioAux.getId().equals(idTipoRetencionFuenteServicioSeleccionado)) {
					tiporetencionfuenteservicioTemp=tiporetencionfuenteservicioAux;
					break;
				}
			}

			if(tiporetencionfuenteservicioTemp!=null) {
				jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico.setSelectedItem(tiporetencionfuenteservicioTemp);
			} else {
				if(jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico!=null && jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIvaBienForeignKey(Long idTipoRetencionIvaBienSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionivabienTemp=null;

			for(TipoRetencion tiporetencionivabienAux:tiporetencionivabiensForeignKey) {
				if(tiporetencionivabienAux.getId()!=null && tiporetencionivabienAux.getId().equals(idTipoRetencionIvaBienSeleccionado)) {
					tiporetencionivabienTemp=tiporetencionivabienAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionivabienTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setTipoRetencionIvaBien(tiporetencionivabienTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedItem(tiporetencionivabienTemp);
					}
				} else {
					//jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedItem(tiporetencionivabienTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIvaBien") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionivabienTemp!=null && jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura!=null) {
						jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.setSelectedItem(tiporetencionivabienTemp);
					} else {
						if(jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura!=null) {
							//jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.setSelectedItem(tiporetencionivabienTemp);
							if(jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.getItemCount()>0) {
								jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIvaBienForeignKeyDescripcion(Long idTipoRetencionIvaBienSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionivabienTemp=null;

			for(TipoRetencion tiporetencionivabienAux:tiporetencionivabiensForeignKey) {
				if(tiporetencionivabienAux.getId()!=null && tiporetencionivabienAux.getId().equals(idTipoRetencionIvaBienSeleccionado)) {
					tiporetencionivabienTemp=tiporetencionivabienAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionivabienTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIvaBienForeignKeyGenerico(Long idTipoRetencionIvaBienSeleccionado,JComboBox jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionivabienTemp=null;

			for(TipoRetencion tiporetencionivabienAux:tiporetencionivabiensForeignKey) {
				if(tiporetencionivabienAux.getId()!=null && tiporetencionivabienAux.getId().equals(idTipoRetencionIvaBienSeleccionado)) {
					tiporetencionivabienTemp=tiporetencionivabienAux;
					break;
				}
			}

			if(tiporetencionivabienTemp!=null) {
				jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico.setSelectedItem(tiporetencionivabienTemp);
			} else {
				if(jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico!=null && jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIvaServicioForeignKey(Long idTipoRetencionIvaServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionivaservicioTemp=null;

			for(TipoRetencion tiporetencionivaservicioAux:tiporetencionivaserviciosForeignKey) {
				if(tiporetencionivaservicioAux.getId()!=null && tiporetencionivaservicioAux.getId().equals(idTipoRetencionIvaServicioSeleccionado)) {
					tiporetencionivaservicioTemp=tiporetencionivaservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionivaservicioTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setTipoRetencionIvaServicio(tiporetencionivaservicioTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedItem(tiporetencionivaservicioTemp);
					}
				} else {
					//jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedItem(tiporetencionivaservicioTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIvaServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionivaservicioTemp!=null && jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura!=null) {
						jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.setSelectedItem(tiporetencionivaservicioTemp);
					} else {
						if(jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura!=null) {
							//jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.setSelectedItem(tiporetencionivaservicioTemp);
							if(jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.getItemCount()>0) {
								jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIvaServicioForeignKeyDescripcion(Long idTipoRetencionIvaServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionivaservicioTemp=null;

			for(TipoRetencion tiporetencionivaservicioAux:tiporetencionivaserviciosForeignKey) {
				if(tiporetencionivaservicioAux.getId()!=null && tiporetencionivaservicioAux.getId().equals(idTipoRetencionIvaServicioSeleccionado)) {
					tiporetencionivaservicioTemp=tiporetencionivaservicioAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionivaservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIvaServicioForeignKeyGenerico(Long idTipoRetencionIvaServicioSeleccionado,JComboBox jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionivaservicioTemp=null;

			for(TipoRetencion tiporetencionivaservicioAux:tiporetencionivaserviciosForeignKey) {
				if(tiporetencionivaservicioAux.getId()!=null && tiporetencionivaservicioAux.getId().equals(idTipoRetencionIvaServicioSeleccionado)) {
					tiporetencionivaservicioTemp=tiporetencionivaservicioAux;
					break;
				}
			}

			if(tiporetencionivaservicioTemp!=null) {
				jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico.setSelectedItem(tiporetencionivaservicioTemp);
			} else {
				if(jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico!=null && jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableGastoForeignKey(Long idCuentaContableGastoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablegastoTemp!=null) {

					if(this.plantillafactura!=null) {
						this.plantillafactura.setCuentaContableGasto(cuentacontablegastoTemp);
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedItem(cuentacontablegastoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedItem(cuentacontablegastoTemp);
					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
						if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.getItemCount()>0) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableGastoForeignKeyDescripcion(Long idCuentaContableGastoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablegastoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableGastoForeignKeyGenerico(Long idCuentaContableGastoSeleccionado,JComboBox jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(cuentacontablegastoTemp!=null) {
				jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico.setSelectedItem(cuentacontablegastoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico!=null && jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_empresaPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaPlantillaFacturaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaPlantillaFacturaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				plantillafactura.setid_empresa(empresaAux.getId());
				plantillafactura.setempresa_descripcion(PlantillaFacturaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				plantillafactura.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableAplicadaForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_aplicadaPlantillaFacturaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				plantillafactura.setid_cuenta_contable_aplicada(cuentacontableAux.getId());
				plantillafactura.setcuentacontableaplicada_descripcion(PlantillaFacturaConstantesFunciones.getCuentaContableAplicadaDescripcion(cuentacontableAux));
				plantillafactura.setCuentaContableAplicada(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoBienForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_bienPlantillaFacturaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				plantillafactura.setid_cuenta_contable_credito_bien(cuentacontableAux.getId());
				plantillafactura.setcuentacontablecreditobien_descripcion(PlantillaFacturaConstantesFunciones.getCuentaContableCreditoBienDescripcion(cuentacontableAux));
				plantillafactura.setCuentaContableCreditoBien(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoServicioForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_servicioPlantillaFacturaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				plantillafactura.setid_cuenta_contable_credito_servicio(cuentacontableAux.getId());
				plantillafactura.setcuentacontablecreditoservicio_descripcion(PlantillaFacturaConstantesFunciones.getCuentaContableCreditoServicioDescripcion(cuentacontableAux));
				plantillafactura.setCuentaContableCreditoServicio(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionFuenteBienForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_fuente_bienPlantillaFacturaGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null) {
				plantillafactura.setid_tipo_retencion_fuente_bien(tiporetencionAux.getId());
				plantillafactura.settiporetencionfuentebien_descripcion(PlantillaFacturaConstantesFunciones.getTipoRetencionFuenteBienDescripcion(tiporetencionAux));
				plantillafactura.setTipoRetencionFuenteBien(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionFuenteServicioForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_fuente_servicioPlantillaFacturaGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null) {
				plantillafactura.setid_tipo_retencion_fuente_servicio(tiporetencionAux.getId());
				plantillafactura.settiporetencionfuenteservicio_descripcion(PlantillaFacturaConstantesFunciones.getTipoRetencionFuenteServicioDescripcion(tiporetencionAux));
				plantillafactura.setTipoRetencionFuenteServicio(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIvaBienForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_iva_bienPlantillaFacturaGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null) {
				plantillafactura.setid_tipo_retencion_iva_bien(tiporetencionAux.getId());
				plantillafactura.settiporetencionivabien_descripcion(PlantillaFacturaConstantesFunciones.getTipoRetencionIvaBienDescripcion(tiporetencionAux));
				plantillafactura.setTipoRetencionIvaBien(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIvaServicioForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_iva_servicioPlantillaFacturaGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null) {
				plantillafactura.setid_tipo_retencion_iva_servicio(tiporetencionAux.getId());
				plantillafactura.settiporetencionivaservicio_descripcion(PlantillaFacturaConstantesFunciones.getTipoRetencionIvaServicioDescripcion(tiporetencionAux));
				plantillafactura.setTipoRetencionIvaServicio(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableGastoForeignKey(PlantillaFactura plantillafactura,JComboBox jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_gastoPlantillaFacturaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				plantillafactura.setid_cuenta_contable_gasto(cuentacontableAux.getId());
				plantillafactura.setcuentacontablegasto_descripcion(PlantillaFacturaConstantesFunciones.getCuentaContableGastoDescripcion(cuentacontableAux));
				plantillafactura.setCuentaContableGasto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableAplicadasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontableaplicada:this.cuentacontableaplicadasForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.addItem(cuentacontableaplicada);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoBiensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontablecreditobien:this.cuentacontablecreditobiensForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.addItem(cuentacontablecreditobien);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoBien") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontablecreditobien:this.cuentacontablecreditobiensForeignKey) {
								this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.addItem(cuentacontablecreditobien);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontablecreditoservicio:this.cuentacontablecreditoserviciosForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.addItem(cuentacontablecreditoservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFinServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontablecreditoservicio:this.cuentacontablecreditoserviciosForeignKey) {
								this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.addItem(cuentacontablecreditoservicio);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionFuenteBiensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionfuentebien:this.tiporetencionfuentebiensForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.addItem(tiporetencionfuentebien);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuenteBien") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionfuentebien:this.tiporetencionfuentebiensForeignKey) {
								this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.addItem(tiporetencionfuentebien);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionFuenteServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionfuenteservicio:this.tiporetencionfuenteserviciosForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.addItem(tiporetencionfuenteservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuenteServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionfuenteservicio:this.tiporetencionfuenteserviciosForeignKey) {
								this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.addItem(tiporetencionfuenteservicio);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIvaBiensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionivabien:this.tiporetencionivabiensForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.addItem(tiporetencionivabien);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIvaBien") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionivabien:this.tiporetencionivabiensForeignKey) {
								this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.addItem(tiporetencionivabien);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIvaServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionivaservicio:this.tiporetencionivaserviciosForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.addItem(tiporetencionivaservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIvaServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.removeAllItems();

							for(TipoRetencion tiporetencionivaservicio:this.tiporetencionivaserviciosForeignKey) {
								this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.addItem(tiporetencionivaservicio);
							}
						}

						if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableGastosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.removeAllItems();

							for(CuentaContable cuentacontablegasto:this.cuentacontablegastosForeignKey) {
								this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.addItem(cuentacontablegasto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { 
					}

					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableAplicadaForeignKey(CuentaContable cuentacontableaplicada,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedItem(cuentacontableaplicada);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoBienForeignKey(CuentaContable cuentacontablecreditobien,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedItem(cuentacontablecreditobien);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.setSelectedItem(cuentacontablecreditobien);
						} else {
							this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoServicioForeignKey(CuentaContable cuentacontablecreditoservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.setSelectedItem(cuentacontablecreditoservicio);
						} else {
							this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionFuenteBienForeignKey(TipoRetencion tiporetencionfuentebien,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedItem(tiporetencionfuentebien);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.setSelectedItem(tiporetencionfuentebien);
						} else {
							this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionFuenteServicioForeignKey(TipoRetencion tiporetencionfuenteservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.setSelectedItem(tiporetencionfuenteservicio);
						} else {
							this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIvaBienForeignKey(TipoRetencion tiporetencionivabien,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedItem(tiporetencionivabien);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.setSelectedItem(tiporetencionivabien);
						} else {
							this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIvaServicioForeignKey(TipoRetencion tiporetencionivaservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedItem(tiporetencionivaservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.setSelectedItem(tiporetencionivaservicio);
						} else {
							this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableGastoForeignKey(CuentaContable cuentacontablegasto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedItem(cuentacontablegasto);
						}
					} else {
						if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesPlantillaFactura() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			PlantillaFacturaConstantesFunciones.refrescarForeignKeysDescripcionesPlantillaFactura(this.plantillafacturaLogic.getPlantillaFacturas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			PlantillaFacturaConstantesFunciones.refrescarForeignKeysDescripcionesPlantillaFactura(this.plantillafacturas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(TipoRetencion.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//plantillafacturaLogic.setPlantillaFacturas(this.plantillafacturas);
			plantillafacturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public PlantillaFacturaParameterReturnGeneral getPlantillaFacturaParameterGeneral() {
		return this.plantillafacturaParameterGeneral;
	}
	
	public void setPlantillaFacturaParameterGeneral(PlantillaFacturaParameterReturnGeneral plantillafacturaParameterGeneral) {
		this.plantillafacturaParameterGeneral = plantillafacturaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoPlantillaFactura() {
		return isPermisoTodoPlantillaFactura;
	}

	public void setIsPermisoTodoPlantillaFactura(Boolean isPermisoTodoPlantillaFactura) {
		this.isPermisoTodoPlantillaFactura = isPermisoTodoPlantillaFactura;
	}

	public Boolean getIsPermisoNuevoPlantillaFactura() {
		return isPermisoNuevoPlantillaFactura;
	}

	public void setIsPermisoNuevoPlantillaFactura(Boolean isPermisoNuevoPlantillaFactura) {
		this.isPermisoNuevoPlantillaFactura = isPermisoNuevoPlantillaFactura;
	}

	public Boolean getIsPermisoActualizarPlantillaFactura() {
		return isPermisoActualizarPlantillaFactura;
	}

	public void setIsPermisoActualizarPlantillaFactura(Boolean isPermisoActualizarPlantillaFactura) {
		this.isPermisoActualizarPlantillaFactura = isPermisoActualizarPlantillaFactura;
	}

	public Boolean getIsPermisoEliminarPlantillaFactura() {
		return isPermisoEliminarPlantillaFactura;
	}

	public void setIsPermisoEliminarPlantillaFactura(Boolean isPermisoEliminarPlantillaFactura) {
		this.isPermisoEliminarPlantillaFactura = isPermisoEliminarPlantillaFactura;
	}

	public Boolean getIsPermisoGuardarCambiosPlantillaFactura() {
		return isPermisoGuardarCambiosPlantillaFactura;
	}

	public void setIsPermisoGuardarCambiosPlantillaFactura(Boolean isPermisoGuardarCambiosPlantillaFactura) {
		this.isPermisoGuardarCambiosPlantillaFactura = isPermisoGuardarCambiosPlantillaFactura;
	}
	
	public Boolean getIsPermisoConsultaPlantillaFactura() {
		return isPermisoConsultaPlantillaFactura;
	}

	public void setIsPermisoConsultaPlantillaFactura(Boolean isPermisoConsultaPlantillaFactura) {
		this.isPermisoConsultaPlantillaFactura = isPermisoConsultaPlantillaFactura;
	}

	public Boolean getIsPermisoBusquedaPlantillaFactura() {
		return isPermisoBusquedaPlantillaFactura;
	}

	public void setIsPermisoBusquedaPlantillaFactura(Boolean isPermisoBusquedaPlantillaFactura) {
		this.isPermisoBusquedaPlantillaFactura = isPermisoBusquedaPlantillaFactura;
	}

	public Boolean getIsPermisoReportePlantillaFactura() {
		return isPermisoReportePlantillaFactura;
	}

	public void setIsPermisoReportePlantillaFactura(Boolean isPermisoReportePlantillaFactura) {
		this.isPermisoReportePlantillaFactura = isPermisoReportePlantillaFactura;
	}
	
	public Boolean getIsPermisoPaginacionMedioPlantillaFactura() {
		return isPermisoPaginacionMedioPlantillaFactura;
	}

	public void setIsPermisoPaginacionMedioPlantillaFactura(Boolean isPermisoPaginacionMedioPlantillaFactura) {
		this.isPermisoPaginacionMedioPlantillaFactura = isPermisoPaginacionMedioPlantillaFactura;
	}
	
	public Boolean getIsPermisoPaginacionTodoPlantillaFactura() {
		return isPermisoPaginacionTodoPlantillaFactura;
	}

	public void setIsPermisoPaginacionTodoPlantillaFactura(Boolean isPermisoPaginacionTodoPlantillaFactura) {
		this.isPermisoPaginacionTodoPlantillaFactura = isPermisoPaginacionTodoPlantillaFactura;
	}
	
	public Boolean getIsPermisoPaginacionAltoPlantillaFactura() {
		return isPermisoPaginacionAltoPlantillaFactura;
	}

	public void setIsPermisoPaginacionAltoPlantillaFactura(Boolean isPermisoPaginacionAltoPlantillaFactura) {
		this.isPermisoPaginacionAltoPlantillaFactura = isPermisoPaginacionAltoPlantillaFactura;
	}
	
	public Boolean getIsPermisoCopiarPlantillaFactura() {
		return isPermisoCopiarPlantillaFactura;
	}

	public void setIsPermisoCopiarPlantillaFactura(Boolean isPermisoCopiarPlantillaFactura) {
		this.isPermisoCopiarPlantillaFactura = isPermisoCopiarPlantillaFactura;
	}
	
	public Boolean getIsPermisoVerFormPlantillaFactura() {
		return isPermisoVerFormPlantillaFactura;
	}

	public void setIsPermisoVerFormPlantillaFactura(Boolean isPermisoVerFormPlantillaFactura) {
		this.isPermisoVerFormPlantillaFactura = isPermisoVerFormPlantillaFactura;
	}
	
	public Boolean getIsPermisoDuplicarPlantillaFactura() {
		return isPermisoDuplicarPlantillaFactura;
	}

	public void setIsPermisoDuplicarPlantillaFactura(Boolean isPermisoDuplicarPlantillaFactura) {
		this.isPermisoDuplicarPlantillaFactura = isPermisoDuplicarPlantillaFactura;
	}
	
	public Boolean getIsPermisoOrdenPlantillaFactura() {
		return isPermisoOrdenPlantillaFactura;
	}

	public void setIsPermisoOrdenPlantillaFactura(Boolean isPermisoOrdenPlantillaFactura) {
		this.isPermisoOrdenPlantillaFactura = isPermisoOrdenPlantillaFactura;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoPlantillaFactura() {
		return isVisibilidadCeldaNuevoPlantillaFactura;
	}

	public void setIsVisibilidadCeldaNuevoPlantillaFactura(Boolean isVisibilidadCeldaNuevoPlantillaFactura) {
		this.isVisibilidadCeldaNuevoPlantillaFactura = isVisibilidadCeldaNuevoPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarPlantillaFactura() {
		return isVisibilidadCeldaDuplicarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaDuplicarPlantillaFactura(Boolean isVisibilidadCeldaDuplicarPlantillaFactura) {
		this.isVisibilidadCeldaDuplicarPlantillaFactura = isVisibilidadCeldaDuplicarPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarPlantillaFactura() {
		return isVisibilidadCeldaCopiarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaCopiarPlantillaFactura(Boolean isVisibilidadCeldaCopiarPlantillaFactura) {
		this.isVisibilidadCeldaCopiarPlantillaFactura = isVisibilidadCeldaCopiarPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormPlantillaFactura() {
		return isVisibilidadCeldaVerFormPlantillaFactura;
	}

	public void setIsVisibilidadCeldaVerFormPlantillaFactura(Boolean isVisibilidadCeldaVerFormPlantillaFactura) {
		this.isVisibilidadCeldaVerFormPlantillaFactura = isVisibilidadCeldaVerFormPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenPlantillaFactura() {
		return isVisibilidadCeldaOrdenPlantillaFactura;
	}

	public void setIsVisibilidadCeldaOrdenPlantillaFactura(Boolean isVisibilidadCeldaOrdenPlantillaFactura) {
		this.isVisibilidadCeldaOrdenPlantillaFactura = isVisibilidadCeldaOrdenPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesPlantillaFactura() {
		return isVisibilidadCeldaNuevoRelacionesPlantillaFactura;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesPlantillaFactura(Boolean isVisibilidadCeldaNuevoRelacionesPlantillaFactura) {
		this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura = isVisibilidadCeldaNuevoRelacionesPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaModificarPlantillaFactura() {
		return isVisibilidadCeldaModificarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaModificarPlantillaFactura(Boolean isVisibilidadCeldaModificarPlantillaFactura) {
		this.isVisibilidadCeldaModificarPlantillaFactura = isVisibilidadCeldaModificarPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarPlantillaFactura() {
		return isVisibilidadCeldaActualizarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaActualizarPlantillaFactura(Boolean isVisibilidadCeldaActualizarPlantillaFactura) {
		this.isVisibilidadCeldaActualizarPlantillaFactura = isVisibilidadCeldaActualizarPlantillaFactura;
	}

	public Boolean getIsVisibilidadCeldaEliminarPlantillaFactura() {
		return isVisibilidadCeldaEliminarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaEliminarPlantillaFactura(Boolean isVisibilidadCeldaEliminarPlantillaFactura) {
		this.isVisibilidadCeldaEliminarPlantillaFactura = isVisibilidadCeldaEliminarPlantillaFactura;
	}

	public Boolean getIsVisibilidadCeldaCancelarPlantillaFactura() {
		return isVisibilidadCeldaCancelarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaCancelarPlantillaFactura(Boolean isVisibilidadCeldaCancelarPlantillaFactura) {
		this.isVisibilidadCeldaCancelarPlantillaFactura = isVisibilidadCeldaCancelarPlantillaFactura;
	}

	public Boolean getIsVisibilidadCeldaGuardarPlantillaFactura() {
		return isVisibilidadCeldaGuardarPlantillaFactura;
	}

	public void setIsVisibilidadCeldaGuardarPlantillaFactura(Boolean isVisibilidadCeldaGuardarPlantillaFactura) {
		this.isVisibilidadCeldaGuardarPlantillaFactura = isVisibilidadCeldaGuardarPlantillaFactura;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosPlantillaFactura() {
		return isVisibilidadCeldaGuardarCambiosPlantillaFactura;
	}

	public void setIsVisibilidadCeldaGuardarCambiosPlantillaFactura(Boolean isVisibilidadCeldaGuardarCambiosPlantillaFactura) {
		this.isVisibilidadCeldaGuardarCambiosPlantillaFactura = isVisibilidadCeldaGuardarCambiosPlantillaFactura;
	}
		
	public PlantillaFacturaSessionBean getplantillafacturaSessionBean() {
		return this.plantillafacturaSessionBean;
	}
	
	public void setplantillafacturaSessionBean(PlantillaFacturaSessionBean plantillafacturaSessionBean) {
		this.plantillafacturaSessionBean=plantillafacturaSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNombre() {
		return this.isVisibilidadBusquedaPorNombre;
	}

	public void setisVisibilidadBusquedaPorNombre(Boolean isVisibilidadBusquedaPorNombre) {
		this.isVisibilidadBusquedaPorNombre=isVisibilidadBusquedaPorNombre;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoBien() {
		return this.isVisibilidadFK_IdCuentaContableCreditoBien;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoBien(Boolean isVisibilidadFK_IdCuentaContableCreditoBien) {
		this.isVisibilidadFK_IdCuentaContableCreditoBien=isVisibilidadFK_IdCuentaContableCreditoBien;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFinServicio() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFinServicio;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFinServicio(Boolean isVisibilidadFK_IdCuentaContableCreditoFinServicio) {
		this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isVisibilidadFK_IdCuentaContableCreditoFinServicio;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableGasto() {
		return this.isVisibilidadFK_IdCuentaContableGasto;
	}

	public void setisVisibilidadFK_IdCuentaContableGasto(Boolean isVisibilidadFK_IdCuentaContableGasto) {
		this.isVisibilidadFK_IdCuentaContableGasto=isVisibilidadFK_IdCuentaContableGasto;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionFuenteBien() {
		return this.isVisibilidadFK_IdTipoRetencionFuenteBien;
	}

	public void setisVisibilidadFK_IdTipoRetencionFuenteBien(Boolean isVisibilidadFK_IdTipoRetencionFuenteBien) {
		this.isVisibilidadFK_IdTipoRetencionFuenteBien=isVisibilidadFK_IdTipoRetencionFuenteBien;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionFuenteServicio() {
		return this.isVisibilidadFK_IdTipoRetencionFuenteServicio;
	}

	public void setisVisibilidadFK_IdTipoRetencionFuenteServicio(Boolean isVisibilidadFK_IdTipoRetencionFuenteServicio) {
		this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isVisibilidadFK_IdTipoRetencionFuenteServicio;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIvaBien() {
		return this.isVisibilidadFK_IdTipoRetencionIvaBien;
	}

	public void setisVisibilidadFK_IdTipoRetencionIvaBien(Boolean isVisibilidadFK_IdTipoRetencionIvaBien) {
		this.isVisibilidadFK_IdTipoRetencionIvaBien=isVisibilidadFK_IdTipoRetencionIvaBien;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIvaServicio() {
		return this.isVisibilidadFK_IdTipoRetencionIvaServicio;
	}

	public void setisVisibilidadFK_IdTipoRetencionIvaServicio(Boolean isVisibilidadFK_IdTipoRetencionIvaServicio) {
		this.isVisibilidadFK_IdTipoRetencionIvaServicio=isVisibilidadFK_IdTipoRetencionIvaServicio;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(PlantillaFactura plantillafactura)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(plantillafactura,null);
				this.setActualParaGuardarCuentaContableAplicadaForeignKey(plantillafactura,null);
				this.setActualParaGuardarCuentaContableCreditoBienForeignKey(plantillafactura,null);
				this.setActualParaGuardarCuentaContableCreditoServicioForeignKey(plantillafactura,null);
				this.setActualParaGuardarTipoRetencionFuenteBienForeignKey(plantillafactura,null);
				this.setActualParaGuardarTipoRetencionFuenteServicioForeignKey(plantillafactura,null);
				this.setActualParaGuardarTipoRetencionIvaBienForeignKey(plantillafactura,null);
				this.setActualParaGuardarTipoRetencionIvaServicioForeignKey(plantillafactura,null);
				this.setActualParaGuardarCuentaContableGastoForeignKey(plantillafactura,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(PlantillaFactura plantillafactura,PlantillaFactura plantillafacturaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalPlantillaFactura(plantillafactura);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		plantillafacturaAux.setId(plantillafactura.getId());
		plantillafacturaAux.setVersionRow(plantillafactura.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessPlantillaFactura();
		
			int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = plantillafacturaValidator.getInvalidValues(this.plantillafactura);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			plantillafacturaLogic.setDatosCliente(datosCliente);
			plantillafacturaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				plantillafacturaAux=new  PlantillaFactura();
				
				plantillafacturaAux.setIsNew(true);
				plantillafacturaAux.setIsChanged(true);
				
				plantillafacturaAux.setPlantillaFacturaOriginal(this.plantillafactura);
				
				plantillafacturaAux.setId(this.plantillafactura.getId());	
				plantillafacturaAux.setVersionRow(this.plantillafactura.getVersionRow());	
				plantillafacturaAux.setid_empresa(this.plantillafactura.getid_empresa());	
				plantillafacturaAux.setcodigo(this.plantillafactura.getcodigo());	
				plantillafacturaAux.setnombre(this.plantillafactura.getnombre());	
				plantillafacturaAux.setdescripcion(this.plantillafactura.getdescripcion());	
				plantillafacturaAux.setes_proveedor(this.plantillafactura.getes_proveedor());	
				plantillafacturaAux.setid_cuenta_contable_aplicada(this.plantillafactura.getid_cuenta_contable_aplicada());	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_bien()!=null && this.plantillafactura.getid_cuenta_contable_credito_bien()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(this.plantillafactura.getid_cuenta_contable_credito_bien());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_servicio()!=null && this.plantillafactura.getid_cuenta_contable_credito_servicio()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(this.plantillafactura.getid_cuenta_contable_credito_servicio());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_bien()!=null && this.plantillafactura.getid_tipo_retencion_fuente_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(this.plantillafactura.getid_tipo_retencion_fuente_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_servicio()!=null && this.plantillafactura.getid_tipo_retencion_fuente_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(this.plantillafactura.getid_tipo_retencion_fuente_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_bien()!=null && this.plantillafactura.getid_tipo_retencion_iva_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(this.plantillafactura.getid_tipo_retencion_iva_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_servicio()!=null && this.plantillafactura.getid_tipo_retencion_iva_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(this.plantillafactura.getid_tipo_retencion_iva_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_gasto()!=null && this.plantillafactura.getid_cuenta_contable_gasto()>0L) {
					plantillafacturaAux.setid_cuenta_contable_gasto(this.plantillafactura.getid_cuenta_contable_gasto());
				} else {
					plantillafacturaAux.setid_cuenta_contable_gasto(null);
				}	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(plantillafacturaAux,plantillafacturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.savePlantillaFacturas();//WithConnection
						//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);
					
					this.refrescarForeignKeysDescripcionesPlantillaFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								plantillafacturaLogic.savePlantillaFacturaRelaciones(plantillafacturaAux);//WithConnection
								//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(plantillafacturaAux,plantillafacturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				plantillafacturaAux=new  PlantillaFactura();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado() 
					|| (this.plantillafacturaSessionBean.getEsGuardarRelacionado() && this.plantillafactura.getId()>=0)) {
						
					plantillafacturaAux.setIsNew(false);
				}
				
				plantillafacturaAux.setIsDeleted(false);
			
				plantillafacturaAux.setId(this.plantillafactura.getId());	
				plantillafacturaAux.setVersionRow(this.plantillafactura.getVersionRow());	
				plantillafacturaAux.setid_empresa(this.plantillafactura.getid_empresa());	
				plantillafacturaAux.setcodigo(this.plantillafactura.getcodigo());	
				plantillafacturaAux.setnombre(this.plantillafactura.getnombre());	
				plantillafacturaAux.setdescripcion(this.plantillafactura.getdescripcion());	
				plantillafacturaAux.setes_proveedor(this.plantillafactura.getes_proveedor());	
				plantillafacturaAux.setid_cuenta_contable_aplicada(this.plantillafactura.getid_cuenta_contable_aplicada());	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_bien()!=null && this.plantillafactura.getid_cuenta_contable_credito_bien()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(this.plantillafactura.getid_cuenta_contable_credito_bien());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_servicio()!=null && this.plantillafactura.getid_cuenta_contable_credito_servicio()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(this.plantillafactura.getid_cuenta_contable_credito_servicio());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_bien()!=null && this.plantillafactura.getid_tipo_retencion_fuente_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(this.plantillafactura.getid_tipo_retencion_fuente_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_servicio()!=null && this.plantillafactura.getid_tipo_retencion_fuente_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(this.plantillafactura.getid_tipo_retencion_fuente_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_bien()!=null && this.plantillafactura.getid_tipo_retencion_iva_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(this.plantillafactura.getid_tipo_retencion_iva_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_servicio()!=null && this.plantillafactura.getid_tipo_retencion_iva_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(this.plantillafactura.getid_tipo_retencion_iva_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_gasto()!=null && this.plantillafactura.getid_cuenta_contable_gasto()>0L) {
					plantillafacturaAux.setid_cuenta_contable_gasto(this.plantillafactura.getid_cuenta_contable_gasto());
				} else {
					plantillafacturaAux.setid_cuenta_contable_gasto(null);
				}	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(plantillafacturaAux,plantillafacturas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.savePlantillaFacturas();//WithConnection
						//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);
					
					this.refrescarForeignKeysDescripcionesPlantillaFactura();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								plantillafacturaLogic.savePlantillaFacturaRelaciones(plantillafacturaAux);//WithConnection
								//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(plantillafacturaAux,plantillafacturas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.plantillafactura,plantillafacturaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				plantillafacturaAux=new  PlantillaFactura();
				
				plantillafacturaAux.setIsNew(false);
				plantillafacturaAux.setIsChanged(false);
				
				plantillafacturaAux.setIsDeleted(true);
				
				plantillafacturaAux.setId(this.plantillafactura.getId());	
				plantillafacturaAux.setVersionRow(this.plantillafactura.getVersionRow());	
				plantillafacturaAux.setid_empresa(this.plantillafactura.getid_empresa());	
				plantillafacturaAux.setcodigo(this.plantillafactura.getcodigo());	
				plantillafacturaAux.setnombre(this.plantillafactura.getnombre());	
				plantillafacturaAux.setdescripcion(this.plantillafactura.getdescripcion());	
				plantillafacturaAux.setes_proveedor(this.plantillafactura.getes_proveedor());	
				plantillafacturaAux.setid_cuenta_contable_aplicada(this.plantillafactura.getid_cuenta_contable_aplicada());	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_bien()!=null && this.plantillafactura.getid_cuenta_contable_credito_bien()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(this.plantillafactura.getid_cuenta_contable_credito_bien());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_bien(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_credito_servicio()!=null && this.plantillafactura.getid_cuenta_contable_credito_servicio()>0L) {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(this.plantillafactura.getid_cuenta_contable_credito_servicio());
				} else {
					plantillafacturaAux.setid_cuenta_contable_credito_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_bien()!=null && this.plantillafactura.getid_tipo_retencion_fuente_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(this.plantillafactura.getid_tipo_retencion_fuente_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_fuente_servicio()!=null && this.plantillafactura.getid_tipo_retencion_fuente_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(this.plantillafactura.getid_tipo_retencion_fuente_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_fuente_servicio(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_bien()!=null && this.plantillafactura.getid_tipo_retencion_iva_bien()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(this.plantillafactura.getid_tipo_retencion_iva_bien());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_bien(null);
				}	
				
				if(this.plantillafactura.getid_tipo_retencion_iva_servicio()!=null && this.plantillafactura.getid_tipo_retencion_iva_servicio()>0L) {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(this.plantillafactura.getid_tipo_retencion_iva_servicio());
				} else {
					plantillafacturaAux.setid_tipo_retencion_iva_servicio(null);
				}	
				
				if(this.plantillafactura.getid_cuenta_contable_gasto()!=null && this.plantillafactura.getid_cuenta_contable_gasto()>0L) {
					plantillafacturaAux.setid_cuenta_contable_gasto(this.plantillafactura.getid_cuenta_contable_gasto());
				} else {
					plantillafacturaAux.setid_cuenta_contable_gasto(null);
				}	
				
				if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.plantillafacturaAux.getId()>=0) {	
						this.plantillafacturasEliminados.add(plantillafacturaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(plantillafacturaAux,plantillafacturas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.savePlantillaFacturas();//WithConnection
						//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								plantillafacturaLogic.savePlantillaFacturaRelaciones(plantillafacturaAux);//WithConnection
								//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(plantillafacturaAux,plantillafacturaLogic.getPlantillaFacturas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(plantillafacturaAux,plantillafacturas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getPlantillaFacturas().addAll(this.plantillafacturasEliminados);
					
					plantillafacturaLogic.savePlantillaFacturas();//WithConnection
					//plantillafacturaLogic.getSetVersionRowPlantillaFacturas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesPlantillaFactura();
				
				this.plantillafacturasEliminados= new ArrayList<PlantillaFactura>();		
			}
			
			if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Plantilla Factura GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.plantillafactura=plantillafacturaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessPlantillaFactura();
      	}
		
	}	
	
	public void actualizarRelaciones(PlantillaFactura plantillafacturaLocal) throws Exception {
		
		if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(PlantillaFactura plantillafacturaLocal) throws Exception {	
		if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				plantillafacturaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableaplicadaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableaplicadaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableaplicadaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableaplicadaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableaplicadaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableaplicadasForeignKey);

				cuentacontableaplicadaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableaplicadaBeanSwingJInternalFrameLocal.cuentacontable);

				plantillafacturaLocal.setCuentaContableAplicada(cuentacontableaplicadaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableAplicada();
				this.cargarCombosFrameCuentaContableAplicadasForeignKey("Formulario");
				this.setActualCuentaContableAplicadaForeignKey(cuentacontableaplicadaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditobienBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditobienBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditobienBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditobienBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditobienBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditobiensForeignKey);

				cuentacontablecreditobienBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditobienBeanSwingJInternalFrameLocal.cuentacontable);

				plantillafacturaLocal.setCuentaContableCreditoBien(cuentacontablecreditobienBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoBien();
				this.cargarCombosFrameCuentaContableCreditoBiensForeignKey("Formulario");
				this.setActualCuentaContableCreditoBienForeignKey(cuentacontablecreditobienBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoservicioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditoserviciosForeignKey);

				cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.cuentacontable);

				plantillafacturaLocal.setCuentaContableCreditoServicio(cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoServicio();
				this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey("Formulario");
				this.setActualCuentaContableCreditoServicioForeignKey(cuentacontablecreditoservicioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionfuentebienBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionfuentebienBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionfuentebienBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionfuentebienBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionfuentebienBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionfuentebiensForeignKey);

				tiporetencionfuentebienBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionfuentebienBeanSwingJInternalFrameLocal.tiporetencion);

				plantillafacturaLocal.setTipoRetencionFuenteBien(tiporetencionfuentebienBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionFuenteBien();
				this.cargarCombosFrameTipoRetencionFuenteBiensForeignKey("Formulario");
				this.setActualTipoRetencionFuenteBienForeignKey(tiporetencionfuentebienBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionfuenteservicioBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionfuenteserviciosForeignKey);

				tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.tiporetencion);

				plantillafacturaLocal.setTipoRetencionFuenteServicio(tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionFuenteServicio();
				this.cargarCombosFrameTipoRetencionFuenteServiciosForeignKey("Formulario");
				this.setActualTipoRetencionFuenteServicioForeignKey(tiporetencionfuenteservicioBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionivabienBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionivabienBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionivabienBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionivabienBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionivabienBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionivabiensForeignKey);

				tiporetencionivabienBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionivabienBeanSwingJInternalFrameLocal.tiporetencion);

				plantillafacturaLocal.setTipoRetencionIvaBien(tiporetencionivabienBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionIvaBien();
				this.cargarCombosFrameTipoRetencionIvaBiensForeignKey("Formulario");
				this.setActualTipoRetencionIvaBienForeignKey(tiporetencionivabienBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionivaservicioBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionivaservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionivaservicioBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionivaservicioBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionivaservicioBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionivaserviciosForeignKey);

				tiporetencionivaservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionivaservicioBeanSwingJInternalFrameLocal.tiporetencion);

				plantillafacturaLocal.setTipoRetencionIvaServicio(tiporetencionivaservicioBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionIvaServicio();
				this.cargarCombosFrameTipoRetencionIvaServiciosForeignKey("Formulario");
				this.setActualTipoRetencionIvaServicioForeignKey(tiporetencionivaservicioBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablegastoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablegastoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablegastoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablegastosForeignKey);

				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				plantillafacturaLocal.setCuentaContableGasto(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey("Formulario");
				this.setActualCuentaContableGastoForeignKey(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarPlantillaFacturaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = plantillafacturaValidator.getInvalidValues(this.plantillafactura);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(PlantillaFactura plantillafactura,List<PlantillaFactura> plantillafacturas) throws Exception {
		try	{		
			PlantillaFacturaConstantesFunciones.actualizarLista(plantillafactura,plantillafacturas,this.plantillafacturaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(PlantillaFactura plantillafactura,List<PlantillaFactura> plantillafacturas) throws Exception {
		try	{			
			PlantillaFacturaConstantesFunciones.actualizarSelectedLista(plantillafactura,plantillafacturas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<PlantillaFactura> plantillafacturasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				plantillafacturasLocal=this.plantillafacturaLogic.getPlantillaFacturas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				plantillafacturasLocal=this.plantillafacturas;
			}
			//ARCHITECTURE
		
			for(PlantillaFactura plantillafacturaLocal:plantillafacturasLocal) {
				if(this.permiteMantenimiento(plantillafacturaLocal) && plantillafacturaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+PlantillaFacturaConstantesFunciones.getPlantillaFacturaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_empresaPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelcodigoPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelnombrePlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabeldescripcionPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.ESPROVEEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabeles_proveedorPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLEAPLICADA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_aplicadaPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLECREDITOBIEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_credito_bienPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLECREDITOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_credito_servicioPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONFUENTEBIEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_fuente_bienPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONFUENTESERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_fuente_servicioPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONIVABIEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_iva_bienPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONIVASERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_iva_servicioPlantillaFactura,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLEGASTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_gastoPlantillaFactura,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_empresaPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelcodigoPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelnombrePlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabeldescripcionPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabeles_proveedorPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_aplicadaPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_credito_bienPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_credito_servicioPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_fuente_bienPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_fuente_servicioPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_iva_bienPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_tipo_retencion_iva_servicioPlantillaFactura,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPlantillaFactura.jLabelid_cuenta_contable_gastoPlantillaFactura,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoPlantillaFactura--;	
		
		
		this.plantillafacturaAux=new PlantillaFactura();
		
		this.plantillafacturaAux.setId(this.iIdNuevoPlantillaFactura);
		this.plantillafacturaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.plantillafacturaLogic.getPlantillaFacturas().add(this.plantillafacturaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.plantillafacturas.add(this.plantillafacturaAux);
		}
		//ARCHITECTURE
		
		this.plantillafactura=this.plantillafacturaAux;
		
		if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioPlantillaFactura(this.plantillafactura);
			this.setVariablesObjetoActualToFormularioForeignKeyPlantillaFactura(this.plantillafactura);
		}
				
		//this.setDefaultControlesPlantillaFactura();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyPlantillaFactura();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyPlantillaFactura();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyPlantillaFactura();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPlantillaFactura(this.plantillafacturaBean,this.plantillafactura,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(PlantillaFacturaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
			classes=PlantillaFacturaConstantesFunciones.getClassesRelationshipsOfPlantillaFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.plantillafacturaReturnGeneral=plantillafacturaLogic.procesarEventosPlantillaFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.plantillafacturaLogic.getPlantillaFacturas(),this.plantillafactura,this.plantillafacturaParameterGeneral,this.isEsNuevoPlantillaFactura,classes);//this.plantillafacturaLogic.getPlantillaFactura()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanPlantillaFactura(this.plantillafacturaReturnGeneral,this.plantillafacturaBean,false);
		
		if(this.plantillafacturaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura());
		}
		
		if(this.plantillafacturaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura(),classes);//this.plantillafacturaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyPlantillaFactura();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyPlantillaFactura();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.RecargarFormPlantillaFactura(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingPlantillaFactura(false);
						
			if(plantillafacturaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPlantillaFactura();
			}
			
			this.actualizarVisualTableDatosPlantillaFactura();
			
			this.jTableDatosPlantillaFactura.setRowSelectionInterval(this.getIndiceNuevoPlantillaFactura(), this.getIndiceNuevoPlantillaFactura());
			
			this.seleccionarFilaTablaPlantillaFacturaActual();
						
			this.actualizarEstadoCeldasBotonesPlantillaFactura("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesPlantillaFactura(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarcodigoPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarnombrePlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activardescripcionPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activares_proveedorPlantillaFactura);	
		//
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_empresaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_aplicadaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_servicioPlantillaFactura);//
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setEnabled(isHabilitar && this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_gastoPlantillaFactura);
	};
	
	public void setDefaultControlesPlantillaFactura() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoPlantillaFactura(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.plantillafacturaSessionBean.setConGuardarRelaciones(true);			
			this.plantillafacturaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.setVisible(true);
			
					
		} else {
			//this.plantillafacturaSessionBean.setConGuardarRelaciones(false);			
			this.plantillafacturaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoPlantillaFactura() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
				if(plantillafacturaAux.getId().equals(this.iIdNuevoPlantillaFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturas) {
				if(plantillafacturaAux.getId().equals(this.iIdNuevoPlantillaFactura)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualPlantillaFactura(PlantillaFactura plantillafactura,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
				if(plantillafacturaAux.getId().equals(plantillafactura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturas) {
				if(plantillafacturaAux.getId().equals(plantillafactura.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalPlantillaFactura(PlantillaFactura plantillafacturaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
				if(plantillafacturaAux.getPlantillaFacturaOriginal().getId().equals(plantillafacturaOriginal.getId())) {
					existe=true;
					plantillafacturaOriginal.setId(plantillafacturaAux.getId());
					plantillafacturaOriginal.setVersionRow(plantillafacturaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PlantillaFactura plantillafacturaAux:this.plantillafacturas) {
				if(plantillafacturaAux.getPlantillaFacturaOriginal().getId().equals(plantillafacturaOriginal.getId())) {
					existe=true;
					plantillafacturaOriginal.setId(plantillafacturaAux.getId());
					plantillafacturaOriginal.setVersionRow(plantillafacturaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosPlantillaFactura(Boolean esParaCancelar) throws Exception {
		plantillafacturasAux=new ArrayList<PlantillaFactura>();
		plantillafacturaAux=new PlantillaFactura();
		
		if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
					if(plantillafacturaAux.getId()<0) {
						plantillafacturasAux.add(plantillafacturaAux);
					}		
				}
				this.iIdNuevoPlantillaFactura=0L;
				this.plantillafacturaLogic.getPlantillaFacturas().removeAll(plantillafacturasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PlantillaFactura plantillafacturaAux:this.plantillafacturas) {
					if(plantillafacturaAux.getId()<0) {
						plantillafacturasAux.add(plantillafacturaAux);
					}		
				}
				this.iIdNuevoPlantillaFactura=0L;
				this.plantillafacturas.removeAll(plantillafacturasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoPlantillaFactura 
					&& this.plantillafacturaLogic.getPlantillaFacturas().size()>0
					) {
					plantillafacturaAux=this.plantillafacturaLogic.getPlantillaFacturas().get(this.plantillafacturaLogic.getPlantillaFacturas().size() - 1);
				
					if(plantillafacturaAux.getId()<0) {
						this.plantillafacturaLogic.getPlantillaFacturas().remove(plantillafacturaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoPlantillaFactura && this.plantillafacturas.size()>0) {
					plantillafacturaAux=this.plantillafacturas.get(this.plantillafacturas.size() - 1);
				
					if(plantillafacturaAux.getId()<0) {
						this.plantillafacturas.remove(plantillafacturaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoPlantillaFactura(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(plantillafactura.getId()<0) {
				this.plantillafacturaLogic.getPlantillaFacturas().remove(this.plantillafactura);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(plantillafactura.getId()<0) {
				this.plantillafacturas.remove(this.plantillafactura);
			}
		}			
	}
	
	public void setEstadosInicialesPlantillaFactura(List<PlantillaFactura> plantillafacturasAux) throws Exception {
		PlantillaFacturaConstantesFunciones.setEstadosInicialesPlantillaFactura(plantillafacturasAux);
	}
	
	public void setEstadosInicialesPlantillaFactura(PlantillaFactura plantillafacturaAux) throws Exception {
		PlantillaFacturaConstantesFunciones.setEstadosInicialesPlantillaFactura(plantillafacturaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarPlantillaFacturaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarPlantillaFacturaActual()) {
				if(!this.isEsNuevoPlantillaFactura) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoPlantillaFactura=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarPlantillaFacturaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Plantilla Factura ?", "MANTENIMIENTO DE Plantilla Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(PlantillaFactura plantillafactura) throws Exception {
		PlantillaFacturaConstantesFunciones.seleccionarAsignar(this.plantillafactura,plantillafactura);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarPlantillaFactura=this.isPermisoActualizarOriginalPlantillaFactura;
			
			
			this.seleccionarAsignar(plantillafactura);
			
			

			idCuentaContableAplicadaActual=plantillafactura.getid_cuenta_contable_aplicada();
			this.seleccionarCuentaContableAplicadaActual();

			idCuentaContableCreditoBienActual=plantillafactura.getid_cuenta_contable_credito_bien();
			this.seleccionarCuentaContableCreditoBienActual();

			idCuentaContableCreditoServicioActual=plantillafactura.getid_cuenta_contable_credito_servicio();
			this.seleccionarCuentaContableCreditoServicioActual();

			idCuentaContableGastoActual=plantillafactura.getid_cuenta_contable_gasto();
			this.seleccionarCuentaContableGastoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PlantillaFacturaConstantesFunciones.quitarEspaciosPlantillaFactura(this.plantillafactura,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesPlantillaFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.plantillafacturaSessionBean.setsFuncionBusquedaRapida(this.plantillafacturaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableAplicadaActual() throws Exception {
		try	{
			CuentaContable cuentacontableaplicadaAux=new CuentaContable();

			if(this.idCuentaContableAplicadaActual != null && this.idCuentaContableAplicadaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableaplicadaLogic.getEntityWithConnection(this.idCuentaContableAplicadaActual);
					cuentacontableaplicadaAux= cuentacontableaplicadaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableaplicadasForeignKey=new ArrayList<CuentaContable>();
				cuentacontableaplicadasForeignKey.add(cuentacontableaplicadaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoBienActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditobienAux=new CuentaContable();

			if(this.idCuentaContableCreditoBienActual != null && this.idCuentaContableCreditoBienActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditobienLogic.getEntityWithConnection(this.idCuentaContableCreditoBienActual);
					cuentacontablecreditobienAux= cuentacontablecreditobienLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditobiensForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditobiensForeignKey.add(cuentacontablecreditobienAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoServicioActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditoservicioAux=new CuentaContable();

			if(this.idCuentaContableCreditoServicioActual != null && this.idCuentaContableCreditoServicioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditoservicioLogic.getEntityWithConnection(this.idCuentaContableCreditoServicioActual);
					cuentacontablecreditoservicioAux= cuentacontablecreditoservicioLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditoserviciosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditoserviciosForeignKey.add(cuentacontablecreditoservicioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableGastoActual() throws Exception {
		try	{
			CuentaContable cuentacontablegastoAux=new CuentaContable();

			if(this.idCuentaContableGastoActual != null && this.idCuentaContableGastoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablegastoLogic.getEntityWithConnection(this.idCuentaContableGastoActual);
					cuentacontablegastoAux= cuentacontablegastoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablegastosForeignKey.add(cuentacontablegastoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoPlantillaFactura) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosPlantillaFactura(esParaCancelar);				
				this.cancelarNuevoPlantillaFactura(esParaCancelar);								
			}
			
			this.plantillafactura=new PlantillaFactura();
			
			this.inicializarPlantillaFactura();
			
			this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarPlantillaFactura() throws Exception {
		try {
			PlantillaFacturaConstantesFunciones.inicializarPlantillaFactura(this.plantillafactura);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.plantillafacturaLogic.getPlantillaFacturas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReportePlantillaFacturas(String sAccionBusqueda,List<PlantillaFactura> plantillafacturasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="PlantillaFactura"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="PlantillaFacturaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("PlantillaFacturaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="PlantillaFactura"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Plantilla Facturas");		
		parameters.put("busquedapor", PlantillaFacturaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourcePlantillaFactura=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			PlantillaFacturaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			PlantillaFacturaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourcePlantillaFactura=new JRBeanArrayDataSource(PlantillaFacturaJInternalFrame.TraerPlantillaFacturaBeans(plantillafacturasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourcePlantillaFactura);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+PlantillaFacturaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+PlantillaFacturaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(PlantillaFacturaBean.TraerPlantillaFacturaBeans(plantillafacturasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReportePlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalPlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoPlantillaFacturaActionPerformed(null);
					//this.generarExcelReportePlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalPlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesPlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesPlantillaFacturas(sAccionBusqueda,sTipoArchivoReporte,plantillafacturasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReportePlantillaFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<PlantillaFactura> plantillafacturasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PlantillaFacturas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPlantillaFactura("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(PlantillaFactura plantillafactura : plantillafacturasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			PlantillaFacturaConstantesFunciones.generarExcelReporteDataPlantillaFactura("NORMAL",row,workbook,plantillafactura,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderPlantillaFactura(String sTipo,Row row,Workbook workbook) {
		
		PlantillaFacturaConstantesFunciones.generarExcelReporteHeaderPlantillaFactura(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalPlantillaFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<PlantillaFactura> plantillafacturasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PlantillaFacturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(PlantillaFactura plantillafactura : plantillafacturasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(PlantillaFacturaConstantesFunciones.getPlantillaFacturaDescripcion(plantillafactura));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(plantillafactura.getes_proveedor()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getcuentacontableaplicada_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getcuentacontablecreditobien_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getcuentacontablecreditoservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.gettiporetencionfuentebien_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.gettiporetencionfuenteservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.gettiporetencionivabien_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.gettiporetencionivaservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(plantillafactura.getcuentacontablegasto_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesPlantillaFacturas(String sAccionBusqueda,String sTipoArchivoReporte,List<PlantillaFactura> plantillafacturasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<PlantillaFactura> plantillafacturasRespaldo=null;
		
		classes=PlantillaFacturaConstantesFunciones.getClassesRelationshipsOfPlantillaFactura(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.plantillafacturaLogic.setDatosCliente(this.datosCliente);
		this.plantillafacturaLogic.setDatosDeep(this.datosDeep);
		this.plantillafacturaLogic.setIsConDeep(true);
		
		plantillafacturasRespaldo=this.plantillafacturaLogic.getPlantillaFacturas();
		
		this.plantillafacturaLogic.setPlantillaFacturas(plantillafacturasParaReportes);	
		this.plantillafacturaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		plantillafacturasParaReportes=this.plantillafacturaLogic.getPlantillaFacturas();
		this.plantillafacturaLogic.setPlantillaFacturas(plantillafacturasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PlantillaFacturas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPlantillaFactura("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(PlantillaFactura plantillafactura : plantillafacturasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderPlantillaFactura("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			PlantillaFacturaConstantesFunciones.generarExcelReporteDataPlantillaFactura("NORMAL",row,workbook,plantillafactura,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(PlantillaFacturaConstantesFunciones.getPlantillaFacturaDescripcion(plantillafactura));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPlantillaFactura.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessPlantillaFactura() throws Exception {		
		this.startProcessPlantillaFactura(true);
	}
	
	public void startProcessPlantillaFactura(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasPlantillaFactura ,this.jPanelParametrosReportesPlantillaFactura, this.jScrollPanelDatosPlantillaFactura,this.jPanelPaginacionPlantillaFactura, this.jScrollPanelDatosEdicionPlantillaFactura, this.jPanelAccionesPlantillaFactura,this.jPanelAccionesFormularioPlantillaFactura,this.jmenuBarPlantillaFactura,this.jmenuBarDetallePlantillaFactura,this.jTtoolBarPlantillaFactura,this.jTtoolBarDetallePlantillaFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasPlantillaFactura=this.jTabbedPaneBusquedasPlantillaFactura; 
		
		final JPanel jPanelParametrosReportesPlantillaFactura=this.jPanelParametrosReportesPlantillaFactura;
		//final JScrollPane jScrollPanelDatosPlantillaFactura=this.jScrollPanelDatosPlantillaFactura;
		final JTable jTableDatosPlantillaFactura=this.jTableDatosPlantillaFactura;		
		final JPanel jPanelPaginacionPlantillaFactura=this.jPanelPaginacionPlantillaFactura;
		//final JScrollPane jScrollPanelDatosEdicionPlantillaFactura=this.jScrollPanelDatosEdicionPlantillaFactura;
		final JPanel jPanelAccionesPlantillaFactura=this.jPanelAccionesPlantillaFactura;
		
		JPanel jPanelCamposAuxiliarPlantillaFactura=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarPlantillaFactura=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			jPanelCamposAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jPanelCamposPlantillaFactura;
			jPanelAccionesFormularioAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jPanelAccionesFormularioPlantillaFactura;
		}
		
		final JPanel jPanelCamposPlantillaFactura=jPanelCamposAuxiliarPlantillaFactura;
		final JPanel jPanelAccionesFormularioPlantillaFactura=jPanelAccionesFormularioAuxiliarPlantillaFactura;
		
		
		final JMenuBar jmenuBarPlantillaFactura=this.jmenuBarPlantillaFactura;
		final JToolBar jTtoolBarPlantillaFactura=this.jTtoolBarPlantillaFactura;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarPlantillaFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPlantillaFactura=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			jmenuBarDetalleAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jmenuBarDetallePlantillaFactura;
			jTtoolBarDetalleAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jTtoolBarDetallePlantillaFactura;
		}
		
		final JMenuBar jmenuBarDetallePlantillaFactura=jmenuBarDetalleAuxiliarPlantillaFactura;
		final JToolBar jTtoolBarDetallePlantillaFactura=jTtoolBarDetalleAuxiliarPlantillaFactura;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPlantillaFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPlantillaFactura;
			processRunnable.jTableDatos=jTableDatosPlantillaFactura;
			processRunnable.jPanelCampos=jPanelCamposPlantillaFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionPlantillaFactura;
			processRunnable.jPanelAcciones=jPanelAccionesPlantillaFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPlantillaFactura;
			
			
			processRunnable.jmenuBar=jmenuBarPlantillaFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePlantillaFactura;
			processRunnable.jTtoolBar=jTtoolBarPlantillaFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePlantillaFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPlantillaFactura ,jPanelParametrosReportesPlantillaFactura,jTableDatosPlantillaFactura, /*jScrollPanelDatosPlantillaFactura,*/jPanelCamposPlantillaFactura,jPanelPaginacionPlantillaFactura, /*jScrollPanelDatosEdicionPlantillaFactura,*/ jPanelAccionesPlantillaFactura,jPanelAccionesFormularioPlantillaFactura,jmenuBarPlantillaFactura,jmenuBarDetallePlantillaFactura,jTtoolBarPlantillaFactura,jTtoolBarDetallePlantillaFactura);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPlantillaFactura ,jPanelParametrosReportesPlantillaFactura, jScrollPanelDatosPlantillaFactura,jPanelPaginacionPlantillaFactura, jScrollPanelDatosEdicionPlantillaFactura, jPanelAccionesPlantillaFactura,jPanelAccionesFormularioPlantillaFactura,jmenuBarPlantillaFactura,jmenuBarDetallePlantillaFactura,jTtoolBarPlantillaFactura,jTtoolBarDetallePlantillaFactura);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessPlantillaFactura() {// throws Exception 
		this.finishProcessPlantillaFactura(true);
	}
	
	public void finishProcessPlantillaFactura(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasPlantillaFactura ,this.jPanelParametrosReportesPlantillaFactura, this.jScrollPanelDatosPlantillaFactura,this.jPanelPaginacionPlantillaFactura, this.jScrollPanelDatosEdicionPlantillaFactura, this.jPanelAccionesPlantillaFactura,this.jPanelAccionesFormularioPlantillaFactura,this.jmenuBarPlantillaFactura,this.jmenuBarDetallePlantillaFactura,this.jTtoolBarPlantillaFactura,this.jTtoolBarDetallePlantillaFactura);		
		
		final JTabbedPane jTabbedPaneBusquedasPlantillaFactura=this.jTabbedPaneBusquedasPlantillaFactura; 
		
		final JPanel jPanelParametrosReportesPlantillaFactura=this.jPanelParametrosReportesPlantillaFactura;
		//final JScrollPane jScrollPanelDatosPlantillaFactura=this.jScrollPanelDatosPlantillaFactura;
		final JTable jTableDatosPlantillaFactura=this.jTableDatosPlantillaFactura;		
		final JPanel jPanelPaginacionPlantillaFactura=this.jPanelPaginacionPlantillaFactura;
		//final JScrollPane jScrollPanelDatosEdicionPlantillaFactura=this.jScrollPanelDatosEdicionPlantillaFactura;
		final JPanel jPanelAccionesPlantillaFactura=this.jPanelAccionesPlantillaFactura;
		
		JPanel jPanelCamposAuxiliarPlantillaFactura=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarPlantillaFactura=new JPanel();
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			jPanelCamposAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jPanelCamposPlantillaFactura;
			jPanelAccionesFormularioAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jPanelAccionesFormularioPlantillaFactura;
		}
		
		final JPanel jPanelCamposPlantillaFactura=jPanelCamposAuxiliarPlantillaFactura;
		final JPanel jPanelAccionesFormularioPlantillaFactura=jPanelAccionesFormularioAuxiliarPlantillaFactura;
		
		
		final JMenuBar jmenuBarPlantillaFactura=this.jmenuBarPlantillaFactura;		
		final JToolBar jTtoolBarPlantillaFactura=this.jTtoolBarPlantillaFactura;
				
		JMenuBar jmenuBarDetalleAuxiliarPlantillaFactura=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPlantillaFactura=new JToolBar();
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			jmenuBarDetalleAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jmenuBarDetallePlantillaFactura;
			jTtoolBarDetalleAuxiliarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jTtoolBarDetallePlantillaFactura;		
		}
		
		final JMenuBar jmenuBarDetallePlantillaFactura=jmenuBarDetalleAuxiliarPlantillaFactura;
		final JToolBar jTtoolBarDetallePlantillaFactura=jTtoolBarDetalleAuxiliarPlantillaFactura;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPlantillaFactura;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPlantillaFactura;
			processRunnable.jTableDatos=jTableDatosPlantillaFactura;
			processRunnable.jPanelCampos=jPanelCamposPlantillaFactura;
			processRunnable.jPanelPaginacion=jPanelPaginacionPlantillaFactura;
			processRunnable.jPanelAcciones=jPanelAccionesPlantillaFactura;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPlantillaFactura;
			
			
			processRunnable.jmenuBar=jmenuBarPlantillaFactura;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePlantillaFactura;
			processRunnable.jTtoolBar=jTtoolBarPlantillaFactura;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePlantillaFactura;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasPlantillaFactura ,jPanelParametrosReportesPlantillaFactura, jTableDatosPlantillaFactura,/*jScrollPanelDatosPlantillaFactura,*/jPanelCamposPlantillaFactura,jPanelPaginacionPlantillaFactura, /*jScrollPanelDatosEdicionPlantillaFactura,*/ jPanelAccionesPlantillaFactura,jPanelAccionesFormularioPlantillaFactura,jmenuBarPlantillaFactura,jmenuBarDetallePlantillaFactura,jTtoolBarPlantillaFactura,jTtoolBarDetallePlantillaFactura));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesPlantillaFactura(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarPlantillaFactura(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuPlantillaFactura(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarPlantillaFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarPlantillaFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetallePlantillaFactura,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuPlantillaFactura(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarPlantillaFactura,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetallePlantillaFactura,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.plantillafacturaConstantesFunciones.getsFinalQueryPlantillaFactura();
		String  finalQueryPaginacionTodos=this.plantillafacturaConstantesFunciones.getsFinalQueryPlantillaFactura();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=PlantillaFacturaConstantesFunciones.getArrayColumnasGlobalesNoPlantillaFactura(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=PlantillaFacturaConstantesFunciones.getArrayColumnasGlobalesPlantillaFactura(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,PlantillaFacturaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.plantillafacturasEliminados= new ArrayList<PlantillaFactura>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessPlantillaFactura();
		
				///*PlantillaFacturaSessionBean*/this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			
			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=PlantillaFacturaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=PlantillaFacturaConstantesFunciones.getClassesForeignKeysOfPlantillaFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/plantillafactura."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			plantillafacturasAux= new ArrayList<PlantillaFactura>();
			
				
			plantillafacturaLogic.setDatosCliente(this.datosCliente);
			plantillafacturaLogic.setDatosDeep(this.datosDeep);
			plantillafacturaLogic.setIsConDeep(true);
			
			
			plantillafacturaLogic.getPlantillaFacturaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					plantillafacturaLogic.getTodosPlantillaFacturas(finalQueryGlobal,pagination);
					
					//plantillafacturaLogic.getTodosPlantillaFacturasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(plantillafacturaLogic.getPlantillaFacturas()==null|| plantillafacturaLogic.getPlantillaFacturas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							plantillafacturasAux= new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux= new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							plantillafacturaLogic.getTodosPlantillaFacturas(finalQueryGlobal+"",this.pagination);												
							
							//plantillafacturaLogic.getTodosPlantillaFacturasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReportePlantillaFacturas("Todos",plantillafacturaLogic.getPlantillaFacturas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());					
							plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idPlantillaFactura=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idPlantillaFactura=this.idActual;
				
				} else if(this.idPlantillaFacturaActual!=null && this.idPlantillaFacturaActual!=0L) {
					idPlantillaFactura=idPlantillaFacturaActual;
				}
				
					
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndicePorId(idPlantillaFactura);
				
				this.plantillafacturas=new ArrayList<PlantillaFactura>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					plantillafacturaLogic.getEntity(idPlantillaFactura);
					
					//plantillafacturaLogic.getEntityWithConnection(idPlantillaFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
					plantillafacturaLogic.getPlantillaFacturas().add(plantillafacturaLogic.getPlantillaFactura());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafacturas=new ArrayList<PlantillaFactura>();
					this.plantillafacturas.add(plantillafactura);
				}
				
				if(plantillafacturaLogic.getPlantillaFactura()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("BusquedaPorCodigo",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("BusquedaPorCodigo",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNombre")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("BusquedaPorNombre",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("BusquedaPorNombre",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCreditoBien")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoBien(id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoBien(finalQueryGlobal,pagination,id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoBien(id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoBien(id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoBien(finalQueryGlobal,pagination,id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoBien(id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoBien(id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdCuentaContableCreditoBien",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdCuentaContableCreditoBien",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCreditoFinServicio")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFinServicio(id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio(finalQueryGlobal,pagination,id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFinServicio(id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFinServicio(id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio(finalQueryGlobal,pagination,id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFinServicio(id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFinServicio(id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdCuentaContableCreditoFinServicio",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdCuentaContableCreditoFinServicio",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdEmpresa",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdEmpresa",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionFuenteBien")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteBien(id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteBien(finalQueryGlobal,pagination,id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteBien(id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteBien(id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteBien(finalQueryGlobal,pagination,id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteBien(id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteBien(id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionFuenteBien",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionFuenteBien",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionFuenteServicio")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteServicio(id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteServicio(finalQueryGlobal,pagination,id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteServicio(id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteServicio(id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteServicio(finalQueryGlobal,pagination,id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteServicio(id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuenteServicio(id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionFuenteServicio",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionFuenteServicio",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionIvaBien")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaBien(id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaBien(finalQueryGlobal,pagination,id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaBien(id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaBien(id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaBien(finalQueryGlobal,pagination,id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaBien(id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaBien(id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionIvaBien",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionIvaBien",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionIvaServicio")) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaServicio(id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaServicio(finalQueryGlobal,pagination,id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaServicio(id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaServicio(id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=plantillafacturaLogic.getPlantillaFacturas()==null||plantillafacturaLogic.getPlantillaFacturas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=plantillafacturas==null|| plantillafacturas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturasAux=new ArrayList<PlantillaFactura>();
						plantillafacturasAux.addAll(plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturasAux=new ArrayList<PlantillaFactura>();
							plantillafacturasAux.addAll(plantillafacturas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaServicio(finalQueryGlobal,pagination,id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaServicio(id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PlantillaFacturaConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIvaServicio(id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionIvaServicio",plantillafacturaLogic.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePlantillaFacturas("FK_IdTipoRetencionIvaServicio",plantillafacturas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaLogic.setPlantillaFacturas(new ArrayList<PlantillaFactura>());
						plantillafacturaLogic.getPlantillaFacturas().addAll(plantillafacturasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturas=new ArrayList<PlantillaFactura>();
							plantillafacturas.addAll(plantillafacturasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesPlantillaFactura();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessPlantillaFactura();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=plantillafacturaLogic.getPlantillaFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=plantillafacturas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=plantillafacturaLogic.getPlantillaFacturas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=plantillafacturas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(PlantillaFactura plantillafactura) {
		Boolean permite=true;
		
		if(this.plantillafactura.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=PlantillaFacturaConstantesFunciones.getOrderByListaPlantillaFactura();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=PlantillaFacturaConstantesFunciones.getOrderByListaPlantillaFactura();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PlantillaFactura plantillafactura:plantillafacturaLogic.getPlantillaFacturas()) {
				if(plantillafactura.getsType().equals(Constantes2.S_TOTALES)) {
					plantillafacturaTotales=plantillafactura;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PlantillaFactura plantillafactura:this.plantillafacturas) {
				if(plantillafactura.getsType().equals(Constantes2.S_TOTALES)) {
					plantillafacturaTotales=plantillafactura;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.plantillafacturaAux=new PlantillaFactura();
			this.plantillafacturaAux.setsType(Constantes2.S_TOTALES);
			this.plantillafacturaAux.setIsNew(false);
			this.plantillafacturaAux.setIsChanged(false);
			this.plantillafacturaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				PlantillaFacturaConstantesFunciones.TotalizarValoresFilaPlantillaFactura(this.plantillafacturaLogic.getPlantillaFacturas(),this.plantillafacturaAux);
				
				this.plantillafacturaLogic.getPlantillaFacturas().add(this.plantillafacturaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				PlantillaFacturaConstantesFunciones.TotalizarValoresFilaPlantillaFactura(this.plantillafacturas,this.plantillafacturaAux);
				
				this.plantillafacturas.add(this.plantillafacturaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		plantillafacturaTotales=new PlantillaFactura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.plantillafacturaLogic.getPlantillaFacturas().remove(plantillafacturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.plantillafacturas.remove(plantillafacturaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		plantillafacturaTotales=new PlantillaFactura();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PlantillaFactura plantillafactura:plantillafacturaLogic.getPlantillaFacturas()) {
				if(plantillafactura.getsType().equals(Constantes2.S_TOTALES)) {
					plantillafacturaTotales=plantillafactura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PlantillaFacturaConstantesFunciones.TotalizarValoresFilaPlantillaFactura(this.plantillafacturaLogic.getPlantillaFacturas(),plantillafacturaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PlantillaFactura plantillafactura:this.plantillafacturas) {
				if(plantillafactura.getsType().equals(Constantes2.S_TOTALES)) {
					plantillafacturaTotales=plantillafactura;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PlantillaFacturaConstantesFunciones.TotalizarValoresFilaPlantillaFactura(this.plantillafacturas,plantillafacturaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getPlantillaFacturasBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasBusquedaPorNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCreditoBien()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoBien";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFinServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableGasto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableGasto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionFuenteBien()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionFuenteBien";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionFuenteServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionFuenteServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionIvaBien()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIvaBien";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionIvaServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIvaServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPlantillaFacturaPorIdEmpresaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="PorIdEmpresaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			throw e;
		}
	}

	
	
	public void getPlantillaFacturasBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasBusquedaPorNombre(String sFinalQuery,String nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasBusquedaPorNombre(sFinalQuery,this.pagination,nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_aplicada)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_aplicada);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCreditoBien(String sFinalQuery,Long id_cuenta_contable_credito_bien)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoBien(sFinalQuery,this.pagination,id_cuenta_contable_credito_bien);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio(String sFinalQuery,Long id_cuenta_contable_credito_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio(sFinalQuery,this.pagination,id_cuenta_contable_credito_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdCuentaContableGasto(String sFinalQuery,Long id_cuenta_contable_gasto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdCuentaContableGasto(sFinalQuery,this.pagination,id_cuenta_contable_gasto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionFuenteBien(String sFinalQuery,Long id_tipo_retencion_fuente_bien)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteBien(sFinalQuery,this.pagination,id_tipo_retencion_fuente_bien);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionFuenteServicio(String sFinalQuery,Long id_tipo_retencion_fuente_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionFuenteServicio(sFinalQuery,this.pagination,id_tipo_retencion_fuente_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionIvaBien(String sFinalQuery,Long id_tipo_retencion_iva_bien)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaBien(sFinalQuery,this.pagination,id_tipo_retencion_iva_bien);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturasFK_IdTipoRetencionIvaServicio(String sFinalQuery,Long id_tipo_retencion_iva_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturasFK_IdTipoRetencionIvaServicio(sFinalQuery,this.pagination,id_tipo_retencion_iva_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPlantillaFacturaPorIdEmpresaPorCodigo(Long id_empresa,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getPlantillaFacturaPorIdEmpresaPorCodigo(id_empresa,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosPlantillaFactura() {
		this.isPermisoTodoPlantillaFactura=false;
		this.isPermisoNuevoPlantillaFactura=false;
		this.isPermisoActualizarPlantillaFactura=false;
		this.isPermisoActualizarOriginalPlantillaFactura=false;
		this.isPermisoEliminarPlantillaFactura=false;
		this.isPermisoGuardarCambiosPlantillaFactura=false;
		this.isPermisoConsultaPlantillaFactura=false;
		this.isPermisoBusquedaPlantillaFactura=false;
		this.isPermisoReportePlantillaFactura=false;		
		this.isPermisoOrdenPlantillaFactura=false;		
		this.isPermisoPaginacionMedioPlantillaFactura=false;		
		this.isPermisoPaginacionAltoPlantillaFactura=false;
		this.isPermisoPaginacionTodoPlantillaFactura=false;
		this.isPermisoCopiarPlantillaFactura=false;		
		this.isPermisoVerFormPlantillaFactura=false;		
		this.isPermisoDuplicarPlantillaFactura=false;		
		this.isPermisoOrdenPlantillaFactura=false;		
	}
	
	public void setPermisosUsuarioPlantillaFactura(Boolean isPermiso) {
		this.isPermisoTodoPlantillaFactura=isPermiso;
		this.isPermisoNuevoPlantillaFactura=isPermiso;
		this.isPermisoActualizarPlantillaFactura=isPermiso;
		this.isPermisoActualizarOriginalPlantillaFactura=isPermiso;
		this.isPermisoEliminarPlantillaFactura=isPermiso;
		this.isPermisoGuardarCambiosPlantillaFactura=isPermiso;
		this.isPermisoConsultaPlantillaFactura=isPermiso;
		this.isPermisoBusquedaPlantillaFactura=isPermiso;
		this.isPermisoReportePlantillaFactura=isPermiso;
		this.isPermisoOrdenPlantillaFactura=isPermiso;		
		this.isPermisoPaginacionMedioPlantillaFactura=isPermiso;		
		this.isPermisoPaginacionAltoPlantillaFactura=isPermiso;		
		this.isPermisoPaginacionTodoPlantillaFactura=isPermiso;		
		this.isPermisoCopiarPlantillaFactura=isPermiso;		
		this.isPermisoVerFormPlantillaFactura=isPermiso;		
		this.isPermisoDuplicarPlantillaFactura=isPermiso;
		this.isPermisoOrdenPlantillaFactura=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioPlantillaFactura(Boolean isPermiso) {
		//this.isPermisoTodoPlantillaFactura=isPermiso;
		this.isPermisoNuevoPlantillaFactura=isPermiso;
		this.isPermisoActualizarPlantillaFactura=isPermiso;
		this.isPermisoActualizarOriginalPlantillaFactura=isPermiso;
		this.isPermisoEliminarPlantillaFactura=isPermiso;
		this.isPermisoGuardarCambiosPlantillaFactura=isPermiso;
		//this.isPermisoConsultaPlantillaFactura=isPermiso;
		//this.isPermisoBusquedaPlantillaFactura=isPermiso;
		//this.isPermisoReportePlantillaFactura=isPermiso;
		//this.isPermisoOrdenPlantillaFactura=isPermiso;		
		//this.isPermisoPaginacionMedioPlantillaFactura=isPermiso;		
		//this.isPermisoPaginacionAltoPlantillaFactura=isPermiso;		
		//this.isPermisoPaginacionTodoPlantillaFactura=isPermiso;		
		//this.isPermisoCopiarPlantillaFactura=isPermiso;		
		//this.isPermisoDuplicarPlantillaFactura=isPermiso;
		//this.isPermisoOrdenPlantillaFactura=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioPlantillaFacturaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(PlantillaFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebPlantillaFactura(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioPlantillaFacturaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioPlantillaFacturaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionPlantillaFacturaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioPlantillaFacturaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioPlantillaFactura() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(PlantillaFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, PlantillaFacturaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoPlantillaFactura=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarPlantillaFactura=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalPlantillaFactura=this.isPermisoActualizarPlantillaFactura;
			this.isPermisoEliminarPlantillaFactura=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosPlantillaFactura=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaPlantillaFactura=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaPlantillaFactura=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoPlantillaFactura=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReportePlantillaFactura=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPlantillaFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioPlantillaFactura=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoPlantillaFactura=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoPlantillaFactura=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarPlantillaFactura=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormPlantillaFactura=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarPlantillaFactura=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPlantillaFactura=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosPlantillaFactura.setToolTipText(this.jTableDatosPlantillaFactura.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioPlantillaFactura(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioPlantillaFactura(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(PlantillaFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(PlantillaFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioPlantillaFactura() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyPlantillaFacturaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.cuentacontableaplicadasForeignKey=new ArrayList();
				this.cuentacontablecreditobiensForeignKey=new ArrayList();
				this.cuentacontablecreditoserviciosForeignKey=new ArrayList();
				this.tiporetencionfuentebiensForeignKey=new ArrayList();
				this.tiporetencionfuenteserviciosForeignKey=new ArrayList();
				this.tiporetencionivabiensForeignKey=new ArrayList();
				this.tiporetencionivaserviciosForeignKey=new ArrayList();
				this.cuentacontablegastosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyPlantillaFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(PlantillaFacturaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyPlantillaFacturaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableAplicadaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionFuenteBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionFuenteServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIvaBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIvaServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableAplicadaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableaplicadasForeignKey==null||this.cuentacontableaplicadasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableAplicadasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoBienListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditobiensForeignKey==null||this.cuentacontablecreditobiensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoBiensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditoserviciosForeignKey==null||this.cuentacontablecreditoserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuenteBienListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionfuentebiensForeignKey==null||this.tiporetencionfuentebiensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionFuenteBiensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuenteServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionfuenteserviciosForeignKey==null||this.tiporetencionfuenteserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionFuenteServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIvaBienListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionivabiensForeignKey==null||this.tiporetencionivabiensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIvaBiensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIvaServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionivaserviciosForeignKey==null||this.tiporetencionivaserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIvaServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGastoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyPlantillaFacturaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			PlantillaFacturaParameterReturnGeneral plantillafacturaReturnGeneral=new PlantillaFacturaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_empresaPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_empresaPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalCuentaContableAplicada="";

				if(((this.cuentacontableaplicadasForeignKey==null||this.cuentacontableaplicadasForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_aplicadaPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_aplicadaPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableAplicada()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableAplicada=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableAplicada=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableAplicada, "");
						finalQueryGlobalCuentaContableAplicada+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableAplicadasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableAplicada=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidCuentaContableAplicadaActual();
					}
				} else {
					finalQueryGlobalCuentaContableAplicada="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoBien="";

				if(((this.cuentacontablecreditobiensForeignKey==null||this.cuentacontablecreditobiensForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_bienPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_bienPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoBien()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoBien=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoBien=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoBien, "");
						finalQueryGlobalCuentaContableCreditoBien+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoBiensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoBien=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidCuentaContableCreditoBienActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoBien="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoServicio="";

				if(((this.cuentacontablecreditoserviciosForeignKey==null||this.cuentacontablecreditoserviciosForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_servicioPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_servicioPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoServicio, "");
						finalQueryGlobalCuentaContableCreditoServicio+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoServicio=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidCuentaContableCreditoServicioActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoServicio="NONE";
				}


				String finalQueryGlobalTipoRetencionFuenteBien="";

				if(((this.tiporetencionfuentebiensForeignKey==null||this.tiporetencionfuentebiensForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_bienPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_bienPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteBien()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionFuenteBien=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionFuenteBien=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionFuenteBien, "");
						finalQueryGlobalTipoRetencionFuenteBien+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionFuenteBiensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionFuenteBien=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidTipoRetencionFuenteBienActual();
					}
				} else {
					finalQueryGlobalTipoRetencionFuenteBien="NONE";
				}


				String finalQueryGlobalTipoRetencionFuenteServicio="";

				if(((this.tiporetencionfuenteserviciosForeignKey==null||this.tiporetencionfuenteserviciosForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_servicioPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_servicioPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionFuenteServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionFuenteServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionFuenteServicio, "");
						finalQueryGlobalTipoRetencionFuenteServicio+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionFuenteServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionFuenteServicio=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidTipoRetencionFuenteServicioActual();
					}
				} else {
					finalQueryGlobalTipoRetencionFuenteServicio="NONE";
				}


				String finalQueryGlobalTipoRetencionIvaBien="";

				if(((this.tiporetencionivabiensForeignKey==null||this.tiporetencionivabiensForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_bienPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_bienPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaBien()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIvaBien=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIvaBien=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIvaBien, "");
						finalQueryGlobalTipoRetencionIvaBien+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIvaBiensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIvaBien=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidTipoRetencionIvaBienActual();
					}
				} else {
					finalQueryGlobalTipoRetencionIvaBien="NONE";
				}


				String finalQueryGlobalTipoRetencionIvaServicio="";

				if(((this.tiporetencionivaserviciosForeignKey==null||this.tiporetencionivaserviciosForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_servicioPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_servicioPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIvaServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIvaServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIvaServicio, "");
						finalQueryGlobalTipoRetencionIvaServicio+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIvaServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIvaServicio=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidTipoRetencionIvaServicioActual();
					}
				} else {
					finalQueryGlobalTipoRetencionIvaServicio="NONE";
				}


				String finalQueryGlobalCuentaContableGasto="";

				if(((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0) && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_gastoPlantillaFactura)
					 || (this.esRecargarFks && this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_gastoPlantillaFactura)) {

					if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableGasto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableGasto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableGasto, "");
						finalQueryGlobalCuentaContableGasto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableGasto=" WHERE " + ConstantesSql.ID + "="+plantillafacturaSessionBean.getlidCuentaContableGastoActual();
					}
				} else {
					finalQueryGlobalCuentaContableGasto="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				plantillafacturaReturnGeneral=plantillafacturaLogic.cargarCombosLoteForeignKeyPlantillaFactura(finalQueryGlobalEmpresa,finalQueryGlobalCuentaContableAplicada,finalQueryGlobalCuentaContableCreditoBien,finalQueryGlobalCuentaContableCreditoServicio,finalQueryGlobalTipoRetencionFuenteBien,finalQueryGlobalTipoRetencionFuenteServicio,finalQueryGlobalTipoRetencionIvaBien,finalQueryGlobalTipoRetencionIvaServicio,finalQueryGlobalCuentaContableGasto);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=plantillafacturaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableAplicada.equals("NONE")) {
				this.cuentacontableaplicadasForeignKey=plantillafacturaReturnGeneral.getcuentacontableaplicadasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoBien.equals("NONE")) {
				this.cuentacontablecreditobiensForeignKey=plantillafacturaReturnGeneral.getcuentacontablecreditobiensForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoServicio.equals("NONE")) {
				this.cuentacontablecreditoserviciosForeignKey=plantillafacturaReturnGeneral.getcuentacontablecreditoserviciosForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionFuenteBien.equals("NONE")) {
				this.tiporetencionfuentebiensForeignKey=plantillafacturaReturnGeneral.gettiporetencionfuentebiensForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionFuenteServicio.equals("NONE")) {
				this.tiporetencionfuenteserviciosForeignKey=plantillafacturaReturnGeneral.gettiporetencionfuenteserviciosForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIvaBien.equals("NONE")) {
				this.tiporetencionivabiensForeignKey=plantillafacturaReturnGeneral.gettiporetencionivabiensForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIvaServicio.equals("NONE")) {
				this.tiporetencionivaserviciosForeignKey=plantillafacturaReturnGeneral.gettiporetencionivaserviciosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableGasto.equals("NONE")) {
				this.cuentacontablegastosForeignKey=plantillafacturaReturnGeneral.getcuentacontablegastosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyPlantillaFactura()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyCuentaContableAplicada();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoBien();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoServicio();
			this.addItemDefectoCombosForeignKeyTipoRetencionFuenteBien();
			this.addItemDefectoCombosForeignKeyTipoRetencionFuenteServicio();
			this.addItemDefectoCombosForeignKeyTipoRetencionIvaBien();
			this.addItemDefectoCombosForeignKeyTipoRetencionIvaServicio();
			this.addItemDefectoCombosForeignKeyCuentaContableGasto();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.plantillafacturaSessionBean==null) {
				this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableAplicada()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableAplicada()) {
				CuentaContable cuentacontableaplicada=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableaplicada,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableaplicada.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableaplicadasForeignKey,cuentacontableaplicada,true)) {

					this.cuentacontableaplicadasForeignKey.add(0,cuentacontableaplicada);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoBien()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoBien()) {
				CuentaContable cuentacontablecreditobien=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditobien,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditobien.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditobiensForeignKey,cuentacontablecreditobien,true)) {

					this.cuentacontablecreditobiensForeignKey.add(0,cuentacontablecreditobien);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoServicio()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoServicio()) {
				CuentaContable cuentacontablecreditoservicio=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditoservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditoservicio.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditoserviciosForeignKey,cuentacontablecreditoservicio,true)) {

					this.cuentacontablecreditoserviciosForeignKey.add(0,cuentacontablecreditoservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionFuenteBien()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteBien()) {
				TipoRetencion tiporetencionfuentebien=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionfuentebien,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionfuentebien.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionfuentebiensForeignKey,tiporetencionfuentebien,true)) {

					this.tiporetencionfuentebiensForeignKey.add(0,tiporetencionfuentebien);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionFuenteServicio()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuenteServicio()) {
				TipoRetencion tiporetencionfuenteservicio=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionfuenteservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionfuenteservicio.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionfuenteserviciosForeignKey,tiporetencionfuenteservicio,true)) {

					this.tiporetencionfuenteserviciosForeignKey.add(0,tiporetencionfuenteservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIvaBien()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaBien()) {
				TipoRetencion tiporetencionivabien=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionivabien,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionivabien.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionivabiensForeignKey,tiporetencionivabien,true)) {

					this.tiporetencionivabiensForeignKey.add(0,tiporetencionivabien);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIvaServicio()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIvaServicio()) {
				TipoRetencion tiporetencionivaservicio=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionivaservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionivaservicio.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionivaserviciosForeignKey,tiporetencionivaservicio,true)) {

					this.tiporetencionivaserviciosForeignKey.add(0,tiporetencionivaservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableGasto()throws Exception {
		try {

			if(!this.plantillafacturaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				CuentaContable cuentacontablegasto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablegasto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablegasto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablegastosForeignKey,cuentacontablegasto,true)) {

					this.cuentacontablegastosForeignKey.add(0,cuentacontablegasto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyPlantillaFactura()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyPlantillaFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyPlantillaFactura()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyPlantillaFactura();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyPlantillaFactura(PlantillaFactura plantillafactura)throws Exception {	
		try {
			
			this.setActualCuentaContableAplicadaForeignKey(plantillafactura.getid_cuenta_contable_aplicada(),false,"Formulario");
			this.setActualCuentaContableCreditoBienForeignKey(plantillafactura.getid_cuenta_contable_credito_bien(),false,"Formulario");
			this.setActualCuentaContableCreditoServicioForeignKey(plantillafactura.getid_cuenta_contable_credito_servicio(),false,"Formulario");
			this.setActualTipoRetencionFuenteBienForeignKey(plantillafactura.getid_tipo_retencion_fuente_bien(),false,"Formulario");
			this.setActualTipoRetencionFuenteServicioForeignKey(plantillafactura.getid_tipo_retencion_fuente_servicio(),false,"Formulario");
			this.setActualTipoRetencionIvaBienForeignKey(plantillafactura.getid_tipo_retencion_iva_bien(),false,"Formulario");
			this.setActualTipoRetencionIvaServicioForeignKey(plantillafactura.getid_tipo_retencion_iva_servicio(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(plantillafactura.getid_cuenta_contable_gasto(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyPlantillaFactura(PlantillaFactura plantillafactura,String sTipoEvento)throws Exception {	
		try {
			
			

				if(plantillafactura.getCuentaContableAplicada()!=null && !sTipoEvento.equals("id_cuenta_contable_aplicadaPlantillaFactura")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableaplicadasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableaplicadasForeignKey.add(plantillafactura.getCuentaContableAplicada());

					this.addItemDefectoCombosForeignKeyCuentaContableAplicada();
					this.cargarCombosFrameCuentaContableAplicadasForeignKey("Todos");
				}

				if(plantillafactura.getCuentaContableCreditoBien()!=null && !sTipoEvento.equals("id_cuenta_contable_credito_bienPlantillaFactura")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditobiensForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditobiensForeignKey.add(plantillafactura.getCuentaContableCreditoBien());

					this.addItemDefectoCombosForeignKeyCuentaContableCreditoBien();
					this.cargarCombosFrameCuentaContableCreditoBiensForeignKey("Todos");
				}

				if(plantillafactura.getCuentaContableCreditoServicio()!=null && !sTipoEvento.equals("id_cuenta_contable_credito_servicioPlantillaFactura")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditoserviciosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditoserviciosForeignKey.add(plantillafactura.getCuentaContableCreditoServicio());

					this.addItemDefectoCombosForeignKeyCuentaContableCreditoServicio();
					this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey("Todos");
				}

				if(plantillafactura.getCuentaContableGasto()!=null && !sTipoEvento.equals("id_cuenta_contable_gastoPlantillaFactura")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablegastosForeignKey.add(plantillafactura.getCuentaContableGasto());

					this.addItemDefectoCombosForeignKeyCuentaContableGasto();
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyPlantillaFactura()throws Exception {	
		try {
			
			this.setActualCuentaContableAplicadaForeignKey(this.plantillafacturaConstantesFunciones.getid_cuenta_contable_aplicada(),false,"Formulario");
			this.setActualCuentaContableCreditoBienForeignKey(this.plantillafacturaConstantesFunciones.getid_cuenta_contable_credito_bien(),false,"Formulario");
			this.setActualCuentaContableCreditoServicioForeignKey(this.plantillafacturaConstantesFunciones.getid_cuenta_contable_credito_servicio(),false,"Formulario");
			this.setActualTipoRetencionFuenteBienForeignKey(this.plantillafacturaConstantesFunciones.getid_tipo_retencion_fuente_bien(),false,"Formulario");
			this.setActualTipoRetencionFuenteServicioForeignKey(this.plantillafacturaConstantesFunciones.getid_tipo_retencion_fuente_servicio(),false,"Formulario");
			this.setActualTipoRetencionIvaBienForeignKey(this.plantillafacturaConstantesFunciones.getid_tipo_retencion_iva_bien(),false,"Formulario");
			this.setActualTipoRetencionIvaServicioForeignKey(this.plantillafacturaConstantesFunciones.getid_tipo_retencion_iva_servicio(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(this.plantillafacturaConstantesFunciones.getid_cuenta_contable_gasto(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyPlantillaFactura()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyPlantillaFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyPlantillaFactura()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroPlantillaFactura()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyPlantillaFactura()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableAplicadasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoBiensForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionFuenteBiensForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionFuenteServiciosForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIvaBiensForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIvaServiciosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyPlantillaFactura(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableAplicadasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoBiensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionFuenteBiensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionFuenteServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIvaBiensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIvaServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyPlantillaFactura()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.getItemCount()>0) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	


















	
	

	public PlantillaFacturaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public PlantillaFacturaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public PlantillaFacturaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean(); 
		this.plantillafacturaConstantesFunciones=new PlantillaFacturaConstantesFunciones(); 
		this.plantillafacturaBean=new PlantillaFactura();//(this.plantillafacturaConstantesFunciones); 		
		this.plantillafacturaReturnGeneral=new PlantillaFacturaParameterReturnGeneral(); 
		
		this.plantillafacturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.plantillafacturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public PlantillaFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public PlantillaFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public PlantillaFacturaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessPlantillaFactura(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.plantillafacturaConstantesFunciones=new PlantillaFacturaConstantesFunciones(); 
			this.plantillafacturaBean=new PlantillaFactura();//this.plantillafacturaConstantesFunciones); 			
			this.plantillafacturaReturnGeneral=new PlantillaFacturaParameterReturnGeneral(); 
		
			PlantillaFacturaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Plantilla Factura Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			
			
			this.plantillafactura=new PlantillaFactura();
			this.plantillafacturas = new ArrayList<PlantillaFactura>();
			this.plantillafacturasAux = new ArrayList<PlantillaFactura>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic=new PlantillaFacturaLogic();
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			//this.plantillafacturaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.plantillafacturaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormPlantillaFactura);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPlantillaFactura);	
					}
					
					if(this.jInternalFrameImportacionPlantillaFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPlantillaFactura);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByPlantillaFactura!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByPlantillaFactura);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormPlantillaFactura);
				this.jInternalFrameDetalleFormPlantillaFactura.setVisible(false);
				this.jInternalFrameDetalleFormPlantillaFactura.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPlantillaFactura);
					this.jInternalFrameReporteDinamicoPlantillaFactura.setVisible(false);
					this.jInternalFrameReporteDinamicoPlantillaFactura.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionPlantillaFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionPlantillaFactura);
					this.jInternalFrameImportacionPlantillaFactura.setVisible(false);
					this.jInternalFrameImportacionPlantillaFactura.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByPlantillaFactura!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByPlantillaFactura);
					this.jInternalFrameOrderByPlantillaFactura.setVisible(false);
					this.jInternalFrameOrderByPlantillaFactura.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idPlantillaFacturaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=PlantillaFacturaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.plantillafacturaReturnGeneral=new PlantillaFacturaParameterReturnGeneral();
			
			this.plantillafacturaParameterGeneral=new PlantillaFacturaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.plantillafacturaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(PlantillaFacturaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PlantillaFacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.plantillafacturaSessionBean.getEsGuardarRelacionado(),this.plantillafacturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PlantillaFacturaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.plantillafacturaSessionBean.getEsGuardarRelacionado(),this.plantillafacturaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaDuplicarPlantillaFactura=true;
			this.isVisibilidadCeldaCopiarPlantillaFactura=true;
			this.isVisibilidadCeldaVerFormPlantillaFactura=true;
			this.isVisibilidadCeldaOrdenPlantillaFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNombre=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableCreditoBien=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=true;
			this.isVisibilidadFK_IdCuentaContableGasto=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdTipoRetencionFuenteBien=true;
			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=true;
			this.isVisibilidadFK_IdTipoRetencionIvaBien=true;
			this.isVisibilidadFK_IdTipoRetencionIvaServicio=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosPlantillaFactura();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioPlantillaFactura(false);
			
			this.setPermisosUsuarioPlantillaFactura();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado() 
				|| (this.plantillafacturaSessionBean.getEsGuardarRelacionado() && this.plantillafacturaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioPlantillaFacturaClasesRelacionadas();
			}
			
			if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioPlantillaFacturaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosPlantillaFactura();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualPlantillaFactura();
			}
			
			if(!this.isPermisoBusquedaPlantillaFactura) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioPlantillaFactura,this.isPermisoPaginacionMedioPlantillaFactura,this.isPermisoPaginacionTodoPlantillaFactura);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(PlantillaFacturaConstantesFunciones.getTiposSeleccionarPlantillaFactura());
				
				this.tiposColumnasSelect=PlantillaFacturaConstantesFunciones.getTiposSeleccionarPlantillaFactura(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioPlantillaFactura();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioPlantillaFactura(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioPlantillaFactura(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesPlantillaFactura() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.cuentacontableaplicadaLogic=new CuentaContableLogic();
			this.cuentacontablecreditobienLogic=new CuentaContableLogic();
			this.cuentacontablecreditoservicioLogic=new CuentaContableLogic();
			this.tiporetencionfuentebienLogic=new TipoRetencionLogic();
			this.tiporetencionfuenteservicioLogic=new TipoRetencionLogic();
			this.tiporetencionivabienLogic=new TipoRetencionLogic();
			this.tiporetencionivaservicioLogic=new TipoRetencionLogic();
			this.cuentacontablegastoLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				plantillafacturaImplementable= (PlantillaFacturaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PlantillaFacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				plantillafacturaImplementableHome= (PlantillaFacturaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PlantillaFacturaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.plantillafacturas= new ArrayList<PlantillaFactura>();
			this.plantillafacturasEliminados= new ArrayList<PlantillaFactura>();
						
			this.isEsNuevoPlantillaFactura=false;
			this.esParaAccionDesdeFormularioPlantillaFactura=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableAplicadaActual=0L;
			this.idCuentaContableCreditoBienActual=0L;
			this.idCuentaContableCreditoServicioActual=0L;
			this.idCuentaContableGastoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.cuentacontableaplicadasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditobiensForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditoserviciosForeignKey=new ArrayList<CuentaContable>() ;
			this.tiporetencionfuentebiensForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencionfuenteserviciosForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencionivabiensForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencionivaserviciosForeignKey=new ArrayList<TipoRetencion>() ;
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyPlantillaFactura(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroPlantillaFactura();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			PlantillaFacturaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=PlantillaFacturaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesPlantillaFactura("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingPlantillaFactura(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioPlantillaFactura();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioPlantillaFactura();
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasPlantillaFactura.getTabCount(); i++) {
					this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessPlantillaFactura(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga PlantillaFactura: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectPlantillaFactura() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesPlantillaFactura")) {
				iIndex=this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessPlantillaFactura();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyPlantillaFactura(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyPlantillaFactura(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyPlantillaFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyPlantillaFacturaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyPlantillaFactura();
		
		this.cargarCombosFrameForeignKeyPlantillaFactura();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyPlantillaFactura();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyPlantillaFactura();
		}
	}
	
	

	public void cargarCombosForeignKeyCuentaContableAplicada(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableAplicadaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableAplicada();
				this.cargarCombosFrameCuentaContableAplicadasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableAplicada(this.cuentacontableaplicadasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoBien(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoBien();
				this.cargarCombosFrameCuentaContableCreditoBiensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoBien(this.cuentacontablecreditobiensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoServicio();
				this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoServicio(this.cuentacontablecreditoserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuenteBien(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionFuenteBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionFuenteBien();
				this.cargarCombosFrameTipoRetencionFuenteBiensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionFuenteBien(this.tiporetencionfuentebiensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuenteServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionFuenteServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionFuenteServicio();
				this.cargarCombosFrameTipoRetencionFuenteServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionFuenteServicio(this.tiporetencionfuenteserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIvaBien(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIvaBienListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIvaBien();
				this.cargarCombosFrameTipoRetencionIvaBiensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIvaBien(this.tiporetencionivabiensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIvaServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIvaServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIvaServicio();
				this.cargarCombosFrameTipoRetencionIvaServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIvaServicio(this.tiporetencionivaserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGasto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoPlantillaFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			
			if(jTableDatosPlantillaFactura.getRowCount()>=1) {
				jTableDatosPlantillaFactura.removeRowSelectionInterval(0, jTableDatosPlantillaFactura.getRowCount()-1);						
			}
			
			this.isEsNuevoPlantillaFactura=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoPlantillaFactura(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesPlantillaFactura(true);			
			//this.plantillafactura=new PlantillaFactura();
			//this.plantillafactura.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPlantillaFactura(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPlantillaFactura() ;
			
			if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePlantillaFactura(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.plantillafactura);	
			this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);				
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar PlantillaFactura: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarPlantillaFacturaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosPlantillaFactura.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosPlantillaFactura.getSelectedRows().length;			
			}
			
			plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoPlantillaFactura--;			
				//PlantillaFactura plantillafacturaAux= new PlantillaFactura();			
				//plantillafacturaAux.setId(this.iIdNuevoPlantillaFactura);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//PlantillaFactura plantillafacturaOrigen=new PlantillaFactura();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(PlantillaFactura plantillafacturaOrigen : plantillafacturasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							plantillafacturaOrigen =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							plantillafacturaOrigen =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaPlantillaFactura();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.plantillafactura.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosPlantillaFactura(plantillafacturaOrigen,this.plantillafactura,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.plantillafacturaLogic.getPlantillaFacturas().add(this.plantillafacturaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.plantillafacturas.add(this.plantillafacturaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
				
				this.jTableDatosPlantillaFactura.setRowSelectionInterval(this.getIndiceNuevoPlantillaFactura(), this.getIndiceNuevoPlantillaFactura());
				
				int iLastRow =  this.jTableDatosPlantillaFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPlantillaFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPlantillaFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPlantillaFactura(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();									
		
			PlantillaFactura plantillafacturaOrigen=new PlantillaFactura();
			PlantillaFactura plantillafacturaDestino=new PlantillaFactura();
				
			plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosPlantillaFactura.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || plantillafacturasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosPlantillaFactura.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaOrigen =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						plantillafacturaOrigen =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						plantillafacturaDestino =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						plantillafacturaDestino =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				plantillafacturaOrigen =plantillafacturasSeleccionados.get(0);
				plantillafacturaDestino =plantillafacturasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosPlantillaFactura(plantillafacturaOrigen,plantillafacturaDestino,true,false);
				
				plantillafacturaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(plantillafacturaDestino,plantillafacturaLogic.getPlantillaFacturas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(plantillafacturaDestino,plantillafacturas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
				
				//this.jTableDatosPlantillaFactura.setRowSelectionInterval(this.getIndiceNuevoPlantillaFactura(), this.getIndiceNuevoPlantillaFactura());
				
				int iLastRow =  this.jTableDatosPlantillaFactura.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPlantillaFactura.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPlantillaFactura.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPlantillaFactura(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormPlantillaFactura.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesPlantillaFactura.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasPlantillaFactura.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesPlantillaFactura.setVisible(!isVisible);
			this.jPanelPaginacionPlantillaFactura.setVisible(!isVisible);
			this.jPanelAccionesPlantillaFactura.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFramePlantillaFactura();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoPlantillaFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionPlantillaFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByPlantillaFactura();
			
			this.abrirFrameOrderByPlantillaFactura();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByPlantillaFactura();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetallePlantillaFactura(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormPlantillaFactura);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormPlantillaFactura.isMaximum()) {
					this.jInternalFrameDetalleFormPlantillaFactura.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormPlantillaFactura.setSize(this.jInternalFrameDetalleFormPlantillaFactura.iWidthFormulario,this.jInternalFrameDetalleFormPlantillaFactura.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormPlantillaFactura.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormPlantillaFactura.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormPlantillaFactura.isMaximum()) {
						this.jInternalFrameDetalleFormPlantillaFactura.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormPlantillaFactura.jContentPaneDetallePlantillaFactura.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormPlantillaFactura.jContentPaneDetallePlantillaFactura.getWidth(),PlantillaFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormPlantillaFactura.jContentPaneDetallePlantillaFactura.getWidth(),PlantillaFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormPlantillaFactura.jContentPaneDetallePlantillaFactura.getWidth(),PlantillaFacturaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormPlantillaFactura.setVisible(true);
	        this.jInternalFrameDetalleFormPlantillaFactura.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByPlantillaFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByPlantillaFactura==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByPlantillaFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPlantillaFactura,false,this);
				} else {
					this.jInternalFrameOrderByPlantillaFactura=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPlantillaFactura,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByPlantillaFactura);
				this.jInternalFrameOrderByPlantillaFactura.setVisible(false);
				this.jInternalFrameOrderByPlantillaFactura.setSelected(false);
				
				this.jInternalFrameOrderByPlantillaFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPlantillaFactura"));
				
				this.inicializarActualizarBindingTablaOrderByPlantillaFactura();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionPlantillaFactura() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionPlantillaFactura==null) {
				
				this.jInternalFrameImportacionPlantillaFactura=new ImportacionJInternalFrame(PlantillaFacturaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPlantillaFactura);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionPlantillaFactura);
				this.jInternalFrameImportacionPlantillaFactura.setVisible(false);
				this.jInternalFrameImportacionPlantillaFactura.setSelected(false);


				this.jInternalFrameImportacionPlantillaFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPlantillaFactura"));
				this.jInternalFrameImportacionPlantillaFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPlantillaFactura"));
				this.jInternalFrameImportacionPlantillaFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPlantillaFactura"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoPlantillaFactura() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoPlantillaFactura==null) {
				this.jInternalFrameReporteDinamicoPlantillaFactura=new ReporteDinamicoJInternalFrame(PlantillaFacturaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPlantillaFactura);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPlantillaFactura);
				this.jInternalFrameReporteDinamicoPlantillaFactura.setVisible(false);
				this.jInternalFrameReporteDinamicoPlantillaFactura.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPlantillaFactura"));
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPlantillaFactura"));
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPlantillaFactura"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPlantillaFactura();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetallePlantillaFactura() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormPlantillaFactura);
			
	       	this.jInternalFrameDetalleFormPlantillaFactura.setVisible(false);
	        this.jInternalFrameDetalleFormPlantillaFactura.setSelected(false);
			
			//this.jInternalFrameDetalleFormPlantillaFactura.dispose();
			//this.jInternalFrameDetalleFormPlantillaFactura=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoPlantillaFactura() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoPlantillaFactura.setVisible(true);
	        this.jInternalFrameReporteDinamicoPlantillaFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionPlantillaFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionPlantillaFactura.setVisible(true);
	        this.jInternalFrameImportacionPlantillaFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByPlantillaFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByPlantillaFactura.setVisible(true);
	        this.jInternalFrameOrderByPlantillaFactura.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByPlantillaFactura() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByPlantillaFactura.setVisible(false);
	        this.jInternalFrameOrderByPlantillaFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoPlantillaFactura() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoPlantillaFactura.setVisible(false);
	        this.jInternalFrameReporteDinamicoPlantillaFactura.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionPlantillaFactura() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionPlantillaFactura.setVisible(false);
	        this.jInternalFrameImportacionPlantillaFactura.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableAplicada(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableAplicada";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
						TitledBorder titledBorderCuentaContableAplicada=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableAplicada.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableAplicada(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCreditoBien(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoBien";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
						TitledBorder titledBorderCuentaContableCreditoBien=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoBien.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoBien(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCreditoServicio(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoServicio";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
						TitledBorder titledBorderCuentaContableCreditoServicio=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoServicio.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoServicio(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableGasto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableGasto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
						TitledBorder titledBorderCuentaContableGasto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableGasto.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableGasto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarPlantillaFactura(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarPlantillaFactura(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesPlantillaFactura(true);
			//this.isEsNuevoPlantillaFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesPlantillaFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPlantillaFactura(false) ;
			
			if(plantillafacturaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePlantillaFactura(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPlantillaFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaPlantillaFacturaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarPlantillaFactura(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesPlantillaFactura(true);
			//this.isEsNuevoPlantillaFactura=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.plantillafactura.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesPlantillaFactura("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesPlantillaFactura(false) ;
			
			if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePlantillaFactura(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPlantillaFactura(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContableAplicada")) {
				if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_aplicadaPlantillaFactura) {
					this.cargarCombosCuentaContableAplicadasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPlantillaFactura(false,false);
					this.cargarCombosFrameCuentaContableAplicadasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_aplicada (id);

				this.recargarComboTablaCuentaContableAplicada(this.cuentacontableaplicadasForeignKey);

			}
			
			if(sType.equals("CuentaContableCreditoBien")) {
				if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_bienPlantillaFactura) {
					this.cargarCombosCuentaContableCreditoBiensForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPlantillaFactura(false,false);
					this.cargarCombosFrameCuentaContableCreditoBiensForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_bien (id);

				this.recargarComboTablaCuentaContableCreditoBien(this.cuentacontablecreditobiensForeignKey);

			}
			
			if(sType.equals("CuentaContableCreditoServicio")) {
				if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_servicioPlantillaFactura) {
					this.cargarCombosCuentaContableCreditoServiciosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPlantillaFactura(false,false);
					this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_servicio (id);

				this.recargarComboTablaCuentaContableCreditoServicio(this.cuentacontablecreditoserviciosForeignKey);

			}
			
			if(sType.equals("CuentaContableGasto")) {
				if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_gastoPlantillaFactura) {
					this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPlantillaFactura(false,false);
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (id);

				this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaCuentaContableAplicada(List<CuentaContable> cuentacontableaplicadasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableAplicada=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA));
		TableCellEditor tableCellEditorCuentaContableAplicada =tableColumnCuentaContableAplicada.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableAplicada;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableaplicadasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableaplicadasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoBien(List<CuentaContable> cuentacontablecreditobiensForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoBien=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN));
		TableCellEditor tableCellEditorCuentaContableCreditoBien =tableColumnCuentaContableCreditoBien.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoBien;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditobiensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditobiensForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoServicio(List<CuentaContable> cuentacontablecreditoserviciosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoServicio=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO));
		TableCellEditor tableCellEditorCuentaContableCreditoServicio =tableColumnCuentaContableCreditoServicio.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoServicio;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditoserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditoserviciosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionFuenteBien(List<TipoRetencion> tiporetencionfuentebiensForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionFuenteBien=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN));
		TableCellEditor tableCellEditorTipoRetencionFuenteBien =tableColumnTipoRetencionFuenteBien.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionFuenteBien;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionfuentebiensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionfuentebiensForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionFuenteServicio(List<TipoRetencion> tiporetencionfuenteserviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionFuenteServicio=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO));
		TableCellEditor tableCellEditorTipoRetencionFuenteServicio =tableColumnTipoRetencionFuenteServicio.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionFuenteServicio;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionfuenteserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionfuenteserviciosForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIvaBien(List<TipoRetencion> tiporetencionivabiensForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIvaBien=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN));
		TableCellEditor tableCellEditorTipoRetencionIvaBien =tableColumnTipoRetencionIvaBien.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionIvaBien;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionivabiensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionivabiensForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIvaServicio(List<TipoRetencion> tiporetencionivaserviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIvaServicio=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO));
		TableCellEditor tableCellEditorTipoRetencionIvaServicio =tableColumnTipoRetencionIvaServicio.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionIvaServicio;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionivaserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionivaserviciosForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableGasto(List<CuentaContable> cuentacontablegastosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableGasto=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO));
		TableCellEditor tableCellEditorCuentaContableGasto =tableColumnCuentaContableGasto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableGasto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablegastosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablegastosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_aplicada (Long id) throws Exception {
		this.setActualCuentaContableAplicadaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_bien (Long id) throws Exception {
		this.setActualCuentaContableCreditoBienForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_servicio (Long id) throws Exception {
		this.setActualCuentaContableCreditoServicioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (Long id) throws Exception {
		this.setActualCuentaContableGastoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesPlantillaFactura(false);
			
			//if(!this.isEsNuevoPlantillaFactura) {								
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				
			}
			
			if(this.permiteMantenimiento(this.plantillafactura)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoPlantillaFactura=true;
					this.inicializarActualizarBindingTablaPlantillaFactura(false);
					this.isEsNuevoPlantillaFactura=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoPlantillaFactura=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoPlantillaFactura=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPlantillaFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPlantillaFactura(false);
				
				this.habilitarDeshabilitarControlesPlantillaFactura(false);
			
												
				
				if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetallePlantillaFactura();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoPlantillaFacturaActionPerformed(evt,plantillafacturaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualPlantillaFactura(this.plantillafactura,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,plantillafacturaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.plantillafactura.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				this.plantillafactura.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				this.plantillafactura.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.plantillafactura)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((PlantillaFacturaModel) this.jTableDatosPlantillaFactura.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoPlantillaFactura=true;
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
				this.isEsNuevoPlantillaFactura=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPlantillaFactura(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPlantillaFactura(false);
				
				this.habilitarDeshabilitarControlesPlantillaFactura(false);
				
				
				
				if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetallePlantillaFactura();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosPlantillaFactura.getRowCount()>=1) {
				jTableDatosPlantillaFactura.removeRowSelectionInterval(0, jTableDatosPlantillaFactura.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesPlantillaFactura(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaPlantillaFactura(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPlantillaFactura(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPlantillaFactura(false) ;
			
			this.isEsNuevoPlantillaFactura=false;
			
			if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetallePlantillaFactura();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingPlantillaFactura(false);
				
				//SI ES MANUAL
				if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualPlantillaFactura();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoPlantillaFactura--;			
			//PlantillaFactura plantillafacturaAux= new PlantillaFactura();			
			//plantillafacturaAux.setId(this.iIdNuevoPlantillaFactura);
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaPlantillaFactura();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
			
			this.plantillafactura.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.plantillafacturaLogic.getPlantillaFacturas().add(this.plantillafacturaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.plantillafacturas.add(this.plantillafacturaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaPlantillaFactura(false);
			
			this.jTableDatosPlantillaFactura.setRowSelectionInterval(this.getIndiceNuevoPlantillaFactura(), this.getIndiceNuevoPlantillaFactura());
			
			int iLastRow =  this.jTableDatosPlantillaFactura.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosPlantillaFactura.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosPlantillaFactura.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPlantillaFactura(false);
			
			//SI ES MANUAL
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPlantillaFactura();
			}
			
			//this.abrirFrameTreePlantillaFactura();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Plantilla FacturaS ?", "MANTENIMIENTO DE Plantilla Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionPlantillaFactura.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralPlantillaFactura();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.plantillafacturaReturnGeneral=plantillafacturaLogic.procesarImportacionPlantillaFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.plantillafacturaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarPlantillaFacturaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionPlantillaFactura.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionPlantillaFactura.setFileImportacion(this.jInternalFrameImportacionPlantillaFactura.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionPlantillaFactura.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionPlantillaFactura.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionPlantillaFactura.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionPlantillaFactura.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		

		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("PlantillaFacturaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"PlantillaFacturaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Proveedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Proveedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Proveedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Proveedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableAplicada_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableAplicada_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableAplicada_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableAplicada_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoBien_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoBien_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoBien_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoBien_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionFuenteBien_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionFuenteBien_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionFuenteBien_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionFuenteBien_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionFuenteServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionFuenteServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionFuenteServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionFuenteServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIvaBien_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIvaBien_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIvaBien_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIvaBien_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIvaServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIvaServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIvaServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIvaServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableGasto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableGasto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableGasto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableGasto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoPlantillaFactura.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR:
					sNombreCampoCategoria="es_proveedor";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA:
					sNombreCampoCategoria="id_cuenta_contable_aplicada";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN:
					sNombreCampoCategoria="id_cuenta_contable_credito_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO:
					sNombreCampoCategoria="id_cuenta_contable_credito_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN:
					sNombreCampoCategoria="id_tipo_retencion_fuente_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO:
					sNombreCampoCategoria="id_tipo_retencion_fuente_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN:
					sNombreCampoCategoria="id_tipo_retencion_iva_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO:
					sNombreCampoCategoria="id_tipo_retencion_iva_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoria="id_cuenta_contable_gasto";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR:
					sNombreCampoCategoriaValor="es_proveedor";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA:
					sNombreCampoCategoriaValor="id_cuenta_contable_aplicada";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN:
					sNombreCampoCategoriaValor="id_tipo_retencion_fuente_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO:
					sNombreCampoCategoriaValor="id_tipo_retencion_fuente_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva_bien";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva_servicio";
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_gasto";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_proveedor");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta. Aplicada",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_aplicada");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta. Credito Bien",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_bien");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta. Credito Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_servicio");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret Fuente Bien",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_fuente_bien");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret. Fuente Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_fuente_servicio");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret. Iva Bien",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva_bien");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret. Iva Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva_servicio");
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"C. Gasto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_gasto");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("PlantillaFacturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getes_proveedor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getcuentacontableaplicada_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getcuentacontablecreditobien_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getcuentacontablecreditoservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.gettiporetencionfuentebien_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.gettiporetencionfuenteservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.gettiporetencionivabien_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.gettiporetencionivaservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
					iRow++;

					for(PlantillaFactura plantillafactura:plantillafacturasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(plantillafactura.getcuentacontablegasto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelPlantillaFactura(row);				
			//	iRow++;
			//}				
			
			//for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelPlantillaFactura(plantillafacturaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPlantillaFactura(false);
			
			//SI ES MANUAL
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPlantillaFactura();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPlantillaFactura(false);
			
			//SI ES MANUAL
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPlantillaFactura();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPlantillaFactura(false);
			
			//SI ES MANUAL
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPlantillaFactura();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaPlantillaFactura() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosPlantillaFactura.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosPlantillaFactura.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosPlantillaFactura.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosPlantillaFactura.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosPlantillaFactura.setMinimumSize(dimensionMinimum);
		this.jTableDatosPlantillaFactura.setMaximumSize(dimensionMaximum);
		this.jTableDatosPlantillaFactura.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingPlantillaFactura(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingPlantillaFactura(esInicializar,true);
	}
	
	public void inicializarActualizarBindingPlantillaFactura(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaPlantillaFactura(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesPlantillaFactura(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasPlantillaFactura(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPlantillaFactura(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesPlantillaFactura(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualPlantillaFactura() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaPlantillaFactura();
		
		this.inicializarActualizarBindingBotonesManualPlantillaFactura(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualPlantillaFactura();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPlantillaFactura() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualPlantillaFactura(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualPlantillaFactura(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosPlantillaFactura.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosPlantillaFactura.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReportePlantillaFactura.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionNuevoPlantillaFactura.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionSinCerrarPlantillaFactura.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionSinMensajePlantillaFactura.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosPlantillaFactura.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosPlantillaFactura.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReportePlantillaFactura.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
				this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionNuevoPlantillaFactura.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionSinCerrarPlantillaFactura.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxPostAccionSinMensajePlantillaFactura.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionPlantillaFactura.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionPlantillaFactura.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesPlantillaFactura.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesPlantillaFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesPlantillaFactura.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarPlantillaFactura.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesPlantillaFactura.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesPlantillaFactura.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralPlantillaFactura.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPlantillaFactura(Boolean esInicializar) throws Exception {
		try	{	
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualPlantillaFactura(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesPlantillaFactura() throws Exception {
		try	{
			if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualPlantillaFactura();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePlantillaFactura() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualPlantillaFactura() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesPlantillaFactura.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesPlantillaFactura.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesPlantillaFactura.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionPlantillaFactura.addItem(reporte);
			}
			
			
			if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionPlantillaFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionPlantillaFactura.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesPlantillaFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesPlantillaFactura.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarPlantillaFactura.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarPlantillaFactura.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarPlantillaFactura.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPlantillaFactura();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPlantillaFactura() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
				
				if(this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoPlantillaFactura.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPlantillaFactura.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualPlantillaFactura()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextFieldcodigoBusquedaPorCodigoPlantillaFactura.getText();
		this.nombreBusquedaPorNombre=this.jTextAreanombreBusquedaPorNombrePlantillaFactura.getText();
		if(this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.getSelectedItem()!=null){this.id_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien=((CuentaContable)this.jComboBoxid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBienPlantillaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.getSelectedItem()!=null){this.id_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio=((CuentaContable)this.jComboBoxid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicioPlantillaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.getSelectedItem()!=null){this.id_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien=((TipoRetencion)this.jComboBoxid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBienPlantillaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.getSelectedItem()!=null){this.id_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio=((TipoRetencion)this.jComboBoxid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicioPlantillaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.getSelectedItem()!=null){this.id_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien=((TipoRetencion)this.jComboBoxid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBienPlantillaFactura.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.getSelectedItem()!=null){this.id_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio=((TipoRetencion)this.jComboBoxid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicioPlantillaFactura.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasPlantillaFactura(Boolean esInicializar) throws Exception {				
		if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualPlantillaFactura();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaPlantillaFactura() throws Exception {
		this.inicializarActualizarBindingTablaPlantillaFactura(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByPlantillaFactura() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosPlantillaFacturaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFacturaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaPlantillaFactura(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=plantillafacturaLogic.getPlantillaFacturas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=plantillafacturas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosPlantillaFactura.setModel(new PlantillaFacturaModel(this.plantillafacturaLogic.getPlantillaFacturas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosPlantillaFactura.setModel(new PlantillaFacturaModel(this.plantillafacturas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByPlantillaFactura!=null && this.jInternalFrameOrderByPlantillaFactura.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByPlantillaFactura();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+PlantillaFacturaConstantesFunciones.SCLASSWEBTITULO,plantillafacturaConstantesFunciones.resaltarSeleccionarPlantillaFactura,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+PlantillaFacturaConstantesFunciones.SCLASSWEBTITULO,plantillafacturaConstantesFunciones.resaltarSeleccionarPlantillaFactura,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_ID));

		if(this.plantillafacturaConstantesFunciones.mostraridPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.plantillafacturaConstantesFunciones.resaltaridPlantillaFactura,this.plantillafacturaConstantesFunciones.activaridPlantillaFactura,this,true,"idPlantillaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.plantillafacturaConstantesFunciones.resaltaridPlantillaFactura,this.plantillafacturaConstantesFunciones.activaridPlantillaFactura,this,true,"idPlantillaFactura","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.plantillafacturaConstantesFunciones.mostrarid_empresaPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_empresaPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_empresaPlantillaFactura));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_empresaPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_empresaPlantillaFactura,false,"id_empresaPlantillaFactura","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_CODIGO));

		if(this.plantillafacturaConstantesFunciones.mostrarcodigoPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.plantillafacturaConstantesFunciones.resaltarcodigoPlantillaFactura,this.plantillafacturaConstantesFunciones.activarcodigoPlantillaFactura,this,true,"codigoPlantillaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.plantillafacturaConstantesFunciones.resaltarcodigoPlantillaFactura,this.plantillafacturaConstantesFunciones.activarcodigoPlantillaFactura,this,true,"codigoPlantillaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_NOMBRE));

		if(this.plantillafacturaConstantesFunciones.mostrarnombrePlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.plantillafacturaConstantesFunciones.resaltarnombrePlantillaFactura,this.plantillafacturaConstantesFunciones.activarnombrePlantillaFactura,this,true,"nombrePlantillaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.plantillafacturaConstantesFunciones.resaltarnombrePlantillaFactura,this.plantillafacturaConstantesFunciones.activarnombrePlantillaFactura,this,true,"nombrePlantillaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.plantillafacturaConstantesFunciones.mostrardescripcionPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.plantillafacturaConstantesFunciones.resaltardescripcionPlantillaFactura,this.plantillafacturaConstantesFunciones.activardescripcionPlantillaFactura,this,true,"descripcionPlantillaFactura","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.plantillafacturaConstantesFunciones.resaltardescripcionPlantillaFactura,this.plantillafacturaConstantesFunciones.activardescripcionPlantillaFactura,this,true,"descripcionPlantillaFactura","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR));

		if(this.plantillafacturaConstantesFunciones.mostrares_proveedorPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.plantillafacturaConstantesFunciones.resaltares_proveedorPlantillaFactura,this.plantillafacturaConstantesFunciones.activares_proveedorPlantillaFactura));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.plantillafacturaConstantesFunciones.resaltares_proveedorPlantillaFactura,this.plantillafacturaConstantesFunciones.activares_proveedorPlantillaFactura,this,true,"es_proveedorPlantillaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA));

		if(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_aplicadaPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableaplicadasForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_aplicadaPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_aplicadaPlantillaFactura));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableaplicadasForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_aplicadaPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_aplicadaPlantillaFactura,true,"id_cuenta_contable_aplicadaPlantillaFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN));

		if(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_bienPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditobiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_bienPlantillaFactura));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditobiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_bienPlantillaFactura,true,"id_cuenta_contable_credito_bienPlantillaFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO));

		if(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_servicioPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditoserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_servicioPlantillaFactura));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditoserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_servicioPlantillaFactura,true,"id_cuenta_contable_credito_servicioPlantillaFactura","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN));

		if(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_bienPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionfuentebiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_bienPlantillaFactura));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionfuentebiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_bienPlantillaFactura,true,"id_tipo_retencion_fuente_bienPlantillaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO));

		if(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_servicioPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionfuenteserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_servicioPlantillaFactura));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionfuenteserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_servicioPlantillaFactura,true,"id_tipo_retencion_fuente_servicioPlantillaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN));

		if(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_bienPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionivabiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_bienPlantillaFactura));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionivabiensForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_bienPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_bienPlantillaFactura,true,"id_tipo_retencion_iva_bienPlantillaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO));

		if(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_servicioPlantillaFactura && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionivaserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_servicioPlantillaFactura));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionivaserviciosForeignKey,this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_servicioPlantillaFactura,this,this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_servicioPlantillaFactura,true,"id_tipo_retencion_iva_servicioPlantillaFactura","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PlantillaFacturaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosPlantillaFactura.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosPlantillaFactura.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.plantillafacturaSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosPlantillaFactura.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosPlantillaFactura.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosPlantillaFactura.moveColumn(this.jTableDatosPlantillaFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosPlantillaFactura.moveColumn(this.jTableDatosPlantillaFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosPlantillaFactura.moveColumn(this.jTableDatosPlantillaFactura.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosPlantillaFactura.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosPlantillaFactura.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosPlantillaFactura,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosPlantillaFactura.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosPlantillaFactura.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosPlantillaFactura.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosPlantillaFactura.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosPlantillaFactura.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=plantillafacturaLogic.getPlantillaFacturas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=plantillafacturas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosPlantillaFactura.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosPlantillaFactura.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosPlantillaFactura();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoPlantillaFactura=false;
					
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
				if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormPlantillaFactura==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPlantillaFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.plantillafactura.getsType().equals("DUPLICADO")
				   || this.plantillafactura.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoPlantillaFactura=true;
				
				} else {
					this.isEsNuevoPlantillaFactura=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					if(this.plantillafactura.getId()>=0 && !this.plantillafactura.getIsNew()) {						
						this.isEsNuevoPlantillaFactura=false;
						
					} else {
						this.isEsNuevoPlantillaFactura=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoPlantillaFactura(esRelaciones);						
				
				this.seleccionarPlantillaFactura(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.plantillafactura.getId()<0) {
					this.isEsNuevoPlantillaFactura=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarPlantillaFactura(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarPlantillaFactura(evt,rowIndex);
				}	
				
				if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion PlantillaFactura: " + this.dDif); 
					}
				}								
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarPlantillaFactura(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.plantillafactura)) {
					if(this.plantillafactura.getId()>0) {
						this.plantillafactura.setIsDeleted(true);
						
						this.plantillafacturasEliminados.add(this.plantillafactura);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.plantillafacturaLogic.getPlantillaFacturas().remove(this.plantillafactura);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.plantillafacturas.remove(this.plantillafactura);				
					}
					
					
					((PlantillaFacturaModel) this.jTableDatosPlantillaFactura.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaPlantillaFactura(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarPlantillaFactura(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoPlantillaFactura) {
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPlantillaFactura.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPlantillaFactura.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioPlantillaFactura(this.plantillafactura);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.plantillafacturaConstantesFunciones.cargarid_empresaPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_empresaPlantillaFactura) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.plantillafactura.getid_empresa());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(plantillafactura.getEmpresa()!=null) {
							this.empresasForeignKey.add(plantillafactura.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.plantillafactura.getid_empresa(),false,"Formulario");

					//CuentaContableAplicada
					if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_aplicadaPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_cuenta_contable_aplicadaPlantillaFactura) {
						//this.cargarCombosCuentaContableAplicadasForeignKeyLista(" where id="+this.plantillafactura.getid_cuenta_contable_aplicada());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.cuentacontableaplicadasForeignKey=new ArrayList<CuentaContable>();

						if(plantillafactura.getCuentaContableAplicada()!=null) {
							this.cuentacontableaplicadasForeignKey.add(plantillafactura.getCuentaContableAplicada());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableAplicada();
						this.cargarCombosFrameCuentaContableAplicadasForeignKey("Todos");
					}
					this.setActualCuentaContableAplicadaForeignKey(this.plantillafactura.getid_cuenta_contable_aplicada(),false,"Formulario");

					//CuentaContableCreditoBien
					if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_bienPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_cuenta_contable_credito_bienPlantillaFactura) {
						//this.cargarCombosCuentaContableCreditoBiensForeignKeyLista(" where id="+this.plantillafactura.getid_cuenta_contable_credito_bien());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.cuentacontablecreditobiensForeignKey=new ArrayList<CuentaContable>();

						if(plantillafactura.getCuentaContableCreditoBien()!=null) {
							this.cuentacontablecreditobiensForeignKey.add(plantillafactura.getCuentaContableCreditoBien());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoBien();
						this.cargarCombosFrameCuentaContableCreditoBiensForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoBienForeignKey(this.plantillafactura.getid_cuenta_contable_credito_bien(),false,"Formulario");

					//CuentaContableCreditoServicio
					if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_credito_servicioPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_cuenta_contable_credito_servicioPlantillaFactura) {
						//this.cargarCombosCuentaContableCreditoServiciosForeignKeyLista(" where id="+this.plantillafactura.getid_cuenta_contable_credito_servicio());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.cuentacontablecreditoserviciosForeignKey=new ArrayList<CuentaContable>();

						if(plantillafactura.getCuentaContableCreditoServicio()!=null) {
							this.cuentacontablecreditoserviciosForeignKey.add(plantillafactura.getCuentaContableCreditoServicio());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoServicio();
						this.cargarCombosFrameCuentaContableCreditoServiciosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoServicioForeignKey(this.plantillafactura.getid_cuenta_contable_credito_servicio(),false,"Formulario");

					//TipoRetencionFuenteBien
					if(!this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_bienPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_tipo_retencion_fuente_bienPlantillaFactura) {
						//this.cargarCombosTipoRetencionFuenteBiensForeignKeyLista(" where id="+this.plantillafactura.getid_tipo_retencion_fuente_bien());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.tiporetencionfuentebiensForeignKey=new ArrayList<TipoRetencion>();

						if(plantillafactura.getTipoRetencionFuenteBien()!=null) {
							this.tiporetencionfuentebiensForeignKey.add(plantillafactura.getTipoRetencionFuenteBien());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionFuenteBien();
						this.cargarCombosFrameTipoRetencionFuenteBiensForeignKey("Todos");
					}
					this.setActualTipoRetencionFuenteBienForeignKey(this.plantillafactura.getid_tipo_retencion_fuente_bien(),false,"Formulario");

					//TipoRetencionFuenteServicio
					if(!this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_fuente_servicioPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_tipo_retencion_fuente_servicioPlantillaFactura) {
						//this.cargarCombosTipoRetencionFuenteServiciosForeignKeyLista(" where id="+this.plantillafactura.getid_tipo_retencion_fuente_servicio());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.tiporetencionfuenteserviciosForeignKey=new ArrayList<TipoRetencion>();

						if(plantillafactura.getTipoRetencionFuenteServicio()!=null) {
							this.tiporetencionfuenteserviciosForeignKey.add(plantillafactura.getTipoRetencionFuenteServicio());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionFuenteServicio();
						this.cargarCombosFrameTipoRetencionFuenteServiciosForeignKey("Todos");
					}
					this.setActualTipoRetencionFuenteServicioForeignKey(this.plantillafactura.getid_tipo_retencion_fuente_servicio(),false,"Formulario");

					//TipoRetencionIvaBien
					if(!this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_bienPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_tipo_retencion_iva_bienPlantillaFactura) {
						//this.cargarCombosTipoRetencionIvaBiensForeignKeyLista(" where id="+this.plantillafactura.getid_tipo_retencion_iva_bien());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.tiporetencionivabiensForeignKey=new ArrayList<TipoRetencion>();

						if(plantillafactura.getTipoRetencionIvaBien()!=null) {
							this.tiporetencionivabiensForeignKey.add(plantillafactura.getTipoRetencionIvaBien());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIvaBien();
						this.cargarCombosFrameTipoRetencionIvaBiensForeignKey("Todos");
					}
					this.setActualTipoRetencionIvaBienForeignKey(this.plantillafactura.getid_tipo_retencion_iva_bien(),false,"Formulario");

					//TipoRetencionIvaServicio
					if(!this.plantillafacturaConstantesFunciones.cargarid_tipo_retencion_iva_servicioPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_tipo_retencion_iva_servicioPlantillaFactura) {
						//this.cargarCombosTipoRetencionIvaServiciosForeignKeyLista(" where id="+this.plantillafactura.getid_tipo_retencion_iva_servicio());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.tiporetencionivaserviciosForeignKey=new ArrayList<TipoRetencion>();

						if(plantillafactura.getTipoRetencionIvaServicio()!=null) {
							this.tiporetencionivaserviciosForeignKey.add(plantillafactura.getTipoRetencionIvaServicio());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIvaServicio();
						this.cargarCombosFrameTipoRetencionIvaServiciosForeignKey("Todos");
					}
					this.setActualTipoRetencionIvaServicioForeignKey(this.plantillafactura.getid_tipo_retencion_iva_servicio(),false,"Formulario");

					//CuentaContableGasto
					if(!this.plantillafacturaConstantesFunciones.cargarid_cuenta_contable_gastoPlantillaFactura || this.plantillafacturaConstantesFunciones.event_dependid_cuenta_contable_gastoPlantillaFactura) {
						//this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+this.plantillafactura.getid_cuenta_contable_gasto());
									//this.inicializarActualizarBindingPlantillaFactura(false,false);
						this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

						if(plantillafactura.getCuentaContableGasto()!=null) {
							this.cuentacontablegastosForeignKey.add(plantillafactura.getCuentaContableGasto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableGasto();
						this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
					}
					this.setActualCuentaContableGastoForeignKey(this.plantillafactura.getid_cuenta_contable_gasto(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesPlantillaFactura("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesPlantillaFactura(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPlantillaFactura() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoPlantillaFactura(PlantillaFactura plantillafactura) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoPlantillaFactura(plantillafactura,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoPlantillaFactura(PlantillaFactura plantillafactura,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioPlantillaFactura(plantillafactura);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyPlantillaFactura(plantillafactura,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyPlantillaFactura(plantillafactura);
	}
	
	public void setVariablesObjetoActualToFormularioPlantillaFactura(PlantillaFactura plantillafactura) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setText(plantillafactura.getId().toString());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setText(plantillafactura.getcodigo());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setText(plantillafactura.getnombre());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setText(plantillafactura.getdescripcion());
			this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setSelected(plantillafactura.getes_proveedor());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,PlantillaFactura plantillafacturaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,plantillafacturaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,PlantillaFactura plantillafacturaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				plantillafacturaLocal=this.plantillafactura;
			} else {
				plantillafacturaLocal=this.plantillafacturaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(plantillafacturaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoPlantillaFactura(plantillafacturaLocal,true);
					
					if(plantillafacturaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(plantillafacturaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(plantillafacturaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoPlantillaFactura(PlantillaFactura plantillafactura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPlantillaFactura(plantillafactura,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(plantillafactura);
	}
	
	public void setVariablesFormularioToObjetoActualPlantillaFactura(PlantillaFactura plantillafactura,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPlantillaFactura(plantillafactura,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualPlantillaFactura(PlantillaFactura plantillafactura,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.getText()==null || this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.getText()=="" || this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.getText()=="Id") {
				this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setText("0");
			}

			if(conColumnasBase) {plantillafactura.setId(Long.parseLong(this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PlantillaFacturaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelIdPlantillaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			plantillafactura.setcodigo(this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PlantillaFacturaConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelcodigoPlantillaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			plantillafactura.setnombre(this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PlantillaFacturaConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabelnombrePlantillaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			plantillafactura.setdescripcion(this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabeldescripcionPlantillaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			plantillafactura.setes_proveedor(this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPlantillaFactura.jLabeles_proveedorPlantillaFactura,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPlantillaFactura(PlantillaFactura plantillafacturaBean,PlantillaFactura plantillafactura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && plantillafacturaBean.getid_cuenta_contable_aplicada()!=null && !plantillafacturaBean.getid_cuenta_contable_aplicada().equals(null))) {plantillafactura.setid_cuenta_contable_aplicada(plantillafacturaBean.getid_cuenta_contable_aplicada());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_cuenta_contable_credito_bien()!=null && !plantillafacturaBean.getid_cuenta_contable_credito_bien().equals(null))) {plantillafactura.setid_cuenta_contable_credito_bien(plantillafacturaBean.getid_cuenta_contable_credito_bien());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_cuenta_contable_credito_servicio()!=null && !plantillafacturaBean.getid_cuenta_contable_credito_servicio().equals(null))) {plantillafactura.setid_cuenta_contable_credito_servicio(plantillafacturaBean.getid_cuenta_contable_credito_servicio());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_tipo_retencion_fuente_bien()!=null && !plantillafacturaBean.getid_tipo_retencion_fuente_bien().equals(null))) {plantillafactura.setid_tipo_retencion_fuente_bien(plantillafacturaBean.getid_tipo_retencion_fuente_bien());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_tipo_retencion_fuente_servicio()!=null && !plantillafacturaBean.getid_tipo_retencion_fuente_servicio().equals(null))) {plantillafactura.setid_tipo_retencion_fuente_servicio(plantillafacturaBean.getid_tipo_retencion_fuente_servicio());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_tipo_retencion_iva_bien()!=null && !plantillafacturaBean.getid_tipo_retencion_iva_bien().equals(null))) {plantillafactura.setid_tipo_retencion_iva_bien(plantillafacturaBean.getid_tipo_retencion_iva_bien());}
			if(conDefault || (!conDefault && plantillafacturaBean.getid_tipo_retencion_iva_servicio()!=null && !plantillafacturaBean.getid_tipo_retencion_iva_servicio().equals(null))) {plantillafactura.setid_tipo_retencion_iva_servicio(plantillafacturaBean.getid_tipo_retencion_iva_servicio());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosPlantillaFactura(PlantillaFactura plantillafacturaOrigen,PlantillaFactura plantillafactura,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && plantillafacturaOrigen.getId()!=null && !plantillafacturaOrigen.getId().equals(0L))) {plantillafactura.setId(plantillafacturaOrigen.getId());}}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getcodigo()!=null && !plantillafacturaOrigen.getcodigo().equals(""))) {plantillafactura.setcodigo(plantillafacturaOrigen.getcodigo());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getnombre()!=null && !plantillafacturaOrigen.getnombre().equals(""))) {plantillafactura.setnombre(plantillafacturaOrigen.getnombre());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getdescripcion()!=null && !plantillafacturaOrigen.getdescripcion().equals(""))) {plantillafactura.setdescripcion(plantillafacturaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getes_proveedor()!=null && !plantillafacturaOrigen.getes_proveedor().equals(false))) {plantillafactura.setes_proveedor(plantillafacturaOrigen.getes_proveedor());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_cuenta_contable_aplicada()!=null && !plantillafacturaOrigen.getid_cuenta_contable_aplicada().equals(null))) {plantillafactura.setid_cuenta_contable_aplicada(plantillafacturaOrigen.getid_cuenta_contable_aplicada());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_cuenta_contable_credito_bien()!=null && !plantillafacturaOrigen.getid_cuenta_contable_credito_bien().equals(null))) {plantillafactura.setid_cuenta_contable_credito_bien(plantillafacturaOrigen.getid_cuenta_contable_credito_bien());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_cuenta_contable_credito_servicio()!=null && !plantillafacturaOrigen.getid_cuenta_contable_credito_servicio().equals(null))) {plantillafactura.setid_cuenta_contable_credito_servicio(plantillafacturaOrigen.getid_cuenta_contable_credito_servicio());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_tipo_retencion_fuente_bien()!=null && !plantillafacturaOrigen.getid_tipo_retencion_fuente_bien().equals(null))) {plantillafactura.setid_tipo_retencion_fuente_bien(plantillafacturaOrigen.getid_tipo_retencion_fuente_bien());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_tipo_retencion_fuente_servicio()!=null && !plantillafacturaOrigen.getid_tipo_retencion_fuente_servicio().equals(null))) {plantillafactura.setid_tipo_retencion_fuente_servicio(plantillafacturaOrigen.getid_tipo_retencion_fuente_servicio());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_tipo_retencion_iva_bien()!=null && !plantillafacturaOrigen.getid_tipo_retencion_iva_bien().equals(null))) {plantillafactura.setid_tipo_retencion_iva_bien(plantillafacturaOrigen.getid_tipo_retencion_iva_bien());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_tipo_retencion_iva_servicio()!=null && !plantillafacturaOrigen.getid_tipo_retencion_iva_servicio().equals(null))) {plantillafactura.setid_tipo_retencion_iva_servicio(plantillafacturaOrigen.getid_tipo_retencion_iva_servicio());}
			if(conDefault || (!conDefault && plantillafacturaOrigen.getid_cuenta_contable_gasto()!=null && !plantillafacturaOrigen.getid_cuenta_contable_gasto().equals(null))) {plantillafactura.setid_cuenta_contable_gasto(plantillafacturaOrigen.getid_cuenta_contable_gasto());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPlantillaFactura(PlantillaFactura plantillafactura) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setText(plantillafactura.getId().toString());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setText(plantillafactura.getcodigo());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setText(plantillafactura.getnombre());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setText(plantillafactura.getdescripcion());
			this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setSelected(plantillafactura.getes_proveedor());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPlantillaFactura(PlantillaFacturaBean plantillafacturaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setText(plantillafacturaBean.getId().toString());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setText(plantillafacturaBean.getcodigo());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setText(plantillafacturaBean.getnombre());
			this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setText(plantillafacturaBean.getdescripcion());
			this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setSelected(plantillafacturaBean.getes_proveedor());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanPlantillaFactura(PlantillaFacturaParameterReturnGeneral plantillafacturaReturnGeneral,PlantillaFacturaBean plantillafacturaBean,Boolean conDefault) throws Exception { 
		try {
			PlantillaFactura plantillafacturaLocal=new PlantillaFactura();
			
			plantillafacturaLocal=plantillafacturaReturnGeneral.getPlantillaFactura();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && plantillafacturaLocal.getId()!=null && !plantillafacturaLocal.getId().equals(0L))) {plantillafacturaBean.setId(plantillafacturaLocal.getId());}}
			if(conDefault || (!conDefault && plantillafacturaLocal.getcodigo()!=null && !plantillafacturaLocal.getcodigo().equals(""))) {plantillafacturaBean.setcodigo(plantillafacturaLocal.getcodigo());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getnombre()!=null && !plantillafacturaLocal.getnombre().equals(""))) {plantillafacturaBean.setnombre(plantillafacturaLocal.getnombre());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getdescripcion()!=null && !plantillafacturaLocal.getdescripcion().equals(""))) {plantillafacturaBean.setdescripcion(plantillafacturaLocal.getdescripcion());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getes_proveedor()!=null && !plantillafacturaLocal.getes_proveedor().equals(false))) {plantillafacturaBean.setes_proveedor(plantillafacturaLocal.getes_proveedor());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_cuenta_contable_aplicada()!=null && !plantillafacturaLocal.getid_cuenta_contable_aplicada().equals(null))) {plantillafacturaBean.setid_cuenta_contable_aplicada(plantillafacturaLocal.getid_cuenta_contable_aplicada());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_cuenta_contable_credito_bien()!=null && !plantillafacturaLocal.getid_cuenta_contable_credito_bien().equals(null))) {plantillafacturaBean.setid_cuenta_contable_credito_bien(plantillafacturaLocal.getid_cuenta_contable_credito_bien());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_cuenta_contable_credito_servicio()!=null && !plantillafacturaLocal.getid_cuenta_contable_credito_servicio().equals(null))) {plantillafacturaBean.setid_cuenta_contable_credito_servicio(plantillafacturaLocal.getid_cuenta_contable_credito_servicio());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_tipo_retencion_fuente_bien()!=null && !plantillafacturaLocal.getid_tipo_retencion_fuente_bien().equals(null))) {plantillafacturaBean.setid_tipo_retencion_fuente_bien(plantillafacturaLocal.getid_tipo_retencion_fuente_bien());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_tipo_retencion_fuente_servicio()!=null && !plantillafacturaLocal.getid_tipo_retencion_fuente_servicio().equals(null))) {plantillafacturaBean.setid_tipo_retencion_fuente_servicio(plantillafacturaLocal.getid_tipo_retencion_fuente_servicio());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_tipo_retencion_iva_bien()!=null && !plantillafacturaLocal.getid_tipo_retencion_iva_bien().equals(null))) {plantillafacturaBean.setid_tipo_retencion_iva_bien(plantillafacturaLocal.getid_tipo_retencion_iva_bien());}
			if(conDefault || (!conDefault && plantillafacturaLocal.getid_tipo_retencion_iva_servicio()!=null && !plantillafacturaLocal.getid_tipo_retencion_iva_servicio().equals(null))) {plantillafacturaBean.setid_tipo_retencion_iva_servicio(plantillafacturaLocal.getid_tipo_retencion_iva_servicio());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxPlantillaFacturaGenerico(Long idPlantillaFacturaSeleccionado,JComboBox jComboBoxPlantillaFactura,List<PlantillaFactura> plantillafacturasLocal)throws Exception {
		try {
			PlantillaFactura  plantillafacturaTemp=null;

			for(PlantillaFactura plantillafacturaAux:plantillafacturasLocal) {
				if(plantillafacturaAux.getId()!=null && plantillafacturaAux.getId().equals(idPlantillaFacturaSeleccionado)) {
					plantillafacturaTemp=plantillafacturaAux;
					break;
				}
			}

			jComboBoxPlantillaFactura.setSelectedItem(plantillafacturaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxPlantillaFacturaGenerico(JComboBox jComboBoxPlantillaFactura,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxPlantillaFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPlantillaFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxPlantillaFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPlantillaFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPlantillaFactura.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxPlantillaFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPlantillaFactura.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxPlantillaFactura.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxPlantillaFactura.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxPlantillaFactura.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			plantillafactura=(PlantillaFactura) plantillafacturaLogic.getPlantillaFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			plantillafactura =(PlantillaFactura) plantillafacturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.getempresa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableAplicada")) {
			//sDescripcion=this.getActualCuentaContableAplicadaForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.getcuentacontableaplicada_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableAplicadaForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.getcuentacontableaplicada_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoBien")) {
			//sDescripcion=this.getActualCuentaContableCreditoBienForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.getcuentacontablecreditobien_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoBienForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.getcuentacontablecreditobien_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoServicio")) {
			//sDescripcion=this.getActualCuentaContableCreditoServicioForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.getcuentacontablecreditoservicio_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.getcuentacontablecreditoservicio_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionFuenteBien")) {
			//sDescripcion=this.getActualTipoRetencionFuenteBienForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.gettiporetencionfuentebien_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionFuenteBienForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.gettiporetencionfuentebien_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionFuenteServicio")) {
			//sDescripcion=this.getActualTipoRetencionFuenteServicioForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.gettiporetencionfuenteservicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionFuenteServicioForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.gettiporetencionfuenteservicio_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIvaBien")) {
			//sDescripcion=this.getActualTipoRetencionIvaBienForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.gettiporetencionivabien_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIvaBienForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.gettiporetencionivabien_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIvaServicio")) {
			//sDescripcion=this.getActualTipoRetencionIvaServicioForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.gettiporetencionivaservicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIvaServicioForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.gettiporetencionivaservicio_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableGasto")) {
			//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
			if(!plantillafactura.getIsNew() && !plantillafactura.getIsChanged() && !plantillafactura.getIsDeleted()) {
				sDescripcion=plantillafactura.getcuentacontablegasto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
				sDescripcion=plantillafactura.getcuentacontablegasto_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		PlantillaFactura plantillafacturaRow=new PlantillaFactura();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			plantillafacturaRow=(PlantillaFactura) plantillafacturaLogic.getPlantillaFacturas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			plantillafacturaRow=(PlantillaFactura) plantillafacturas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualPlantillaFactura(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura));			
			this.jButtonDuplicarPlantillaFactura.setVisible((this.isVisibilidadCeldaDuplicarPlantillaFactura && this.isPermisoDuplicarPlantillaFactura));			
			this.jButtonCopiarPlantillaFactura.setVisible((this.isVisibilidadCeldaCopiarPlantillaFactura && this.isPermisoCopiarPlantillaFactura));
			this.jButtonVerFormPlantillaFactura.setVisible((this.isVisibilidadCeldaVerFormPlantillaFactura && this.isPermisoVerFormPlantillaFactura));
			
			this.jButtonAbrirOrderByPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));			
			
			this.jButtonNuevoRelacionesPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura && this.isPermisoNuevoPlantillaFactura));			
			this.jButtonNuevoGuardarCambiosPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarPlantillaFactura.setVisible((this.isVisibilidadCeldaModificarPlantillaFactura && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.setVisible((this.isVisibilidadCeldaActualizarPlantillaFactura && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.setVisible((this.isVisibilidadCeldaEliminarPlantillaFactura && this.isPermisoEliminarPlantillaFactura));
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.setVisible(this.isVisibilidadCeldaCancelarPlantillaFactura);							
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));			
			
			}
						
			this.jButtonGuardarCambiosTablaPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura));						
			this.jButtonDuplicarToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaDuplicarPlantillaFactura && this.isPermisoDuplicarPlantillaFactura));						
			this.jButtonCopiarToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaCopiarPlantillaFactura && this.isPermisoCopiarPlantillaFactura));			
			this.jButtonVerFormToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaVerFormPlantillaFactura && this.isPermisoVerFormPlantillaFactura));			
			this.jButtonAbrirOrderByToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));
			this.jButtonNuevoRelacionesToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura && this.isPermisoNuevoPlantillaFactura));			
			this.jButtonNuevoGuardarCambiosToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));			
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaModificarPlantillaFactura && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaActualizarPlantillaFactura  && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaEliminarPlantillaFactura && this.isPermisoEliminarPlantillaFactura));
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarToolBarPlantillaFactura.setVisible(this.isVisibilidadCeldaCancelarPlantillaFactura);				
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura));			
			this.jMenuItemDuplicarPlantillaFactura.setVisible((this.isVisibilidadCeldaDuplicarPlantillaFactura && this.isPermisoDuplicarPlantillaFactura));			
			this.jMenuItemCopiarPlantillaFactura.setVisible((this.isVisibilidadCeldaCopiarPlantillaFactura && this.isPermisoCopiarPlantillaFactura));			
			this.jMenuItemVerFormPlantillaFactura.setVisible((this.isVisibilidadCeldaVerFormPlantillaFactura && this.isPermisoVerFormPlantillaFactura));			
			this.jMenuItemAbrirOrderByPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));			
			//this.jMenuItemMostrarOcultarPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));
			this.jMenuItemDetalleAbrirOrderByPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));			
			//this.jMenuItemDetalleMostrarOcultarPlantillaFactura.setVisible((this.isVisibilidadCeldaOrdenPlantillaFactura && this.isPermisoOrdenPlantillaFactura));			
			this.jMenuItemNuevoRelacionesPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura && this.isPermisoNuevoPlantillaFactura));			
			this.jMenuItemNuevoGuardarCambiosPlantillaFactura.setVisible((this.isVisibilidadCeldaNuevoPlantillaFactura && this.isPermisoNuevoPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));									
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemModificarPlantillaFactura.setVisible((this.isVisibilidadCeldaModificarPlantillaFactura && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemActualizarPlantillaFactura.setVisible((this.isVisibilidadCeldaActualizarPlantillaFactura && this.isPermisoActualizarPlantillaFactura));	
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemEliminarPlantillaFactura.setVisible((this.isVisibilidadCeldaEliminarPlantillaFactura && this.isPermisoEliminarPlantillaFactura));
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemCancelarPlantillaFactura.setVisible(this.isVisibilidadCeldaCancelarPlantillaFactura);				
			}
			
			this.jMenuItemGuardarCambiosPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));						
			this.jMenuItemGuardarCambiosTablaPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarCambiosPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoPlantillaFactura=this.jButtonNuevoPlantillaFactura.isVisible();
			this.isVisibilidadCeldaDuplicarPlantillaFactura=this.jButtonDuplicarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaCopiarPlantillaFactura=this.jButtonCopiarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaVerFormPlantillaFactura=this.jButtonVerFormPlantillaFactura.isVisible();
			
			this.isVisibilidadCeldaOrdenPlantillaFactura=this.jButtonAbrirOrderByPlantillaFactura.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=this.jButtonNuevoRelacionesPlantillaFactura.isVisible();
			this.isVisibilidadCeldaModificarPlantillaFactura=this.jButtonModificarPlantillaFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.isVisibilidadCeldaActualizarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaEliminarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaCancelarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaGuardarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=this.jButtonGuardarCambiosTablaPlantillaFactura.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoPlantillaFactura=this.jButtonNuevoToolBarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=this.jButtonNuevoRelacionesToolBarPlantillaFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.isVisibilidadCeldaModificarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarToolBarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaActualizarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarToolBarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaEliminarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarToolBarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaCancelarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarToolBarPlantillaFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPlantillaFactura=this.jButtonGuardarCambiosToolBarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=this.jButtonGuardarCambiosTablaToolBarPlantillaFactura.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoPlantillaFactura=this.jMenuItemNuevoPlantillaFactura.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=this.jMenuItemNuevoRelacionesPlantillaFactura.isVisible();
			
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.isVisibilidadCeldaModificarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemModificarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaActualizarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemActualizarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaEliminarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemEliminarPlantillaFactura.isVisible();
			this.isVisibilidadCeldaCancelarPlantillaFactura=this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemCancelarPlantillaFactura.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPlantillaFactura=this.jMenuItemGuardarCambiosPlantillaFactura.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=this.jMenuItemGuardarCambiosTablaPlantillaFactura.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesPlantillaFactura(Boolean esInicializar) {
		if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
				//if(this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesPlantillaFactura();
			}
			
			this.inicializarActualizarBindingBotonesManualPlantillaFactura(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualPlantillaFactura() {
		this.jButtonNuevoPlantillaFactura.setVisible(this.isPermisoNuevoPlantillaFactura);			
		this.jButtonDuplicarPlantillaFactura.setVisible(this.isPermisoDuplicarPlantillaFactura);			
		this.jButtonCopiarPlantillaFactura.setVisible(this.isPermisoCopiarPlantillaFactura);			
		this.jButtonVerFormPlantillaFactura.setVisible(this.isPermisoVerFormPlantillaFactura);			
		
		this.jButtonAbrirOrderByPlantillaFactura.setVisible(this.isPermisoOrdenPlantillaFactura);					
		
		this.jButtonNuevoRelacionesPlantillaFactura.setVisible(this.isPermisoNuevoPlantillaFactura);			
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarPlantillaFactura.setVisible(this.isPermisoActualizarPlantillaFactura);	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.setVisible(this.isPermisoActualizarPlantillaFactura);	
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.setVisible(this.isPermisoEliminarPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.setVisible(this.isVisibilidadCeldaCancelarPlantillaFactura);						
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.setVisible(this.isPermisoGuardarCambiosPlantillaFactura);							
		}
		
		this.jButtonGuardarCambiosTablaPlantillaFactura.setVisible(this.isPermisoActualizarPlantillaFactura);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetallePlantillaFactura() {
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarPlantillaFactura.setVisible(this.isPermisoActualizarPlantillaFactura);	
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.setVisible(this.isPermisoActualizarPlantillaFactura);	
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.setVisible(this.isPermisoEliminarPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.setVisible(this.isVisibilidadCeldaCancelarPlantillaFactura);							
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.setVisible((this.isVisibilidadCeldaGuardarPlantillaFactura && this.isPermisoGuardarCambiosPlantillaFactura));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosPlantillaFactura() {
		if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualPlantillaFactura();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesPlantillaFactura() {
	}
	
	public void jTableDatosPlantillaFacturaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarPlantillaFactura(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.plantillafactura.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.plantillafactura.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.plantillafactura.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombrePlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.plantillafactura.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.plantillafactura.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_proveedorPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getes_proveedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_proveedor = "+this.plantillafactura.getes_proveedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableaplicadaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableaplicadaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableaplicadaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableAplicada";

			if(!this.sFinalQueryGeneral_cuentacontableaplicada.equals("")) {
				this.cuentacontableaplicadaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableaplicada);
				this.cuentacontableaplicadaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableaplicadaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableaplicadaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableaplicadaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableAplicada.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableaplicadaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPlantillaFactura=null;
			TitledBorder titledBordercuentacontableaplicada=null;

			if(!this.jScrollPanelDatosPlantillaFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				titledBordercuentacontableaplicada=(TitledBorder)this.cuentacontableaplicadaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableaplicada.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableaplicada=true;

			idTienePermisocuentacontableaplicada=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableaplicada) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.cuentacontableaplicadaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableaplicadaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableaplicadaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_cuenta_contable_aplicada()!=null) {
					this.cuentacontableaplicadaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableaplicadaBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_cuenta_contable_aplicada());
					this.cuentacontableaplicadaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableaplicadaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableaplicadaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableaplicadaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordercuentacontableaplicada=(TitledBorder)this.cuentacontableaplicadaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableaplicada.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_cuenta_contable_aplicada()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_aplicada = "+this.plantillafactura.getid_cuenta_contable_aplicada().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditobienBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditobienBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditobienBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCreditoBien";

			if(!this.sFinalQueryGeneral_cuentacontablecreditobien.equals("")) {
				this.cuentacontablecreditobienBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecreditobien);
				this.cuentacontablecreditobienBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditobienBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditobienBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditobienBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCreditoBien.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditobienBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPlantillaFactura=null;
			TitledBorder titledBordercuentacontablecreditobien=null;

			if(!this.jScrollPanelDatosPlantillaFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				titledBordercuentacontablecreditobien=(TitledBorder)this.cuentacontablecreditobienBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditobien.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditobien=true;

			idTienePermisocuentacontablecreditobien=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditobien) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.cuentacontablecreditobienBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditobienBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditobienBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_cuenta_contable_credito_bien()!=null) {
					this.cuentacontablecreditobienBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditobienBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_cuenta_contable_credito_bien());
					this.cuentacontablecreditobienBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditobienBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditobienBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditobienBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordercuentacontablecreditobien=(TitledBorder)this.cuentacontablecreditobienBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditobien.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_cuenta_contable_credito_bien()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_bien = "+this.plantillafactura.getid_cuenta_contable_credito_bien().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditoservicioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditoservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditoservicioBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCreditoServicio";

			if(!this.sFinalQueryGeneral_cuentacontablecreditoservicio.equals("")) {
				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecreditoservicio);
				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditoservicioBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCreditoServicio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditoservicioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPlantillaFactura=null;
			TitledBorder titledBordercuentacontablecreditoservicio=null;

			if(!this.jScrollPanelDatosPlantillaFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				titledBordercuentacontablecreditoservicio=(TitledBorder)this.cuentacontablecreditoservicioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditoservicio.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditoservicio=true;

			idTienePermisocuentacontablecreditoservicio=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditoservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.cuentacontablecreditoservicioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoservicioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_cuenta_contable_credito_servicio()!=null) {
					this.cuentacontablecreditoservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoservicioBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_cuenta_contable_credito_servicio());
					this.cuentacontablecreditoservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordercuentacontablecreditoservicio=(TitledBorder)this.cuentacontablecreditoservicioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditoservicio.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_cuenta_contable_credito_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_servicio = "+this.plantillafactura.getid_cuenta_contable_credito_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionfuentebien=true;

			idTienePermisotiporetencionfuentebien=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionfuentebien) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.tiporetencionfuentebienBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionfuentebienBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionfuentebienBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_tipo_retencion_fuente_bien()!=null) {
					this.tiporetencionfuentebienBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionfuentebienBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_tipo_retencion_fuente_bien());
					this.tiporetencionfuentebienBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionfuentebienBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionfuentebienBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionfuentebienBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordertiporetencionfuentebien=(TitledBorder)this.tiporetencionfuentebienBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionfuentebien.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_tipo_retencion_fuente_bien()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_fuente_bien = "+this.plantillafactura.getid_tipo_retencion_fuente_bien().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionfuenteservicio=true;

			idTienePermisotiporetencionfuenteservicio=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionfuenteservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.tiporetencionfuenteservicioBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionfuenteservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionfuenteservicioBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_tipo_retencion_fuente_servicio()!=null) {
					this.tiporetencionfuenteservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionfuenteservicioBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_tipo_retencion_fuente_servicio());
					this.tiporetencionfuenteservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionfuenteservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionfuenteservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionfuenteservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordertiporetencionfuenteservicio=(TitledBorder)this.tiporetencionfuenteservicioBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionfuenteservicio.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_tipo_retencion_fuente_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_fuente_servicio = "+this.plantillafactura.getid_tipo_retencion_fuente_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionivabien=true;

			idTienePermisotiporetencionivabien=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionivabien) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.tiporetencionivabienBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionivabienBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionivabienBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_tipo_retencion_iva_bien()!=null) {
					this.tiporetencionivabienBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionivabienBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_tipo_retencion_iva_bien());
					this.tiporetencionivabienBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionivabienBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionivabienBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionivabienBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordertiporetencionivabien=(TitledBorder)this.tiporetencionivabienBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionivabien.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_tipo_retencion_iva_bien()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva_bien = "+this.plantillafactura.getid_tipo_retencion_iva_bien().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionivaservicio=true;

			idTienePermisotiporetencionivaservicio=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionivaservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.tiporetencionivaservicioBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionivaservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionivaservicioBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_tipo_retencion_iva_servicio()!=null) {
					this.tiporetencionivaservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionivaservicioBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_tipo_retencion_iva_servicio());
					this.tiporetencionivaservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionivaservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionivaservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionivaservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordertiporetencionivaservicio=(TitledBorder)this.tiporetencionivaservicioBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionivaservicio.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_tipo_retencion_iva_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva_servicio = "+this.plantillafactura.getid_tipo_retencion_iva_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableGasto";

			if(!this.sFinalQueryGeneral_cuentacontablegasto.equals("")) {
				this.cuentacontablegastoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablegasto);
				this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableGasto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPlantillaFactura=null;
			TitledBorder titledBordercuentacontablegasto=null;

			if(!this.jScrollPanelDatosPlantillaFactura.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_gastoPlantillaFacturaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablegasto=true;

			idTienePermisocuentacontablegasto=this.tienePermisosUsuarioEnPaginaWebPlantillaFactura(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablegasto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPlantillaFactura.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPlantillaFactura.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);

				this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablegastoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.plantillafacturaLogic.getConnexion());

				if(this.plantillafactura.getid_cuenta_contable_gasto()!=null) {
					this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablegastoBeanSwingJInternalFrame.setIdActual(this.plantillafactura.getid_cuenta_contable_gasto());
					this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPlantillaFactura=(TitledBorder)this.jScrollPanelDatosPlantillaFactura.getBorder();
				TitledBorder titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderPlantillaFactura.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_gastoPlantillaFacturaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.getplantillafactura(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.plantillafactura==null) {
						this.plantillafactura = new PlantillaFactura();
					}

					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);
				}

				if(this.plantillafactura.getid_cuenta_contable_gasto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_gasto = "+this.plantillafactura.getid_cuenta_contable_gasto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPlantillaFactura(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasBusquedaPorCodigo();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNombrePlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasBusquedaPorNombre();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoBienPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdCuentaContableCreditoBien();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFinServicioPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdCuentaContableCreditoFinServicio();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableGastoPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdCuentaContableGasto();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdEmpresa();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionFuenteBienPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdTipoRetencionFuenteBien();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionFuenteServicioPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdTipoRetencionFuenteServicio();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIvaBienPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdTipoRetencionIvaBien();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIvaServicioPlantillaFacturaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPlantillaFactura(false,false);

			this.getPlantillaFacturasFK_IdTipoRetencionIvaServicio();

			this.inicializarActualizarBindingPlantillaFactura(false);

			//if(PlantillaFacturaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPlantillaFactura(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.plantillafacturaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFramePlantillaFactura() {
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
			this.jInternalFrameDetalleFormPlantillaFactura.setVisible(false);	    			
			this.jInternalFrameDetalleFormPlantillaFactura.dispose();
			this.jInternalFrameDetalleFormPlantillaFactura=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
			this.jInternalFrameReporteDinamicoPlantillaFactura.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoPlantillaFactura.dispose();
			this.jInternalFrameReporteDinamicoPlantillaFactura=null;
		}
		
		if(this.jInternalFrameImportacionPlantillaFactura!=null) {
			this.jInternalFrameImportacionPlantillaFactura.setVisible(false);	    			
			this.jInternalFrameImportacionPlantillaFactura.dispose();
			this.jInternalFrameImportacionPlantillaFactura=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessPlantillaFactura();
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			
			if(sTipo.equals("NuevoPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarPlantillaFactura")) {
				jButtonDuplicarPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarPlantillaFactura")) {
				jButtonCopiarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormPlantillaFactura")) {
				jButtonVerFormPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarPlantillaFactura")) {
				jButtonDuplicarPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarPlantillaFactura")) {
				jButtonDuplicarPlantillaFacturaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarPlantillaFactura")) {
				jButtonModificarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarPlantillaFactura")) {
				jButtonModificarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarPlantillaFactura")) {
				jButtonModificarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarPlantillaFactura")) {
				jButtonActualizarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarPlantillaFactura")) {
				jButtonActualizarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarPlantillaFactura")) {
				jButtonActualizarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarPlantillaFactura")) {
				jButtonEliminarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarPlantillaFactura")) {
				jButtonEliminarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarPlantillaFactura")) {
				jButtonEliminarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarPlantillaFactura")) {
				jButtonCancelarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarPlantillaFactura")) {
				jButtonCancelarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarPlantillaFactura")) {
				jButtonCancelarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarPlantillaFactura")) {
				jButtonCerrarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarPlantillaFactura")) {
				jButtonCerrarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarPlantillaFactura")) {
				jButtonCerrarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarPlantillaFactura")) {
				jButtonMostrarOcultarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarPlantillaFactura")) {
				jButtonCancelarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarPlantillaFactura")) {
				jButtonCopiarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarPlantillaFactura")) {
				jButtonVerFormPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarPlantillaFactura")) {
				jButtonCopiarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormPlantillaFactura")) {
				jButtonVerFormPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionPlantillaFactura")) {
				jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarPlantillaFactura")) {
				jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionPlantillaFactura")) {
				jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresPlantillaFactura")) {
				jButtonAnterioresPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarPlantillaFactura")) {
				jButtonAnterioresPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnteriorePlantillaFactura")) {
				jButtonAnterioresPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesPlantillaFactura")) {
				jButtonSiguientesPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarPlantillaFactura")) {
				jButtonSiguientesPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesPlantillaFactura")) {
				jButtonSiguientesPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByPlantillaFactura") || sTipo.equals("MenuItemDetalleAbrirOrderByPlantillaFactura")) {
				jButtonAbrirOrderByPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarPlantillaFactura") || sTipo.equals("MenuItemDetalleMostrarOcultarPlantillaFactura")) {
				jButtonMostrarOcultarPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosPlantillaFactura")) {
				jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarPlantillaFactura")) {
				jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosPlantillaFactura")) {
				jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoPlantillaFactura")) {
				jButtonCerrarReporteDinamicoPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoPlantillaFactura")) {
				jButtonGenerarReporteDinamicoPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoPlantillaFactura")) {
				
				jButtonGenerarExcelReporteDinamicoPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionPlantillaFactura")) {
				jButtonCerrarImportacionPlantillaFacturaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionPlantillaFactura")) {
				
				jButtonGenerarImportacionPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionPlantillaFactura")) {
				
				jButtonAbrirImportacionPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesPlantillaFactura")) {
				jComboBoxTiposAccionesPlantillaFacturaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesPlantillaFactura")) {
				jComboBoxTiposRelacionesPlantillaFacturaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioPlantillaFactura")) {
				jComboBoxTiposAccionesPlantillaFacturaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarPlantillaFactura")) {
				
				jComboBoxTiposSeleccionarPlantillaFacturaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralPlantillaFactura")) {
				jTextFieldValorCampoGeneralPlantillaFacturaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByPlantillaFactura")) {
				jButtonAbrirOrderByPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarPlantillaFactura")) {
				jButtonAbrirOrderByPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByPlantillaFactura")) {
				jButtonCerrarOrderByPlantillaFacturaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idPlantillaFacturaBusqueda")) {
				this.jButtonidPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPlantillaFacturaUpdate")) {
				this.jButtonid_empresaPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPlantillaFacturaBusqueda")) {
				this.jButtonid_empresaPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoPlantillaFacturaBusqueda")) {
				this.jButtoncodigoPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombrePlantillaFacturaBusqueda")) {
				this.jButtonnombrePlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionPlantillaFacturaBusqueda")) {
				this.jButtondescripcionPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_proveedorPlantillaFacturaBusqueda")) {
				this.jButtones_proveedorPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFactura")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableAplicada("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableCreditoBien("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableCreditoServicio("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_bienPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_bienPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFactura")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorCodigoPlantillaFactura")) {
				this.jButtonBusquedaPorCodigoPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNombrePlantillaFactura")) {
				this.jButtonBusquedaPorNombrePlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoBienPlantillaFactura")) {
				this.jButtonFK_IdCuentaContableCreditoBienPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoFinServicioPlantillaFactura")) {
				this.jButtonFK_IdCuentaContableCreditoFinServicioPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionFuenteBienPlantillaFactura")) {
				this.jButtonFK_IdTipoRetencionFuenteBienPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionFuenteServicioPlantillaFactura")) {
				this.jButtonFK_IdTipoRetencionFuenteServicioPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionIvaBienPlantillaFactura")) {
				this.jButtonFK_IdTipoRetencionIvaBienPlantillaFacturaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionIvaServicioPlantillaFactura")) {
				this.jButtonFK_IdTipoRetencionIvaServicioPlantillaFacturaActionPerformed(evt);
			}
			
			;
			
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessPlantillaFactura();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			PlantillaFactura plantillafacturaLocal=null;
			
			if(!this.getEsControlTabla()) {
				plantillafacturaLocal=this.plantillafactura;
			} else {
				plantillafacturaLocal=this.plantillafacturaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
							
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
								
						
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
								
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
							
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
								
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
			
			this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosPlantillaFactura")) {
					jCheckBoxSeleccionarTodosPlantillaFacturaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosPlantillaFactura")) {
					jCheckBoxSeleccionadosPlantillaFacturaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarPlantillaFactura")) {
					
				}
				
				


				
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
												
				
				


				
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPlantillaFacturaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.plantillafactura);
				
				this.actualizarInformacion("INFO_PADRE",false,this.plantillafactura);
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PlantillaFactura.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PlantillaFactura.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPlantillaFacturaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.plantillafacturaAnterior =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarPlantillaFactura")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosPlantillaFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosPlantillaFactura.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.plantillafactura =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.plantillafactura =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.plantillafactura);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarPlantillaFactura")) {
				
				}
				
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarPlantillaFactura")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosPlantillaFactura.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarPlantillaFactura")) {
			
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessPlantillaFactura();
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			if(sTipo.equals("NuevoPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarPlantillaFactura")) {
				jButtonDuplicarPlantillaFacturaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarPlantillaFactura")) {
				jButtonCopiarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormPlantillaFactura")) {
				jButtonVerFormPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesPlantillaFactura")) {
				jButtonNuevoPlantillaFacturaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarPlantillaFactura")) {
				jButtonModificarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarPlantillaFactura")) {
				jButtonActualizarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarPlantillaFactura")) {
				jButtonEliminarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarPlantillaFactura")) {
				jButtonCancelarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarPlantillaFactura")) {
				jButtonCerrarPlantillaFacturaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosPlantillaFactura")) {
				jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosPlantillaFactura")) {
				jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByPlantillaFactura")) {
				jButtonAbrirOrderByPlantillaFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionPlantillaFactura")) {
				jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresPlantillaFactura")) {
				jButtonAnterioresPlantillaFacturaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesPlantillaFactura")) {
				jButtonSiguientesPlantillaFacturaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idPlantillaFacturaBusqueda")) {
				this.jButtonidPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPlantillaFacturaUpdate")) {
				this.jButtonid_empresaPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPlantillaFacturaBusqueda")) {
				this.jButtonid_empresaPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoPlantillaFacturaBusqueda")) {
				this.jButtoncodigoPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombrePlantillaFacturaBusqueda")) {
				this.jButtonnombrePlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionPlantillaFacturaBusqueda")) {
				this.jButtondescripcionPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_proveedorPlantillaFacturaBusqueda")) {
				this.jButtones_proveedorPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFactura")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableAplicada("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_aplicadaPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableCreditoBien("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFactura")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableCreditoServicio("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_bienPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_bienPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_bienPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_servicioPlantillaFacturaUpdate")) {
				this.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva_servicioPlantillaFacturaBusqueda")) {
				this.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFactura")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaUpdate")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoPlantillaFacturaBusqueda")) {
				this.jButtonid_cuenta_contable_gastoPlantillaFacturaBusquedaActionPerformed(evt);
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessPlantillaFactura();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFramePlantillaFactura")) {
				closingInternalFramePlantillaFactura();
				
			} else if(sTipo.equals("jButtonCancelarPlantillaFactura")) {
				JInternalFrameBase jInternalFrameDetalleFormPlantillaFactura = (JInternalFrameBase)evt.getSource();
	            	
	            PlantillaFacturaBeanSwingJInternalFrame jInternalFrameParent=(PlantillaFacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormPlantillaFactura.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarPlantillaFacturaActionPerformed(null);
			}
			
			PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.plantillafactura,new Object(),this.plantillafacturaParameterGeneral,this.plantillafacturaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormPlantillaFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormPlantillaFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormPlantillaFactura(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.plantillafactura)) {
			if(!esControlTabla) {
				if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);			
				}
				
				if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualPlantillaFactura(this.plantillafactura,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.plantillafacturaReturnGeneral=plantillafacturaLogic.procesarEventosPlantillaFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.plantillafacturaLogic.getPlantillaFacturas(),this.plantillafactura,this.plantillafacturaParameterGeneral,this.isEsNuevoPlantillaFactura,classes);//this.plantillafacturaLogic.getPlantillaFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanPlantillaFactura(this.plantillafacturaReturnGeneral,this.plantillafacturaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanPlantillaFactura(classes,this.plantillafacturaReturnGeneral,this.plantillafacturaBean,false);
					}
						
					if(this.plantillafacturaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura());	
					}
						
					if(this.plantillafacturaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura(),classes);//this.plantillafacturaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioPlantillaFactura(this.plantillafactura,classes);//this.plantillafacturaBean);									
				}
			
				if(PlantillaFacturaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualPlantillaFactura(this.plantillafactura,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPlantillaFactura(this.plantillafactura);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.plantillafacturaAnterior!=null) {
						this.plantillafactura=this.plantillafacturaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.plantillafacturaReturnGeneral=plantillafacturaLogic.procesarEventosPlantillaFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.plantillafacturaLogic.getPlantillaFacturas(),this.plantillafactura,this.plantillafacturaParameterGeneral,this.isEsNuevoPlantillaFactura,classes);//this.plantillafacturaLogic.getPlantillaFactura()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.plantillafacturaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.plantillafacturaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.plantillafacturaReturnGeneral.getPlantillaFactura(),plantillafacturaLogic.getPlantillaFacturas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.plantillafacturaReturnGeneral.getPlantillaFactura(),this.plantillafacturas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosPlantillaFactura.repaint();
				
				//((AbstractTableModel) this.jTableDatosPlantillaFactura.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosPlantillaFactura();
			}
		}
	}
	
	public void actualizarVisualTableDatosPlantillaFactura() throws Exception {
		
		PlantillaFacturaModel plantillafacturaModel=(PlantillaFacturaModel)this.jTableDatosPlantillaFactura.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			plantillafacturaModel.plantillafacturas=this.plantillafacturaLogic.getPlantillaFacturas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			plantillafacturaModel.plantillafacturas=this.plantillafacturas;
		}
		
		
		((PlantillaFacturaModel) this.jTableDatosPlantillaFactura.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaPlantillaFactura() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getplantillafacturaAnterior(),this.plantillafacturaLogic.getPlantillaFacturas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getplantillafacturaAnterior(),this.plantillafacturas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosPlantillaFactura();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioPlantillaFactura(PlantillaFactura plantillafactura,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.plantillafactura,new Object(),generalEntityParameterGeneral,this.plantillafacturaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.plantillafacturaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=PlantillaFacturaConstantesFunciones.getClassesRelationshipsOfPlantillaFactura(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=PlantillaFacturaConstantesFunciones.getClassesRelationshipsFromStringsOfPlantillaFactura(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormPlantillaFactura(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				PlantillaFacturaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.plantillafactura,new Object(),generalEntityParameterGeneral,this.plantillafacturaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioPlantillaFactura(PlantillaFacturaBean plantillafacturaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanPlantillaFactura(ArrayList<Classe> classes,PlantillaFacturaReturnGeneral plantillafacturaReturnGeneral,PlantillaFacturaBean plantillafacturaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualPlantillaFactura(PlantillaFactura plantillafactura,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.plantillafactura)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormPlantillaFactura = new PlantillaFacturaDetalleFormJInternalFrame(jDesktopPane,this.plantillafacturaSessionBean.getConGuardarRelaciones(),this.plantillafacturaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.setVisible(false);
		this.jInternalFrameDetalleFormPlantillaFactura.setSelected(false);						
		
		this.jInternalFrameDetalleFormPlantillaFactura.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormPlantillaFactura.plantillafacturaLogic=this.plantillafacturaLogic;
		
		this.cargarCombosFrameForeignKeyPlantillaFactura("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetallePlantillaFactura();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePlantillaFactura();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyPlantillaFactura("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyPlantillaFactura();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormPlantillaFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPlantillaFactura"));
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ModificarPlantillaFactura"));

		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarPlantillaFactura"));
					
		this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemModificarPlantillaFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarPlantillaFactura"));		
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.addActionListener (new ButtonActionListener(this,"ActualizarPlantillaFactura"));
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPlantillaFactura"));
						
		this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemActualizarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPlantillaFactura"));		
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.addActionListener (new ButtonActionListener(this,"EliminarPlantillaFactura"));
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarPlantillaFactura"));
								
		this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemEliminarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPlantillaFactura"));		
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CancelarPlantillaFactura"));
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarPlantillaFactura"));
					
		this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemCancelarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPlantillaFactura"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemDetalleCerrarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPlantillaFactura"));		
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPlantillaFactura"));
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPlantillaFactura"));
		
		
		
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPlantillaFactura"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonidPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtoncodigoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigoPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonnombrePlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombrePlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtondescripcionPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtones_proveedorPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_proveedorPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFactura"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableAplicada("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoBien("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoServicio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFactura"));
		//jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPlantillaFactura"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFramePlantillaFactura"));
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPlantillaFactura"));
		}
		
		this.jTableDatosPlantillaFactura.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarPlantillaFactura"));
		
		this.jTableDatosPlantillaFactura.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarPlantillaFactura"));
		
		this.jButtonNuevoPlantillaFactura.addActionListener(new ButtonActionListener(this,"NuevoPlantillaFactura"));
		
		this.jButtonDuplicarPlantillaFactura.addActionListener(new ButtonActionListener(this,"DuplicarPlantillaFactura"));
		
		this.jButtonCopiarPlantillaFactura.addActionListener(new ButtonActionListener(this,"CopiarPlantillaFactura"));
		
		this.jButtonVerFormPlantillaFactura.addActionListener(new ButtonActionListener(this,"VerFormPlantillaFactura"));
		
		
		this.jButtonNuevoToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"NuevoToolBarPlantillaFactura"));
			
		this.jButtonDuplicarToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"DuplicarToolBarPlantillaFactura"));
			
		this.jMenuItemNuevoPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoPlantillaFactura"));
			
		this.jMenuItemDuplicarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarPlantillaFactura"));		
		
		
		this.jButtonNuevoRelacionesPlantillaFactura.addActionListener (new ButtonActionListener(this,"NuevoRelacionesPlantillaFactura"));
		
		
		this.jButtonNuevoRelacionesToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarPlantillaFactura"));
			
		this.jMenuItemNuevoRelacionesPlantillaFactura.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesPlantillaFactura"));		
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ModificarPlantillaFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonModificarToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ModificarToolBarPlantillaFactura"));
			
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemModificarPlantillaFactura.addActionListener(new ButtonActionListener(this,"MenuItemModificarPlantillaFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarPlantillaFactura.addActionListener (new ButtonActionListener(this,"ActualizarPlantillaFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonActualizarToolBarPlantillaFactura.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPlantillaFactura"));
				
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemActualizarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPlantillaFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarPlantillaFactura.addActionListener (new ButtonActionListener(this,"EliminarPlantillaFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonEliminarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"EliminarToolBarPlantillaFactura"));
						
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemEliminarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPlantillaFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CancelarPlantillaFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonCancelarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CancelarToolBarPlantillaFactura"));
			
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemCancelarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPlantillaFactura"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarPlantillaFactura"));		
		
		
		this.jButtonCerrarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CerrarPlantillaFactura"));
		
		
		this.jButtonCerrarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CerrarToolBarPlantillaFactura"));
			
		this.jMenuItemCerrarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemCerrarPlantillaFactura"));
			
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jMenuItemDetalleCerrarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPlantillaFactura"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosPlantillaFactura"));
		}
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPlantillaFactura"));
		}
		
		this.jButtonCopiarToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"CopiarToolBarPlantillaFactura"));
			
		this.jButtonVerFormToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"VerFormToolBarPlantillaFactura"));
		
		this.jMenuItemGuardarCambiosPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosPlantillaFactura"));
			
		this.jMenuItemCopiarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemCopiarPlantillaFactura"));		
		
		this.jMenuItemVerFormPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemVerFormPlantillaFactura"));		
		
		
		this.jButtonGuardarCambiosTablaPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPlantillaFactura"));
		
		
		this.jButtonGuardarCambiosTablaToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarPlantillaFactura"));
			
		this.jMenuItemGuardarCambiosTablaPlantillaFactura.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPlantillaFactura"));		
		
		
		
		this.jButtonRecargarInformacionPlantillaFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionPlantillaFactura"));
					
		this.jButtonRecargarInformacionToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarPlantillaFactura"));
		
		this.jMenuItemRecargarInformacionPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionPlantillaFactura"));		
		
		
		
		this.jButtonAnterioresPlantillaFactura.addActionListener (new ButtonActionListener(this,"AnterioresPlantillaFactura"));
		
		
		this.jButtonAnterioresToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"AnterioresToolBarPlantillaFactura"));
		
		this.jMenuItemAnterioresPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresPlantillaFactura"));		
		
		
		this.jButtonSiguientesPlantillaFactura.addActionListener (new ButtonActionListener(this,"SiguientesPlantillaFactura"));
		
		
		this.jButtonSiguientesToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"SiguientesToolBarPlantillaFactura"));
			
		this.jMenuItemSiguientesPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesPlantillaFactura"));
			
		this.jMenuItemAbrirOrderByPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByPlantillaFactura"));
			
		this.jMenuItemMostrarOcultarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarPlantillaFactura"));
			
		this.jMenuItemDetalleAbrirOrderByPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByPlantillaFactura"));
			
		this.jMenuItemDetalleMostarOcultarPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarPlantillaFactura"));		
		
		
		this.jButtonNuevoGuardarCambiosPlantillaFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosPlantillaFactura"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarPlantillaFactura"));
			
		this.jMenuItemNuevoGuardarCambiosPlantillaFactura.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosPlantillaFactura"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosPlantillaFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosPlantillaFactura"));

		this.jCheckBoxSeleccionadosPlantillaFactura.addItemListener(new CheckBoxItemListener(this,"SeleccionadosPlantillaFactura"));
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPlantillaFactura"));
		}
		
		
		this.jComboBoxTiposRelacionesPlantillaFactura.addActionListener (new ButtonActionListener(this,"TiposRelacionesPlantillaFactura"));
			
		this.jComboBoxTiposAccionesPlantillaFactura.addActionListener (new ButtonActionListener(this,"TiposAccionesPlantillaFactura"));
					
		this.jComboBoxTiposSeleccionarPlantillaFactura.addActionListener (new ButtonActionListener(this,"TiposSeleccionarPlantillaFactura"));
			
		this.jTextFieldValorCampoGeneralPlantillaFactura.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralPlantillaFactura"));		
		
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonidPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtoncodigoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigoPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonnombrePlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombrePlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtondescripcionPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtones_proveedorPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_proveedorPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFactura"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableAplicada("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoBien("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoServicio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFactura"));
		//jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoPlantillaFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoPlantillaFactura"));

			this.jButtonBusquedaPorNombrePlantillaFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorNombrePlantillaFactura"));

			this.jButtonFK_IdCuentaContableCreditoBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoBienPlantillaFactura"));

			this.jButtonBuscarFK_IdCuentaContableCreditoBienid_cuenta_contable_credito_bienPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFactura"));

			this.jButtonFK_IdCuentaContableCreditoFinServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFinServicioPlantillaFactura"));

			this.jButtonBuscarFK_IdCuentaContableCreditoFinServicioid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFactura"));

			this.jButtonFK_IdTipoRetencionFuenteBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuenteBienPlantillaFactura"));

			this.jButtonFK_IdTipoRetencionFuenteServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuenteServicioPlantillaFactura"));

			this.jButtonFK_IdTipoRetencionIvaBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaBienPlantillaFactura"));

			this.jButtonFK_IdTipoRetencionIvaServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaServicioPlantillaFactura"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoPlantillaFactura!=null) {
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPlantillaFactura"));
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPlantillaFactura"));
				this.jInternalFrameReporteDinamicoPlantillaFactura.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPlantillaFactura"));
			}
			
			//this.jButtonCerrarReporteDinamicoPlantillaFactura.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPlantillaFactura"));				
			//this.jButtonGenerarReporteDinamicoPlantillaFactura.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPlantillaFactura"));
			//this.jButtonGenerarExcelReporteDinamicoPlantillaFactura.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPlantillaFactura"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionPlantillaFactura!=null) {
				this.jInternalFrameImportacionPlantillaFactura.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPlantillaFactura"));
				this.jInternalFrameImportacionPlantillaFactura.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPlantillaFactura"));
				this.jInternalFrameImportacionPlantillaFactura.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPlantillaFactura"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByPlantillaFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByPlantillaFactura"));
			
			this.jButtonAbrirOrderByToolBarPlantillaFactura.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarPlantillaFactura"));			
			
			if(this.jInternalFrameOrderByPlantillaFactura!=null) {
				this.jInternalFrameOrderByPlantillaFactura.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPlantillaFactura"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPlantillaFactura.jTabbedPaneRelacionesPlantillaFactura.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPlantillaFactura"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFramePlantillaFactura();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormPlantillaFactura.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormPlantillaFactura = (JInternalFrameBase)event.getSource();
	            	
	            PlantillaFacturaBeanSwingJInternalFrame jInternalFrameParent=(PlantillaFacturaBeanSwingJInternalFrame)jInternalFrameDetalleFormPlantillaFactura.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarPlantillaFacturaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosPlantillaFactura.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosPlantillaFacturaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosPlantillaFactura.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosPlantillaFactura.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoPlantillaFactura";
		inputMap = this.jButtonNuevoPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPlantillaFacturaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPlantillaFacturaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesPlantillaFactura";
		inputMap = this.jButtonNuevoRelacionesPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPlantillaFacturaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarPlantillaFactura";
		inputMap = this.jButtonModificarPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarPlantillaFactura";
		inputMap = this.jButtonActualizarPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarPlantillaFactura";
		inputMap = this.jButtonEliminarPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarPlantillaFactura";
		inputMap = this.jButtonCancelarPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarPlantillaFactura";
		inputMap = this.jButtonCerrarPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosPlantillaFactura";
		inputMap = this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonGuardarCambiosPlantillaFactura.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosPlantillaFacturaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosPlantillaFactura.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosPlantillaFacturaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesPlantillaFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesPlantillaFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarPlantillaFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarPlantillaFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralPlantillaFactura.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralPlantillaFacturaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonidPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"idPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_empresaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtoncodigoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"codigoPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonnombrePlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"nombrePlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtondescripcionPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionPlantillaFacturaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtones_proveedorPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"es_proveedorPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_aplicadaPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFactura"));
		//jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableAplicada("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_aplicadaPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_bienPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoBien("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_servicioPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFactura"));
		//jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoServicio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente_servicioPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_bienPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_bienPlantillaFacturaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_tipo_retencion_iva_servicioPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva_servicioPlantillaFacturaBusqueda"));
		//jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoPlantillaFacturaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFactura"));
		//jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFacturaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoPlantillaFacturaBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoPlantillaFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoPlantillaFactura"));

		this.jButtonBusquedaPorNombrePlantillaFactura.addActionListener(new ButtonActionListener(this,"BusquedaPorNombrePlantillaFactura"));

		this.jButtonFK_IdCuentaContableCreditoBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoBienPlantillaFactura"));

		this.jButtonBuscarFK_IdCuentaContableCreditoBienid_cuenta_contable_credito_bienPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_bienPlantillaFactura"));

		this.jButtonFK_IdCuentaContableCreditoFinServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFinServicioPlantillaFactura"));

		this.jButtonBuscarFK_IdCuentaContableCreditoFinServicioid_cuenta_contable_credito_servicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_servicioPlantillaFactura"));

		this.jButtonFK_IdTipoRetencionFuenteBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuenteBienPlantillaFactura"));

		this.jButtonFK_IdTipoRetencionFuenteServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuenteServicioPlantillaFactura"));

		this.jButtonFK_IdTipoRetencionIvaBienPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaBienPlantillaFactura"));

		this.jButtonFK_IdTipoRetencionIvaServicioPlantillaFactura.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaServicioPlantillaFactura"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionPlantillaFactura.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionPlantillaFacturaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarPlantillaFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarPlantillaFactura.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosPlantillaFactura(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
					plantillafacturaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PlantillaFactura plantillafacturaAux:plantillafacturas) {
					plantillafacturaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosPlantillaFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
						plantillafacturaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PlantillaFactura plantillafacturaAux:plantillafacturas) {
						plantillafacturaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
					
						if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR)) {
							existe=true;
							plantillafacturaAux.setes_proveedor(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PlantillaFactura plantillafacturaAux:plantillafacturas) {
						
						if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR)) {
							existe=true;
							plantillafacturaAux.setes_proveedor(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPlantillaFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPlantillaFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosPlantillaFacturaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosPlantillaFactura.getSelectedRows();
			
			PlantillaFactura plantillafacturaLocal=new PlantillaFactura();
			
			//this.seleccionarTodosPlantillaFactura(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLocal =(PlantillaFactura) this.plantillafacturaLogic.getPlantillaFacturas().toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					plantillafacturaLocal =(PlantillaFactura) this.plantillafacturas.toArray()[this.jTableDatosPlantillaFactura.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				plantillafacturaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
						plantillafacturaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PlantillaFactura plantillafacturaAux:plantillafacturas) {
						plantillafacturaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPlantillaFactura.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPlantillaFactura.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPlantillaFactura,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualPlantillaFacturaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarPlantillaFacturaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralPlantillaFacturaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralPlantillaFactura.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PlantillaFactura plantillafacturaAux:this.plantillafacturaLogic.getPlantillaFacturas()) {
				
						if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							plantillafacturaAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							plantillafacturaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							plantillafacturaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PlantillaFactura plantillafacturaAux:plantillafacturas) {
					
						if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							plantillafacturaAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							plantillafacturaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							plantillafacturaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaPlantillaFactura(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesPlantillaFacturaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioPlantillaFactura=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesPlantillaFactura.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReportePlantillaFactura) {				
					conSplash=true;//false;										
					
					//this.startProcessPlantillaFactura(conSplash);
				
					this.generarReportePlantillaFacturasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoPlantillaFacturasSeleccionados();
				//this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPlantillaFacturasSeleccionados(false);
				//this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPlantillaFacturasSeleccionados(true);
				//this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPlantillaFactura();
				
				this.exportarPlantillaFacturasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionPlantillaFacturas();
				//this.importarPlantillaFacturas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPlantillaFactura();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelPlantillaFacturasSeleccionados();
				//this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Plantilla Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessPlantillaFactura();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoPlantillaFactura)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyPlantillaFactura(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
				}	
			} 			
			else if(PlantillaFacturaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReportePlantillaFactura) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessPlantillaFactura(conSplash);
					
						//this.actualizarParametrosGeneralPlantillaFactura();
						
						this.generarReporteProcesoAccionPlantillaFacturasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(PlantillaFacturaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Plantilla FacturaS SELECCIONADOS?", "MANTENIMIENTO DE Plantilla Factura", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessPlantillaFactura();
				
						this.actualizarParametrosGeneralPlantillaFactura();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.plantillafacturaReturnGeneral=plantillafacturaLogic.procesarAccionPlantillaFacturasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.plantillafacturaLogic.getPlantillaFacturas(),this.plantillafacturaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarPlantillaFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralPlantillaFactura();
					
					PlantillaFacturaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarPlantillaFacturaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPlantillaFactura.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxTiposAccionesFormularioPlantillaFactura.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessPlantillaFactura(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesPlantillaFacturaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessPlantillaFactura();
			
			if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
			PlantillaFactura plantillafactura=new PlantillaFactura();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingPlantillaFactura(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesPlantillaFactura.getSelectedItem();
			
			
			
			
			plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
			//this.sTipoAccion;
			
			if(plantillafacturasSeleccionados.size()==1) {
				for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
					plantillafactura=plantillafacturaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessPlantillaFactura();
			
      		//this.finishProcessPlantillaFactura(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarPlantillaFacturaReturnGeneral() throws Exception {
		if(this.plantillafacturaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.plantillafacturaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.plantillafacturaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.plantillafacturaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.plantillafacturaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.plantillafacturaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingPlantillaFactura(false);
		}
		
		if(this.plantillafacturaReturnGeneral.getConRetornoLista() || this.plantillafacturaReturnGeneral.getConRetornoObjeto()) {
			if(this.plantillafacturaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.plantillafacturaLogic.setPlantillaFacturas(this.plantillafacturaReturnGeneral.getPlantillaFacturas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.plantillafacturaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.plantillafacturaLogic.setPlantillaFactura(this.plantillafacturaReturnGeneral.getPlantillaFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingPlantillaFactura(false);
		}
	}
	
	public void actualizarParametrosGeneralPlantillaFactura() throws Exception {
		
		
	}
	
	public ArrayList<PlantillaFactura> getPlantillaFacturasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioPlantillaFactura) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(PlantillaFactura plantillafacturaAux:plantillafacturaLogic.getPlantillaFacturas()) {
					if(plantillafacturaAux.getIsSelected()) {
						plantillafacturasSeleccionados.add(plantillafacturaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PlantillaFactura plantillafacturaAux:this.plantillafacturas) {
					if(plantillafacturaAux.getIsSelected()) {
						plantillafacturasSeleccionados.add(plantillafacturaAux);				
					}
				}
			}
			
			if(plantillafacturasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						plantillafacturasSeleccionados.addAll(this.plantillafacturaLogic.getPlantillaFacturas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						plantillafacturasSeleccionados.addAll(this.plantillafacturas);				
					}
				}
			}
		} else {
			plantillafacturasSeleccionados.add(this.plantillafactura);
		}
		
		return plantillafacturasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReportePlantillaFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalPlantillaFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoPlantillaFacturasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPlantillaFacturasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPlantillaFacturasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Plantilla Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados);
		
	}	
	
	public void generarReporteNormalPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionPlantillaFacturasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		
		this.abrirInicializarFrameReporteDinamicoPlantillaFactura();
		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoPlantillaFactura();
		
		
		//this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados ,plantillafacturaImplementable,plantillafacturaImplementableHome);
	}
	
	public void mostrarImportacionPlantillaFacturas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionPlantillaFactura();
		
		this.abrirFrameImportacionPlantillaFactura();		
		
			
		//this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados ,plantillafacturaImplementable,plantillafacturaImplementableHome);
	}
	
	public void importarPlantillaFacturas() throws Exception {		
	
	}
	
	public void exportarPlantillaFacturasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelPlantillaFacturasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoPlantillaFacturasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlPlantillaFacturasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Plantilla Factura",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarPlantillaFactura(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarPlantillaFactura(plantillafacturaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//plantillafacturaAux.setsDetalleGeneralEntityReporte(plantillafacturaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarPlantillaFactura(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarPlantillaFactura(PlantillaFactura plantillafactura,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=plantillafactura.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getes_proveedor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getcuentacontableaplicada_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getcuentacontablecreditobien_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getcuentacontablecreditoservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.gettiporetencionfuentebien_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.gettiporetencionfuenteservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.gettiporetencionivabien_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.gettiporetencionivaservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=plantillafactura.getcuentacontablegasto_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("PlantillaFacturas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelPlantillaFactura(row);				
				iRow++;
			}				
			
			for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelPlantillaFactura(plantillafacturaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlPlantillaFacturasSeleccionados() throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();		
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"plantillafactura.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("plantillafacturas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("plantillafactura");
			//elementRoot.appendChild(element);
		
			for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
				element = document.createElement("plantillafactura");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlPlantillaFactura(plantillafacturaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Plantilla Factura",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelPlantillaFactura(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelPlantillaFactura(PlantillaFactura plantillafactura,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getes_proveedor());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getcuentacontableaplicada_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getcuentacontablecreditobien_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getcuentacontablecreditoservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.gettiporetencionfuentebien_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.gettiporetencionfuenteservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.gettiporetencionivabien_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.gettiporetencionivaservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(plantillafactura.getcuentacontablegasto_descripcion());				
	}
	
	public void setFilaDatosExportarXmlPlantillaFactura(PlantillaFactura plantillafactura,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(PlantillaFacturaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(plantillafactura.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(PlantillaFacturaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(plantillafactura.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(plantillafactura.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementcodigo = document.createElement(PlantillaFacturaConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(plantillafactura.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(PlantillaFacturaConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(plantillafactura.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementdescripcion = document.createElement(PlantillaFacturaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(plantillafactura.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementes_proveedor = document.createElement(PlantillaFacturaConstantesFunciones.ESPROVEEDOR);
		elementes_proveedor.appendChild(document.createTextNode(plantillafactura.getes_proveedor().toString().trim()));
		element.appendChild(elementes_proveedor);

		Element elementcuentacontableaplicada_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLEAPLICADA);
		elementcuentacontableaplicada_descripcion.appendChild(document.createTextNode(plantillafactura.getcuentacontableaplicada_descripcion()));
		element.appendChild(elementcuentacontableaplicada_descripcion);

		Element elementcuentacontablecreditobien_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLECREDITOBIEN);
		elementcuentacontablecreditobien_descripcion.appendChild(document.createTextNode(plantillafactura.getcuentacontablecreditobien_descripcion()));
		element.appendChild(elementcuentacontablecreditobien_descripcion);

		Element elementcuentacontablecreditoservicio_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLECREDITOSERVICIO);
		elementcuentacontablecreditoservicio_descripcion.appendChild(document.createTextNode(plantillafactura.getcuentacontablecreditoservicio_descripcion()));
		element.appendChild(elementcuentacontablecreditoservicio_descripcion);

		Element elementtiporetencionfuentebien_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONFUENTEBIEN);
		elementtiporetencionfuentebien_descripcion.appendChild(document.createTextNode(plantillafactura.gettiporetencionfuentebien_descripcion()));
		element.appendChild(elementtiporetencionfuentebien_descripcion);

		Element elementtiporetencionfuenteservicio_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONFUENTESERVICIO);
		elementtiporetencionfuenteservicio_descripcion.appendChild(document.createTextNode(plantillafactura.gettiporetencionfuenteservicio_descripcion()));
		element.appendChild(elementtiporetencionfuenteservicio_descripcion);

		Element elementtiporetencionivabien_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONIVABIEN);
		elementtiporetencionivabien_descripcion.appendChild(document.createTextNode(plantillafactura.gettiporetencionivabien_descripcion()));
		element.appendChild(elementtiporetencionivabien_descripcion);

		Element elementtiporetencionivaservicio_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDTIPORETENCIONIVASERVICIO);
		elementtiporetencionivaservicio_descripcion.appendChild(document.createTextNode(plantillafactura.gettiporetencionivaservicio_descripcion()));
		element.appendChild(elementtiporetencionivaservicio_descripcion);

		Element elementcuentacontablegasto_descripcion = document.createElement(PlantillaFacturaConstantesFunciones.IDCUENTACONTABLEGASTO);
		elementcuentacontablegasto_descripcion.appendChild(document.createTextNode(plantillafactura.getcuentacontablegasto_descripcion()));
		element.appendChild(elementcuentacontablegasto_descripcion);
	}
	
	public void generarReporteGroupGenericoPlantillaFacturasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<PlantillaFactura> plantillafacturasSeleccionados=new ArrayList<PlantillaFactura>();
		
		plantillafacturasSeleccionados=this.getPlantillaFacturasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoPlantillaFactura(plantillafacturasSeleccionados);
		
		this.generarReportePlantillaFacturas("Todos",plantillafacturasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoPlantillaFactura(ArrayList<PlantillaFactura> plantillafacturasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(PlantillaFactura plantillafacturaAux:plantillafacturasSeleccionados) {
				plantillafacturaAux.setsDetalleGeneralEntityReporte(plantillafacturaAux.toString());
			
				if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_ESPROVEEDOR)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(plantillafacturaAux.getes_proveedor()));
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEAPLICADA)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getcuentacontableaplicada_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOBIEN)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getcuentacontablecreditobien_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOSERVICIO)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getcuentacontablecreditoservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTEBIEN)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.gettiporetencionfuentebien_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONFUENTESERVICIO)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.gettiporetencionfuenteservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVABIEN)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.gettiporetencionivabien_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDTIPORETENCIONIVASERVICIO)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.gettiporetencionivaservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PlantillaFacturaConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO)) {
					existe=true;
					plantillafacturaAux.setsDescripcionGeneralEntityReporte1(plantillafacturaAux.getcuentacontablegasto_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PlantillaFacturaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesPlantillaFactura(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoPlantillaFactura=true;
				this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=true;
				this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=true;
			}
			
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=true;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=true;
			this.isVisibilidadCeldaEliminarPlantillaFactura=true;
			this.isVisibilidadCeldaCancelarPlantillaFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=true;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=true;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=true;
			this.isVisibilidadCeldaModificarPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=true;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
			this.isVisibilidadCeldaModificarPlantillaFactura=true;
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
			this.isVisibilidadCeldaCancelarPlantillaFactura=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				} else {
					this.isVisibilidadCeldaGuardarPlantillaFactura=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(PlantillaFacturaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoPlantillaFactura=true;
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=true;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=true;
		} else {
			this.actualizarEstadoPanelsPlantillaFactura(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarPlantillaFactura=false;
			//this.isVisibilidadCeldaVerFormPlantillaFactura=false;
			this.isVisibilidadCeldaDuplicarPlantillaFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!plantillafacturaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
		} else {
			this.isVisibilidadCeldaNuevoPlantillaFactura=false;
			this.isVisibilidadCeldaGuardarCambiosPlantillaFactura=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			if(!plantillafacturaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;												
			}
			
			this.jButtonCerrarPlantillaFactura.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesPlantillaFactura=false;
		}
		
		if(!this.permiteMantenimiento(this.plantillafactura)) {
			this.isVisibilidadCeldaActualizarPlantillaFactura=false;
			this.isVisibilidadCeldaEliminarPlantillaFactura=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesPlantillaFactura() {
	}
	
	public void actualizarEstadoPanelsPlantillaFactura(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionPlantillaFactura!=null) {
				this.jScrollPanelDatosEdicionPlantillaFactura.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPlantillaFactura!=null) {
				this.jScrollPanelDatosPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelPaginacionPlantillaFactura!=null) {
				this.jPanelPaginacionPlantillaFactura.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
					this.jTabbedPaneBusquedasPlantillaFactura.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.plantillafacturaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPlantillaFactura!=null) {
				this.jTabbedPaneBusquedasPlantillaFactura.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesPlantillaFactura!=null) {
				this.jPanelParametrosReportesPlantillaFactura.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableAplicada(Boolean isParaCuentaContableAplicada){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableAplicadaNegation=!isParaCuentaContableAplicada;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaCuentaContableAplicadaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoBien(Boolean isParaCuentaContableCreditoBien){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoBienNegation=!isParaCuentaContableCreditoBien;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaCuentaContableCreditoBien;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaCuentaContableCreditoBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoServicio(Boolean isParaCuentaContableCreditoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoServicioNegation=!isParaCuentaContableCreditoServicio;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaCuentaContableCreditoServicio;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaCuentaContableCreditoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionFuenteBien(Boolean isParaTipoRetencionFuenteBien){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionFuenteBienNegation=!isParaTipoRetencionFuenteBien;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaTipoRetencionFuenteBien;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaTipoRetencionFuenteBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionFuenteServicio(Boolean isParaTipoRetencionFuenteServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionFuenteServicioNegation=!isParaTipoRetencionFuenteServicio;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaTipoRetencionFuenteServicio;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaTipoRetencionFuenteServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIvaBien(Boolean isParaTipoRetencionIvaBien){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIvaBienNegation=!isParaTipoRetencionIvaBien;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaTipoRetencionIvaBien;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaTipoRetencionIvaBienNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIvaServicio(Boolean isParaTipoRetencionIvaServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIvaServicioNegation=!isParaTipoRetencionIvaServicio;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaTipoRetencionIvaServicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaTipoRetencionIvaServicio;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableGasto(Boolean isParaCuentaContableGasto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableGastoNegation=!isParaCuentaContableGasto;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorCodigoPlantillaFactura);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelBusquedaPorNombrePlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoBien=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);}

			this.isVisibilidadFK_IdCuentaContableCreditoFinServicio=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFinServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteBien=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionFuenteServicio=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuenteServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaBien=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaBien) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);}

			this.isVisibilidadFK_IdTipoRetencionIvaServicio=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIvaServicio) {this.jTabbedPaneBusquedasPlantillaFactura.remove(jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);}
		}
		
	}
	
	
	
	

	public String registrarSesionPlantillaFacturaParaBusquedaCuentaContableAplicadas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(plantillafacturaSessionBean==null) {
				plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(cuentacontableaplicadaSessionBean==null) {
				cuentacontableaplicadaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableaplicadaSessionBean.setsPathNavegacionActual(plantillafacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableaplicadaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableaplicadaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableaplicadaSessionBean.getisPaginaPopup();
			cuentacontableaplicadaSessionBean.setisPaginaPopup(false);
			cuentacontableaplicadaSessionBean.setEstaModoBusqueda(true);
			cuentacontableaplicadaSessionBean.setsFuncionBusquedaRapida("window.opener.plantillafacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_aplicada(TO_REPLACE);");
			cuentacontableaplicadaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableaplicadaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(PlantillaFacturaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionPlantillaFactura(true);
			//cuentacontableSessionBean.setlidPlantillaFacturaActual(this.idPlantillaFacturaActual);

			plantillafacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPlantillaFactura(true);
			plantillafacturaSessionBean.setlIdPlantillaFacturaActualForeignKey(this.idPlantillaFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionPlantillaFacturaParaBusquedaCuentaContableCreditoBiens() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(plantillafacturaSessionBean==null) {
				plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(cuentacontablecreditobienSessionBean==null) {
				cuentacontablecreditobienSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditobienSessionBean.setsPathNavegacionActual(plantillafacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditobienSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditobienSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditobienSessionBean.getisPaginaPopup();
			cuentacontablecreditobienSessionBean.setisPaginaPopup(false);
			cuentacontablecreditobienSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditobienSessionBean.setsFuncionBusquedaRapida("window.opener.plantillafacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_bien(TO_REPLACE);");
			cuentacontablecreditobienSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditobienSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(PlantillaFacturaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionPlantillaFactura(true);
			//cuentacontableSessionBean.setlidPlantillaFacturaActual(this.idPlantillaFacturaActual);

			plantillafacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPlantillaFactura(true);
			plantillafacturaSessionBean.setlIdPlantillaFacturaActualForeignKey(this.idPlantillaFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionPlantillaFacturaParaBusquedaCuentaContableCreditoServicios() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(plantillafacturaSessionBean==null) {
				plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(cuentacontablecreditoservicioSessionBean==null) {
				cuentacontablecreditoservicioSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditoservicioSessionBean.setsPathNavegacionActual(plantillafacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditoservicioSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditoservicioSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditoservicioSessionBean.getisPaginaPopup();
			cuentacontablecreditoservicioSessionBean.setisPaginaPopup(false);
			cuentacontablecreditoservicioSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditoservicioSessionBean.setsFuncionBusquedaRapida("window.opener.plantillafacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_servicio(TO_REPLACE);");
			cuentacontablecreditoservicioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditoservicioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(PlantillaFacturaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionPlantillaFactura(true);
			//cuentacontableSessionBean.setlidPlantillaFacturaActual(this.idPlantillaFacturaActual);

			plantillafacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPlantillaFactura(true);
			plantillafacturaSessionBean.setlIdPlantillaFacturaActualForeignKey(this.idPlantillaFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionPlantillaFacturaParaBusquedaCuentaContableGastos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(plantillafacturaSessionBean==null) {
				plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			if(cuentacontablegastoSessionBean==null) {
				cuentacontablegastoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablegastoSessionBean.setsPathNavegacionActual(plantillafacturaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablegastoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablegastoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablegastoSessionBean.getisPaginaPopup();
			cuentacontablegastoSessionBean.setisPaginaPopup(false);
			cuentacontablegastoSessionBean.setEstaModoBusqueda(true);
			cuentacontablegastoSessionBean.setsFuncionBusquedaRapida("window.opener.plantillafacturaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto(TO_REPLACE);");
			cuentacontablegastoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablegastoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(PlantillaFacturaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionPlantillaFactura(true);
			//cuentacontableSessionBean.setlidPlantillaFacturaActual(this.idPlantillaFacturaActual);

			plantillafacturaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPlantillaFactura(true);
			plantillafacturaSessionBean.setlIdPlantillaFacturaActualForeignKey(this.idPlantillaFacturaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//PlantillaFacturaSessionBean plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
		
		if(this.plantillafacturaSessionBean==null) {
			this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
		}
		
		this.plantillafacturaSessionBean.setsUltimaBusquedaPlantillaFactura(this.getsAccionBusqueda());
		this.plantillafacturaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.plantillafacturaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			plantillafacturaSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
			plantillafacturaSessionBean.setnombre(this.getnombreBusquedaPorNombre());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoBien")) {
			plantillafacturaSessionBean.setid_cuenta_contable_credito_bien(this.getid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFinServicio")) {
			plantillafacturaSessionBean.setid_cuenta_contable_credito_servicio(this.getid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			plantillafacturaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuenteBien")) {
			plantillafacturaSessionBean.setid_tipo_retencion_fuente_bien(this.getid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuenteServicio")) {
			plantillafacturaSessionBean.setid_tipo_retencion_fuente_servicio(this.getid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIvaBien")) {
			plantillafacturaSessionBean.setid_tipo_retencion_iva_bien(this.getid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIvaServicio")) {
			plantillafacturaSessionBean.setid_tipo_retencion_iva_servicio(this.getid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//PlantillaFacturaSessionBean plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
		
		if(this.plantillafacturaSessionBean==null) {
			this.plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
		}
		
		if(this.plantillafacturaSessionBean.getsUltimaBusquedaPlantillaFactura()!=null&&!this.plantillafacturaSessionBean.getsUltimaBusquedaPlantillaFactura().equals("")) {
			this.setsAccionBusqueda(plantillafacturaSessionBean.getsUltimaBusquedaPlantillaFactura());
			this.setiNumeroPaginacion(plantillafacturaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(plantillafacturaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(plantillafacturaSessionBean.getcodigo());
				plantillafacturaSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
				this.setnombreBusquedaPorNombre(plantillafacturaSessionBean.getnombre());
				plantillafacturaSessionBean.setnombre("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoBien")) {
				this.setid_cuenta_contable_credito_bienFK_IdCuentaContableCreditoBien(plantillafacturaSessionBean.getid_cuenta_contable_credito_bien());
				plantillafacturaSessionBean.setid_cuenta_contable_credito_bien(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFinServicio")) {
				this.setid_cuenta_contable_credito_servicioFK_IdCuentaContableCreditoFinServicio(plantillafacturaSessionBean.getid_cuenta_contable_credito_servicio());
				plantillafacturaSessionBean.setid_cuenta_contable_credito_servicio(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(plantillafacturaSessionBean.getid_empresa());
				plantillafacturaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuenteBien")) {
				this.setid_tipo_retencion_fuente_bienFK_IdTipoRetencionFuenteBien(plantillafacturaSessionBean.getid_tipo_retencion_fuente_bien());
				plantillafacturaSessionBean.setid_tipo_retencion_fuente_bien(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuenteServicio")) {
				this.setid_tipo_retencion_fuente_servicioFK_IdTipoRetencionFuenteServicio(plantillafacturaSessionBean.getid_tipo_retencion_fuente_servicio());
				plantillafacturaSessionBean.setid_tipo_retencion_fuente_servicio(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIvaBien")) {
				this.setid_tipo_retencion_iva_bienFK_IdTipoRetencionIvaBien(plantillafacturaSessionBean.getid_tipo_retencion_iva_bien());
				plantillafacturaSessionBean.setid_tipo_retencion_iva_bien(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIvaServicio")) {
				this.setid_tipo_retencion_iva_servicioFK_IdTipoRetencionIvaServicio(plantillafacturaSessionBean.getid_tipo_retencion_iva_servicio());
				plantillafacturaSessionBean.setid_tipo_retencion_iva_servicio(null);
			}
		}
		
		this.plantillafacturaSessionBean.setsUltimaBusquedaPlantillaFactura("");
		this.plantillafacturaSessionBean.setiNumeroPaginacion(PlantillaFacturaConstantesFunciones.INUMEROPAGINACION);
		this.plantillafacturaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaPlantillaFactura(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioPlantillaFactura() {
		this.updateBorderResaltarBusquedasFormularioPlantillaFactura();
		this.updateVisibilidadBusquedasFormularioPlantillaFactura();
		this.updateHabilitarBusquedasFormularioPlantillaFactura();
	}
	
	public void updateBorderResaltarBusquedasFormularioPlantillaFactura() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasPlantillaFactura.getComponents().length>0) {
	

		if(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorCodigoPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorCodigoPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorCodigoPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorNombrePlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorNombrePlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorNombrePlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoBienPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoBienPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoFinServicioPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteBienPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteBienPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteServicioPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaBienPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaBienPlantillaFactura);
			}
		}

		if(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaServicioPlantillaFactura!=null) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaServicioPlantillaFactura);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioPlantillaFactura() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasPlantillaFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorCodigoPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarBusquedaPorCodigoPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarBusquedaPorCodigoPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorNombrePlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarBusquedaPorNombrePlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarBusquedaPorNombrePlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdCuentaContableCreditoBienPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdCuentaContableCreditoBienPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdCuentaContableCreditoFinServicioPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionFuenteBienPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionFuenteBienPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionFuenteServicioPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionIvaBienPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionIvaBienPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionIvaServicioPlantillaFactura);
			if(!this.plantillafacturaConstantesFunciones.mostrarFK_IdTipoRetencionIvaServicioPlantillaFactura && index>-1) {
				this.jTabbedPaneBusquedasPlantillaFactura.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioPlantillaFactura() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasPlantillaFactura.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorCodigoPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarBusquedaPorCodigoPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarBusquedaPorCodigoPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorNombrePlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarBusquedaPorNombrePlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarBusquedaPorNombrePlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdCuentaContableCreditoBienPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdCuentaContableCreditoBienPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionFuenteBienPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionFuenteBienPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionFuenteServicioPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionIvaBienPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionIvaBienPlantillaFactura);
			}

			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionIvaServicioPlantillaFactura);
				this.jTabbedPaneBusquedasPlantillaFactura.setEnabledAt(index,this.plantillafacturaConstantesFunciones.activarFK_IdTipoRetencionIvaServicioPlantillaFactura);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaPlantillaFactura(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorCodigoPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarBusquedaPorCodigoPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorCodigoPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNombre")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelBusquedaPorNombrePlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarBusquedaPorNombrePlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarBusquedaPorNombrePlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCreditoBien")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoBienPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdCuentaContableCreditoBienPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoBienPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCreditoFinServicio")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFinServicioPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdCuentaContableCreditoFinServicioPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdCuentaContableCreditoFinServicioPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionFuenteBien")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteBienPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdTipoRetencionFuenteBienPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteBienPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionFuenteServicio")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionFuenteServicioPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdTipoRetencionFuenteServicioPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionFuenteServicioPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionIvaBien")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaBienPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdTipoRetencionIvaBienPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaBienPlantillaFactura);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionIvaServicio")) {
			index= this.jTabbedPaneBusquedasPlantillaFactura.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaServicioPlantillaFactura);

			this.jTabbedPaneBusquedasPlantillaFactura.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPlantillaFactura.getComponent(index);

			this.plantillafacturaConstantesFunciones.setResaltarFK_IdTipoRetencionIvaServicioPlantillaFactura(resaltar);

			jPanel.setBorder(this.plantillafacturaConstantesFunciones.resaltarFK_IdTipoRetencionIvaServicioPlantillaFactura);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarPlantillaFactura.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioPlantillaFactura() throws Exception {

		if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioPlantillaFactura();
		this.updateVisibilidadResaltarControlesFormularioPlantillaFactura();
		this.updateHabilitarResaltarControlesFormularioPlantillaFactura();
		
	}
	
	public void updateBorderResaltarControlesFormularioPlantillaFactura() throws Exception {
		if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.plantillafacturaConstantesFunciones.resaltaridPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltaridPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_empresaPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_empresaPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarcodigoPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarcodigoPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarnombrePlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarnombrePlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltardescripcionPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltardescripcionPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltares_proveedorPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setBorderPainted(true);this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltares_proveedorPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_aplicadaPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_aplicadaPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_bienPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_credito_servicioPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_bienPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_fuente_servicioPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_bienPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_bienPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_servicioPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_tipo_retencion_iva_servicioPlantillaFactura);}
		if(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_gastoPlantillaFactura!=null && this.jInternalFrameDetalleFormPlantillaFactura!=null) {this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setBorder(this.plantillafacturaConstantesFunciones.resaltarid_cuenta_contable_gastoPlantillaFactura);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioPlantillaFactura() throws Exception {		
		if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
	
		//this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostraridPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelidPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostraridPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_empresaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_empresaPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_empresaPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarcodigoPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelcodigoPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarcodigoPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarnombrePlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelnombrePlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarnombrePlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrardescripcionPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPaneldescripcionPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrardescripcionPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrares_proveedorPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPaneles_proveedorPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrares_proveedorPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_aplicadaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_cuenta_contable_aplicadaPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_aplicadaPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_aplicadaPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_cuenta_contable_credito_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_bienPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_bienPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_cuenta_contable_credito_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_servicioPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_credito_servicioPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_tipo_retencion_fuente_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_bienPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_tipo_retencion_fuente_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_fuente_servicioPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_tipo_retencion_iva_bienPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_bienPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_tipo_retencion_iva_servicioPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_tipo_retencion_iva_servicioPlantillaFactura);
		//this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_gastoPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jPanelid_cuenta_contable_gastoPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_gastoPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFactura.setVisible(this.plantillafacturaConstantesFunciones.mostrarid_cuenta_contable_gastoPlantillaFactura);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioPlantillaFactura() throws Exception {
		if(this.jInternalFrameDetalleFormPlantillaFactura==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPlantillaFactura!=null) {
	
		this.jInternalFrameDetalleFormPlantillaFactura.jLabelidPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activaridPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_empresaPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_empresaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jTextFieldcodigoPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarcodigoPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jTextAreanombrePlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarnombrePlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jTextAreadescripcionPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activardescripcionPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jCheckBoxes_proveedorPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activares_proveedorPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_aplicadaPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_aplicadaPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_aplicadaPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_aplicadaPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_bienPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_bienPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_bienPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_credito_servicioPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_servicioPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_credito_servicioPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_credito_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_bienPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_fuente_servicioPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_fuente_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_bienPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_bienPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_tipo_retencion_iva_servicioPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_tipo_retencion_iva_servicioPlantillaFactura);
		this.jInternalFrameDetalleFormPlantillaFactura.jComboBoxid_cuenta_contable_gastoPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_gastoPlantillaFactura);
			this.jInternalFrameDetalleFormPlantillaFactura.jButtonid_cuenta_contable_gastoPlantillaFactura.setEnabled(this.plantillafacturaConstantesFunciones.activarid_cuenta_contable_gastoPlantillaFactura);
		}
	}
	
		
}