/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.AsientoContableConstantesFunciones;
import com.bydan.erp.contabilidad.util.AsientoContableParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.AsientoContableParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.AsientoContableBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS

import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class AsientoContableBeanSwingJInternalFrame extends AsientoContableJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(AsientoContableBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<AsientoContable> asientocontableValidator = new ClassValidator<AsientoContable>(AsientoContable.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public AsientoContable asientocontable;	
	public AsientoContable asientocontableAux;
	public AsientoContable asientocontableAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public AsientoContable asientocontableTotales;
	public Long idAsientoContableActual;
	public Long iIdNuevoAsientoContable=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboTipoDocumento="";

	public List<TipoDocumento> tipodocumentosForeignKey;

	public List<TipoDocumento> gettipodocumentosForeignKey() {
		return tipodocumentosForeignKey;
	}

	public void settipodocumentosForeignKey(List<TipoDocumento> tipodocumentosForeignKey) {
		this.tipodocumentosForeignKey = tipodocumentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDocumento tipodocumentoForeignKey;

	public TipoDocumento gettipodocumentoForeignKey() {
		return tipodocumentoForeignKey;
	}

	public void settipodocumentoForeignKey(TipoDocumento tipodocumentoForeignKey) {
		this.tipodocumentoForeignKey = tipodocumentoForeignKey;
	}

	public String sFinalQueryComboTipoMovimiento="";

	public List<TipoMovimiento> tipomovimientosForeignKey;

	public List<TipoMovimiento> gettipomovimientosForeignKey() {
		return tipomovimientosForeignKey;
	}

	public void settipomovimientosForeignKey(List<TipoMovimiento> tipomovimientosForeignKey) {
		this.tipomovimientosForeignKey = tipomovimientosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimiento tipomovimientoForeignKey;

	public TipoMovimiento gettipomovimientoForeignKey() {
		return tipomovimientoForeignKey;
	}

	public void settipomovimientoForeignKey(TipoMovimiento tipomovimientoForeignKey) {
		this.tipomovimientoForeignKey = tipomovimientoForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTipoDescripcionAsiento="";

	public List<TipoDescripcionAsiento> tipodescripcionasientosForeignKey;

	public List<TipoDescripcionAsiento> gettipodescripcionasientosForeignKey() {
		return tipodescripcionasientosForeignKey;
	}

	public void settipodescripcionasientosForeignKey(List<TipoDescripcionAsiento> tipodescripcionasientosForeignKey) {
		this.tipodescripcionasientosForeignKey = tipodescripcionasientosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDescripcionAsiento tipodescripcionasientoForeignKey;

	public TipoDescripcionAsiento gettipodescripcionasientoForeignKey() {
		return tipodescripcionasientoForeignKey;
	}

	public void settipodescripcionasientoForeignKey(TipoDescripcionAsiento tipodescripcionasientoForeignKey) {
		this.tipodescripcionasientoForeignKey = tipodescripcionasientoForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboEstadoAsientoContable="";

	public List<EstadoAsientoContable> estadoasientocontablesForeignKey;

	public List<EstadoAsientoContable> getestadoasientocontablesForeignKey() {
		return estadoasientocontablesForeignKey;
	}

	public void setestadoasientocontablesForeignKey(List<EstadoAsientoContable> estadoasientocontablesForeignKey) {
		this.estadoasientocontablesForeignKey = estadoasientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoAsientoContable estadoasientocontableForeignKey;

	public EstadoAsientoContable getestadoasientocontableForeignKey() {
		return estadoasientocontableForeignKey;
	}

	public void setestadoasientocontableForeignKey(EstadoAsientoContable estadoasientocontableForeignKey) {
		this.estadoasientocontableForeignKey = estadoasientocontableForeignKey;
	}

	public String sFinalQueryComboTipoMovimientoModulo="";

	public List<TipoMovimientoModulo> tipomovimientomodulosForeignKey;

	public List<TipoMovimientoModulo> gettipomovimientomodulosForeignKey() {
		return tipomovimientomodulosForeignKey;
	}

	public void settipomovimientomodulosForeignKey(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey) {
		this.tipomovimientomodulosForeignKey = tipomovimientomodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimientoModulo tipomovimientomoduloForeignKey;

	public TipoMovimientoModulo gettipomovimientomoduloForeignKey() {
		return tipomovimientomoduloForeignKey;
	}

	public void settipomovimientomoduloForeignKey(TipoMovimientoModulo tipomovimientomoduloForeignKey) {
		this.tipomovimientomoduloForeignKey = tipomovimientomoduloForeignKey;
	}

		
	
	public ParametroConta parametrocontaParametro;

	public ParametroConta getparametrocontaParametro() {
		return parametrocontaParametro;
	}

	public void setparametrocontaParametro(ParametroConta parametrocontaParametro) {
		this.parametrocontaParametro = parametrocontaParametro;
	}

	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	

	public Boolean isTienePermisosSri=false;

	public Boolean getIsTienePermisosSri() {
		return isTienePermisosSri;
	}

	public void setIsTienePermisosSri(Boolean isTienePermisosSri) {
		this.isTienePermisosSri= isTienePermisosSri;
	}


	public Boolean isTienePermisosImportarExportar=false;

	public Boolean getIsTienePermisosImportarExportar() {
		return isTienePermisosImportarExportar;
	}

	public void setIsTienePermisosImportarExportar(Boolean isTienePermisosImportarExportar) {
		this.isTienePermisosImportarExportar= isTienePermisosImportarExportar;
	}


	public Boolean isTienePermisosDetalleMoviClienProve=false;

	public Boolean getIsTienePermisosDetalleMoviClienProve() {
		return isTienePermisosDetalleMoviClienProve;
	}

	public void setIsTienePermisosDetalleMoviClienProve(Boolean isTienePermisosDetalleMoviClienProve) {
		this.isTienePermisosDetalleMoviClienProve= isTienePermisosDetalleMoviClienProve;
	}


	public Boolean isTienePermisosPrestamo=false;

	public Boolean getIsTienePermisosPrestamo() {
		return isTienePermisosPrestamo;
	}

	public void setIsTienePermisosPrestamo(Boolean isTienePermisosPrestamo) {
		this.isTienePermisosPrestamo= isTienePermisosPrestamo;
	}


	public Boolean isTienePermisosDetalleAsientoContable=false;

	public Boolean getIsTienePermisosDetalleAsientoContable() {
		return isTienePermisosDetalleAsientoContable;
	}

	public void setIsTienePermisosDetalleAsientoContable(Boolean isTienePermisosDetalleAsientoContable) {
		this.isTienePermisosDetalleAsientoContable= isTienePermisosDetalleAsientoContable;
	}


	public Boolean isTienePermisosRetencion=false;

	public Boolean getIsTienePermisosRetencion() {
		return isTienePermisosRetencion;
	}

	public void setIsTienePermisosRetencion(Boolean isTienePermisosRetencion) {
		this.isTienePermisosRetencion= isTienePermisosRetencion;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoAsientoContable;
	public Boolean isPermisoNuevoAsientoContable;
	public Boolean isPermisoActualizarAsientoContable;
	public Boolean isPermisoActualizarOriginalAsientoContable;
	public Boolean isPermisoEliminarAsientoContable;
	public Boolean isPermisoGuardarCambiosAsientoContable;
	public Boolean isPermisoConsultaAsientoContable;
	public Boolean isPermisoBusquedaAsientoContable;
	public Boolean isPermisoReporteAsientoContable;
	public Boolean isPermisoPaginacionMedioAsientoContable;
	public Boolean isPermisoPaginacionAltoAsientoContable;
	public Boolean isPermisoPaginacionTodoAsientoContable;
	public Boolean isPermisoCopiarAsientoContable;
	public Boolean isPermisoVerFormAsientoContable;
	public Boolean isPermisoDuplicarAsientoContable;
	public Boolean isPermisoOrdenAsientoContable;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public AsientoContableParameterReturnGeneral asientocontableReturnGeneral;
	public AsientoContableParameterReturnGeneral asientocontableParameterGeneral;
	
	

	public SriLogic sriLogic=null;

	public SriLogic getSriLogic() {
		return sriLogic;
	}

	public void setSriLogic(SriLogic sriLogic) {
		this.sriLogic = sriLogic;
	}


	public ImportarExportarLogic importarexportarLogic=null;

	public ImportarExportarLogic getImportarExportarLogic() {
		return importarexportarLogic;
	}

	public void setImportarExportarLogic(ImportarExportarLogic importarexportarLogic) {
		this.importarexportarLogic = importarexportarLogic;
	}


	public DetalleMoviClienProveLogic detallemoviclienproveLogic=null;

	public DetalleMoviClienProveLogic getDetalleMoviClienProveLogic() {
		return detallemoviclienproveLogic;
	}

	public void setDetalleMoviClienProveLogic(DetalleMoviClienProveLogic detallemoviclienproveLogic) {
		this.detallemoviclienproveLogic = detallemoviclienproveLogic;
	}


	public PrestamoLogic prestamoLogic=null;

	public PrestamoLogic getPrestamoLogic() {
		return prestamoLogic;
	}

	public void setPrestamoLogic(PrestamoLogic prestamoLogic) {
		this.prestamoLogic = prestamoLogic;
	}


	public DetalleAsientoContableLogic detalleasientocontableLogic=null;

	public DetalleAsientoContableLogic getDetalleAsientoContableLogic() {
		return detalleasientocontableLogic;
	}

	public void setDetalleAsientoContableLogic(DetalleAsientoContableLogic detalleasientocontableLogic) {
		this.detalleasientocontableLogic = detalleasientocontableLogic;
	}


	public RetencionLogic retencionLogic=null;

	public RetencionLogic getRetencionLogic() {
		return retencionLogic;
	}

	public void setRetencionLogic(RetencionLogic retencionLogic) {
		this.retencionLogic = retencionLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoAsientoContable=false;
	public Boolean esParaAccionDesdeFormularioAsientoContable=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected AsientoContableSessionBeanAdditional asientocontableSessionBeanAdditional=null;
	
	public AsientoContableSessionBeanAdditional getAsientoContableSessionBeanAdditional() {
		return this.asientocontableSessionBeanAdditional;
	}
	
	public void setAsientoContableSessionBeanAdditional(AsientoContableSessionBeanAdditional asientocontableSessionBeanAdditional) {
		try {
			this.asientocontableSessionBeanAdditional=asientocontableSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected AsientoContableBeanSwingJInternalFrameAdditional asientocontableBeanSwingJInternalFrameAdditional=null;
	//public class AsientoContableBeanSwingJInternalFrame
	
	public AsientoContableBeanSwingJInternalFrameAdditional getAsientoContableBeanSwingJInternalFrameAdditional() {
		return this.asientocontableBeanSwingJInternalFrameAdditional;
	}
	
	public void setAsientoContableBeanSwingJInternalFrameAdditional(AsientoContableBeanSwingJInternalFrameAdditional asientocontableBeanSwingJInternalFrameAdditional) {
		try {
			this.asientocontableBeanSwingJInternalFrameAdditional=asientocontableBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public AsientoContableLogic asientocontableLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public AsientoContable asientocontableBean;
	public AsientoContableConstantesFunciones asientocontableConstantesFunciones;
	//public AsientoContableParameterReturnGeneral asientocontableReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public ModuloLogic moduloLogic;
	public UsuarioLogic usuarioLogic;
	public TipoDocumentoLogic tipodocumentoLogic;
	public TipoMovimientoLogic tipomovimientoLogic;
	public MonedaLogic monedaLogic;
	public ClienteLogic clienteLogic;
	public TipoDescripcionAsientoLogic tipodescripcionasientoLogic;
	public FormatoLogic formatoLogic;
	public EstadoAsientoContableLogic estadoasientocontableLogic;
	public TipoMovimientoModuloLogic tipomovimientomoduloLogic;
	
	//PARAMETROS
	
	public ParametroContaLogic parametrocontaLogic;
	
	//public List<AsientoContable> asientocontables;	
	//public List<AsientoContable> asientocontablesEliminados;
	//public List<AsientoContable> asientocontablesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoAsientoContable=false;
	public Boolean isVisibilidadCeldaDuplicarAsientoContable=true;
	public Boolean isVisibilidadCeldaCopiarAsientoContable=true;
	public Boolean isVisibilidadCeldaVerFormAsientoContable=true;
	public Boolean isVisibilidadCeldaOrdenAsientoContable=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
	public Boolean isVisibilidadCeldaModificarAsientoContable=false;
	public Boolean isVisibilidadCeldaActualizarAsientoContable=false;
	public Boolean isVisibilidadCeldaEliminarAsientoContable=false;
	public Boolean isVisibilidadCeldaCancelarAsientoContable=false;
	public Boolean isVisibilidadCeldaGuardarAsientoContable=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosAsientoContable=false;	
	
	
	public Boolean isVisibilidadBusquedaPorBeneficiario=false;
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorFechaEmision=false;
	public Boolean isVisibilidadBusquedaPorNumeroMayor=false;
	public Boolean isVisibilidadBusquedaPorNumeroRetencion=false;
	public Boolean isVisibilidadBusquedaPorValor=false;
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoDescripcionAsiento=false;
	public Boolean isVisibilidadFK_IdTipoDocumento=false;
	public Boolean isVisibilidadFK_IdTipoMovimiento=false;
	public Boolean isVisibilidadFK_IdTipoMovimientoModulo=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	
	public Long getiIdNuevoAsientoContable() {
		return this.iIdNuevoAsientoContable;
	}

	public void setiIdNuevoAsientoContable(Long iIdNuevoAsientoContable) {
		this.iIdNuevoAsientoContable = iIdNuevoAsientoContable;
	}
	
	public Long getidAsientoContableActual() {
		return this.idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual = idAsientoContableActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public AsientoContable getasientocontable() {
		return this.asientocontable;
	}

	public void setasientocontable(AsientoContable asientocontable) {
		this.asientocontable = asientocontable;
	}
	
	public AsientoContable getasientocontableAux() {
		return this.asientocontableAux;
	}

	public void setasientocontableAux(AsientoContable asientocontableAux) {
		this.asientocontableAux = asientocontableAux;
	}				
	
	public AsientoContable getasientocontableAnterior() {
		return this.asientocontableAnterior;
	}

	public void setasientocontableAnterior(AsientoContable asientocontableAnterior) {
		this.asientocontableAnterior = asientocontableAnterior;
	}	
	
	public AsientoContable getasientocontableTotales() {
		return this.asientocontableTotales;
	}

	public void setasientocontableTotales(AsientoContable asientocontableTotales) {
		this.asientocontableTotales = asientocontableTotales;
	}	
	
	public AsientoContable getasientocontableBean() {
		return this.asientocontableBean;
	}

	public void setasientocontableBean(AsientoContable asientocontableBean) {
		this.asientocontableBean = asientocontableBean;
	}	
	
	public AsientoContableParameterReturnGeneral getasientocontableReturnGeneral() {
		return this.asientocontableReturnGeneral;
	}

	public void setasientocontableReturnGeneral(AsientoContableParameterReturnGeneral asientocontableReturnGeneral) {
		this.asientocontableReturnGeneral = asientocontableReturnGeneral;
	}	
	
	
	public String beneficiarioBusquedaPorBeneficiario="";

	public String getbeneficiarioBusquedaPorBeneficiario() {
		return this.beneficiarioBusquedaPorBeneficiario;
	}

	public void setbeneficiarioBusquedaPorBeneficiario(String beneficiarioBusquedaPorBeneficiario) {
		this.beneficiarioBusquedaPorBeneficiario = beneficiarioBusquedaPorBeneficiario;
	}

	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public Date fecha_emisionBusquedaPorFechaEmision=new Date();

	public Date getfecha_emisionBusquedaPorFechaEmision() {
		return this.fecha_emisionBusquedaPorFechaEmision;
	}

	public void setfecha_emisionBusquedaPorFechaEmision(Date fecha_emisionBusquedaPorFechaEmision) {
		this.fecha_emisionBusquedaPorFechaEmision = fecha_emisionBusquedaPorFechaEmision;
	}

	public Date fecha_emisionFinalBusquedaPorFechaEmision;

	public Date getfecha_emisionFinalBusquedaPorFechaEmision()
	{
		return this.fecha_emisionFinalBusquedaPorFechaEmision;
	}

	public void setfecha_emisionFinalBusquedaPorFechaEmision(Date fecha_emisionFinalBusquedaPorFechaEmision) 
	{
		this.fecha_emisionFinalBusquedaPorFechaEmision = fecha_emisionFinalBusquedaPorFechaEmision;
	}

	public String numero_mayorBusquedaPorNumeroMayor="";

	public String getnumero_mayorBusquedaPorNumeroMayor() {
		return this.numero_mayorBusquedaPorNumeroMayor;
	}

	public void setnumero_mayorBusquedaPorNumeroMayor(String numero_mayorBusquedaPorNumeroMayor) {
		this.numero_mayorBusquedaPorNumeroMayor = numero_mayorBusquedaPorNumeroMayor;
	}

	public String numero_retencionBusquedaPorNumeroRetencion="";

	public String getnumero_retencionBusquedaPorNumeroRetencion() {
		return this.numero_retencionBusquedaPorNumeroRetencion;
	}

	public void setnumero_retencionBusquedaPorNumeroRetencion(String numero_retencionBusquedaPorNumeroRetencion) {
		this.numero_retencionBusquedaPorNumeroRetencion = numero_retencionBusquedaPorNumeroRetencion;
	}

	public Double valorBusquedaPorValor=0.0;

	public Double getvalorBusquedaPorValor() {
		return this.valorBusquedaPorValor;
	}

	public void setvalorBusquedaPorValor(Double valorBusquedaPorValor) {
		this.valorBusquedaPorValor = valorBusquedaPorValor;
	}

	public Double valorFinalBusquedaPorValor;

	public Double getvalorFinalBusquedaPorValor()
	{
		return this.valorFinalBusquedaPorValor;
	}

	public void setvalorFinalBusquedaPorValor(Double valorFinalBusquedaPorValor) 
	{
		this.valorFinalBusquedaPorValor = valorFinalBusquedaPorValor;
	}

	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_estado_asiento_contableFK_IdAsientoContable=1L;

	public Long getid_estado_asiento_contableFK_IdAsientoContable() {
		return this.id_estado_asiento_contableFK_IdAsientoContable;
	}

	public void setid_estado_asiento_contableFK_IdAsientoContable(Long id_estado_asiento_contableFK_IdAsientoContable) {
		this.id_estado_asiento_contableFK_IdAsientoContable = id_estado_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=null;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_formatoFK_IdFormato=null;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento=-1L;

	public Long getid_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento() {
		return this.id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento;
	}

	public void setid_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento(Long id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento) {
		this.id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento = id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento;
	}

	public Long id_tipo_documentoFK_IdTipoDocumento=-1L;

	public Long getid_tipo_documentoFK_IdTipoDocumento() {
		return this.id_tipo_documentoFK_IdTipoDocumento;
	}

	public void setid_tipo_documentoFK_IdTipoDocumento(Long id_tipo_documentoFK_IdTipoDocumento) {
		this.id_tipo_documentoFK_IdTipoDocumento = id_tipo_documentoFK_IdTipoDocumento;
	}

	public Long id_tipo_movimientoFK_IdTipoMovimiento=-1L;

	public Long getid_tipo_movimientoFK_IdTipoMovimiento() {
		return this.id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public void setid_tipo_movimientoFK_IdTipoMovimiento(Long id_tipo_movimientoFK_IdTipoMovimiento) {
		this.id_tipo_movimientoFK_IdTipoMovimiento = id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=-1L;

	public Long getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo() {
		return this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public void setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo) {
		this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo = id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public AsientoContableLogic getAsientoContableLogic()	{		
		return asientocontableLogic;
	}

	public void setAsientoContableLogic(AsientoContableLogic asientocontableLogic) {
		this.asientocontableLogic = asientocontableLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoAsientoContable() {
		return isEsNuevoAsientoContable;
	}

	public void setIsEsNuevoAsientoContable(Boolean isEsNuevoAsientoContable) {
		this.isEsNuevoAsientoContable = isEsNuevoAsientoContable;
	}

	public Boolean getEsParaAccionDesdeFormularioAsientoContable() {
		return esParaAccionDesdeFormularioAsientoContable;
	}
	
	public void setEsParaAccionDesdeFormularioAsientoContable(Boolean esParaAccionDesdeFormularioAsientoContable) {
		this.esParaAccionDesdeFormularioAsientoContable = esParaAccionDesdeFormularioAsientoContable;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(asientocontableSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(asientocontableSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(asientocontableSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(asientocontableSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(asientocontableSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(asientocontableSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(asientocontableSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(asientocontableSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDocumentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDocumentoLogic tipodocumentoLogic=new TipoDocumentoLogic();

			//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

					tipodocumentoLogic.getTodosTipoDocumentosWithConnection(sFinalQuery,new Pagination());

					this.tipodocumentosForeignKey=tipodocumentoLogic.getTipoDocumentos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDocumento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodocumentoLogic.getEntityWithConnection(asientocontableSessionBean.getlidTipoDocumentoActual());
					this.tipodocumentosForeignKey.add(tipodocumentoLogic.getTipoDocumento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoLogic tipomovimientoLogic=new TipoMovimientoLogic();

			//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

					tipomovimientoLogic.getTodosTipoMovimientosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientosForeignKey=tipomovimientoLogic.getTipoMovimientos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimiento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientoLogic.getEntityWithConnection(asientocontableSessionBean.getlidTipoMovimientoActual());
					this.tipomovimientosForeignKey.add(tipomovimientoLogic.getTipoMovimiento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(asientocontableSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(asientocontableSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDescripcionAsientosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodescripcionasientosForeignKey=new ArrayList<TipoDescripcionAsiento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDescripcionAsientoLogic tipodescripcionasientoLogic=new TipoDescripcionAsientoLogic();

			//tipodescripcionasientoLogic.getTipoDescripcionAsientoDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDescripcionAsiento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodescripcionasientoLogic.getTipoDescripcionAsientoDataAccess().setIsForForeingKeyData(true);

					tipodescripcionasientoLogic.getTodosTipoDescripcionAsientosWithConnection(sFinalQuery,new Pagination());

					this.tipodescripcionasientosForeignKey=tipodescripcionasientoLogic.getTipoDescripcionAsientos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDescripcionAsiento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodescripcionasientoLogic.getEntityWithConnection(asientocontableSessionBean.getlidTipoDescripcionAsientoActual());
					this.tipodescripcionasientosForeignKey.add(tipodescripcionasientoLogic.getTipoDescripcionAsiento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(asientocontableSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadoasientocontablesForeignKey=new ArrayList<EstadoAsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoAsientoContableLogic estadoasientocontableLogic=new EstadoAsientoContableLogic();

			//estadoasientocontableLogic.getEstadoAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEstadoAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadoasientocontableLogic.getEstadoAsientoContableDataAccess().setIsForForeingKeyData(true);

					estadoasientocontableLogic.getTodosEstadoAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.estadoasientocontablesForeignKey=estadoasientocontableLogic.getEstadoAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadoasientocontableLogic.getEntityWithConnection(asientocontableSessionBean.getlidEstadoAsientoContableActual());
					this.estadoasientocontablesForeignKey.add(estadoasientocontableLogic.getEstadoAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientoModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoModuloLogic tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();

			//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

					tipomovimientomoduloLogic.getTodosTipoMovimientoModulosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientomodulosForeignKey=tipomovimientomoduloLogic.getTipoMovimientoModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimientoModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientomoduloLogic.getEntityWithConnection(asientocontableSessionBean.getlidTipoMovimientoModuloActual());
					this.tipomovimientomodulosForeignKey.add(tipomovimientomoduloLogic.getTipoMovimientoModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaAsientoContable.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaAsientoContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaAsientoContableGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaAsientoContableGenerico!=null && jComboBoxid_empresaAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_empresaAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalAsientoContable.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalAsientoContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalAsientoContableGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalAsientoContableGenerico!=null && jComboBoxid_sucursalAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_sucursalAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioAsientoContable.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioAsientoContableGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioAsientoContableGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioAsientoContableGenerico!=null && jComboBoxid_ejercicioAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoAsientoContable.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoAsientoContableGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoAsientoContableGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoAsientoContableGenerico!=null && jComboBoxid_periodoAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_periodoAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioAsientoContable.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioAsientoContableGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioAsientoContableGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioAsientoContableGenerico!=null && jComboBoxid_anioAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_anioAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesAsientoContable.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesAsientoContableGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesAsientoContableGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesAsientoContableGenerico!=null && jComboBoxid_mesAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_mesAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloAsientoContable.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloAsientoContableGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloAsientoContableGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloAsientoContableGenerico!=null && jComboBoxid_moduloAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_moduloAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioAsientoContable.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioAsientoContableGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioAsientoContableGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioAsientoContableGenerico!=null && jComboBoxid_usuarioAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_usuarioAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDocumentoForeignKey(Long idTipoDocumentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodocumentoTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setTipoDocumento(tipodocumentoTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setSelectedItem(tipodocumentoTemp);
					}
				} else {
					//jComboBoxid_tipo_documentoAsientoContable.setSelectedItem(tipodocumentoTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodocumentoTemp!=null && jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable!=null) {
						jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.setSelectedItem(tipodocumentoTemp);
					} else {
						if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable!=null) {
							//jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.setSelectedItem(tipodocumentoTemp);
							if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.getItemCount()>0) {
								jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDocumentoForeignKeyDescripcion(Long idTipoDocumentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}


			sDescripcion=TipoDocumentoConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDocumentoForeignKeyGenerico(Long idTipoDocumentoSeleccionado,JComboBox jComboBoxid_tipo_documentoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(tipodocumentoTemp!=null) {
				jComboBoxid_tipo_documentoAsientoContableGenerico.setSelectedItem(tipodocumentoTemp);
			} else {
				if(jComboBoxid_tipo_documentoAsientoContableGenerico!=null && jComboBoxid_tipo_documentoAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_documentoAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoForeignKey(Long idTipoMovimientoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientoTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setTipoMovimiento(tipomovimientoTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setSelectedItem(tipomovimientoTemp);
					}
				} else {
					//jComboBoxid_tipo_movimientoAsientoContable.setSelectedItem(tipomovimientoTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoForeignKeyDescripcion(Long idTipoMovimientoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoForeignKeyGenerico(Long idTipoMovimientoSeleccionado,JComboBox jComboBoxid_tipo_movimientoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(tipomovimientoTemp!=null) {
				jComboBoxid_tipo_movimientoAsientoContableGenerico.setSelectedItem(tipomovimientoTemp);
			} else {
				if(jComboBoxid_tipo_movimientoAsientoContableGenerico!=null && jComboBoxid_tipo_movimientoAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimientoAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaAsientoContable.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaAsientoContableGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaAsientoContableGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaAsientoContableGenerico!=null && jComboBoxid_monedaAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_monedaAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteAsientoContable.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteAsientoContable!=null) {
						jComboBoxid_clienteFK_IdClienteAsientoContable.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteAsientoContable!=null) {
							//jComboBoxid_clienteFK_IdClienteAsientoContable.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteAsientoContable.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteAsientoContableGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteAsientoContableGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteAsientoContableGenerico!=null && jComboBoxid_clienteAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_clienteAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDescripcionAsientoForeignKey(Long idTipoDescripcionAsientoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDescripcionAsiento  tipodescripcionasientoTemp=null;

			for(TipoDescripcionAsiento tipodescripcionasientoAux:tipodescripcionasientosForeignKey) {
				if(tipodescripcionasientoAux.getId()!=null && tipodescripcionasientoAux.getId().equals(idTipoDescripcionAsientoSeleccionado)) {
					tipodescripcionasientoTemp=tipodescripcionasientoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodescripcionasientoTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setTipoDescripcionAsiento(tipodescripcionasientoTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedItem(tipodescripcionasientoTemp);
					}
				} else {
					//jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedItem(tipodescripcionasientoTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDescripcionAsiento") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodescripcionasientoTemp!=null && jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable!=null) {
						jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.setSelectedItem(tipodescripcionasientoTemp);
					} else {
						if(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable!=null) {
							//jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.setSelectedItem(tipodescripcionasientoTemp);
							if(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.getItemCount()>0) {
								jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDescripcionAsientoForeignKeyDescripcion(Long idTipoDescripcionAsientoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDescripcionAsiento  tipodescripcionasientoTemp=null;

			for(TipoDescripcionAsiento tipodescripcionasientoAux:tipodescripcionasientosForeignKey) {
				if(tipodescripcionasientoAux.getId()!=null && tipodescripcionasientoAux.getId().equals(idTipoDescripcionAsientoSeleccionado)) {
					tipodescripcionasientoTemp=tipodescripcionasientoAux;
					break;
				}
			}


			sDescripcion=TipoDescripcionAsientoConstantesFunciones.getTipoDescripcionAsientoDescripcion(tipodescripcionasientoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDescripcionAsientoForeignKeyGenerico(Long idTipoDescripcionAsientoSeleccionado,JComboBox jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoDescripcionAsiento  tipodescripcionasientoTemp=null;

			for(TipoDescripcionAsiento tipodescripcionasientoAux:tipodescripcionasientosForeignKey) {
				if(tipodescripcionasientoAux.getId()!=null && tipodescripcionasientoAux.getId().equals(idTipoDescripcionAsientoSeleccionado)) {
					tipodescripcionasientoTemp=tipodescripcionasientoAux;
					break;
				}
			}

			if(tipodescripcionasientoTemp!=null) {
				jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico.setSelectedItem(tipodescripcionasientoTemp);
			} else {
				if(jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico!=null && jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoAsientoContable.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoAsientoContableGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoAsientoContableGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoAsientoContableGenerico!=null && jComboBoxid_formatoAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_formatoAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoAsientoContableForeignKey(Long idEstadoAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoAsientoContable  estadoasientocontableTemp=null;

			for(EstadoAsientoContable estadoasientocontableAux:estadoasientocontablesForeignKey) {
				if(estadoasientocontableAux.getId()!=null && estadoasientocontableAux.getId().equals(idEstadoAsientoContableSeleccionado)) {
					estadoasientocontableTemp=estadoasientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadoasientocontableTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setEstadoAsientoContable(estadoasientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setSelectedItem(estadoasientocontableTemp);
					}
				} else {
					//jComboBoxid_estado_asiento_contableAsientoContable.setSelectedItem(estadoasientocontableTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoAsientoContableForeignKeyDescripcion(Long idEstadoAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoAsientoContable  estadoasientocontableTemp=null;

			for(EstadoAsientoContable estadoasientocontableAux:estadoasientocontablesForeignKey) {
				if(estadoasientocontableAux.getId()!=null && estadoasientocontableAux.getId().equals(idEstadoAsientoContableSeleccionado)) {
					estadoasientocontableTemp=estadoasientocontableAux;
					break;
				}
			}


			sDescripcion=EstadoAsientoContableConstantesFunciones.getEstadoAsientoContableDescripcion(estadoasientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoAsientoContableForeignKeyGenerico(Long idEstadoAsientoContableSeleccionado,JComboBox jComboBoxid_estado_asiento_contableAsientoContableGenerico)throws Exception
	{
		try
		{
			EstadoAsientoContable  estadoasientocontableTemp=null;

			for(EstadoAsientoContable estadoasientocontableAux:estadoasientocontablesForeignKey) {
				if(estadoasientocontableAux.getId()!=null && estadoasientocontableAux.getId().equals(idEstadoAsientoContableSeleccionado)) {
					estadoasientocontableTemp=estadoasientocontableAux;
					break;
				}
			}

			if(estadoasientocontableTemp!=null) {
				jComboBoxid_estado_asiento_contableAsientoContableGenerico.setSelectedItem(estadoasientocontableTemp);
			} else {
				if(jComboBoxid_estado_asiento_contableAsientoContableGenerico!=null && jComboBoxid_estado_asiento_contableAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_estado_asiento_contableAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoModuloForeignKey(Long idTipoMovimientoModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientomoduloTemp!=null) {

					if(this.asientocontable!=null) {
						this.asientocontable.setTipoMovimientoModulo(tipomovimientomoduloTemp);
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedItem(tipomovimientomoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedItem(tipomovimientomoduloTemp);
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipomovimientomoduloTemp!=null && jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable!=null) {
						jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.setSelectedItem(tipomovimientomoduloTemp);
					} else {
						if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable!=null) {
							//jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.setSelectedItem(tipomovimientomoduloTemp);
							if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.getItemCount()>0) {
								jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoModuloForeignKeyDescripcion(Long idTipoMovimientoModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoModuloConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoModuloForeignKeyGenerico(Long idTipoMovimientoModuloSeleccionado,JComboBox jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(tipomovimientomoduloTemp!=null) {
				jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico.setSelectedItem(tipomovimientomoduloTemp);
			} else {
				if(jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico!=null && jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_empresaAsientoContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaAsientoContableGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaAsientoContableGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				asientocontable.setid_empresa(empresaAux.getId());
				asientocontable.setempresa_descripcion(AsientoContableConstantesFunciones.getEmpresaDescripcion(empresaAux));
				asientocontable.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_sucursalAsientoContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalAsientoContableGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalAsientoContableGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				asientocontable.setid_sucursal(sucursalAux.getId());
				asientocontable.setsucursal_descripcion(AsientoContableConstantesFunciones.getSucursalDescripcion(sucursalAux));
				asientocontable.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_ejercicioAsientoContableGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioAsientoContableGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioAsientoContableGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				asientocontable.setid_ejercicio(ejercicioAux.getId());
				asientocontable.setejercicio_descripcion(AsientoContableConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				asientocontable.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_periodoAsientoContableGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoAsientoContableGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoAsientoContableGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				asientocontable.setid_periodo(periodoAux.getId());
				asientocontable.setperiodo_descripcion(AsientoContableConstantesFunciones.getPeriodoDescripcion(periodoAux));
				asientocontable.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_anioAsientoContableGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioAsientoContableGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioAsientoContableGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				asientocontable.setid_anio(anioAux.getId());
				asientocontable.setanio_descripcion(AsientoContableConstantesFunciones.getAnioDescripcion(anioAux));
				asientocontable.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_mesAsientoContableGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesAsientoContableGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesAsientoContableGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				asientocontable.setid_mes(mesAux.getId());
				asientocontable.setmes_descripcion(AsientoContableConstantesFunciones.getMesDescripcion(mesAux));
				asientocontable.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_moduloAsientoContableGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloAsientoContableGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloAsientoContableGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				asientocontable.setid_modulo(moduloAux.getId());
				asientocontable.setmodulo_descripcion(AsientoContableConstantesFunciones.getModuloDescripcion(moduloAux));
				asientocontable.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_usuarioAsientoContableGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioAsientoContableGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioAsientoContableGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				asientocontable.setid_usuario(usuarioAux.getId());
				asientocontable.setusuario_descripcion(AsientoContableConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				asientocontable.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDocumentoForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_tipo_documentoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoAux=new TipoDocumento();

			if(jComboBoxid_tipo_documentoAsientoContableGenerico==null) {
				tipodocumentoAux=(TipoDocumento)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.getSelectedItem();
			} else {
				tipodocumentoAux=(TipoDocumento)jComboBoxid_tipo_documentoAsientoContableGenerico.getSelectedItem();
			}

			if(tipodocumentoAux!=null && tipodocumentoAux.getId()!=null) {
				asientocontable.setid_tipo_documento(tipodocumentoAux.getId());
				asientocontable.settipodocumento_descripcion(AsientoContableConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoAux));
				asientocontable.setTipoDocumento(tipodocumentoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_tipo_movimientoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoAux=new TipoMovimiento();

			if(jComboBoxid_tipo_movimientoAsientoContableGenerico==null) {
				tipomovimientoAux=(TipoMovimiento)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.getSelectedItem();
			} else {
				tipomovimientoAux=(TipoMovimiento)jComboBoxid_tipo_movimientoAsientoContableGenerico.getSelectedItem();
			}

			if(tipomovimientoAux!=null && tipomovimientoAux.getId()!=null) {
				asientocontable.setid_tipo_movimiento(tipomovimientoAux.getId());
				asientocontable.settipomovimiento_descripcion(AsientoContableConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoAux));
				asientocontable.setTipoMovimiento(tipomovimientoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_monedaAsientoContableGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaAsientoContableGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaAsientoContableGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				asientocontable.setid_moneda(monedaAux.getId());
				asientocontable.setmoneda_descripcion(AsientoContableConstantesFunciones.getMonedaDescripcion(monedaAux));
				asientocontable.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_clienteAsientoContableGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteAsientoContableGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteAsientoContableGenerico.getSelectedItem();
			}

			if(clienteAux!=null) {
				asientocontable.setid_cliente(clienteAux.getId());
				asientocontable.setcliente_descripcion(AsientoContableConstantesFunciones.getClienteDescripcion(clienteAux));
				asientocontable.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDescripcionAsientoForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoDescripcionAsiento  tipodescripcionasientoAux=new TipoDescripcionAsiento();

			if(jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico==null) {
				tipodescripcionasientoAux=(TipoDescripcionAsiento)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.getSelectedItem();
			} else {
				tipodescripcionasientoAux=(TipoDescripcionAsiento)jComboBoxid_tipo_descripcion_asientoAsientoContableGenerico.getSelectedItem();
			}

			if(tipodescripcionasientoAux!=null && tipodescripcionasientoAux.getId()!=null) {
				asientocontable.setid_tipo_descripcion_asiento(tipodescripcionasientoAux.getId());
				asientocontable.settipodescripcionasiento_descripcion(AsientoContableConstantesFunciones.getTipoDescripcionAsientoDescripcion(tipodescripcionasientoAux));
				asientocontable.setTipoDescripcionAsiento(tipodescripcionasientoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_formatoAsientoContableGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoAsientoContableGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoAsientoContableGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				asientocontable.setid_formato(formatoAux.getId());
				asientocontable.setformato_descripcion(AsientoContableConstantesFunciones.getFormatoDescripcion(formatoAux));
				asientocontable.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoAsientoContableForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_estado_asiento_contableAsientoContableGenerico)throws Exception
	{
		try
		{
			EstadoAsientoContable  estadoasientocontableAux=new EstadoAsientoContable();

			if(jComboBoxid_estado_asiento_contableAsientoContableGenerico==null) {
				estadoasientocontableAux=(EstadoAsientoContable)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.getSelectedItem();
			} else {
				estadoasientocontableAux=(EstadoAsientoContable)jComboBoxid_estado_asiento_contableAsientoContableGenerico.getSelectedItem();
			}

			if(estadoasientocontableAux!=null && estadoasientocontableAux.getId()!=null) {
				asientocontable.setid_estado_asiento_contable(estadoasientocontableAux.getId());
				asientocontable.setestadoasientocontable_descripcion(AsientoContableConstantesFunciones.getEstadoAsientoContableDescripcion(estadoasientocontableAux));
				asientocontable.setEstadoAsientoContable(estadoasientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoModuloForeignKey(AsientoContable asientocontable,JComboBox jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloAux=new TipoMovimientoModulo();

			if(jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico==null) {
				tipomovimientomoduloAux=(TipoMovimientoModulo)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.getSelectedItem();
			} else {
				tipomovimientomoduloAux=(TipoMovimientoModulo)jComboBoxid_tipo_movimiento_moduloAsientoContableGenerico.getSelectedItem();
			}

			if(tipomovimientomoduloAux!=null && tipomovimientomoduloAux.getId()!=null) {
				asientocontable.setid_tipo_movimiento_modulo(tipomovimientomoduloAux.getId());
				asientocontable.settipomovimientomodulo_descripcion(AsientoContableConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloAux));
				asientocontable.setTipoMovimientoModulo(tipomovimientomoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDocumentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDocumento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.addItem(tipodocumento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.addItem(tipodocumento);
							}
						}

						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimiento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.removeAllItems();

							for(TipoMovimiento tipomovimiento:this.tipomovimientosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.addItem(tipomovimiento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteAsientoContable.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteAsientoContable.addItem(cliente);
							}
						}

						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDescripcionAsientosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDescripcionAsiento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.removeAllItems();

							for(TipoDescripcionAsiento tipodescripcionasiento:this.tipodescripcionasientosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.addItem(tipodescripcionasiento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDescripcionAsiento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.removeAllItems();

							for(TipoDescripcionAsiento tipodescripcionasiento:this.tipodescripcionasientosForeignKey) {
								this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.addItem(tipodescripcionasiento);
							}
						}

						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.removeAllItems();

							for(EstadoAsientoContable estadoasientocontable:this.estadoasientocontablesForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.addItem(estadoasientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientoModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimientoModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.addItem(tipomovimientomodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAsientoContable!=null) { 
					}

					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.addItem(tipomovimientomodulo);
							}
						}

						if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDocumentoForeignKey(TipoDocumento tipodocumento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setSelectedItem(tipodocumento);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.setSelectedItem(tipodocumento);
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoForeignKey(TipoMovimiento tipomovimiento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setSelectedItem(tipomovimiento);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteAsientoContable.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteAsientoContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDescripcionAsientoForeignKey(TipoDescripcionAsiento tipodescripcionasiento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedItem(tipodescripcionasiento);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.setSelectedItem(tipodescripcionasiento);
						} else {
							this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoAsientoContableForeignKey(EstadoAsientoContable estadoasientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setSelectedItem(estadoasientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoModuloForeignKey(TipoMovimientoModulo tipomovimientomodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedItem(tipomovimientomodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormAsientoContable!=null) {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.setSelectedItem(tipomovimientomodulo);
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesAsientoContable() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			AsientoContableConstantesFunciones.refrescarForeignKeysDescripcionesAsientoContable(this.asientocontableLogic.getAsientoContables());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			AsientoContableConstantesFunciones.refrescarForeignKeysDescripcionesAsientoContable(this.asientocontables);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(TipoDocumento.class));
		classes.add(new Classe(TipoMovimiento.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(TipoDescripcionAsiento.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(EstadoAsientoContable.class));
		classes.add(new Classe(TipoMovimientoModulo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//asientocontableLogic.setAsientoContables(this.asientocontables);
			asientocontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public AsientoContableParameterReturnGeneral getAsientoContableParameterGeneral() {
		return this.asientocontableParameterGeneral;
	}
	
	public void setAsientoContableParameterGeneral(AsientoContableParameterReturnGeneral asientocontableParameterGeneral) {
		this.asientocontableParameterGeneral = asientocontableParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoAsientoContable() {
		return isPermisoTodoAsientoContable;
	}

	public void setIsPermisoTodoAsientoContable(Boolean isPermisoTodoAsientoContable) {
		this.isPermisoTodoAsientoContable = isPermisoTodoAsientoContable;
	}

	public Boolean getIsPermisoNuevoAsientoContable() {
		return isPermisoNuevoAsientoContable;
	}

	public void setIsPermisoNuevoAsientoContable(Boolean isPermisoNuevoAsientoContable) {
		this.isPermisoNuevoAsientoContable = isPermisoNuevoAsientoContable;
	}

	public Boolean getIsPermisoActualizarAsientoContable() {
		return isPermisoActualizarAsientoContable;
	}

	public void setIsPermisoActualizarAsientoContable(Boolean isPermisoActualizarAsientoContable) {
		this.isPermisoActualizarAsientoContable = isPermisoActualizarAsientoContable;
	}

	public Boolean getIsPermisoEliminarAsientoContable() {
		return isPermisoEliminarAsientoContable;
	}

	public void setIsPermisoEliminarAsientoContable(Boolean isPermisoEliminarAsientoContable) {
		this.isPermisoEliminarAsientoContable = isPermisoEliminarAsientoContable;
	}

	public Boolean getIsPermisoGuardarCambiosAsientoContable() {
		return isPermisoGuardarCambiosAsientoContable;
	}

	public void setIsPermisoGuardarCambiosAsientoContable(Boolean isPermisoGuardarCambiosAsientoContable) {
		this.isPermisoGuardarCambiosAsientoContable = isPermisoGuardarCambiosAsientoContable;
	}
	
	public Boolean getIsPermisoConsultaAsientoContable() {
		return isPermisoConsultaAsientoContable;
	}

	public void setIsPermisoConsultaAsientoContable(Boolean isPermisoConsultaAsientoContable) {
		this.isPermisoConsultaAsientoContable = isPermisoConsultaAsientoContable;
	}

	public Boolean getIsPermisoBusquedaAsientoContable() {
		return isPermisoBusquedaAsientoContable;
	}

	public void setIsPermisoBusquedaAsientoContable(Boolean isPermisoBusquedaAsientoContable) {
		this.isPermisoBusquedaAsientoContable = isPermisoBusquedaAsientoContable;
	}

	public Boolean getIsPermisoReporteAsientoContable() {
		return isPermisoReporteAsientoContable;
	}

	public void setIsPermisoReporteAsientoContable(Boolean isPermisoReporteAsientoContable) {
		this.isPermisoReporteAsientoContable = isPermisoReporteAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionMedioAsientoContable() {
		return isPermisoPaginacionMedioAsientoContable;
	}

	public void setIsPermisoPaginacionMedioAsientoContable(Boolean isPermisoPaginacionMedioAsientoContable) {
		this.isPermisoPaginacionMedioAsientoContable = isPermisoPaginacionMedioAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionTodoAsientoContable() {
		return isPermisoPaginacionTodoAsientoContable;
	}

	public void setIsPermisoPaginacionTodoAsientoContable(Boolean isPermisoPaginacionTodoAsientoContable) {
		this.isPermisoPaginacionTodoAsientoContable = isPermisoPaginacionTodoAsientoContable;
	}
	
	public Boolean getIsPermisoPaginacionAltoAsientoContable() {
		return isPermisoPaginacionAltoAsientoContable;
	}

	public void setIsPermisoPaginacionAltoAsientoContable(Boolean isPermisoPaginacionAltoAsientoContable) {
		this.isPermisoPaginacionAltoAsientoContable = isPermisoPaginacionAltoAsientoContable;
	}
	
	public Boolean getIsPermisoCopiarAsientoContable() {
		return isPermisoCopiarAsientoContable;
	}

	public void setIsPermisoCopiarAsientoContable(Boolean isPermisoCopiarAsientoContable) {
		this.isPermisoCopiarAsientoContable = isPermisoCopiarAsientoContable;
	}
	
	public Boolean getIsPermisoVerFormAsientoContable() {
		return isPermisoVerFormAsientoContable;
	}

	public void setIsPermisoVerFormAsientoContable(Boolean isPermisoVerFormAsientoContable) {
		this.isPermisoVerFormAsientoContable = isPermisoVerFormAsientoContable;
	}
	
	public Boolean getIsPermisoDuplicarAsientoContable() {
		return isPermisoDuplicarAsientoContable;
	}

	public void setIsPermisoDuplicarAsientoContable(Boolean isPermisoDuplicarAsientoContable) {
		this.isPermisoDuplicarAsientoContable = isPermisoDuplicarAsientoContable;
	}
	
	public Boolean getIsPermisoOrdenAsientoContable() {
		return isPermisoOrdenAsientoContable;
	}

	public void setIsPermisoOrdenAsientoContable(Boolean isPermisoOrdenAsientoContable) {
		this.isPermisoOrdenAsientoContable = isPermisoOrdenAsientoContable;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoAsientoContable() {
		return isVisibilidadCeldaNuevoAsientoContable;
	}

	public void setIsVisibilidadCeldaNuevoAsientoContable(Boolean isVisibilidadCeldaNuevoAsientoContable) {
		this.isVisibilidadCeldaNuevoAsientoContable = isVisibilidadCeldaNuevoAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarAsientoContable() {
		return isVisibilidadCeldaDuplicarAsientoContable;
	}

	public void setIsVisibilidadCeldaDuplicarAsientoContable(Boolean isVisibilidadCeldaDuplicarAsientoContable) {
		this.isVisibilidadCeldaDuplicarAsientoContable = isVisibilidadCeldaDuplicarAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarAsientoContable() {
		return isVisibilidadCeldaCopiarAsientoContable;
	}

	public void setIsVisibilidadCeldaCopiarAsientoContable(Boolean isVisibilidadCeldaCopiarAsientoContable) {
		this.isVisibilidadCeldaCopiarAsientoContable = isVisibilidadCeldaCopiarAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormAsientoContable() {
		return isVisibilidadCeldaVerFormAsientoContable;
	}

	public void setIsVisibilidadCeldaVerFormAsientoContable(Boolean isVisibilidadCeldaVerFormAsientoContable) {
		this.isVisibilidadCeldaVerFormAsientoContable = isVisibilidadCeldaVerFormAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenAsientoContable() {
		return isVisibilidadCeldaOrdenAsientoContable;
	}

	public void setIsVisibilidadCeldaOrdenAsientoContable(Boolean isVisibilidadCeldaOrdenAsientoContable) {
		this.isVisibilidadCeldaOrdenAsientoContable = isVisibilidadCeldaOrdenAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesAsientoContable() {
		return isVisibilidadCeldaNuevoRelacionesAsientoContable;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesAsientoContable(Boolean isVisibilidadCeldaNuevoRelacionesAsientoContable) {
		this.isVisibilidadCeldaNuevoRelacionesAsientoContable = isVisibilidadCeldaNuevoRelacionesAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaModificarAsientoContable() {
		return isVisibilidadCeldaModificarAsientoContable;
	}

	public void setIsVisibilidadCeldaModificarAsientoContable(Boolean isVisibilidadCeldaModificarAsientoContable) {
		this.isVisibilidadCeldaModificarAsientoContable = isVisibilidadCeldaModificarAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarAsientoContable() {
		return isVisibilidadCeldaActualizarAsientoContable;
	}

	public void setIsVisibilidadCeldaActualizarAsientoContable(Boolean isVisibilidadCeldaActualizarAsientoContable) {
		this.isVisibilidadCeldaActualizarAsientoContable = isVisibilidadCeldaActualizarAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaEliminarAsientoContable() {
		return isVisibilidadCeldaEliminarAsientoContable;
	}

	public void setIsVisibilidadCeldaEliminarAsientoContable(Boolean isVisibilidadCeldaEliminarAsientoContable) {
		this.isVisibilidadCeldaEliminarAsientoContable = isVisibilidadCeldaEliminarAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaCancelarAsientoContable() {
		return isVisibilidadCeldaCancelarAsientoContable;
	}

	public void setIsVisibilidadCeldaCancelarAsientoContable(Boolean isVisibilidadCeldaCancelarAsientoContable) {
		this.isVisibilidadCeldaCancelarAsientoContable = isVisibilidadCeldaCancelarAsientoContable;
	}

	public Boolean getIsVisibilidadCeldaGuardarAsientoContable() {
		return isVisibilidadCeldaGuardarAsientoContable;
	}

	public void setIsVisibilidadCeldaGuardarAsientoContable(Boolean isVisibilidadCeldaGuardarAsientoContable) {
		this.isVisibilidadCeldaGuardarAsientoContable = isVisibilidadCeldaGuardarAsientoContable;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosAsientoContable() {
		return isVisibilidadCeldaGuardarCambiosAsientoContable;
	}

	public void setIsVisibilidadCeldaGuardarCambiosAsientoContable(Boolean isVisibilidadCeldaGuardarCambiosAsientoContable) {
		this.isVisibilidadCeldaGuardarCambiosAsientoContable = isVisibilidadCeldaGuardarCambiosAsientoContable;
	}
		
	public AsientoContableSessionBean getasientocontableSessionBean() {
		return this.asientocontableSessionBean;
	}
	
	public void setasientocontableSessionBean(AsientoContableSessionBean asientocontableSessionBean) {
		this.asientocontableSessionBean=asientocontableSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorBeneficiario() {
		return this.isVisibilidadBusquedaPorBeneficiario;
	}

	public void setisVisibilidadBusquedaPorBeneficiario(Boolean isVisibilidadBusquedaPorBeneficiario) {
		this.isVisibilidadBusquedaPorBeneficiario=isVisibilidadBusquedaPorBeneficiario;
	}

	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorFechaEmision() {
		return this.isVisibilidadBusquedaPorFechaEmision;
	}

	public void setisVisibilidadBusquedaPorFechaEmision(Boolean isVisibilidadBusquedaPorFechaEmision) {
		this.isVisibilidadBusquedaPorFechaEmision=isVisibilidadBusquedaPorFechaEmision;
	}

	public Boolean getisVisibilidadBusquedaPorNumeroMayor() {
		return this.isVisibilidadBusquedaPorNumeroMayor;
	}

	public void setisVisibilidadBusquedaPorNumeroMayor(Boolean isVisibilidadBusquedaPorNumeroMayor) {
		this.isVisibilidadBusquedaPorNumeroMayor=isVisibilidadBusquedaPorNumeroMayor;
	}

	public Boolean getisVisibilidadBusquedaPorNumeroRetencion() {
		return this.isVisibilidadBusquedaPorNumeroRetencion;
	}

	public void setisVisibilidadBusquedaPorNumeroRetencion(Boolean isVisibilidadBusquedaPorNumeroRetencion) {
		this.isVisibilidadBusquedaPorNumeroRetencion=isVisibilidadBusquedaPorNumeroRetencion;
	}

	public Boolean getisVisibilidadBusquedaPorValor() {
		return this.isVisibilidadBusquedaPorValor;
	}

	public void setisVisibilidadBusquedaPorValor(Boolean isVisibilidadBusquedaPorValor) {
		this.isVisibilidadBusquedaPorValor=isVisibilidadBusquedaPorValor;
	}

	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoDescripcionAsiento() {
		return this.isVisibilidadFK_IdTipoDescripcionAsiento;
	}

	public void setisVisibilidadFK_IdTipoDescripcionAsiento(Boolean isVisibilidadFK_IdTipoDescripcionAsiento) {
		this.isVisibilidadFK_IdTipoDescripcionAsiento=isVisibilidadFK_IdTipoDescripcionAsiento;
	}

	public Boolean getisVisibilidadFK_IdTipoDocumento() {
		return this.isVisibilidadFK_IdTipoDocumento;
	}

	public void setisVisibilidadFK_IdTipoDocumento(Boolean isVisibilidadFK_IdTipoDocumento) {
		this.isVisibilidadFK_IdTipoDocumento=isVisibilidadFK_IdTipoDocumento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimiento() {
		return this.isVisibilidadFK_IdTipoMovimiento;
	}

	public void setisVisibilidadFK_IdTipoMovimiento(Boolean isVisibilidadFK_IdTipoMovimiento) {
		this.isVisibilidadFK_IdTipoMovimiento=isVisibilidadFK_IdTipoMovimiento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimientoModulo() {
		return this.isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public void setisVisibilidadFK_IdTipoMovimientoModulo(Boolean isVisibilidadFK_IdTipoMovimientoModulo) {
		this.isVisibilidadFK_IdTipoMovimientoModulo=isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysAsientoContable(AsientoContable asientocontable)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(asientocontable,null);
				this.setActualParaGuardarSucursalForeignKey(asientocontable,null);
				this.setActualParaGuardarEjercicioForeignKey(asientocontable,null);
				this.setActualParaGuardarPeriodoForeignKey(asientocontable,null);
				this.setActualParaGuardarAnioForeignKey(asientocontable,null);
				this.setActualParaGuardarMesForeignKey(asientocontable,null);
				this.setActualParaGuardarModuloForeignKey(asientocontable,null);
				this.setActualParaGuardarUsuarioForeignKey(asientocontable,null);
				this.setActualParaGuardarTipoDocumentoForeignKey(asientocontable,null);
				this.setActualParaGuardarTipoMovimientoForeignKey(asientocontable,null);
				this.setActualParaGuardarMonedaForeignKey(asientocontable,null);
				this.setActualParaGuardarClienteForeignKey(asientocontable,null);
				this.setActualParaGuardarTipoDescripcionAsientoForeignKey(asientocontable,null);
				this.setActualParaGuardarFormatoForeignKey(asientocontable,null);
				this.setActualParaGuardarEstadoAsientoContableForeignKey(asientocontable,null);
				this.setActualParaGuardarTipoMovimientoModuloForeignKey(asientocontable,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(AsientoContable asientocontable,AsientoContable asientocontableAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalAsientoContable(asientocontable);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		asientocontableAux.setId(asientocontable.getId());
		asientocontableAux.setVersionRow(asientocontable.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessAsientoContable();
		
			int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = asientocontableValidator.getInvalidValues(this.asientocontable);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			asientocontableLogic.setDatosCliente(datosCliente);
			asientocontableLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				asientocontableAux=new  AsientoContable();
				
				asientocontableAux.setIsNew(true);
				asientocontableAux.setIsChanged(true);
				
				asientocontableAux.setAsientoContableOriginal(this.asientocontable);
				
				asientocontableAux.setId(this.asientocontable.getId());	
				asientocontableAux.setVersionRow(this.asientocontable.getVersionRow());	
				asientocontableAux.setid_empresa(this.asientocontable.getid_empresa());	
				asientocontableAux.setid_sucursal(this.asientocontable.getid_sucursal());	
				asientocontableAux.setid_ejercicio(this.asientocontable.getid_ejercicio());	
				asientocontableAux.setid_periodo(this.asientocontable.getid_periodo());	
				asientocontableAux.setid_anio(this.asientocontable.getid_anio());	
				asientocontableAux.setid_mes(this.asientocontable.getid_mes());	
				asientocontableAux.setid_modulo(this.asientocontable.getid_modulo());	
				asientocontableAux.setid_usuario(this.asientocontable.getid_usuario());	
				asientocontableAux.setid_tipo_documento(this.asientocontable.getid_tipo_documento());	
				asientocontableAux.setcodigo(this.asientocontable.getcodigo());	
				asientocontableAux.setfecha(this.asientocontable.getfecha());	
				asientocontableAux.setid_tipo_movimiento(this.asientocontable.getid_tipo_movimiento());	
				asientocontableAux.setnumero_mayor(this.asientocontable.getnumero_mayor());	
				asientocontableAux.setid_moneda(this.asientocontable.getid_moneda());	
				asientocontableAux.setes_retencion(this.asientocontable.getes_retencion());	
				asientocontableAux.setnumero_retencion(this.asientocontable.getnumero_retencion());	
				asientocontableAux.setvalor(this.asientocontable.getvalor());	
				asientocontableAux.setes_retencion_iva(this.asientocontable.getes_retencion_iva());	
				asientocontableAux.setnumero_retencion_iva(this.asientocontable.getnumero_retencion_iva());	
				asientocontableAux.setcotizacion(this.asientocontable.getcotizacion());	
				asientocontableAux.setid_cliente(this.asientocontable.getid_cliente());	
				asientocontableAux.setid_tipo_descripcion_asiento(this.asientocontable.getid_tipo_descripcion_asiento());	
				asientocontableAux.setid_formato(this.asientocontable.getid_formato());	
				asientocontableAux.setbeneficiario(this.asientocontable.getbeneficiario());	
				asientocontableAux.setdescripcion(this.asientocontable.getdescripcion());	
				asientocontableAux.setfecha_emision(this.asientocontable.getfecha_emision());	
				asientocontableAux.setfecha_finalizacion(this.asientocontable.getfecha_finalizacion());	
				asientocontableAux.setid_estado_asiento_contable(this.asientocontable.getid_estado_asiento_contable());	
				asientocontableAux.setid_tipo_movimiento_modulo(this.asientocontable.getid_tipo_movimiento_modulo());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.asientocontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(asientocontableAux,asientocontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.asientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.saveAsientoContables();//WithConnection
						//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);
					
					this.refrescarForeignKeysDescripcionesAsientoContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris().addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars().addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves().addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos().addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables().addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions().addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris.addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars.addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves.addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos.addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables.addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions.addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								asientocontableLogic.saveAsientoContableRelaciones(asientocontableAux,this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris(),this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars(),this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves(),this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos(),this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables(),this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());//WithConnection
								//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.setSris(new ArrayList<Sri>());
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.setDetalleMoviClienProves(new ArrayList<DetalleMoviClienProve>());
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.setPrestamos(new ArrayList<Prestamo>());
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.setRetencions(new ArrayList<Retencion>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris= new ArrayList<Sri>();
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars= new ArrayList<ImportarExportar>();
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves= new ArrayList<DetalleMoviClienProve>();
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos= new ArrayList<Prestamo>();
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables= new ArrayList<DetalleAsientoContable>();
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions= new ArrayList<Retencion>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris());

							if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars());

							if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves());

							if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos());

							if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables());

							if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.asientocontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(asientocontableAux,asientocontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				asientocontableAux=new  AsientoContable();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.asientocontableSessionBean.getEsGuardarRelacionado() 
					|| (this.asientocontableSessionBean.getEsGuardarRelacionado() && this.asientocontable.getId()>=0)) {
						
					asientocontableAux.setIsNew(false);
				}
				
				asientocontableAux.setIsDeleted(false);
			
				asientocontableAux.setId(this.asientocontable.getId());	
				asientocontableAux.setVersionRow(this.asientocontable.getVersionRow());	
				asientocontableAux.setid_empresa(this.asientocontable.getid_empresa());	
				asientocontableAux.setid_sucursal(this.asientocontable.getid_sucursal());	
				asientocontableAux.setid_ejercicio(this.asientocontable.getid_ejercicio());	
				asientocontableAux.setid_periodo(this.asientocontable.getid_periodo());	
				asientocontableAux.setid_anio(this.asientocontable.getid_anio());	
				asientocontableAux.setid_mes(this.asientocontable.getid_mes());	
				asientocontableAux.setid_modulo(this.asientocontable.getid_modulo());	
				asientocontableAux.setid_usuario(this.asientocontable.getid_usuario());	
				asientocontableAux.setid_tipo_documento(this.asientocontable.getid_tipo_documento());	
				asientocontableAux.setcodigo(this.asientocontable.getcodigo());	
				asientocontableAux.setfecha(this.asientocontable.getfecha());	
				asientocontableAux.setid_tipo_movimiento(this.asientocontable.getid_tipo_movimiento());	
				asientocontableAux.setnumero_mayor(this.asientocontable.getnumero_mayor());	
				asientocontableAux.setid_moneda(this.asientocontable.getid_moneda());	
				asientocontableAux.setes_retencion(this.asientocontable.getes_retencion());	
				asientocontableAux.setnumero_retencion(this.asientocontable.getnumero_retencion());	
				asientocontableAux.setvalor(this.asientocontable.getvalor());	
				asientocontableAux.setes_retencion_iva(this.asientocontable.getes_retencion_iva());	
				asientocontableAux.setnumero_retencion_iva(this.asientocontable.getnumero_retencion_iva());	
				asientocontableAux.setcotizacion(this.asientocontable.getcotizacion());	
				asientocontableAux.setid_cliente(this.asientocontable.getid_cliente());	
				asientocontableAux.setid_tipo_descripcion_asiento(this.asientocontable.getid_tipo_descripcion_asiento());	
				asientocontableAux.setid_formato(this.asientocontable.getid_formato());	
				asientocontableAux.setbeneficiario(this.asientocontable.getbeneficiario());	
				asientocontableAux.setdescripcion(this.asientocontable.getdescripcion());	
				asientocontableAux.setfecha_emision(this.asientocontable.getfecha_emision());	
				asientocontableAux.setfecha_finalizacion(this.asientocontable.getfecha_finalizacion());	
				asientocontableAux.setid_estado_asiento_contable(this.asientocontable.getid_estado_asiento_contable());	
				asientocontableAux.setid_tipo_movimiento_modulo(this.asientocontable.getid_tipo_movimiento_modulo());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(asientocontableAux,asientocontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.asientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.saveAsientoContables();//WithConnection
						//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);
					
					this.refrescarForeignKeysDescripcionesAsientoContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris().addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars().addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves().addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos().addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables().addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions().addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris.addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars.addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves.addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos.addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables.addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions.addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						}
						//ARCHITECTURE
						
						if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								asientocontableLogic.saveAsientoContableRelaciones(asientocontableAux,this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris(),this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars(),this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves(),this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos(),this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables(),this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());//WithConnection
								//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.setSris(new ArrayList<Sri>());
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.setDetalleMoviClienProves(new ArrayList<DetalleMoviClienProve>());
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.setPrestamos(new ArrayList<Prestamo>());
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.setRetencions(new ArrayList<Retencion>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris= new ArrayList<Sri>();
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars= new ArrayList<ImportarExportar>();
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves= new ArrayList<DetalleMoviClienProve>();
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos= new ArrayList<Prestamo>();
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables= new ArrayList<DetalleAsientoContable>();
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions= new ArrayList<Retencion>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris());

							if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars());

							if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves());

							if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos());

							if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables());

							if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.asientocontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(asientocontableAux,asientocontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.asientocontable,asientocontableAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				asientocontableAux=new  AsientoContable();
				
				asientocontableAux.setIsNew(false);
				asientocontableAux.setIsChanged(false);
				
				asientocontableAux.setIsDeleted(true);
				
				asientocontableAux.setId(this.asientocontable.getId());	
				asientocontableAux.setVersionRow(this.asientocontable.getVersionRow());	
				asientocontableAux.setid_empresa(this.asientocontable.getid_empresa());	
				asientocontableAux.setid_sucursal(this.asientocontable.getid_sucursal());	
				asientocontableAux.setid_ejercicio(this.asientocontable.getid_ejercicio());	
				asientocontableAux.setid_periodo(this.asientocontable.getid_periodo());	
				asientocontableAux.setid_anio(this.asientocontable.getid_anio());	
				asientocontableAux.setid_mes(this.asientocontable.getid_mes());	
				asientocontableAux.setid_modulo(this.asientocontable.getid_modulo());	
				asientocontableAux.setid_usuario(this.asientocontable.getid_usuario());	
				asientocontableAux.setid_tipo_documento(this.asientocontable.getid_tipo_documento());	
				asientocontableAux.setcodigo(this.asientocontable.getcodigo());	
				asientocontableAux.setfecha(this.asientocontable.getfecha());	
				asientocontableAux.setid_tipo_movimiento(this.asientocontable.getid_tipo_movimiento());	
				asientocontableAux.setnumero_mayor(this.asientocontable.getnumero_mayor());	
				asientocontableAux.setid_moneda(this.asientocontable.getid_moneda());	
				asientocontableAux.setes_retencion(this.asientocontable.getes_retencion());	
				asientocontableAux.setnumero_retencion(this.asientocontable.getnumero_retencion());	
				asientocontableAux.setvalor(this.asientocontable.getvalor());	
				asientocontableAux.setes_retencion_iva(this.asientocontable.getes_retencion_iva());	
				asientocontableAux.setnumero_retencion_iva(this.asientocontable.getnumero_retencion_iva());	
				asientocontableAux.setcotizacion(this.asientocontable.getcotizacion());	
				asientocontableAux.setid_cliente(this.asientocontable.getid_cliente());	
				asientocontableAux.setid_tipo_descripcion_asiento(this.asientocontable.getid_tipo_descripcion_asiento());	
				asientocontableAux.setid_formato(this.asientocontable.getid_formato());	
				asientocontableAux.setbeneficiario(this.asientocontable.getbeneficiario());	
				asientocontableAux.setdescripcion(this.asientocontable.getdescripcion());	
				asientocontableAux.setfecha_emision(this.asientocontable.getfecha_emision());	
				asientocontableAux.setfecha_finalizacion(this.asientocontable.getfecha_finalizacion());	
				asientocontableAux.setid_estado_asiento_contable(this.asientocontable.getid_estado_asiento_contable());	
				asientocontableAux.setid_tipo_movimiento_modulo(this.asientocontable.getid_tipo_movimiento_modulo());	
				
				if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.asientocontableAux.getId()>=0) {	
						this.asientocontablesEliminados.add(asientocontableAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(asientocontableAux,asientocontables);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.asientocontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.saveAsientoContables();//WithConnection
						//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris().addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars().addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves().addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos().addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables().addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions().addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris.addAll(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.srisEliminados);
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars.addAll(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarsEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves.addAll(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienprovesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos.addAll(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamosEliminados);
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables.addAll(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontablesEliminados);
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions.addAll(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionsEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.abonoprestamoBeanSwingJInternalFrame.quitarFilaTotales();*/}
									if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jInternalFrameDetalleFormPrestamo.cuotaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								asientocontableLogic.saveAsientoContableRelaciones(asientocontableAux,this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris(),this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars(),this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves(),this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos(),this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables(),this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());//WithConnection
								//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.setSris(new ArrayList<Sri>());
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.setImportarExportars(new ArrayList<ImportarExportar>());
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.setDetalleMoviClienProves(new ArrayList<DetalleMoviClienProve>());
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.setPrestamos(new ArrayList<Prestamo>());
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.setDetalleAsientoContables(new ArrayList<DetalleAsientoContable>());
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.setRetencions(new ArrayList<Retencion>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris= new ArrayList<Sri>();
							this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars= new ArrayList<ImportarExportar>();
							this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves= new ArrayList<DetalleMoviClienProve>();
							this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos= new ArrayList<Prestamo>();
							this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables= new ArrayList<DetalleAsientoContable>();
							this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions= new ArrayList<Retencion>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris());

							if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars());

							if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves());

							if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos());

							if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables());

							if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.quitarFilaTotales();}
							asientocontableAux.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
								|| this.asientocontableSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(asientocontableAux,asientocontableLogic.getAsientoContables());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(asientocontableAux,asientocontables);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getAsientoContables().addAll(this.asientocontablesEliminados);
					
					asientocontableLogic.saveAsientoContables();//WithConnection
					//asientocontableLogic.getSetVersionRowAsientoContables();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesAsientoContable();
				
				this.asientocontablesEliminados= new ArrayList<AsientoContable>();		
			}
			
			if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Asiento Contable GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.asientocontable=asientocontableAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessAsientoContable();
      	}
		
	}	
	
	public void actualizarRelaciones(AsientoContable asientocontableLocal) throws Exception {
		
		if(this.asientocontableSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				asientocontableLocal.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris());
				asientocontableLocal.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars());
				asientocontableLocal.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves());
				asientocontableLocal.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos());
				asientocontableLocal.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables());
				asientocontableLocal.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());
			
			} else {
			
				asientocontableLocal.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sris);
				asientocontableLocal.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportars);
				asientocontableLocal.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproves);
				asientocontableLocal.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamos);
				asientocontableLocal.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontables);
				asientocontableLocal.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencions);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(AsientoContable asientocontableLocal) throws Exception {	
		if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				asientocontableLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				asientocontableLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				asientocontableLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				asientocontableLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				asientocontableLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				asientocontableLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				asientocontableLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				asientocontableLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDocumentoDetalleFormJInternalFrame.class)) {
				TipoDocumentoBeanSwingJInternalFrame tipodocumentoBeanSwingJInternalFrameLocal=(TipoDocumentoBeanSwingJInternalFrame) ((TipoDocumentoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodocumentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.gettipodocumento(),true);
				tipodocumentoBeanSwingJInternalFrameLocal.actualizarLista(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento,this.tipodocumentosForeignKey);

				tipodocumentoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				asientocontableLocal.setTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey("Formulario");
				this.setActualTipoDocumentoForeignKey(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoDetalleFormJInternalFrame.class)) {
				TipoMovimientoBeanSwingJInternalFrame tipomovimientoBeanSwingJInternalFrameLocal=(TipoMovimientoBeanSwingJInternalFrame) ((TipoMovimientoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.gettipomovimiento(),true);
				tipomovimientoBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento,this.tipomovimientosForeignKey);

				tipomovimientoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				asientocontableLocal.setTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey("Formulario");
				this.setActualTipoMovimientoForeignKey(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				asientocontableLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				asientocontableLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDescripcionAsientoDetalleFormJInternalFrame.class)) {
				TipoDescripcionAsientoBeanSwingJInternalFrame tipodescripcionasientoBeanSwingJInternalFrameLocal=(TipoDescripcionAsientoBeanSwingJInternalFrame) ((TipoDescripcionAsientoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodescripcionasientoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDescripcionAsiento(tipodescripcionasientoBeanSwingJInternalFrameLocal.gettipodescripcionasiento(),true);
				tipodescripcionasientoBeanSwingJInternalFrameLocal.actualizarLista(tipodescripcionasientoBeanSwingJInternalFrameLocal.tipodescripcionasiento,this.tipodescripcionasientosForeignKey);

				tipodescripcionasientoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodescripcionasientoBeanSwingJInternalFrameLocal.tipodescripcionasiento);

				asientocontableLocal.setTipoDescripcionAsiento(tipodescripcionasientoBeanSwingJInternalFrameLocal.tipodescripcionasiento);

				this.addItemDefectoCombosForeignKeyTipoDescripcionAsiento();
				this.cargarCombosFrameTipoDescripcionAsientosForeignKey("Formulario");
				this.setActualTipoDescripcionAsientoForeignKey(tipodescripcionasientoBeanSwingJInternalFrameLocal.tipodescripcionasiento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				asientocontableLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoAsientoContableDetalleFormJInternalFrame.class)) {
				EstadoAsientoContableBeanSwingJInternalFrame estadoasientocontableBeanSwingJInternalFrameLocal=(EstadoAsientoContableBeanSwingJInternalFrame) ((EstadoAsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadoasientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoAsientoContable(estadoasientocontableBeanSwingJInternalFrameLocal.getestadoasientocontable(),true);
				estadoasientocontableBeanSwingJInternalFrameLocal.actualizarLista(estadoasientocontableBeanSwingJInternalFrameLocal.estadoasientocontable,this.estadoasientocontablesForeignKey);

				estadoasientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(estadoasientocontableBeanSwingJInternalFrameLocal.estadoasientocontable);

				asientocontableLocal.setEstadoAsientoContable(estadoasientocontableBeanSwingJInternalFrameLocal.estadoasientocontable);

				this.addItemDefectoCombosForeignKeyEstadoAsientoContable();
				this.cargarCombosFrameEstadoAsientoContablesForeignKey("Formulario");
				this.setActualEstadoAsientoContableForeignKey(estadoasientocontableBeanSwingJInternalFrameLocal.estadoasientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoModuloDetalleFormJInternalFrame.class)) {
				TipoMovimientoModuloBeanSwingJInternalFrame tipomovimientomoduloBeanSwingJInternalFrameLocal=(TipoMovimientoModuloBeanSwingJInternalFrame) ((TipoMovimientoModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientomoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.gettipomovimientomodulo(),true);
				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo,this.tipomovimientomodulosForeignKey);

				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				asientocontableLocal.setTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey("Formulario");
				this.setActualTipoMovimientoModuloForeignKey(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarAsientoContableActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = asientocontableValidator.getInvalidValues(this.asientocontable);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(AsientoContable asientocontable,List<AsientoContable> asientocontables) throws Exception {
		try	{		
			AsientoContableConstantesFunciones.actualizarLista(asientocontable,asientocontables,this.asientocontableSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(AsientoContable asientocontable,List<AsientoContable> asientocontables) throws Exception {
		try	{			
			AsientoContableConstantesFunciones.actualizarSelectedLista(asientocontable,asientocontables);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<AsientoContable> asientocontablesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				asientocontablesLocal=this.asientocontableLogic.getAsientoContables();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				asientocontablesLocal=this.asientocontables;
			}
			//ARCHITECTURE
		
			for(AsientoContable asientocontableLocal:asientocontablesLocal) {
				if(this.permiteMantenimiento(asientocontableLocal) && asientocontableLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+AsientoContableConstantesFunciones.getAsientoContableLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_empresaAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_sucursalAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_ejercicioAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_periodoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_anioAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_mesAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_moduloAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_usuarioAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDTIPODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_documentoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelcodigoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelfechaAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDTIPOMOVIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_movimientoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.NUMEROMAYOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_mayorAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_monedaAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.ESRETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.NUMERORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.VALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelvalorAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.ESRETENCIONIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencion_ivaAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.NUMERORETENCIONIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencion_ivaAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.COTIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelcotizacionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_clienteAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDTIPODESCRIPCIONASIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_descripcion_asientoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_formatoAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.BENEFICIARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelbeneficiarioAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeldescripcionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelfecha_emisionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.FECHAFINALIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelfecha_finalizacionAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDESTADOASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_estado_asiento_contableAsientoContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AsientoContableConstantesFunciones.IDTIPOMOVIMIENTOMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_movimiento_moduloAsientoContable,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_empresaAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_sucursalAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_ejercicioAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_periodoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_anioAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_mesAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_moduloAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_usuarioAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_documentoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelcodigoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelfechaAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_movimientoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_mayorAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_monedaAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelvalorAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencion_ivaAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencion_ivaAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelcotizacionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_clienteAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_descripcion_asientoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_formatoAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelbeneficiarioAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabeldescripcionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelfecha_emisionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelfecha_finalizacionAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_estado_asiento_contableAsientoContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAsientoContable.jLabelid_tipo_movimiento_moduloAsientoContable,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("Sri")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.getsri().setAsientoContable(this.asientocontable);
			}

			return;
		}
		 else  if(sTipo.equals("ImportarExportar")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.getimportarexportar().setAsientoContable(this.asientocontable);
			}

			return;
		}
		 else  if(sTipo.equals("DetalleMoviClienProve")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.getdetallemoviclienprove().setAsientoContable(this.asientocontable);
			}

			return;
		}
		 else  if(sTipo.equals("Prestamo")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.getprestamo().setAsientoContable(this.asientocontable);
			}

			return;
		}
		 else  if(sTipo.equals("DetalleAsientoContable")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.getdetalleasientocontable().setAsientoContable(this.asientocontable);
			}

			return;
		}
		 else  if(sTipo.equals("Retencion")) {
			if(this.asientocontable==null) {
				this.asientocontable= new AsientoContable();
			}

			if(this.asientocontableSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoAsientoContable
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.getretencion().setAsientoContable(this.asientocontable);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoAsientoContable--;	
		
		
		this.asientocontableAux=new AsientoContable();
		
		this.asientocontableAux.setId(this.iIdNuevoAsientoContable);
		this.asientocontableAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.asientocontableLogic.getAsientoContables().add(this.asientocontableAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.asientocontables.add(this.asientocontableAux);
		}
		//ARCHITECTURE
		
		this.asientocontable=this.asientocontableAux;
		
		if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioAsientoContable(this.asientocontable);
			this.setVariablesObjetoActualToFormularioForeignKeyAsientoContable(this.asientocontable);
		}
				
		//this.setDefaultControlesAsientoContable();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyAsientoContable();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyAsientoContable();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyAsientoContable();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualAsientoContable(this.asientocontableBean,this.asientocontable,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(AsientoContableConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
			classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.asientocontableReturnGeneral=asientocontableLogic.procesarEventosAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.asientocontableLogic.getAsientoContables(),this.asientocontable,this.asientocontableParameterGeneral,this.isEsNuevoAsientoContable,classes);//this.asientocontableLogic.getAsientoContable()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanAsientoContable(this.asientocontableReturnGeneral,this.asientocontableBean,false);
		
		if(this.asientocontableReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyAsientoContable(this.asientocontableReturnGeneral.getAsientoContable());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioAsientoContable(this.asientocontableReturnGeneral.getAsientoContable());
		}
		
		if(this.asientocontableReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioAsientoContable(this.asientocontableReturnGeneral.getAsientoContable(),classes);//this.asientocontableBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyAsientoContable();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyAsientoContable();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			AsientoContableBeanSwingJInternalFrameAdditional.RecargarFormAsientoContable(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingAsientoContable(false);
						
			if(asientocontableSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriSessionBean.getEsGuardarRelacionado() && SriJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonSriActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.getEsGuardarRelacionado() && ImportarExportarJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonImportarExportarActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.getEsGuardarRelacionado() && DetalleMoviClienProveJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleMoviClienProveActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoSessionBean.getEsGuardarRelacionado() && PrestamoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPrestamoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.getEsGuardarRelacionado() && DetalleAsientoContableJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleAsientoContableActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionSessionBean.getEsGuardarRelacionado() && RetencionJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonRetencionActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAsientoContable();
			}
			
			this.actualizarVisualTableDatosAsientoContable();
			
			this.jTableDatosAsientoContable.setRowSelectionInterval(this.getIndiceNuevoAsientoContable(), this.getIndiceNuevoAsientoContable());
			
			this.seleccionarFilaTablaAsientoContableActual();
						
			this.actualizarEstadoCeldasBotonesAsientoContable("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesAsientoContable(Boolean isHabilitar) throws Exception {
		//
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarcodigoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarfechaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarnumero_mayorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activares_retencionAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarnumero_retencionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarvalorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activares_retencion_ivaAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarnumero_retencion_ivaAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarcotizacionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarbeneficiarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activardescripcionAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_emisionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarfecha_emisionAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarfecha_finalizacionAsientoContable);	
		//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_empresaAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_sucursalAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_ejercicioAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_periodoAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_anioAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_mesAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_moduloAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_usuarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_tipo_documentoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_tipo_movimientoAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_monedaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_clienteAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_tipo_descripcion_asientoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_formatoAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_estado_asiento_contableAsientoContable);//
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setEnabled(isHabilitar && this.asientocontableConstantesFunciones.activarid_tipo_movimiento_moduloAsientoContable);
	};
	
	public void setDefaultControlesAsientoContable() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoAsientoContable(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.asientocontableSessionBean.setConGuardarRelaciones(true);			
			this.asientocontableSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.asientocontableSessionBean.setConGuardarRelaciones(false);			
			this.asientocontableSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoAsientoContable() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
				if(asientocontableAux.getId().equals(this.iIdNuevoAsientoContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AsientoContable asientocontableAux:this.asientocontables) {
				if(asientocontableAux.getId().equals(this.iIdNuevoAsientoContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualAsientoContable(AsientoContable asientocontable,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
				if(asientocontableAux.getId().equals(asientocontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AsientoContable asientocontableAux:this.asientocontables) {
				if(asientocontableAux.getId().equals(asientocontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalAsientoContable(AsientoContable asientocontableOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
				if(asientocontableAux.getAsientoContableOriginal().getId().equals(asientocontableOriginal.getId())) {
					existe=true;
					asientocontableOriginal.setId(asientocontableAux.getId());
					asientocontableOriginal.setVersionRow(asientocontableAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AsientoContable asientocontableAux:this.asientocontables) {
				if(asientocontableAux.getAsientoContableOriginal().getId().equals(asientocontableOriginal.getId())) {
					existe=true;
					asientocontableOriginal.setId(asientocontableAux.getId());
					asientocontableOriginal.setVersionRow(asientocontableAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosAsientoContable(Boolean esParaCancelar) throws Exception {
		asientocontablesAux=new ArrayList<AsientoContable>();
		asientocontableAux=new AsientoContable();
		
		if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
					if(asientocontableAux.getId()<0) {
						asientocontablesAux.add(asientocontableAux);
					}		
				}
				this.iIdNuevoAsientoContable=0L;
				this.asientocontableLogic.getAsientoContables().removeAll(asientocontablesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AsientoContable asientocontableAux:this.asientocontables) {
					if(asientocontableAux.getId()<0) {
						asientocontablesAux.add(asientocontableAux);
					}		
				}
				this.iIdNuevoAsientoContable=0L;
				this.asientocontables.removeAll(asientocontablesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoAsientoContable 
					&& this.asientocontableLogic.getAsientoContables().size()>0
					) {
					asientocontableAux=this.asientocontableLogic.getAsientoContables().get(this.asientocontableLogic.getAsientoContables().size() - 1);
				
					if(asientocontableAux.getId()<0) {
						this.asientocontableLogic.getAsientoContables().remove(asientocontableAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoAsientoContable && this.asientocontables.size()>0) {
					asientocontableAux=this.asientocontables.get(this.asientocontables.size() - 1);
				
					if(asientocontableAux.getId()<0) {
						this.asientocontables.remove(asientocontableAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoAsientoContable(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(asientocontable.getId()<0) {
				this.asientocontableLogic.getAsientoContables().remove(this.asientocontable);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(asientocontable.getId()<0) {
				this.asientocontables.remove(this.asientocontable);
			}
		}			
	}
	
	public void setEstadosInicialesAsientoContable(List<AsientoContable> asientocontablesAux) throws Exception {
		AsientoContableConstantesFunciones.setEstadosInicialesAsientoContable(asientocontablesAux);
	}
	
	public void setEstadosInicialesAsientoContable(AsientoContable asientocontableAux) throws Exception {
		AsientoContableConstantesFunciones.setEstadosInicialesAsientoContable(asientocontableAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarAsientoContableActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarAsientoContableActual()) {
				if(!this.isEsNuevoAsientoContable) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoAsientoContable=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarAsientoContableActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Asiento Contable ?", "MANTENIMIENTO DE Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(AsientoContable asientocontable) throws Exception {
		AsientoContableConstantesFunciones.seleccionarAsignar(this.asientocontable,asientocontable);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarAsientoContable=this.isPermisoActualizarOriginalAsientoContable;
			
			
			this.seleccionarAsignar(asientocontable);
			
			

			idClienteActual=asientocontable.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			AsientoContableConstantesFunciones.quitarEspaciosAsientoContable(this.asientocontable,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.asientocontableSessionBean.setsFuncionBusquedaRapida(this.asientocontableSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoAsientoContable) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosAsientoContable(esParaCancelar);				
				this.cancelarNuevoAsientoContable(esParaCancelar);								
			}
			
			this.asientocontable=new AsientoContable();
			
			this.inicializarAsientoContable();
			
			this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarAsientoContable() throws Exception {
		try {
			AsientoContableConstantesFunciones.inicializarAsientoContable(this.asientocontable);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.asientocontableLogic.getAsientoContables().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteAsientoContables(String sAccionBusqueda,List<AsientoContable> asientocontablesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="AsientoContable"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="AsientoContableMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("AsientoContableMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="AsientoContable"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Asiento Contables");		
		parameters.put("busquedapor", AsientoContableConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(Sri.class));
			classes.add(new Classe(ImportarExportar.class));
			classes.add(new Classe(DetalleMoviClienProve.class));
			classes.add(new Classe(Prestamo.class));
			classes.add(new Classe(DetalleAsientoContable.class));
			classes.add(new Classe(Retencion.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					AsientoContableLogic asientocontableLogicAuxiliar=new AsientoContableLogic();
					asientocontableLogicAuxiliar.setDatosCliente(asientocontableLogic.getDatosCliente());				
					asientocontableLogicAuxiliar.setAsientoContables(asientocontablesParaReportes);
					
					asientocontableLogicAuxiliar.cargarRelacionesLoteForeignKeyAsientoContableWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					asientocontablesParaReportes=asientocontableLogicAuxiliar.getAsientoContables();
					
					//asientocontableLogic.getNewConnexionToDeep();
					
					//for (AsientoContable asientocontable:asientocontablesParaReportes) {
					//	asientocontableLogic.deepLoad(asientocontable, false, DeepLoadType.INCLUDE, classes);
					//}						
					//asientocontableLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//asientocontableLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileSri = AuxiliarReportes.class.getResourceAsStream("SriDetalleRelacionesDesign.jasper");
			parameters.put("subreport_sri", reportFileSri);

			InputStream reportFileImportarExportar = AuxiliarReportes.class.getResourceAsStream("ImportarExportarDetalleRelacionesDesign.jasper");
			parameters.put("subreport_importarexportar", reportFileImportarExportar);

			InputStream reportFileDetalleMoviClienProve = AuxiliarReportes.class.getResourceAsStream("DetalleMoviClienProveDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallemoviclienprove", reportFileDetalleMoviClienProve);

			InputStream reportFilePrestamo = AuxiliarReportes.class.getResourceAsStream("PrestamoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_prestamo", reportFilePrestamo);

			InputStream reportFileDetalleAsientoContable = AuxiliarReportes.class.getResourceAsStream("DetalleAsientoContableDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detalleasientocontable", reportFileDetalleAsientoContable);

			InputStream reportFileRetencion = AuxiliarReportes.class.getResourceAsStream("RetencionDetalleRelacionesDesign.jasper");
			parameters.put("subreport_retencion", reportFileRetencion);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceAsientoContable=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			AsientoContableConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			AsientoContableConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceAsientoContable=new JRBeanArrayDataSource(AsientoContableJInternalFrame.TraerAsientoContableBeans(asientocontablesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceAsientoContable);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+AsientoContableConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+AsientoContableConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(AsientoContableBean.TraerAsientoContableBeans(asientocontablesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoAsientoContableActionPerformed(null);
					//this.generarExcelReporteAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesAsientoContables(sAccionBusqueda,sTipoArchivoReporte,asientocontablesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<AsientoContable> asientocontablesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AsientoContables");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderAsientoContable("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(AsientoContable asientocontable : asientocontablesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			AsientoContableConstantesFunciones.generarExcelReporteDataAsientoContable("NORMAL",row,workbook,asientocontable,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderAsientoContable(String sTipo,Row row,Workbook workbook) {
		
		AsientoContableConstantesFunciones.generarExcelReporteHeaderAsientoContable(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<AsientoContable> asientocontablesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AsientoContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(AsientoContable asientocontable : asientocontablesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontable));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.gettipodocumento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.gettipomovimiento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getnumero_mayor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_ESRETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(asientocontable.getes_retencion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getnumero_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_VALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_VALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getvalor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(asientocontable.getes_retencion_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getnumero_retencion_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_COTIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_COTIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getcotizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.gettipodescripcionasiento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getbeneficiario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getfecha_finalizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.getestadoasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(asientocontable.gettipomovimientomodulo_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesAsientoContables(String sAccionBusqueda,String sTipoArchivoReporte,List<AsientoContable> asientocontablesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<AsientoContable> asientocontablesRespaldo=null;
		
		classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.asientocontableLogic.setDatosCliente(this.datosCliente);
		this.asientocontableLogic.setDatosDeep(this.datosDeep);
		this.asientocontableLogic.setIsConDeep(true);
		
		asientocontablesRespaldo=this.asientocontableLogic.getAsientoContables();
		
		this.asientocontableLogic.setAsientoContables(asientocontablesParaReportes);	
		this.asientocontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		asientocontablesParaReportes=this.asientocontableLogic.getAsientoContables();
		this.asientocontableLogic.setAsientoContables(asientocontablesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AsientoContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderAsientoContable("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(AsientoContable asientocontable : asientocontablesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderAsientoContable("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			AsientoContableConstantesFunciones.generarExcelReporteDataAsientoContable("NORMAL",row,workbook,asientocontable,cellStyleDataAux);
		
			
			


				//Sri
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(SriConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getSris()!=null && asientocontable.getSris().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(SriConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					SriConstantesFunciones.generarExcelReporteHeaderSri("RELACIONADO",row,workbook);
				}

				if(asientocontable.getSris()!=null) {
					i2=0;
					for(Sri sri : asientocontable.getSris()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						SriConstantesFunciones.generarExcelReporteDataSri("RELACIONADO",row,workbook,sri,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//ImportarExportar
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(ImportarExportarConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getImportarExportars()!=null && asientocontable.getImportarExportars().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(ImportarExportarConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					ImportarExportarConstantesFunciones.generarExcelReporteHeaderImportarExportar("RELACIONADO",row,workbook);
				}

				if(asientocontable.getImportarExportars()!=null) {
					i2=0;
					for(ImportarExportar importarexportar : asientocontable.getImportarExportars()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						ImportarExportarConstantesFunciones.generarExcelReporteDataImportarExportar("RELACIONADO",row,workbook,importarexportar,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//DetalleMoviClienProve
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleMoviClienProveConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getDetalleMoviClienProves()!=null && asientocontable.getDetalleMoviClienProves().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleMoviClienProveConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleMoviClienProveConstantesFunciones.generarExcelReporteHeaderDetalleMoviClienProve("RELACIONADO",row,workbook);
				}

				if(asientocontable.getDetalleMoviClienProves()!=null) {
					i2=0;
					for(DetalleMoviClienProve detallemoviclienprove : asientocontable.getDetalleMoviClienProves()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleMoviClienProveConstantesFunciones.generarExcelReporteDataDetalleMoviClienProve("RELACIONADO",row,workbook,detallemoviclienprove,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//Prestamo
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PrestamoConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getPrestamos()!=null && asientocontable.getPrestamos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PrestamoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PrestamoConstantesFunciones.generarExcelReporteHeaderPrestamo("RELACIONADO",row,workbook);
				}

				if(asientocontable.getPrestamos()!=null) {
					i2=0;
					for(Prestamo prestamo : asientocontable.getPrestamos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PrestamoConstantesFunciones.generarExcelReporteDataPrestamo("RELACIONADO",row,workbook,prestamo,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//DetalleAsientoContable
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getDetalleAsientoContables()!=null && asientocontable.getDetalleAsientoContables().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleAsientoContableConstantesFunciones.generarExcelReporteHeaderDetalleAsientoContable("RELACIONADO",row,workbook);
				}

				if(asientocontable.getDetalleAsientoContables()!=null) {
					i2=0;
					for(DetalleAsientoContable detalleasientocontable : asientocontable.getDetalleAsientoContables()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleAsientoContableConstantesFunciones.generarExcelReporteDataDetalleAsientoContable("RELACIONADO",row,workbook,detalleasientocontable,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//Retencion
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(RetencionConstantesFunciones.SCLASSWEBTITULO))) {

				if(asientocontable.getRetencions()!=null && asientocontable.getRetencions().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(RetencionConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					RetencionConstantesFunciones.generarExcelReporteHeaderRetencion("RELACIONADO",row,workbook);
				}

				if(asientocontable.getRetencions()!=null) {
					i2=0;
					for(Retencion retencion : asientocontable.getRetencions()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						RetencionConstantesFunciones.generarExcelReporteDataRetencion("RELACIONADO",row,workbook,retencion,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontable));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoAsientoContable.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessAsientoContable() throws Exception {		
		this.startProcessAsientoContable(true);
	}
	
	public void startProcessAsientoContable(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasAsientoContable ,this.jPanelParametrosReportesAsientoContable, this.jScrollPanelDatosAsientoContable,this.jPanelPaginacionAsientoContable, this.jScrollPanelDatosEdicionAsientoContable, this.jPanelAccionesAsientoContable,this.jPanelAccionesFormularioAsientoContable,this.jmenuBarAsientoContable,this.jmenuBarDetalleAsientoContable,this.jTtoolBarAsientoContable,this.jTtoolBarDetalleAsientoContable);		
		
		final JTabbedPane jTabbedPaneBusquedasAsientoContable=this.jTabbedPaneBusquedasAsientoContable; 
		
		final JPanel jPanelParametrosReportesAsientoContable=this.jPanelParametrosReportesAsientoContable;
		//final JScrollPane jScrollPanelDatosAsientoContable=this.jScrollPanelDatosAsientoContable;
		final JTable jTableDatosAsientoContable=this.jTableDatosAsientoContable;		
		final JPanel jPanelPaginacionAsientoContable=this.jPanelPaginacionAsientoContable;
		//final JScrollPane jScrollPanelDatosEdicionAsientoContable=this.jScrollPanelDatosEdicionAsientoContable;
		final JPanel jPanelAccionesAsientoContable=this.jPanelAccionesAsientoContable;
		
		JPanel jPanelCamposAuxiliarAsientoContable=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarAsientoContable=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			jPanelCamposAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jPanelCamposAsientoContable;
			jPanelAccionesFormularioAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jPanelAccionesFormularioAsientoContable;
		}
		
		final JPanel jPanelCamposAsientoContable=jPanelCamposAuxiliarAsientoContable;
		final JPanel jPanelAccionesFormularioAsientoContable=jPanelAccionesFormularioAuxiliarAsientoContable;
		
		
		final JMenuBar jmenuBarAsientoContable=this.jmenuBarAsientoContable;
		final JToolBar jTtoolBarAsientoContable=this.jTtoolBarAsientoContable;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarAsientoContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarAsientoContable=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			jmenuBarDetalleAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jmenuBarDetalleAsientoContable;
			jTtoolBarDetalleAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jTtoolBarDetalleAsientoContable;
		}
		
		final JMenuBar jmenuBarDetalleAsientoContable=jmenuBarDetalleAuxiliarAsientoContable;
		final JToolBar jTtoolBarDetalleAsientoContable=jTtoolBarDetalleAuxiliarAsientoContable;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasAsientoContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesAsientoContable;
			processRunnable.jTableDatos=jTableDatosAsientoContable;
			processRunnable.jPanelCampos=jPanelCamposAsientoContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionAsientoContable;
			processRunnable.jPanelAcciones=jPanelAccionesAsientoContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioAsientoContable;
			
			
			processRunnable.jmenuBar=jmenuBarAsientoContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleAsientoContable;
			processRunnable.jTtoolBar=jTtoolBarAsientoContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleAsientoContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasAsientoContable ,jPanelParametrosReportesAsientoContable,jTableDatosAsientoContable, /*jScrollPanelDatosAsientoContable,*/jPanelCamposAsientoContable,jPanelPaginacionAsientoContable, /*jScrollPanelDatosEdicionAsientoContable,*/ jPanelAccionesAsientoContable,jPanelAccionesFormularioAsientoContable,jmenuBarAsientoContable,jmenuBarDetalleAsientoContable,jTtoolBarAsientoContable,jTtoolBarDetalleAsientoContable);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasAsientoContable ,jPanelParametrosReportesAsientoContable, jScrollPanelDatosAsientoContable,jPanelPaginacionAsientoContable, jScrollPanelDatosEdicionAsientoContable, jPanelAccionesAsientoContable,jPanelAccionesFormularioAsientoContable,jmenuBarAsientoContable,jmenuBarDetalleAsientoContable,jTtoolBarAsientoContable,jTtoolBarDetalleAsientoContable);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessAsientoContable() {// throws Exception 
		this.finishProcessAsientoContable(true);
	}
	
	public void finishProcessAsientoContable(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasAsientoContable ,this.jPanelParametrosReportesAsientoContable, this.jScrollPanelDatosAsientoContable,this.jPanelPaginacionAsientoContable, this.jScrollPanelDatosEdicionAsientoContable, this.jPanelAccionesAsientoContable,this.jPanelAccionesFormularioAsientoContable,this.jmenuBarAsientoContable,this.jmenuBarDetalleAsientoContable,this.jTtoolBarAsientoContable,this.jTtoolBarDetalleAsientoContable);		
		
		final JTabbedPane jTabbedPaneBusquedasAsientoContable=this.jTabbedPaneBusquedasAsientoContable; 
		
		final JPanel jPanelParametrosReportesAsientoContable=this.jPanelParametrosReportesAsientoContable;
		//final JScrollPane jScrollPanelDatosAsientoContable=this.jScrollPanelDatosAsientoContable;
		final JTable jTableDatosAsientoContable=this.jTableDatosAsientoContable;		
		final JPanel jPanelPaginacionAsientoContable=this.jPanelPaginacionAsientoContable;
		//final JScrollPane jScrollPanelDatosEdicionAsientoContable=this.jScrollPanelDatosEdicionAsientoContable;
		final JPanel jPanelAccionesAsientoContable=this.jPanelAccionesAsientoContable;
		
		JPanel jPanelCamposAuxiliarAsientoContable=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarAsientoContable=new JPanel();
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			jPanelCamposAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jPanelCamposAsientoContable;
			jPanelAccionesFormularioAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jPanelAccionesFormularioAsientoContable;
		}
		
		final JPanel jPanelCamposAsientoContable=jPanelCamposAuxiliarAsientoContable;
		final JPanel jPanelAccionesFormularioAsientoContable=jPanelAccionesFormularioAuxiliarAsientoContable;
		
		
		final JMenuBar jmenuBarAsientoContable=this.jmenuBarAsientoContable;		
		final JToolBar jTtoolBarAsientoContable=this.jTtoolBarAsientoContable;
				
		JMenuBar jmenuBarDetalleAuxiliarAsientoContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarAsientoContable=new JToolBar();
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			jmenuBarDetalleAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jmenuBarDetalleAsientoContable;
			jTtoolBarDetalleAuxiliarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jTtoolBarDetalleAsientoContable;		
		}
		
		final JMenuBar jmenuBarDetalleAsientoContable=jmenuBarDetalleAuxiliarAsientoContable;
		final JToolBar jTtoolBarDetalleAsientoContable=jTtoolBarDetalleAuxiliarAsientoContable;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasAsientoContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesAsientoContable;
			processRunnable.jTableDatos=jTableDatosAsientoContable;
			processRunnable.jPanelCampos=jPanelCamposAsientoContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionAsientoContable;
			processRunnable.jPanelAcciones=jPanelAccionesAsientoContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioAsientoContable;
			
			
			processRunnable.jmenuBar=jmenuBarAsientoContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleAsientoContable;
			processRunnable.jTtoolBar=jTtoolBarAsientoContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleAsientoContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasAsientoContable ,jPanelParametrosReportesAsientoContable, jTableDatosAsientoContable,/*jScrollPanelDatosAsientoContable,*/jPanelCamposAsientoContable,jPanelPaginacionAsientoContable, /*jScrollPanelDatosEdicionAsientoContable,*/ jPanelAccionesAsientoContable,jPanelAccionesFormularioAsientoContable,jmenuBarAsientoContable,jmenuBarDetalleAsientoContable,jTtoolBarAsientoContable,jTtoolBarDetalleAsientoContable));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarAsientoContable(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuAsientoContable(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarAsientoContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleAsientoContable,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuAsientoContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarAsientoContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleAsientoContable,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.asientocontableConstantesFunciones.getsFinalQueryAsientoContable();
		String  finalQueryPaginacionTodos=this.asientocontableConstantesFunciones.getsFinalQueryAsientoContable();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=AsientoContableConstantesFunciones.getArrayColumnasGlobalesNoAsientoContable(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.asientocontablesEliminados= new ArrayList<AsientoContable>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessAsientoContable();
		
				///*AsientoContableSessionBean*/this.asientocontableSessionBean=new AsientoContableSessionBean();
			
			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=AsientoContableConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=AsientoContableConstantesFunciones.getClassesForeignKeysOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/asientocontable."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			asientocontablesAux= new ArrayList<AsientoContable>();
			
				
			asientocontableLogic.setDatosCliente(this.datosCliente);
			asientocontableLogic.setDatosDeep(this.datosDeep);
			asientocontableLogic.setIsConDeep(true);
			
			
			asientocontableLogic.getAsientoContableDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					asientocontableLogic.getTodosAsientoContables(finalQueryGlobal,pagination);
					
					//asientocontableLogic.getTodosAsientoContablesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(asientocontableLogic.getAsientoContables()==null|| asientocontableLogic.getAsientoContables().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							asientocontablesAux= new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux= new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							asientocontableLogic.getTodosAsientoContables(finalQueryGlobal+"",this.pagination);												
							
							//asientocontableLogic.getTodosAsientoContablesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteAsientoContables("Todos",asientocontableLogic.getAsientoContables() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());					
							asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idAsientoContable=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idAsientoContable=this.idActual;
				
				} else if(this.idAsientoContableActual!=null && this.idAsientoContableActual!=0L) {
					idAsientoContable=idAsientoContableActual;
				}
				
					
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndicePorId(idAsientoContable);
				
				this.asientocontables=new ArrayList<AsientoContable>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					asientocontableLogic.getEntity(idAsientoContable);
					
					//asientocontableLogic.getEntityWithConnection(idAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
					asientocontableLogic.getAsientoContables().add(asientocontableLogic.getAsientoContable());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontables=new ArrayList<AsientoContable>();
					this.asientocontables.add(asientocontable);
				}
				
				if(asientocontableLogic.getAsientoContable()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorBeneficiario")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorBeneficiario(beneficiarioBusquedaPorBeneficiario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorBeneficiario(finalQueryGlobal,pagination,beneficiarioBusquedaPorBeneficiario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorBeneficiario(beneficiarioBusquedaPorBeneficiario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorBeneficiario(beneficiarioBusquedaPorBeneficiario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorBeneficiario(finalQueryGlobal,pagination,beneficiarioBusquedaPorBeneficiario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorBeneficiario(beneficiarioBusquedaPorBeneficiario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorBeneficiario(beneficiarioBusquedaPorBeneficiario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorBeneficiario",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorBeneficiario",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorCodigo",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorCodigo",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorFechaEmision")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorFechaEmision(fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorFechaEmision(finalQueryGlobal,pagination,fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorFechaEmision(fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorFechaEmision(fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorFechaEmision(finalQueryGlobal,pagination,fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorFechaEmision(fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorFechaEmision(fecha_emisionBusquedaPorFechaEmision,fecha_emisionFinalBusquedaPorFechaEmision);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorFechaEmision",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorFechaEmision",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNumeroMayor")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroMayor(numero_mayorBusquedaPorNumeroMayor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorNumeroMayor(finalQueryGlobal,pagination,numero_mayorBusquedaPorNumeroMayor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroMayor(numero_mayorBusquedaPorNumeroMayor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroMayor(numero_mayorBusquedaPorNumeroMayor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorNumeroMayor(finalQueryGlobal,pagination,numero_mayorBusquedaPorNumeroMayor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroMayor(numero_mayorBusquedaPorNumeroMayor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroMayor(numero_mayorBusquedaPorNumeroMayor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorNumeroMayor",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorNumeroMayor",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNumeroRetencion")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroRetencion(numero_retencionBusquedaPorNumeroRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorNumeroRetencion(finalQueryGlobal,pagination,numero_retencionBusquedaPorNumeroRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroRetencion(numero_retencionBusquedaPorNumeroRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroRetencion(numero_retencionBusquedaPorNumeroRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorNumeroRetencion(finalQueryGlobal,pagination,numero_retencionBusquedaPorNumeroRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroRetencion(numero_retencionBusquedaPorNumeroRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorNumeroRetencion(numero_retencionBusquedaPorNumeroRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorNumeroRetencion",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorNumeroRetencion",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorValor")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorValor(valorBusquedaPorValor,valorFinalBusquedaPorValor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesBusquedaPorValor(finalQueryGlobal,pagination,valorBusquedaPorValor,valorFinalBusquedaPorValor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorValor(valorBusquedaPorValor,valorFinalBusquedaPorValor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorValor(valorBusquedaPorValor,valorFinalBusquedaPorValor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesBusquedaPorValor(finalQueryGlobal,pagination,valorBusquedaPorValor,valorFinalBusquedaPorValor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorValor(valorBusquedaPorValor,valorFinalBusquedaPorValor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceBusquedaPorValor(valorBusquedaPorValor,valorFinalBusquedaPorValor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("BusquedaPorValor",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("BusquedaPorValor",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdCliente",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdCliente",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdEjercicio",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdEjercicio",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdEmpresa",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdEmpresa",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdModulo",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdModulo",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdPeriodo",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdPeriodo",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdSucursal",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdSucursal",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDescripcionAsiento")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDescripcionAsiento(id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdTipoDescripcionAsiento(finalQueryGlobal,pagination,id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDescripcionAsiento(id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDescripcionAsiento(id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdTipoDescripcionAsiento(finalQueryGlobal,pagination,id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDescripcionAsiento(id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDescripcionAsiento(id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdTipoDescripcionAsiento",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdTipoDescripcionAsiento",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDocumento")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdTipoDocumento",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdTipoDocumento",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoMovimientoModulo")) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					asientocontableLogic.getAsientoContablesFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=asientocontableLogic.getAsientoContables()==null||asientocontableLogic.getAsientoContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=asientocontables==null|| asientocontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontablesAux=new ArrayList<AsientoContable>();
						asientocontablesAux.addAll(asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontablesAux=new ArrayList<AsientoContable>();
							asientocontablesAux.addAll(asientocontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							asientocontableLogic.getAsientoContablesFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AsientoContableConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAsientoContables("FK_IdTipoMovimientoModulo",asientocontableLogic.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAsientoContables("FK_IdTipoMovimientoModulo",asientocontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableLogic.setAsientoContables(new ArrayList<AsientoContable>());
						asientocontableLogic.getAsientoContables().addAll(asientocontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontables=new ArrayList<AsientoContable>();
							asientocontables.addAll(asientocontablesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesAsientoContable();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessAsientoContable();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=asientocontableLogic.getAsientoContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=asientocontables.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=asientocontableLogic.getAsientoContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=asientocontables.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(AsientoContable asientocontable) {
		Boolean permite=true;
		
		if(this.asientocontable.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=AsientoContableConstantesFunciones.getOrderByListaAsientoContable();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=AsientoContableConstantesFunciones.getOrderByListaAsientoContable();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AsientoContable asientocontable:asientocontableLogic.getAsientoContables()) {
				if(asientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					asientocontableTotales=asientocontable;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AsientoContable asientocontable:this.asientocontables) {
				if(asientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					asientocontableTotales=asientocontable;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.asientocontableAux=new AsientoContable();
			this.asientocontableAux.setsType(Constantes2.S_TOTALES);
			this.asientocontableAux.setIsNew(false);
			this.asientocontableAux.setIsChanged(false);
			this.asientocontableAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				AsientoContableConstantesFunciones.TotalizarValoresFilaAsientoContable(this.asientocontableLogic.getAsientoContables(),this.asientocontableAux);
				
				this.asientocontableLogic.getAsientoContables().add(this.asientocontableAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				AsientoContableConstantesFunciones.TotalizarValoresFilaAsientoContable(this.asientocontables,this.asientocontableAux);
				
				this.asientocontables.add(this.asientocontableAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		asientocontableTotales=new AsientoContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.asientocontableLogic.getAsientoContables().remove(asientocontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.asientocontables.remove(asientocontableTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		asientocontableTotales=new AsientoContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AsientoContable asientocontable:asientocontableLogic.getAsientoContables()) {
				if(asientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					asientocontableTotales=asientocontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				AsientoContableConstantesFunciones.TotalizarValoresFilaAsientoContable(this.asientocontableLogic.getAsientoContables(),asientocontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AsientoContable asientocontable:this.asientocontables) {
				if(asientocontable.getsType().equals(Constantes2.S_TOTALES)) {
					asientocontableTotales=asientocontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				AsientoContableConstantesFunciones.TotalizarValoresFilaAsientoContable(this.asientocontables,asientocontableTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getAsientoContablesBusquedaPorBeneficiario()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorBeneficiario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesBusquedaPorFechaEmision()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorFechaEmision";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesBusquedaPorNumeroMayor()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroMayor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesBusquedaPorNumeroRetencion()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesBusquedaPorValor()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorValor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdTipoDescripcionAsiento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDescripcionAsiento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdTipoDocumento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDocumento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdTipoMovimiento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimiento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdTipoMovimientoModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimientoModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAsientoContablesFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getAsientoContablesBusquedaPorBeneficiario(String sFinalQuery,String beneficiario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorBeneficiario(sFinalQuery,this.pagination,beneficiario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesBusquedaPorFechaEmision(String sFinalQuery,Date fecha_emision,Date fecha_emisionFinal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorFechaEmision(sFinalQuery,this.pagination,fecha_emision,fecha_emisionFinal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesBusquedaPorNumeroMayor(String sFinalQuery,String numero_mayor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorNumeroMayor(sFinalQuery,this.pagination,numero_mayor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesBusquedaPorNumeroRetencion(String sFinalQuery,String numero_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorNumeroRetencion(sFinalQuery,this.pagination,numero_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesBusquedaPorValor(String sFinalQuery,Double valor,Double valorFinal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesBusquedaPorValor(sFinalQuery,this.pagination,valor,valorFinal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdAsientoContable(String sFinalQuery,Long id_estado_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdAsientoContable(sFinalQuery,this.pagination,id_estado_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdTipoDescripcionAsiento(String sFinalQuery,Long id_tipo_descripcion_asiento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdTipoDescripcionAsiento(sFinalQuery,this.pagination,id_tipo_descripcion_asiento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdTipoDocumento(String sFinalQuery,Long id_tipo_documento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdTipoDocumento(sFinalQuery,this.pagination,id_tipo_documento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdTipoMovimiento(String sFinalQuery,Long id_tipo_movimiento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdTipoMovimiento(sFinalQuery,this.pagination,id_tipo_movimiento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdTipoMovimientoModulo(String sFinalQuery,Long id_tipo_movimiento_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdTipoMovimientoModulo(sFinalQuery,this.pagination,id_tipo_movimiento_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAsientoContablesFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getAsientoContablesFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosAsientoContable() {
		this.isPermisoTodoAsientoContable=false;
		this.isPermisoNuevoAsientoContable=false;
		this.isPermisoActualizarAsientoContable=false;
		this.isPermisoActualizarOriginalAsientoContable=false;
		this.isPermisoEliminarAsientoContable=false;
		this.isPermisoGuardarCambiosAsientoContable=false;
		this.isPermisoConsultaAsientoContable=false;
		this.isPermisoBusquedaAsientoContable=false;
		this.isPermisoReporteAsientoContable=false;		
		this.isPermisoOrdenAsientoContable=false;		
		this.isPermisoPaginacionMedioAsientoContable=false;		
		this.isPermisoPaginacionAltoAsientoContable=false;
		this.isPermisoPaginacionTodoAsientoContable=false;
		this.isPermisoCopiarAsientoContable=false;		
		this.isPermisoVerFormAsientoContable=false;		
		this.isPermisoDuplicarAsientoContable=false;		
		this.isPermisoOrdenAsientoContable=false;		
	}
	
	public void setPermisosUsuarioAsientoContable(Boolean isPermiso) {
		this.isPermisoTodoAsientoContable=isPermiso;
		this.isPermisoNuevoAsientoContable=isPermiso;
		this.isPermisoActualizarAsientoContable=isPermiso;
		this.isPermisoActualizarOriginalAsientoContable=isPermiso;
		this.isPermisoEliminarAsientoContable=isPermiso;
		this.isPermisoGuardarCambiosAsientoContable=isPermiso;
		this.isPermisoConsultaAsientoContable=isPermiso;
		this.isPermisoBusquedaAsientoContable=isPermiso;
		this.isPermisoReporteAsientoContable=isPermiso;
		this.isPermisoOrdenAsientoContable=isPermiso;		
		this.isPermisoPaginacionMedioAsientoContable=isPermiso;		
		this.isPermisoPaginacionAltoAsientoContable=isPermiso;		
		this.isPermisoPaginacionTodoAsientoContable=isPermiso;		
		this.isPermisoCopiarAsientoContable=isPermiso;		
		this.isPermisoVerFormAsientoContable=isPermiso;		
		this.isPermisoDuplicarAsientoContable=isPermiso;
		this.isPermisoOrdenAsientoContable=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioAsientoContable(Boolean isPermiso) {
		//this.isPermisoTodoAsientoContable=isPermiso;
		this.isPermisoNuevoAsientoContable=isPermiso;
		this.isPermisoActualizarAsientoContable=isPermiso;
		this.isPermisoActualizarOriginalAsientoContable=isPermiso;
		this.isPermisoEliminarAsientoContable=isPermiso;
		this.isPermisoGuardarCambiosAsientoContable=isPermiso;
		//this.isPermisoConsultaAsientoContable=isPermiso;
		//this.isPermisoBusquedaAsientoContable=isPermiso;
		//this.isPermisoReporteAsientoContable=isPermiso;
		//this.isPermisoOrdenAsientoContable=isPermiso;		
		//this.isPermisoPaginacionMedioAsientoContable=isPermiso;		
		//this.isPermisoPaginacionAltoAsientoContable=isPermiso;		
		//this.isPermisoPaginacionTodoAsientoContable=isPermiso;		
		//this.isPermisoCopiarAsientoContable=isPermiso;		
		//this.isPermisoDuplicarAsientoContable=isPermiso;
		//this.isPermisoOrdenAsientoContable=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioAsientoContableClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(SriConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(ImportarExportarConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(DetalleMoviClienProveConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(PrestamoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(RetencionConstantesFunciones.SNOMBREOPCION);
		
		if(AsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosSri=false;
		this.isTienePermisosSri=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,SriConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosImportarExportar=false;
		this.isTienePermisosImportarExportar=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,ImportarExportarConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosDetalleMoviClienProve=false;
		this.isTienePermisosDetalleMoviClienProve=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,DetalleMoviClienProveConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosPrestamo=false;
		this.isTienePermisosPrestamo=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,PrestamoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosDetalleAsientoContable=false;
		this.isTienePermisosDetalleAsientoContable=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosRetencion=false;
		this.isTienePermisosRetencion=this.verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(this.opcionsRelacionadas,RetencionConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebAsientoContable(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioAsientoContableClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosSri=conPermiso;
		this.isTienePermisosImportarExportar=conPermiso;
		this.isTienePermisosDetalleMoviClienProve=conPermiso;
		this.isTienePermisosPrestamo=conPermiso;
		this.isTienePermisosDetalleAsientoContable=conPermiso;
		this.isTienePermisosRetencion=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioAsientoContableClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionAsientoContableClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioAsientoContableClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosSri && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosImportarExportar && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosDetalleMoviClienProve && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosPrestamo && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosDetalleAsientoContable && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosRetencion && this.jInternalFrameDetalleFormAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.remove(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioAsientoContable() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(AsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, AsientoContableConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoAsientoContable=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarAsientoContable=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalAsientoContable=this.isPermisoActualizarAsientoContable;
			this.isPermisoEliminarAsientoContable=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosAsientoContable=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaAsientoContable=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaAsientoContable=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoAsientoContable=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteAsientoContable=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenAsientoContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioAsientoContable=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoAsientoContable=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoAsientoContable=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarAsientoContable=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormAsientoContable=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarAsientoContable=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenAsientoContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosAsientoContable.setToolTipText(this.jTableDatosAsientoContable.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioAsientoContable(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioAsientoContable(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(AsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(AsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioAsientoContable() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosSri && this.asientocontableConstantesFunciones.mostrarSriAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Sri");
			reporte.setsDescripcion("Sri");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosImportarExportar && this.asientocontableConstantesFunciones.mostrarImportarExportarAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Importar Exportar");
			reporte.setsDescripcion("Importar Exportar");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosDetalleMoviClienProve && this.asientocontableConstantesFunciones.mostrarDetalleMoviClienProveAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Cliente");
			reporte.setsDescripcion("Detalle Cliente");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosPrestamo && this.asientocontableConstantesFunciones.mostrarPrestamoAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Prestamo");
			reporte.setsDescripcion("Prestamo");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosDetalleAsientoContable && this.asientocontableConstantesFunciones.mostrarDetalleAsientoContableAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Asiento Contable");
			reporte.setsDescripcion("Detalle Asiento Contable");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosRetencion && this.asientocontableConstantesFunciones.mostrarRetencionAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Retencion");
			reporte.setsDescripcion("Retencion");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyAsientoContableListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.tipodocumentosForeignKey=new ArrayList();
				this.tipomovimientosForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.tipodescripcionasientosForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.estadoasientocontablesForeignKey=new ArrayList();
				this.tipomovimientomodulosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(AsientoContableJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyAsientoContableListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDescripcionAsientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDocumentoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDescripcionAsientoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodescripcionasientosForeignKey==null||this.tipodescripcionasientosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();
				this.arrDatoGeneralNo.add("id_modulo");

				arrColumnasGlobales=TipoDescripcionAsientoConstantesFunciones.getArrayColumnasGlobalesTipoDescripcionAsiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDescripcionAsientoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDescripcionAsientoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDescripcionAsientosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadoasientocontablesForeignKey==null||this.estadoasientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoAsientoContableConstantesFunciones.getArrayColumnasGlobalesEstadoAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoAsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoAsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyAsientoContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			AsientoContableParameterReturnGeneral asientocontableReturnGeneral=new AsientoContableParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_empresaAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_empresaAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_sucursalAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_sucursalAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_ejercicioAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_ejercicioAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_periodoAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_periodoAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_anioAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_anioAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_mesAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_mesAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_moduloAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_moduloAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_usuarioAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_usuarioAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalTipoDocumento="";

				if(((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_tipo_documentoAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_tipo_documentoAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDocumento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDocumento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDocumento, "");
						finalQueryGlobalTipoDocumento+=TipoDocumentoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDocumento=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidTipoDocumentoActual();
					}
				} else {
					finalQueryGlobalTipoDocumento="NONE";
				}


				String finalQueryGlobalTipoMovimiento="";

				if(((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_tipo_movimientoAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_tipo_movimientoAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoMovimiento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimiento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimiento, "");
						finalQueryGlobalTipoMovimiento+=TipoMovimientoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimiento=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidTipoMovimientoActual();
					}
				} else {
					finalQueryGlobalTipoMovimiento="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_monedaAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_monedaAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_clienteAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_clienteAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoDescripcionAsiento="";

				if(((this.tipodescripcionasientosForeignKey==null||this.tipodescripcionasientosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_tipo_descripcion_asientoAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_tipo_descripcion_asientoAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDescripcionAsiento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=TipoDescripcionAsientoConstantesFunciones.getArrayColumnasGlobalesTipoDescripcionAsiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDescripcionAsiento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDescripcionAsientoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDescripcionAsiento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDescripcionAsiento, "");
						finalQueryGlobalTipoDescripcionAsiento+=TipoDescripcionAsientoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDescripcionAsientosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDescripcionAsiento=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidTipoDescripcionAsientoActual();
					}
				} else {
					finalQueryGlobalTipoDescripcionAsiento="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_formatoAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_formatoAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalEstadoAsientoContable="";

				if(((this.estadoasientocontablesForeignKey==null||this.estadoasientocontablesForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_estado_asiento_contableAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_estado_asiento_contableAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEstadoAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoAsientoContableConstantesFunciones.getArrayColumnasGlobalesEstadoAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoAsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoAsientoContable, "");
						finalQueryGlobalEstadoAsientoContable+=EstadoAsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoAsientoContable=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidEstadoAsientoContableActual();
					}
				} else {
					finalQueryGlobalEstadoAsientoContable="NONE";
				}


				String finalQueryGlobalTipoMovimientoModulo="";

				if(((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0) && this.asientocontableConstantesFunciones.cargarid_tipo_movimiento_moduloAsientoContable)
					 || (this.esRecargarFks && this.asientocontableConstantesFunciones.cargarid_tipo_movimiento_moduloAsientoContable)) {

					if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoMovimientoModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimientoModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimientoModulo, "");
						finalQueryGlobalTipoMovimientoModulo+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimientoModulo=" WHERE " + ConstantesSql.ID + "="+asientocontableSessionBean.getlidTipoMovimientoModuloActual();
					}
				} else {
					finalQueryGlobalTipoMovimientoModulo="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				asientocontableReturnGeneral=asientocontableLogic.cargarCombosLoteForeignKeyAsientoContable(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalModulo,finalQueryGlobalUsuario,finalQueryGlobalTipoDocumento,finalQueryGlobalTipoMovimiento,finalQueryGlobalMoneda,finalQueryGlobalCliente,finalQueryGlobalTipoDescripcionAsiento,finalQueryGlobalFormato,finalQueryGlobalEstadoAsientoContable,finalQueryGlobalTipoMovimientoModulo);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=asientocontableReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=asientocontableReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=asientocontableReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=asientocontableReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=asientocontableReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=asientocontableReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=asientocontableReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=asientocontableReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalTipoDocumento.equals("NONE")) {
				this.tipodocumentosForeignKey=asientocontableReturnGeneral.gettipodocumentosForeignKey();
			}

			if(!finalQueryGlobalTipoMovimiento.equals("NONE")) {
				this.tipomovimientosForeignKey=asientocontableReturnGeneral.gettipomovimientosForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=asientocontableReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=asientocontableReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTipoDescripcionAsiento.equals("NONE")) {
				this.tipodescripcionasientosForeignKey=asientocontableReturnGeneral.gettipodescripcionasientosForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=asientocontableReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalEstadoAsientoContable.equals("NONE")) {
				this.estadoasientocontablesForeignKey=asientocontableReturnGeneral.getestadoasientocontablesForeignKey();
			}

			if(!finalQueryGlobalTipoMovimientoModulo.equals("NONE")) {
				this.tipomovimientomodulosForeignKey=asientocontableReturnGeneral.gettipomovimientomodulosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyAsientoContable()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyTipoDocumento();
			this.addItemDefectoCombosForeignKeyTipoMovimiento();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTipoDescripcionAsiento();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyEstadoAsientoContable();
			this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDocumento()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				TipoDocumento tipodocumento=new TipoDocumento();
				TipoDocumentoConstantesFunciones.setTipoDocumentoDescripcion(tipodocumento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodocumento.setId(null);

				if(!TipoDocumentoConstantesFunciones.ExisteEnLista(this.tipodocumentosForeignKey,tipodocumento,true)) {

					this.tipodocumentosForeignKey.add(0,tipodocumento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimiento()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				TipoMovimiento tipomovimiento=new TipoMovimiento();
				TipoMovimientoConstantesFunciones.setTipoMovimientoDescripcion(tipomovimiento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimiento.setId(null);

				if(!TipoMovimientoConstantesFunciones.ExisteEnLista(this.tipomovimientosForeignKey,tipomovimiento,true)) {

					this.tipomovimientosForeignKey.add(0,tipomovimiento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDescripcionAsiento()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoDescripcionAsiento()) {
				TipoDescripcionAsiento tipodescripcionasiento=new TipoDescripcionAsiento();
				TipoDescripcionAsientoConstantesFunciones.setTipoDescripcionAsientoDescripcion(tipodescripcionasiento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodescripcionasiento.setId(null);

				if(!TipoDescripcionAsientoConstantesFunciones.ExisteEnLista(this.tipodescripcionasientosForeignKey,tipodescripcionasiento,true)) {

					this.tipodescripcionasientosForeignKey.add(0,tipodescripcionasiento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoAsientoContable()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionEstadoAsientoContable()) {
				EstadoAsientoContable estadoasientocontable=new EstadoAsientoContable();
				EstadoAsientoContableConstantesFunciones.setEstadoAsientoContableDescripcion(estadoasientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadoasientocontable.setId(null);

				if(!EstadoAsientoContableConstantesFunciones.ExisteEnLista(this.estadoasientocontablesForeignKey,estadoasientocontable,true)) {

					this.estadoasientocontablesForeignKey.add(0,estadoasientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimientoModulo()throws Exception {
		try {

			if(!this.asientocontableSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				TipoMovimientoModulo tipomovimientomodulo=new TipoMovimientoModulo();
				TipoMovimientoModuloConstantesFunciones.setTipoMovimientoModuloDescripcion(tipomovimientomodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimientomodulo.setId(null);

				if(!TipoMovimientoModuloConstantesFunciones.ExisteEnLista(this.tipomovimientomodulosForeignKey,tipomovimientomodulo,true)) {

					this.tipomovimientomodulosForeignKey.add(0,tipomovimientomodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyAsientoContable()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyMoneda("Todos");
			this.initActionsCombosForeignKeyCliente("Todos");
			this.initActionsCombosForeignKeyTipoDescripcionAsiento("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyAsientoContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyMoneda(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyCliente(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyTipoDescripcionAsiento(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyMoneda(JComboBox jComboBoxMonedaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Moneda monedaLocal=(Moneda)jComboBoxMonedaGenerico.getSelectedItem();

			if(monedaLocal!=null  && monedaLocal.getId()!=null  && monedaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_moneda="+monedaLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyCliente(JComboBox jComboBoxClienteGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Cliente clienteLocal=(Cliente)jComboBoxClienteGenerico.getSelectedItem();

			if(clienteLocal!=null  && clienteLocal.getId()!=null  && clienteLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_cliente="+clienteLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyTipoDescripcionAsiento(JComboBox jComboBoxTipoDescripcionAsientoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			TipoDescripcionAsiento tipodescripcionasientoLocal=(TipoDescripcionAsiento)jComboBoxTipoDescripcionAsientoGenerico.getSelectedItem();

			if(tipodescripcionasientoLocal!=null  && tipodescripcionasientoLocal.getId()!=null  && tipodescripcionasientoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_tipo_descripcion_asiento="+tipodescripcionasientoLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyMoneda(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.addItemListener(new ComboBoxItemListener(this,"id_monedaAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_monedaAsientoContable"));
					}
				} else {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.addActionListener(new ComboBoxActionListener(this,"id_monedaAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_monedaAsientoContable"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.addItemListener(new ComboBoxItemListener(this,"id_clienteAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_clienteAsientoContable"));
					}
				} else {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.addActionListener(new ComboBoxActionListener(this,"id_clienteAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_clienteAsientoContable"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_clienteFK_IdClienteAsientoContable.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_clienteFK_IdClienteAsientoContable"));

						this.jComboBoxid_clienteFK_IdClienteAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteAsientoContable"));

					} else {
						this.jComboBoxid_clienteFK_IdClienteAsientoContable.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_clienteFK_IdClienteAsientoContable"));

						this.jComboBoxid_clienteFK_IdClienteAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteAsientoContable"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyTipoDescripcionAsiento(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.addItemListener(new ComboBoxItemListener(this,"id_tipo_descripcion_asientoAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_descripcion_asientoAsientoContable"));
					}
				} else {
					if(this.jInternalFrameDetalleFormAsientoContable!=null) {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.addActionListener(new ComboBoxActionListener(this,"id_tipo_descripcion_asientoAsientoContable"));
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_descripcion_asientoAsientoContable"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable"));

						this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable"));

					} else {
						this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable"));

						this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyAsientoContable()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.asientocontable.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.asientocontable.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.asientocontable.setfecha_finalizacion(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyAsientoContable();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyAsientoContable(AsientoContable asientocontable)throws Exception {	
		try {
			
			this.setActualTipoDocumentoForeignKey(asientocontable.getid_tipo_documento(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(asientocontable.getid_tipo_movimiento(),false,"Formulario");
			this.setActualClienteForeignKey(asientocontable.getid_cliente(),false,"Formulario");
			this.setActualTipoDescripcionAsientoForeignKey(asientocontable.getid_tipo_descripcion_asiento(),false,"Formulario");
			this.setActualFormatoForeignKey(asientocontable.getid_formato(),false,"Formulario");
			this.setActualEstadoAsientoContableForeignKey(asientocontable.getid_estado_asiento_contable(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(asientocontable.getid_tipo_movimiento_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyAsientoContable(AsientoContable asientocontable,String sTipoEvento)throws Exception {	
		try {
			
			

				if(asientocontable.getCliente()!=null && !sTipoEvento.equals("id_clienteAsientoContable")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(asientocontable.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyAsientoContable()throws Exception {	
		try {
			
			this.setActualTipoDocumentoForeignKey(this.asientocontableConstantesFunciones.getid_tipo_documento(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(this.asientocontableConstantesFunciones.getid_tipo_movimiento(),false,"Formulario");
			this.setActualClienteForeignKey(this.asientocontableConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoDescripcionAsientoForeignKey(this.asientocontableConstantesFunciones.getid_tipo_descripcion_asiento(),false,"Formulario");
			this.setActualFormatoForeignKey(this.asientocontableConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualEstadoAsientoContableForeignKey(this.asientocontableConstantesFunciones.getid_estado_asiento_contable(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(this.asientocontableConstantesFunciones.getid_tipo_movimiento_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyAsientoContable()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormAsientoContable!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormAsientoContable!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyAsientoContable()throws Exception {	
		try {
			
				this.setActualEstadoAsientoContableForeignKey(1L,false,"Formulario");
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyAsientoContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroAsientoContable()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
				if((this.parametrocontaParametro==null||this.parametrocontaParametro.getId()<=0)) {
					this.arrDatoGeneral= new  ArrayList<DatoGeneral>();

					arrColumnasGlobales=ParametroContaConstantesFunciones.getArrayColumnasGlobalesParametroConta(this.arrDatoGeneral);
					finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales);
					finalQueryGlobal+=ParametroContaConstantesFunciones.SFINALQUERY;

					try {
						this.parametrocontaParametro=new ParametroConta();

						this.parametrocontaLogic=new ParametroContaLogic();


						//ARCHITECTURE

						if(Constantes.ISUSAEJBLOGICLAYER) {
							this.parametrocontaLogic.getEntityWithConnection(finalQueryGlobal);
							this.parametrocontaParametro=this.parametrocontaLogic.getParametroConta();
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
					}
					catch(Exception e)
					{
						throw e;
					}

				}

			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyAsientoContable()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTipoDescripcionAsientosForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameEstadoAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyAsientoContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDescripcionAsientosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.getItemCount()>0) {
				//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	





















	public void recargarFormAsientoContableMoneda(JComboBox<?> jComboBoxGenericoMoneda,String sFormularioTipoBusqueda) throws Exception {

	}

	public void recargarFormAsientoContableCliente(JComboBox<?> jComboBoxGenericoCliente,String sFormularioTipoBusqueda) throws Exception {

	}

	public void recargarFormAsientoContableTipoDescripcionAsiento(JComboBox<?> jComboBoxGenericoTipoDescripcionAsiento,String sFormularioTipoBusqueda) throws Exception {

	}






	
	

	public AsientoContableBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public AsientoContableBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public AsientoContableBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.asientocontableSessionBean=new AsientoContableSessionBean(); 
		this.asientocontableConstantesFunciones=new AsientoContableConstantesFunciones(); 
		this.asientocontableBean=new AsientoContable();//(this.asientocontableConstantesFunciones); 		
		this.asientocontableReturnGeneral=new AsientoContableParameterReturnGeneral(); 
		
		this.asientocontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.asientocontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public AsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public AsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public AsientoContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessAsientoContable(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.asientocontableConstantesFunciones=new AsientoContableConstantesFunciones(); 
			this.asientocontableBean=new AsientoContable();//this.asientocontableConstantesFunciones); 			
			this.asientocontableReturnGeneral=new AsientoContableParameterReturnGeneral(); 
		
			AsientoContableBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Asiento Contable Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.asientocontable=new AsientoContable();
			this.asientocontables = new ArrayList<AsientoContable>();
			this.asientocontablesAux = new ArrayList<AsientoContable>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic=new AsientoContableLogic();
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			//this.asientocontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.asientocontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormAsientoContable);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoAsientoContable);	
					}
					
					if(this.jInternalFrameImportacionAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionAsientoContable);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByAsientoContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByAsientoContable);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormAsientoContable!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormAsientoContable);
				this.jInternalFrameDetalleFormAsientoContable.setVisible(false);
				this.jInternalFrameDetalleFormAsientoContable.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoAsientoContable);
					this.jInternalFrameReporteDinamicoAsientoContable.setVisible(false);
					this.jInternalFrameReporteDinamicoAsientoContable.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionAsientoContable);
					this.jInternalFrameImportacionAsientoContable.setVisible(false);
					this.jInternalFrameImportacionAsientoContable.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByAsientoContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByAsientoContable);
					this.jInternalFrameOrderByAsientoContable.setVisible(false);
					this.jInternalFrameOrderByAsientoContable.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idAsientoContableActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=AsientoContableConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.asientocontableReturnGeneral=new AsientoContableParameterReturnGeneral();
			
			this.asientocontableParameterGeneral=new AsientoContableParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.asientocontableLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(AsientoContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(SriConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(ImportarExportarConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(DetalleMoviClienProveConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(PrestamoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(DetalleAsientoContableConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(RetencionConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,AsientoContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.asientocontableSessionBean.getEsGuardarRelacionado(),this.asientocontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,AsientoContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.asientocontableSessionBean.getEsGuardarRelacionado(),this.asientocontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaDuplicarAsientoContable=true;
			this.isVisibilidadCeldaCopiarAsientoContable=true;
			this.isVisibilidadCeldaVerFormAsientoContable=true;
			this.isVisibilidadCeldaOrdenAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=false;
			this.isVisibilidadCeldaGuardarAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			
			
			this.isVisibilidadBusquedaPorBeneficiario=true;
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorFechaEmision=true;
			this.isVisibilidadBusquedaPorNumeroMayor=true;
			this.isVisibilidadBusquedaPorNumeroRetencion=true;
			this.isVisibilidadBusquedaPorValor=true;
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoDescripcionAsiento=true;
			this.isVisibilidadFK_IdTipoDocumento=true;
			this.isVisibilidadFK_IdTipoMovimiento=true;
			this.isVisibilidadFK_IdTipoMovimientoModulo=true;
			this.isVisibilidadFK_IdUsuario=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosAsientoContable();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioAsientoContable(false);
			
			this.setPermisosUsuarioAsientoContable();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.asientocontableSessionBean.getEsGuardarRelacionado() 
				|| (this.asientocontableSessionBean.getEsGuardarRelacionado() && this.asientocontableSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioAsientoContableClasesRelacionadas();
			}
			
			if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioAsientoContableClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosAsientoContable();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualAsientoContable();
			}
			
			if(!this.isPermisoBusquedaAsientoContable) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasAsientoContable.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioAsientoContable,this.isPermisoPaginacionMedioAsientoContable,this.isPermisoPaginacionTodoAsientoContable);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(AsientoContableConstantesFunciones.getTiposSeleccionarAsientoContable());
				
				this.tiposColumnasSelect=AsientoContableConstantesFunciones.getTiposSeleccionarAsientoContable(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectAsientoContable();				
				//this.tiposRelacionesSelect=AsientoContableConstantesFunciones.getTiposRelacionesAsientoContable(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioAsientoContable();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioAsientoContable(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioAsientoContable(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesAsientoContable() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.sriLogic=new SriLogic();
			this.importarexportarLogic=new ImportarExportarLogic();
			this.detallemoviclienproveLogic=new DetalleMoviClienProveLogic();
			this.prestamoLogic=new PrestamoLogic();
			this.detalleasientocontableLogic=new DetalleAsientoContableLogic();
			this.retencionLogic=new RetencionLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.moduloLogic=new ModuloLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.tipodocumentoLogic=new TipoDocumentoLogic();
			this.tipomovimientoLogic=new TipoMovimientoLogic();
			this.monedaLogic=new MonedaLogic();
			this.clienteLogic=new ClienteLogic();
			this.tipodescripcionasientoLogic=new TipoDescripcionAsientoLogic();
			this.formatoLogic=new FormatoLogic();
			this.estadoasientocontableLogic=new EstadoAsientoContableLogic();
			this.tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();
			
			//PARAMETROS
			
			this.parametrocontaLogic=new ParametroContaLogic();
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				asientocontableImplementable= (AsientoContableImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+AsientoContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				asientocontableImplementableHome= (AsientoContableImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+AsientoContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.asientocontables= new ArrayList<AsientoContable>();
			this.asientocontablesEliminados= new ArrayList<AsientoContable>();
						
			this.isEsNuevoAsientoContable=false;
			this.esParaAccionDesdeFormularioAsientoContable=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>() ;
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.tipodescripcionasientosForeignKey=new ArrayList<TipoDescripcionAsiento>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.estadoasientocontablesForeignKey=new ArrayList<EstadoAsientoContable>() ;
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>() ;
			
			
			parametrocontaParametro=new ParametroConta();
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyAsientoContable(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroAsientoContable();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			AsientoContableBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=AsientoContableConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesAsientoContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingAsientoContable(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			
		this.jButtonRelacionesFinNormalAsientoContableActionPerformed(null);;
						
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioAsientoContable();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioAsientoContable();
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasAsientoContable.getTabCount(); i++) {
					this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessAsientoContable(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga AsientoContable: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectAsientoContable() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(SriConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(SriConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(ImportarExportarConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(ImportarExportarConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(DetalleMoviClienProveConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleMoviClienProveConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(PrestamoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PrestamoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(RetencionConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(RetencionConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesAsientoContable")) {
				iIndex=this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Asiento Contables")) {
					if(!DetalleAsientoContableJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaDetalleAsientoContable(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Retenciones")) {
					if(!RetencionJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaRetencion(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Detalle Clientes")) {
					if(!DetalleMoviClienProveJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaDetalleMoviClienProve(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Prestamos")) {
					if(!PrestamoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaPrestamo(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Sris")) {
					if(!SriJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaSri(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Importar Exportars")) {
					if(!ImportarExportarJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaImportarExportar(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			
			if(sTipo.equals("RelacionesFinformas_de_pagoAsientoContable")) {
				iIndex=this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.getSelectedIndex();
				sTitle= this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.getTitleAt(iIndex);
				Integer intSelectedRow = 0;
				intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(sTitle.equals("Detalle Asiento Contables")) {
					if(!DetalleAsientoContableJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaDetalleAsientoContable(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Retenciones")) {
					if(!RetencionJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaRetencion(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Detalle Clientes")) {
					if(!DetalleMoviClienProveJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaDetalleMoviClienProve(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Prestamos")) {
					if(!PrestamoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaPrestamo(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Sris")) {
					if(!SriJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaSri(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Importar Exportars")) {
					if(!ImportarExportarJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessAsientoContable();

						this.cargarParteTabPanelRelacionadaImportarExportar(iIndex,intSelectedRow);
					}
					
				}
			};
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessAsientoContable();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleAsientoContable(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFrameDetalleAsientoContable(false,true,iIndex);
		this.jButtonDetalleAsientoContableActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleAsientoContable();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaRetencion(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFrameRetencion(false,true,iIndex);
		this.jButtonRetencionActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaRetencion();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaDetalleMoviClienProve(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFrameDetalleMoviClienProve(false,true,iIndex);
		this.jButtonDetalleMoviClienProveActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleMoviClienProve();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPrestamo(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFramePrestamo(false,true,iIndex);
		this.jButtonPrestamoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPrestamo();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaSri(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFrameSri(false,true,iIndex);
		this.jButtonSriActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaSri();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaImportarExportar(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormAsientoContable.cargarSessionConBeanSwingJInternalFrameImportarExportar(false,true,iIndex);
		this.jButtonImportarExportarActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaImportarExportar();

		//this.jTabbedPaneRelacionesAsientoContable.updateUI();
		//this.jTabbedPaneRelacionesAsientoContable.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesAsientoContable.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("Sri")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonSriActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("ImportarExportar")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonImportarExportarActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("DetalleMoviClienProve")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonDetalleMoviClienProveActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("Prestamo")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonPrestamoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("DetalleAsientoContable")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonDetalleAsientoContableActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("Retencion")) {
				int row=this.jTableDatosAsientoContable.getSelectedRow();
				jButtonRetencionActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Sri")) {

					if(this.isTienePermisosSri && this.asientocontableConstantesFunciones.mostrarSriAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Sris"+"("+SriConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Sris");

						if(asientocontableConstantesFunciones.resaltarSriAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarSriAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarSriAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"Sri"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Importar Exportar")) {

					if(this.isTienePermisosImportarExportar && this.asientocontableConstantesFunciones.mostrarImportarExportarAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Importar Exportars"+"("+ImportarExportarConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Importar Exportars");

						if(asientocontableConstantesFunciones.resaltarImportarExportarAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarImportarExportarAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarImportarExportarAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"ImportarExportar"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Detalle Cliente")) {

					if(this.isTienePermisosDetalleMoviClienProve && this.asientocontableConstantesFunciones.mostrarDetalleMoviClienProveAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Clientes"+"("+DetalleMoviClienProveConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Clientes");

						if(asientocontableConstantesFunciones.resaltarDetalleMoviClienProveAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarDetalleMoviClienProveAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarDetalleMoviClienProveAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleMoviClienProve"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Prestamo")) {

					if(this.isTienePermisosPrestamo && this.asientocontableConstantesFunciones.mostrarPrestamoAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Prestamos"+"("+PrestamoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Prestamos");

						if(asientocontableConstantesFunciones.resaltarPrestamoAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarPrestamoAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarPrestamoAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"Prestamo"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Detalle Asiento Contable")) {

					if(this.isTienePermisosDetalleAsientoContable && this.asientocontableConstantesFunciones.mostrarDetalleAsientoContableAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Asiento Contables"+"("+DetalleAsientoContableConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Asiento Contables");

						if(asientocontableConstantesFunciones.resaltarDetalleAsientoContableAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarDetalleAsientoContableAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarDetalleAsientoContableAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleAsientoContable"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Retencion")) {

					if(this.isTienePermisosRetencion && this.asientocontableConstantesFunciones.mostrarRetencionAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Retenciones"+"("+RetencionConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Retenciones");

						if(asientocontableConstantesFunciones.resaltarRetencionAsientoContable!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(asientocontableConstantesFunciones.resaltarRetencionAsientoContable);
						}

						jmenuItem.setEnabled(this.asientocontableConstantesFunciones.activarRetencionAsientoContable);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"Retencion"));

						

						this.jInternalFrameDetalleFormAsientoContable.jmenuDetalleAsientoContable.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyAsientoContable(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyAsientoContableListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyAsientoContable();
		
		this.cargarCombosFrameForeignKeyAsientoContable();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyAsientoContable();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyAsientoContable();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoDocumento(this.tipodocumentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimiento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoMovimiento(this.tipomovimientosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDescripcionAsiento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDescripcionAsientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDescripcionAsiento();
				this.cargarCombosFrameTipoDescripcionAsientosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoDescripcionAsiento("Todos");
				}

			this.recargarComboTablaTipoDescripcionAsiento(this.tipodescripcionasientosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoDescripcionAsiento("Todos");
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoAsientoContable();
				this.cargarCombosFrameEstadoAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoDescripcionAsiento("Todos");
				}

			this.recargarComboTablaEstadoAsientoContable(this.estadoasientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoDescripcionAsiento("Todos");
				}

			this.recargarComboTablaTipoMovimientoModulo(this.tipomovimientomodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoAsientoContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			
			if(jTableDatosAsientoContable.getRowCount()>=1) {
				jTableDatosAsientoContable.removeRowSelectionInterval(0, jTableDatosAsientoContable.getRowCount()-1);						
			}
			
			this.isEsNuevoAsientoContable=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoAsientoContable(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesAsientoContable(true);			
			//this.asientocontable=new AsientoContable();
			//this.asientocontable.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAsientoContable(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAsientoContable() ;
			
			if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAsientoContable(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.asientocontable);	
			this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);				
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar AsientoContable: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarAsientoContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosAsientoContable.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosAsientoContable.getSelectedRows().length;			
			}
			
			asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoAsientoContable--;			
				//AsientoContable asientocontableAux= new AsientoContable();			
				//asientocontableAux.setId(this.iIdNuevoAsientoContable);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//AsientoContable asientocontableOrigen=new AsientoContable();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(AsientoContable asientocontableOrigen : asientocontablesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							asientocontableOrigen =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							asientocontableOrigen =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaAsientoContable();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.asientocontable.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosAsientoContable(asientocontableOrigen,this.asientocontable,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.asientocontableLogic.getAsientoContables().add(this.asientocontableAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.asientocontables.add(this.asientocontableAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaAsientoContable(false);
				
				this.jTableDatosAsientoContable.setRowSelectionInterval(this.getIndiceNuevoAsientoContable(), this.getIndiceNuevoAsientoContable());
				
				int iLastRow =  this.jTableDatosAsientoContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosAsientoContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosAsientoContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaAsientoContable(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();									
		
			AsientoContable asientocontableOrigen=new AsientoContable();
			AsientoContable asientocontableDestino=new AsientoContable();
				
			asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosAsientoContable.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || asientocontablesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosAsientoContable.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableOrigen =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						asientocontableOrigen =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						asientocontableDestino =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						asientocontableDestino =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				asientocontableOrigen =asientocontablesSeleccionados.get(0);
				asientocontableDestino =asientocontablesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosAsientoContable(asientocontableOrigen,asientocontableDestino,true,false);
				
				asientocontableDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(asientocontableDestino,asientocontableLogic.getAsientoContables());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(asientocontableDestino,asientocontables);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaAsientoContable(false);
				
				//this.jTableDatosAsientoContable.setRowSelectionInterval(this.getIndiceNuevoAsientoContable(), this.getIndiceNuevoAsientoContable());
				
				int iLastRow =  this.jTableDatosAsientoContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosAsientoContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosAsientoContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaAsientoContable(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormAsientoContable.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesAsientoContable.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasAsientoContable.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesAsientoContable.setVisible(!isVisible);
			this.jPanelPaginacionAsientoContable.setVisible(!isVisible);
			this.jPanelAccionesAsientoContable.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameAsientoContable();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoAsientoContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionAsientoContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByAsientoContable();
			
			this.abrirFrameOrderByAsientoContable();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByAsientoContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleAsientoContable(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormAsientoContable);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormAsientoContable.isMaximum()) {
					this.jInternalFrameDetalleFormAsientoContable.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormAsientoContable.setSize(this.jInternalFrameDetalleFormAsientoContable.iWidthFormulario,this.jInternalFrameDetalleFormAsientoContable.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormAsientoContable.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormAsientoContable.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormAsientoContable.isMaximum()) {
						this.jInternalFrameDetalleFormAsientoContable.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),AsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),AsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),AsientoContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleAsientoContableJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleAsientoContable();
					}

					if(RetencionJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaRetencion();
					}

					if(DetalleMoviClienProveJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleMoviClienProve();
					}

					if(PrestamoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPrestamo();
					}

					if(SriJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaSri();
					}

					if(ImportarExportarJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaImportarExportar();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormAsientoContable.setVisible(true);
	        this.jInternalFrameDetalleFormAsientoContable.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByAsientoContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByAsientoContable==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByAsientoContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByAsientoContable,false,this);
				} else {
					this.jInternalFrameOrderByAsientoContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByAsientoContable,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByAsientoContable);
				this.jInternalFrameOrderByAsientoContable.setVisible(false);
				this.jInternalFrameOrderByAsientoContable.setSelected(false);
				
				this.jInternalFrameOrderByAsientoContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByAsientoContable"));
				
				this.inicializarActualizarBindingTablaOrderByAsientoContable();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionAsientoContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionAsientoContable==null) {
				
				this.jInternalFrameImportacionAsientoContable=new ImportacionJInternalFrame(AsientoContableConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionAsientoContable);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionAsientoContable);
				this.jInternalFrameImportacionAsientoContable.setVisible(false);
				this.jInternalFrameImportacionAsientoContable.setSelected(false);


				this.jInternalFrameImportacionAsientoContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionAsientoContable"));
				this.jInternalFrameImportacionAsientoContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionAsientoContable"));
				this.jInternalFrameImportacionAsientoContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionAsientoContable"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoAsientoContable() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoAsientoContable==null) {
				this.jInternalFrameReporteDinamicoAsientoContable=new ReporteDinamicoJInternalFrame(AsientoContableConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoAsientoContable);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoAsientoContable);
				this.jInternalFrameReporteDinamicoAsientoContable.setVisible(false);
				this.jInternalFrameReporteDinamicoAsientoContable.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAsientoContable"));
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAsientoContable"));
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAsientoContable"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAsientoContable();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleAsientoContable() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.jScrollPanelDatosDetalleAsientoContable.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.jScrollPanelDatosDetalleAsientoContable.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.jScrollPanelDatosDetalleAsientoContable.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.jScrollPanelDatosDetalleAsientoContable.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaRetencion() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.jScrollPanelDatosRetencion.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.jScrollPanelDatosRetencion.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.jScrollPanelDatosRetencion.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.jScrollPanelDatosRetencion.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaDetalleMoviClienProve() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleMoviClienProve.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleMoviClienProve.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleMoviClienProve.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleMoviClienProve.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPrestamo() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jScrollPanelDatosPrestamo.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jScrollPanelDatosPrestamo.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jScrollPanelDatosPrestamo.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.jScrollPanelDatosPrestamo.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaSri() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.jScrollPanelDatosSri.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.jScrollPanelDatosSri.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.jScrollPanelDatosSri.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.jScrollPanelDatosSri.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaImportarExportar() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.jScrollPanelDatosImportarExportar.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormAsientoContable.jContentPaneDetalleAsientoContable.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.jScrollPanelDatosImportarExportar.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.jScrollPanelDatosImportarExportar.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.jScrollPanelDatosImportarExportar.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleAsientoContable() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormAsientoContable);
			
	       	this.jInternalFrameDetalleFormAsientoContable.setVisible(false);
	        this.jInternalFrameDetalleFormAsientoContable.setSelected(false);
			
			//this.jInternalFrameDetalleFormAsientoContable.dispose();
			//this.jInternalFrameDetalleFormAsientoContable=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoAsientoContable() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoAsientoContable.setVisible(true);
	        this.jInternalFrameReporteDinamicoAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionAsientoContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionAsientoContable.setVisible(true);
	        this.jInternalFrameImportacionAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByAsientoContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByAsientoContable.setVisible(true);
	        this.jInternalFrameOrderByAsientoContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByAsientoContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByAsientoContable.setVisible(false);
	        this.jInternalFrameOrderByAsientoContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoAsientoContable() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoAsientoContable.setVisible(false);
	        this.jInternalFrameReporteDinamicoAsientoContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionAsientoContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionAsientoContable.setVisible(false);
	        this.jInternalFrameImportacionAsientoContable.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarAsientoContable(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarAsientoContable(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesAsientoContable(true);
			//this.isEsNuevoAsientoContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAsientoContable(false) ;
			
			if(asientocontableSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriSessionBean.getEsGuardarRelacionado() && SriJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonSriActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.getEsGuardarRelacionado() && ImportarExportarJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonImportarExportarActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.getEsGuardarRelacionado() && DetalleMoviClienProveJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleMoviClienProveActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoSessionBean.getEsGuardarRelacionado() && PrestamoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPrestamoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.getEsGuardarRelacionado() && DetalleAsientoContableJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleAsientoContableActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionSessionBean.getEsGuardarRelacionado() && RetencionJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonRetencionActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAsientoContable(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAsientoContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaAsientoContableActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarAsientoContable(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesAsientoContable(true);
			//this.isEsNuevoAsientoContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.asientocontable.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesAsientoContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesAsientoContable(false) ;
			
			if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAsientoContable(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAsientoContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.asientocontableConstantesFunciones.cargarid_clienteAsientoContable) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingAsientoContable(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaTipoDocumento(List<TipoDocumento> tipodocumentosForeignKey)throws Exception{
		TableColumn tableColumnTipoDocumento=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO));
		TableCellEditor tableCellEditorTipoDocumento =tableColumnTipoDocumento.getCellEditor();

		TipoDocumentoTableCell tipodocumentoTableCellFk=(TipoDocumentoTableCell)tableCellEditorTipoDocumento;

		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.settipodocumentosForeignKey(tipodocumentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodocumentoTableCellFk.setRowActual(intSelectedRow);
			//tipodocumentoTableCellFk.settipodocumentosForeignKeyActual(tipodocumentosForeignKey);
		//}


		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.RecargarTipoDocumentosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimiento(List<TipoMovimiento> tipomovimientosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimiento=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO));
		TableCellEditor tableCellEditorTipoMovimiento =tableColumnTipoMovimiento.getCellEditor();

		TipoMovimientoTableCell tipomovimientoTableCellFk=(TipoMovimientoTableCell)tableCellEditorTipoMovimiento;

		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.settipomovimientosForeignKey(tipomovimientosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientoTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientoTableCellFk.settipomovimientosForeignKeyActual(tipomovimientosForeignKey);
		//}


		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.RecargarTipoMovimientosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoDescripcionAsiento(List<TipoDescripcionAsiento> tipodescripcionasientosForeignKey)throws Exception{
		TableColumn tableColumnTipoDescripcionAsiento=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO));
		TableCellEditor tableCellEditorTipoDescripcionAsiento =tableColumnTipoDescripcionAsiento.getCellEditor();

		TipoDescripcionAsientoTableCell tipodescripcionasientoTableCellFk=(TipoDescripcionAsientoTableCell)tableCellEditorTipoDescripcionAsiento;

		if(tipodescripcionasientoTableCellFk!=null) {
			tipodescripcionasientoTableCellFk.settipodescripcionasientosForeignKey(tipodescripcionasientosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodescripcionasientoTableCellFk.setRowActual(intSelectedRow);
			//tipodescripcionasientoTableCellFk.settipodescripcionasientosForeignKeyActual(tipodescripcionasientosForeignKey);
		//}


		if(tipodescripcionasientoTableCellFk!=null) {
			tipodescripcionasientoTableCellFk.RecargarTipoDescripcionAsientosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoAsientoContable(List<EstadoAsientoContable> estadoasientocontablesForeignKey)throws Exception{
		TableColumn tableColumnEstadoAsientoContable=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE));
		TableCellEditor tableCellEditorEstadoAsientoContable =tableColumnEstadoAsientoContable.getCellEditor();

		EstadoAsientoContableTableCell estadoasientocontableTableCellFk=(EstadoAsientoContableTableCell)tableCellEditorEstadoAsientoContable;

		if(estadoasientocontableTableCellFk!=null) {
			estadoasientocontableTableCellFk.setestadoasientocontablesForeignKey(estadoasientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadoasientocontableTableCellFk.setRowActual(intSelectedRow);
			//estadoasientocontableTableCellFk.setestadoasientocontablesForeignKeyActual(estadoasientocontablesForeignKey);
		//}


		if(estadoasientocontableTableCellFk!=null) {
			estadoasientocontableTableCellFk.RecargarEstadoAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimientoModulo(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimientoModulo=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO));
		TableCellEditor tableCellEditorTipoMovimientoModulo =tableColumnTipoMovimientoModulo.getCellEditor();

		TipoMovimientoModuloTableCell tipomovimientomoduloTableCellFk=(TipoMovimientoModuloTableCell)tableCellEditorTipoMovimientoModulo;

		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKey(tipomovimientomodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientomoduloTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKeyActual(tipomovimientomodulosForeignKey);
		//}


		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.RecargarTipoMovimientoModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesAsientoContable(false);
			
			//if(!this.isEsNuevoAsientoContable) {								
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				
			}
			
			if(this.permiteMantenimiento(this.asientocontable)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoAsientoContable=true;
					this.inicializarActualizarBindingTablaAsientoContable(false);
					this.isEsNuevoAsientoContable=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoAsientoContable=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoAsientoContable=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesAsientoContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAsientoContable(false);
				
				this.habilitarDeshabilitarControlesAsientoContable(false);
			
												
				
				if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleAsientoContable();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoAsientoContableActionPerformed(evt,asientocontableSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualAsientoContable(this.asientocontable,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,asientocontableSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.asientocontable.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarAsientoContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				this.asientocontable.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				this.asientocontable.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.asientocontable)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((AsientoContableModel) this.jTableDatosAsientoContable.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoAsientoContable=true;
				this.inicializarActualizarBindingTablaAsientoContable(false);
				this.isEsNuevoAsientoContable=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesAsientoContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAsientoContable(false);
				
				this.habilitarDeshabilitarControlesAsientoContable(false);
				
				
				
				if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleAsientoContable();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarAsientoContableActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosAsientoContable.getRowCount()>=1) {
				jTableDatosAsientoContable.removeRowSelectionInterval(0, jTableDatosAsientoContable.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesAsientoContable(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaAsientoContable(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAsientoContable(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAsientoContable(false) ;
			
			this.isEsNuevoAsientoContable=false;
			
			if(AsientoContableJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleAsientoContable();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingAsientoContable(false);
				
				//SI ES MANUAL
				if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualAsientoContable();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoAsientoContable--;			
			//AsientoContable asientocontableAux= new AsientoContable();			
			//asientocontableAux.setId(this.iIdNuevoAsientoContable);
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaAsientoContable();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
			
			this.asientocontable.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.asientocontableLogic.getAsientoContables().add(this.asientocontableAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.asientocontables.add(this.asientocontableAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaAsientoContable(false);
			
			this.jTableDatosAsientoContable.setRowSelectionInterval(this.getIndiceNuevoAsientoContable(), this.getIndiceNuevoAsientoContable());
			
			int iLastRow =  this.jTableDatosAsientoContable.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosAsientoContable.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosAsientoContable.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaAsientoContable(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingAsientoContable(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAsientoContable(false);
			
			//SI ES MANUAL
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAsientoContable();
			}
			
			//this.abrirFrameTreeAsientoContable();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionAsientoContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Asiento ContableS ?", "MANTENIMIENTO DE Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionAsientoContable.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralAsientoContable();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.asientocontableReturnGeneral=asientocontableLogic.procesarImportacionAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.asientocontableParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarAsientoContableReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionAsientoContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionAsientoContable.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionAsientoContable.setFileImportacion(this.jInternalFrameImportacionAsientoContable.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionAsientoContable.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionAsientoContable.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionAsientoContable.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionAsientoContable.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		

		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("AsientoContableBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"AsientoContableBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case AsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroMayor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroMayor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroMayor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroMayor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Retencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Retencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Retencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Retencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_VALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_RetencionIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_RetencionIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_RetencionIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_RetencionIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroRetencionIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroRetencionIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroRetencionIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroRetencionIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_COTIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDescripcionAsiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDescripcionAsiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDescripcionAsiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDescripcionAsiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_BENEFICIARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_neficiario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_neficiario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_neficiario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_neficiario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaFinalizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaFinalizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaFinalizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaFinalizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoAsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoAsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoAsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoAsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimientoModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimientoModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimientoModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimientoModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoAsientoContable.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case AsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoria="id_tipo_documento";
					break;

				case AsientoContableConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoria="id_tipo_movimiento";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoria="numero_mayor";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCION:
					sNombreCampoCategoria="es_retencion";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoria="numero_retencion";
					break;

				case AsientoContableConstantesFunciones.LABEL_VALOR:
					sNombreCampoCategoria="valor";
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA:
					sNombreCampoCategoria="es_retencion_iva";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA:
					sNombreCampoCategoria="numero_retencion_iva";
					break;

				case AsientoContableConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoria="cotizacion";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO:
					sNombreCampoCategoria="id_tipo_descripcion_asiento";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case AsientoContableConstantesFunciones.LABEL_BENEFICIARIO:
					sNombreCampoCategoria="beneficiario";
					break;

				case AsientoContableConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION:
					sNombreCampoCategoria="fecha_finalizacion";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE:
					sNombreCampoCategoria="id_estado_asiento_contable";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoria="id_tipo_movimiento_modulo";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case AsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoriaValor="id_tipo_documento";
					break;

				case AsientoContableConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoriaValor="id_tipo_movimiento";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoriaValor="numero_mayor";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCION:
					sNombreCampoCategoriaValor="es_retencion";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoriaValor="numero_retencion";
					break;

				case AsientoContableConstantesFunciones.LABEL_VALOR:
					sNombreCampoCategoriaValor="valor";
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA:
					sNombreCampoCategoriaValor="es_retencion_iva";
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA:
					sNombreCampoCategoriaValor="numero_retencion_iva";
					break;

				case AsientoContableConstantesFunciones.LABEL_COTIZACION:
					sNombreCampoCategoriaValor="cotizacion";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO:
					sNombreCampoCategoriaValor="id_tipo_descripcion_asiento";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case AsientoContableConstantesFunciones.LABEL_BENEFICIARIO:
					sNombreCampoCategoriaValor="beneficiario";
					break;

				case AsientoContableConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION:
					sNombreCampoCategoriaValor="fecha_finalizacion";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_estado_asiento_contable";
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoriaValor="id_tipo_movimiento_modulo";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case AsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_documento");
					break;

				case AsientoContableConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento");
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Comp.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_mayor");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_retencion");
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Num. Ret.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_retencion");
					break;

				case AsientoContableConstantesFunciones.LABEL_VALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor");
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret.Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_retencion_iva");
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Num. Ret.Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_retencion_iva");
					break;

				case AsientoContableConstantesFunciones.LABEL_COTIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cotizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cotizacion");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_descripcion_asiento");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case AsientoContableConstantesFunciones.LABEL_BENEFICIARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Beneficiario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"beneficiario");
					break;

				case AsientoContableConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Finalizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_finalizacion");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_asiento_contable");
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Movimiento Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento_modulo");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoAsientoContableActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("AsientoContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case AsientoContableConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.gettipodocumento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.gettipomovimiento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getnumero_mayor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getes_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getnumero_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_VALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_VALOR);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getvalor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getes_retencion_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getnumero_retencion_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_COTIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_COTIZACION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getcotizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.gettipodescripcionasiento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_BENEFICIARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getbeneficiario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getfecha_finalizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.getestadoasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
					iRow++;

					for(AsientoContable asientocontable:asientocontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(asientocontable.gettipomovimientomodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelAsientoContable(row);				
			//	iRow++;
			//}				
			
			//for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelAsientoContable(asientocontableAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAsientoContable(false);
			
			//SI ES MANUAL
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAsientoContable();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAsientoContable(false);
			
			//SI ES MANUAL
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualAsientoContable();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesAsientoContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAsientoContable(false);
			
			//SI ES MANUAL
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualAsientoContable();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaAsientoContable() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosAsientoContable.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosAsientoContable.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosAsientoContable.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosAsientoContable.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosAsientoContable.setMinimumSize(dimensionMinimum);
		this.jTableDatosAsientoContable.setMaximumSize(dimensionMaximum);
		this.jTableDatosAsientoContable.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingAsientoContable(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingAsientoContable(esInicializar,true);
	}
	
	public void inicializarActualizarBindingAsientoContable(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaAsientoContable(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesAsientoContable(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasAsientoContable(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesAsientoContable(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesAsientoContable(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!AsientoContableJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualAsientoContable() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaAsientoContable();
		
		this.inicializarActualizarBindingBotonesManualAsientoContable(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualAsientoContable();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesAsientoContable() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualAsientoContable(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualAsientoContable(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosAsientoContable.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosAsientoContable.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteAsientoContable.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormAsientoContable!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionNuevoAsientoContable.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionSinCerrarAsientoContable.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionSinMensajeAsientoContable.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosAsientoContable.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosAsientoContable.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteAsientoContable.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormAsientoContable!=null) {
				this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionNuevoAsientoContable.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionSinCerrarAsientoContable.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormAsientoContable.jCheckBoxPostAccionSinMensajeAsientoContable.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionAsientoContable.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionAsientoContable.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesAsientoContable.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesAsientoContable.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesAsientoContable.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarAsientoContable.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesAsientoContable.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesAsientoContable.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralAsientoContable.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesAsientoContable(Boolean esInicializar) throws Exception {
		try	{	
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualAsientoContable(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesAsientoContable() throws Exception {
		try	{
			if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualAsientoContable();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleAsientoContable() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualAsientoContable() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesAsientoContable.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesAsientoContable.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesAsientoContable.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionAsientoContable.addItem(reporte);
			}
			
			
			if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionAsientoContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionAsientoContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesAsientoContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesAsientoContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarAsientoContable.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarAsientoContable.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarAsientoContable.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAsientoContable();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAsientoContable() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
				
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAsientoContable.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=AsientoContableConstantesFunciones.getTiposSeleccionarAsientoContable(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=AsientoContableConstantesFunciones.getTiposSeleccionarAsientoContable(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=AsientoContableConstantesFunciones.getTiposSeleccionarAsientoContable(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAsientoContable.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoAsientoContable.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualAsientoContable()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.beneficiarioBusquedaPorBeneficiario=this.jTextAreabeneficiarioBusquedaPorBeneficiarioAsientoContable.getText();
		this.codigoBusquedaPorCodigo=this.jTextFieldcodigoBusquedaPorCodigoAsientoContable.getText();
		this.fecha_emisionBusquedaPorFechaEmision=new Date(this.jDateChooserfecha_emisionBusquedaPorFechaEmisionAsientoContable.getDate().getTime());
		this.fecha_emisionFinalBusquedaPorFechaEmision=new Date(this.jDateChooserfecha_emisionBusquedaPorFechaEmisionFinalAsientoContable.getDate().getTime());
		this.numero_mayorBusquedaPorNumeroMayor=this.jTextAreanumero_mayorBusquedaPorNumeroMayorAsientoContable.getText();
		this.numero_retencionBusquedaPorNumeroRetencion=this.jTextFieldnumero_retencionBusquedaPorNumeroRetencionAsientoContable.getText();
		this.valorBusquedaPorValor=Double.parseDouble(this.jTextFieldvalorBusquedaPorValorAsientoContable.getText());
		this.valorFinalBusquedaPorValor=Double.parseDouble(this.jTextFieldvalorBusquedaPorValorFinalAsientoContable.getText());
		if(this.jComboBoxid_clienteFK_IdClienteAsientoContable.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.getSelectedItem()!=null){this.id_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento=((TipoDescripcionAsiento)this.jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.getSelectedItem()!=null){this.id_tipo_documentoFK_IdTipoDocumento=((TipoDocumento)this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoAsientoContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.getSelectedItem()!=null){this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=((TipoMovimientoModulo)this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloAsientoContable.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasAsientoContable(Boolean esInicializar) throws Exception {				
		if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualAsientoContable();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaAsientoContable() throws Exception {
		this.inicializarActualizarBindingTablaAsientoContable(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByAsientoContable() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosAsientoContableOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContableOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaAsientoContable(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=asientocontableLogic.getAsientoContables().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=asientocontables.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosAsientoContable.setModel(new AsientoContableModel(this.asientocontableLogic.getAsientoContables(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosAsientoContable.setModel(new AsientoContableModel(this.asientocontables,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByAsientoContable!=null && this.jInternalFrameOrderByAsientoContable.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByAsientoContable();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+AsientoContableConstantesFunciones.SCLASSWEBTITULO,asientocontableConstantesFunciones.resaltarSeleccionarAsientoContable,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+AsientoContableConstantesFunciones.SCLASSWEBTITULO,asientocontableConstantesFunciones.resaltarSeleccionarAsientoContable,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_ID));

		if(this.asientocontableConstantesFunciones.mostraridAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.asientocontableConstantesFunciones.resaltaridAsientoContable,this.asientocontableConstantesFunciones.activaridAsientoContable,iSizeTabla,this,true,"idAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltaridAsientoContable,this.asientocontableConstantesFunciones.activaridAsientoContable,this,true,"idAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDEMPRESA));

		if(this.asientocontableConstantesFunciones.mostrarid_empresaAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.asientocontableConstantesFunciones.resaltarid_empresaAsientoContable,this,this.asientocontableConstantesFunciones.activarid_empresaAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.asientocontableConstantesFunciones.resaltarid_empresaAsientoContable,this,this.asientocontableConstantesFunciones.activarid_empresaAsientoContable,false,"id_empresaAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.asientocontableConstantesFunciones.mostrarid_sucursalAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.asientocontableConstantesFunciones.resaltarid_sucursalAsientoContable,this,this.asientocontableConstantesFunciones.activarid_sucursalAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.asientocontableConstantesFunciones.resaltarid_sucursalAsientoContable,this,this.asientocontableConstantesFunciones.activarid_sucursalAsientoContable,false,"id_sucursalAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.asientocontableConstantesFunciones.mostrarid_ejercicioAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.asientocontableConstantesFunciones.resaltarid_ejercicioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_ejercicioAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.asientocontableConstantesFunciones.resaltarid_ejercicioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_ejercicioAsientoContable,false,"id_ejercicioAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDPERIODO));

		if(this.asientocontableConstantesFunciones.mostrarid_periodoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.asientocontableConstantesFunciones.resaltarid_periodoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_periodoAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.asientocontableConstantesFunciones.resaltarid_periodoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_periodoAsientoContable,false,"id_periodoAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDANIO));

		if(this.asientocontableConstantesFunciones.mostrarid_anioAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.asientocontableConstantesFunciones.resaltarid_anioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_anioAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.asientocontableConstantesFunciones.resaltarid_anioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_anioAsientoContable,true,"id_anioAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDMES));

		if(this.asientocontableConstantesFunciones.mostrarid_mesAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.asientocontableConstantesFunciones.resaltarid_mesAsientoContable,this,this.asientocontableConstantesFunciones.activarid_mesAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.asientocontableConstantesFunciones.resaltarid_mesAsientoContable,this,this.asientocontableConstantesFunciones.activarid_mesAsientoContable,true,"id_mesAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDMODULO));

		if(this.asientocontableConstantesFunciones.mostrarid_moduloAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.asientocontableConstantesFunciones.resaltarid_moduloAsientoContable,this,this.asientocontableConstantesFunciones.activarid_moduloAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.asientocontableConstantesFunciones.resaltarid_moduloAsientoContable,this,this.asientocontableConstantesFunciones.activarid_moduloAsientoContable,false,"id_moduloAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDUSUARIO));

		if(this.asientocontableConstantesFunciones.mostrarid_usuarioAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.asientocontableConstantesFunciones.resaltarid_usuarioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_usuarioAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.asientocontableConstantesFunciones.resaltarid_usuarioAsientoContable,this,this.asientocontableConstantesFunciones.activarid_usuarioAsientoContable,false,"id_usuarioAsientoContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO));

		if(this.asientocontableConstantesFunciones.mostrarid_tipo_documentoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_documentoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_documentoAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_documentoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_documentoAsientoContable,true,"id_tipo_documentoAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_CODIGO));

		if(this.asientocontableConstantesFunciones.mostrarcodigoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltarcodigoAsientoContable,this.asientocontableConstantesFunciones.activarcodigoAsientoContable,iSizeTabla,this,true,"codigoAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarcodigoAsientoContable,this.asientocontableConstantesFunciones.activarcodigoAsientoContable,this,true,"codigoAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_FECHA));

		if(this.asientocontableConstantesFunciones.mostrarfechaAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.asientocontableConstantesFunciones.resaltarfechaAsientoContable,this.asientocontableConstantesFunciones.activarfechaAsientoContable,iSizeTabla,this,true,"fechaAsientoContable","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.asientocontableConstantesFunciones.resaltarfechaAsientoContable,this.asientocontableConstantesFunciones.activarfechaAsientoContable,this,true,"fechaAsientoContable","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO));

		if(this.asientocontableConstantesFunciones.mostrarid_tipo_movimientoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoMovimientoTableCell(this.tipomovimientosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_movimientoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_movimientoAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new TipoMovimientoTableCell(this.tipomovimientosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_movimientoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_movimientoAsientoContable,true,"id_tipo_movimientoAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR));

		if(this.asientocontableConstantesFunciones.mostrarnumero_mayorAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltarnumero_mayorAsientoContable,this.asientocontableConstantesFunciones.activarnumero_mayorAsientoContable,iSizeTabla,this,true,"numero_mayorAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarnumero_mayorAsientoContable,this.asientocontableConstantesFunciones.activarnumero_mayorAsientoContable,this,true,"numero_mayorAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDMONEDA));

		if(this.asientocontableConstantesFunciones.mostrarid_monedaAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.asientocontableConstantesFunciones.resaltarid_monedaAsientoContable,this,this.asientocontableConstantesFunciones.activarid_monedaAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.asientocontableConstantesFunciones.resaltarid_monedaAsientoContable,this,this.asientocontableConstantesFunciones.activarid_monedaAsientoContable,false,"id_monedaAsientoContable","GLOBAL-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_ESRETENCION));

		if(this.asientocontableConstantesFunciones.mostrares_retencionAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_ESRETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.asientocontableConstantesFunciones.resaltares_retencionAsientoContable,this.asientocontableConstantesFunciones.activares_retencionAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.asientocontableConstantesFunciones.resaltares_retencionAsientoContable,this.asientocontableConstantesFunciones.activares_retencionAsientoContable,this,true,"es_retencionAsientoContable","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_NUMERORETENCION));

		if(this.asientocontableConstantesFunciones.mostrarnumero_retencionAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_NUMERORETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltarnumero_retencionAsientoContable,this.asientocontableConstantesFunciones.activarnumero_retencionAsientoContable,iSizeTabla,this,true,"numero_retencionAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarnumero_retencionAsientoContable,this.asientocontableConstantesFunciones.activarnumero_retencionAsientoContable,this,true,"numero_retencionAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_VALOR));

		if(this.asientocontableConstantesFunciones.mostrarvalorAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_VALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.asientocontableConstantesFunciones.resaltarvalorAsientoContable,this.asientocontableConstantesFunciones.activarvalorAsientoContable,iSizeTabla,this,true,"valorAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarvalorAsientoContable,this.asientocontableConstantesFunciones.activarvalorAsientoContable,this,true,"valorAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA));

		if(this.asientocontableConstantesFunciones.mostrares_retencion_ivaAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.asientocontableConstantesFunciones.resaltares_retencion_ivaAsientoContable,this.asientocontableConstantesFunciones.activares_retencion_ivaAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.asientocontableConstantesFunciones.resaltares_retencion_ivaAsientoContable,this.asientocontableConstantesFunciones.activares_retencion_ivaAsientoContable,this,true,"es_retencion_ivaAsientoContable","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA));

		if(this.asientocontableConstantesFunciones.mostrarnumero_retencion_ivaAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltarnumero_retencion_ivaAsientoContable,this.asientocontableConstantesFunciones.activarnumero_retencion_ivaAsientoContable,iSizeTabla,this,true,"numero_retencion_ivaAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarnumero_retencion_ivaAsientoContable,this.asientocontableConstantesFunciones.activarnumero_retencion_ivaAsientoContable,this,true,"numero_retencion_ivaAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_COTIZACION));

		if(this.asientocontableConstantesFunciones.mostrarcotizacionAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_COTIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.asientocontableConstantesFunciones.resaltarcotizacionAsientoContable,this.asientocontableConstantesFunciones.activarcotizacionAsientoContable,iSizeTabla,this,true,"cotizacionAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarcotizacionAsientoContable,this.asientocontableConstantesFunciones.activarcotizacionAsientoContable,this,true,"cotizacionAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDCLIENTE));

		if(this.asientocontableConstantesFunciones.mostrarid_clienteAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.asientocontableConstantesFunciones.resaltarid_clienteAsientoContable,this,this.asientocontableConstantesFunciones.activarid_clienteAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.asientocontableConstantesFunciones.resaltarid_clienteAsientoContable,this,this.asientocontableConstantesFunciones.activarid_clienteAsientoContable,true,"id_clienteAsientoContable","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO));

		if(this.asientocontableConstantesFunciones.mostrarid_tipo_descripcion_asientoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDescripcionAsientoTableCell(this.tipodescripcionasientosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_descripcion_asientoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_descripcion_asientoAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new TipoDescripcionAsientoTableCell(this.tipodescripcionasientosForeignKey,this.asientocontableConstantesFunciones.resaltarid_tipo_descripcion_asientoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_tipo_descripcion_asientoAsientoContable,true,"id_tipo_descripcion_asientoAsientoContable","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDFORMATO));

		if(this.asientocontableConstantesFunciones.mostrarid_formatoAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.asientocontableConstantesFunciones.resaltarid_formatoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_formatoAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.asientocontableConstantesFunciones.resaltarid_formatoAsientoContable,this,this.asientocontableConstantesFunciones.activarid_formatoAsientoContable,true,"id_formatoAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_BENEFICIARIO));

		if(this.asientocontableConstantesFunciones.mostrarbeneficiarioAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_BENEFICIARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltarbeneficiarioAsientoContable,this.asientocontableConstantesFunciones.activarbeneficiarioAsientoContable,iSizeTabla,this,true,"beneficiarioAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltarbeneficiarioAsientoContable,this.asientocontableConstantesFunciones.activarbeneficiarioAsientoContable,this,true,"beneficiarioAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_DESCRIPCION));

		if(this.asientocontableConstantesFunciones.mostrardescripcionAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.asientocontableConstantesFunciones.resaltardescripcionAsientoContable,this.asientocontableConstantesFunciones.activardescripcionAsientoContable,iSizeTabla,this,true,"descripcionAsientoContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.asientocontableConstantesFunciones.resaltardescripcionAsientoContable,this.asientocontableConstantesFunciones.activardescripcionAsientoContable,this,true,"descripcionAsientoContable","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,300));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,300));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,300));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,300));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,300);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION));

		if(this.asientocontableConstantesFunciones.mostrarfecha_finalizacionAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.asientocontableConstantesFunciones.resaltarfecha_finalizacionAsientoContable,this.asientocontableConstantesFunciones.activarfecha_finalizacionAsientoContable,iSizeTabla,this,true,"fecha_finalizacionAsientoContable","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.asientocontableConstantesFunciones.resaltarfecha_finalizacionAsientoContable,this.asientocontableConstantesFunciones.activarfecha_finalizacionAsientoContable,this,true,"fecha_finalizacionAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE));

		if(this.asientocontableConstantesFunciones.mostrarid_estado_asiento_contableAsientoContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoAsientoContableTableCell(this.estadoasientocontablesForeignKey,this.asientocontableConstantesFunciones.resaltarid_estado_asiento_contableAsientoContable,this,this.asientocontableConstantesFunciones.activarid_estado_asiento_contableAsientoContable,iSizeTabla));
			tableColumn.setCellEditor(new EstadoAsientoContableTableCell(this.estadoasientocontablesForeignKey,this.asientocontableConstantesFunciones.resaltarid_estado_asiento_contableAsientoContable,this,this.asientocontableConstantesFunciones.activarid_estado_asiento_contableAsientoContable,true,"id_estado_asiento_contableAsientoContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AsientoContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.asientocontableSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosSri && this.asientocontableConstantesFunciones.mostrarSriAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Sris");
				tableColumn.setHeaderValue("Sris");
				tableColumn.setCellRenderer(new SriTableCell(asientocontableConstantesFunciones.resaltarSriAsientoContable,this,this.asientocontableConstantesFunciones.activarSriAsientoContable));
				tableColumn.setCellEditor(new SriTableCell(asientocontableConstantesFunciones.resaltarSriAsientoContable,this,this.asientocontableConstantesFunciones.activarSriAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}

			if(this.isTienePermisosImportarExportar && this.asientocontableConstantesFunciones.mostrarImportarExportarAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Importar Exportars");
				tableColumn.setHeaderValue("Importar Exportars");
				tableColumn.setCellRenderer(new ImportarExportarTableCell(asientocontableConstantesFunciones.resaltarImportarExportarAsientoContable,this,this.asientocontableConstantesFunciones.activarImportarExportarAsientoContable));
				tableColumn.setCellEditor(new ImportarExportarTableCell(asientocontableConstantesFunciones.resaltarImportarExportarAsientoContable,this,this.asientocontableConstantesFunciones.activarImportarExportarAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}

			if(this.isTienePermisosDetalleMoviClienProve && this.asientocontableConstantesFunciones.mostrarDetalleMoviClienProveAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Clientes");
				tableColumn.setHeaderValue("Detalle Clientes");
				tableColumn.setCellRenderer(new DetalleMoviClienProveTableCell(asientocontableConstantesFunciones.resaltarDetalleMoviClienProveAsientoContable,this,this.asientocontableConstantesFunciones.activarDetalleMoviClienProveAsientoContable));
				tableColumn.setCellEditor(new DetalleMoviClienProveTableCell(asientocontableConstantesFunciones.resaltarDetalleMoviClienProveAsientoContable,this,this.asientocontableConstantesFunciones.activarDetalleMoviClienProveAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}

			if(this.isTienePermisosPrestamo && this.asientocontableConstantesFunciones.mostrarPrestamoAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Prestamos");
				tableColumn.setHeaderValue("Prestamos");
				tableColumn.setCellRenderer(new PrestamoTableCell(asientocontableConstantesFunciones.resaltarPrestamoAsientoContable,this,this.asientocontableConstantesFunciones.activarPrestamoAsientoContable));
				tableColumn.setCellEditor(new PrestamoTableCell(asientocontableConstantesFunciones.resaltarPrestamoAsientoContable,this,this.asientocontableConstantesFunciones.activarPrestamoAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}

			if(this.isTienePermisosDetalleAsientoContable && this.asientocontableConstantesFunciones.mostrarDetalleAsientoContableAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Asiento Contables");
				tableColumn.setHeaderValue("Detalle Asiento Contables");
				tableColumn.setCellRenderer(new DetalleAsientoContableTableCell(asientocontableConstantesFunciones.resaltarDetalleAsientoContableAsientoContable,this,this.asientocontableConstantesFunciones.activarDetalleAsientoContableAsientoContable));
				tableColumn.setCellEditor(new DetalleAsientoContableTableCell(asientocontableConstantesFunciones.resaltarDetalleAsientoContableAsientoContable,this,this.asientocontableConstantesFunciones.activarDetalleAsientoContableAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}

			if(this.isTienePermisosRetencion && this.asientocontableConstantesFunciones.mostrarRetencionAsientoContable && !AsientoContableConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Retenciones");
				tableColumn.setHeaderValue("Retenciones");
				tableColumn.setCellRenderer(new RetencionTableCell(asientocontableConstantesFunciones.resaltarRetencionAsientoContable,this,this.asientocontableConstantesFunciones.activarRetencionAsientoContable));
				tableColumn.setCellEditor(new RetencionTableCell(asientocontableConstantesFunciones.resaltarRetencionAsientoContable,this,this.asientocontableConstantesFunciones.activarRetencionAsientoContable));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosAsientoContable.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosAsientoContable.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosAsientoContable.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarAsientoContable && this.isPermisoGuardarCambiosAsientoContable) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.asientocontableSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosAsientoContable.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.asientocontableSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosAsientoContable.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosAsientoContable.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarAsientoContable && this.isPermisoGuardarCambiosAsientoContable) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.asientocontableSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarAsientoContable && this.isPermisoGuardarCambiosAsientoContable) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosAsientoContable.moveColumn(this.jTableDatosAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosAsientoContable.moveColumn(this.jTableDatosAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.asientocontableSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosAsientoContable.moveColumn(this.jTableDatosAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosAsientoContable.moveColumn(this.jTableDatosAsientoContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosAsientoContable.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosAsientoContable.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosAsientoContable,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosAsientoContable.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosAsientoContable.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosAsientoContable.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosAsientoContable.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosAsientoContable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=asientocontableLogic.getAsientoContables().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=asientocontables.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosAsientoContable.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosAsientoContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosAsientoContable();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoAsientoContable=false;
					
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosAsientoContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.asientocontable.getsType().equals("DUPLICADO")
				   || this.asientocontable.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoAsientoContable=true;
				
				} else {
					this.isEsNuevoAsientoContable=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					if(this.asientocontable.getId()>=0 && !this.asientocontable.getIsNew()) {						
						this.isEsNuevoAsientoContable=false;
						
					} else {
						this.isEsNuevoAsientoContable=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoAsientoContable(esRelaciones);						
				
				this.seleccionarAsientoContable(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.asientocontable.getId()<0) {
					this.isEsNuevoAsientoContable=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarAsientoContable(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarAsientoContable(evt,rowIndex);
				}	
				
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion AsientoContable: " + this.dDif); 
					}
				}								
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarAsientoContable(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.asientocontable)) {
					if(this.asientocontable.getId()>0) {
						this.asientocontable.setIsDeleted(true);
						
						this.asientocontablesEliminados.add(this.asientocontable);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.asientocontableLogic.getAsientoContables().remove(this.asientocontable);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.asientocontables.remove(this.asientocontable);				
					}
					
					
					((AsientoContableModel) this.jTableDatosAsientoContable.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaAsientoContable(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarAsientoContable(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoAsientoContable) {
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosAsientoContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosAsientoContable.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioAsientoContable(this.asientocontable);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.asientocontableConstantesFunciones.cargarid_empresaAsientoContable || this.asientocontableConstantesFunciones.event_dependid_empresaAsientoContable) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.asientocontable.getid_empresa());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(asientocontable.getEmpresa()!=null) {
							this.empresasForeignKey.add(asientocontable.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.asientocontable.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.asientocontableConstantesFunciones.cargarid_sucursalAsientoContable || this.asientocontableConstantesFunciones.event_dependid_sucursalAsientoContable) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.asientocontable.getid_sucursal());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(asientocontable.getSucursal()!=null) {
							this.sucursalsForeignKey.add(asientocontable.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.asientocontable.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.asientocontableConstantesFunciones.cargarid_ejercicioAsientoContable || this.asientocontableConstantesFunciones.event_dependid_ejercicioAsientoContable) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.asientocontable.getid_ejercicio());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(asientocontable.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(asientocontable.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.asientocontable.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.asientocontableConstantesFunciones.cargarid_periodoAsientoContable || this.asientocontableConstantesFunciones.event_dependid_periodoAsientoContable) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.asientocontable.getid_periodo());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(asientocontable.getPeriodo()!=null) {
							this.periodosForeignKey.add(asientocontable.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.asientocontable.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.asientocontableConstantesFunciones.cargarid_anioAsientoContable || this.asientocontableConstantesFunciones.event_dependid_anioAsientoContable) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.asientocontable.getid_anio());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(asientocontable.getAnio()!=null) {
							this.aniosForeignKey.add(asientocontable.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.asientocontable.getid_anio(),false,"Formulario");

					//Mes
					if(!this.asientocontableConstantesFunciones.cargarid_mesAsientoContable || this.asientocontableConstantesFunciones.event_dependid_mesAsientoContable) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.asientocontable.getid_mes());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(asientocontable.getMes()!=null) {
							this.messForeignKey.add(asientocontable.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.asientocontable.getid_mes(),false,"Formulario");

					//Modulo
					if(!this.asientocontableConstantesFunciones.cargarid_moduloAsientoContable || this.asientocontableConstantesFunciones.event_dependid_moduloAsientoContable) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.asientocontable.getid_modulo());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(asientocontable.getModulo()!=null) {
							this.modulosForeignKey.add(asientocontable.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.asientocontable.getid_modulo(),false,"Formulario");

					//Usuario
					if(!this.asientocontableConstantesFunciones.cargarid_usuarioAsientoContable || this.asientocontableConstantesFunciones.event_dependid_usuarioAsientoContable) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.asientocontable.getid_usuario());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(asientocontable.getUsuario()!=null) {
							this.usuariosForeignKey.add(asientocontable.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.asientocontable.getid_usuario(),false,"Formulario");

					//TipoDocumento
					if(!this.asientocontableConstantesFunciones.cargarid_tipo_documentoAsientoContable || this.asientocontableConstantesFunciones.event_dependid_tipo_documentoAsientoContable) {
						//this.cargarCombosTipoDocumentosForeignKeyLista(" where id="+this.asientocontable.getid_tipo_documento());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

						if(asientocontable.getTipoDocumento()!=null) {
							this.tipodocumentosForeignKey.add(asientocontable.getTipoDocumento());
						}

						this.addItemDefectoCombosForeignKeyTipoDocumento();
						this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
					}
					this.setActualTipoDocumentoForeignKey(this.asientocontable.getid_tipo_documento(),false,"Formulario");

					//TipoMovimiento
					if(!this.asientocontableConstantesFunciones.cargarid_tipo_movimientoAsientoContable || this.asientocontableConstantesFunciones.event_dependid_tipo_movimientoAsientoContable) {
						//this.cargarCombosTipoMovimientosForeignKeyLista(" where id="+this.asientocontable.getid_tipo_movimiento());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

						if(asientocontable.getTipoMovimiento()!=null) {
							this.tipomovimientosForeignKey.add(asientocontable.getTipoMovimiento());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimiento();
						this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
					}
					this.setActualTipoMovimientoForeignKey(this.asientocontable.getid_tipo_movimiento(),false,"Formulario");

					//Moneda
					if(!this.asientocontableConstantesFunciones.cargarid_monedaAsientoContable || this.asientocontableConstantesFunciones.event_dependid_monedaAsientoContable) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.asientocontable.getid_moneda());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(asientocontable.getMoneda()!=null) {
							this.monedasForeignKey.add(asientocontable.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.asientocontable.getid_moneda(),false,"Formulario");

					//Cliente
					if(!this.asientocontableConstantesFunciones.cargarid_clienteAsientoContable || this.asientocontableConstantesFunciones.event_dependid_clienteAsientoContable) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.asientocontable.getid_cliente());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(asientocontable.getCliente()!=null) {
							this.clientesForeignKey.add(asientocontable.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.asientocontable.getid_cliente(),false,"Formulario");

					//TipoDescripcionAsiento
					if(!this.asientocontableConstantesFunciones.cargarid_tipo_descripcion_asientoAsientoContable || this.asientocontableConstantesFunciones.event_dependid_tipo_descripcion_asientoAsientoContable) {
						//this.cargarCombosTipoDescripcionAsientosForeignKeyLista(" where id="+this.asientocontable.getid_tipo_descripcion_asiento());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.tipodescripcionasientosForeignKey=new ArrayList<TipoDescripcionAsiento>();

						if(asientocontable.getTipoDescripcionAsiento()!=null) {
							this.tipodescripcionasientosForeignKey.add(asientocontable.getTipoDescripcionAsiento());
						}

						this.addItemDefectoCombosForeignKeyTipoDescripcionAsiento();
						this.cargarCombosFrameTipoDescripcionAsientosForeignKey("Todos");
					}
					this.setActualTipoDescripcionAsientoForeignKey(this.asientocontable.getid_tipo_descripcion_asiento(),false,"Formulario");

					//Formato
					if(!this.asientocontableConstantesFunciones.cargarid_formatoAsientoContable || this.asientocontableConstantesFunciones.event_dependid_formatoAsientoContable) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.asientocontable.getid_formato());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(asientocontable.getFormato()!=null) {
							this.formatosForeignKey.add(asientocontable.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.asientocontable.getid_formato(),false,"Formulario");

					//EstadoAsientoContable
					if(!this.asientocontableConstantesFunciones.cargarid_estado_asiento_contableAsientoContable || this.asientocontableConstantesFunciones.event_dependid_estado_asiento_contableAsientoContable) {
						//this.cargarCombosEstadoAsientoContablesForeignKeyLista(" where id="+this.asientocontable.getid_estado_asiento_contable());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.estadoasientocontablesForeignKey=new ArrayList<EstadoAsientoContable>();

						if(asientocontable.getEstadoAsientoContable()!=null) {
							this.estadoasientocontablesForeignKey.add(asientocontable.getEstadoAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyEstadoAsientoContable();
						this.cargarCombosFrameEstadoAsientoContablesForeignKey("Todos");
					}
					this.setActualEstadoAsientoContableForeignKey(this.asientocontable.getid_estado_asiento_contable(),false,"Formulario");

					//TipoMovimientoModulo
					if(!this.asientocontableConstantesFunciones.cargarid_tipo_movimiento_moduloAsientoContable || this.asientocontableConstantesFunciones.event_dependid_tipo_movimiento_moduloAsientoContable) {
						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(" where id="+this.asientocontable.getid_tipo_movimiento_modulo());
									//this.inicializarActualizarBindingAsientoContable(false,false);
						this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

						if(asientocontable.getTipoMovimientoModulo()!=null) {
							this.tipomovimientomodulosForeignKey.add(asientocontable.getTipoMovimientoModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
						this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");
					}
					this.setActualTipoMovimientoModuloForeignKey(this.asientocontable.getid_tipo_movimiento_modulo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesAsientoContable("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesAsientoContable(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAsientoContable() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoAsientoContable(AsientoContable asientocontable) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoAsientoContable(asientocontable,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoAsientoContable(AsientoContable asientocontable,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioAsientoContable(asientocontable);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyAsientoContable(asientocontable,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyAsientoContable(asientocontable);
	}
	
	public void setVariablesObjetoActualToFormularioAsientoContable(AsientoContable asientocontable) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setText(asientocontable.getId().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setText(asientocontable.getcodigo());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setDate(asientocontable.getfecha());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setText(asientocontable.getnumero_mayor());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setSelected(asientocontable.getes_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setText(asientocontable.getnumero_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setText(asientocontable.getvalor().toString());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setSelected(asientocontable.getes_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setText(asientocontable.getnumero_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setText(asientocontable.getcotizacion().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setText(asientocontable.getbeneficiario());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setText(asientocontable.getdescripcion());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setDate(asientocontable.getfecha_finalizacion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,AsientoContable asientocontableLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,asientocontableLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,AsientoContable asientocontableLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				asientocontableLocal=this.asientocontable;
			} else {
				asientocontableLocal=this.asientocontableAnterior;
			}
		}
		
		if(this.permiteMantenimiento(asientocontableLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableLocal,true);
					
					if(asientocontableSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(asientocontableLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(asientocontableLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoAsientoContable(AsientoContable asientocontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualAsientoContable(asientocontable,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(asientocontable);
	}
	
	public void setVariablesFormularioToObjetoActualAsientoContable(AsientoContable asientocontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualAsientoContable(asientocontable,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualAsientoContable(AsientoContable asientocontable,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.getText()==null || this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.getText()=="" || this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.getText()=="Id") {
				this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setText("0");
			}

			if(conColumnasBase) {asientocontable.setId(Long.parseLong(this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelIdAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setcodigo(this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelcodigoAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setfecha(this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelfechaAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setnumero_mayor(this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_mayorAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setes_retencion(this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_ESRETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencionAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setnumero_retencion(this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_NUMERORETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencionAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setvalor(Double.parseDouble(this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_VALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelvalorAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setes_retencion_iva(this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeles_retencion_ivaAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setnumero_retencion_iva(this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelnumero_retencion_ivaAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setcotizacion(Double.parseDouble(this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_COTIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelcotizacionAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setbeneficiario(this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_BENEFICIARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelbeneficiarioAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setdescripcion(this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabeldescripcionAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			asientocontable.setfecha_finalizacion(this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAsientoContable.jLabelfecha_finalizacionAsientoContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualAsientoContable(AsientoContable asientocontableBean,AsientoContable asientocontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosAsientoContable(AsientoContable asientocontableOrigen,AsientoContable asientocontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && asientocontableOrigen.getId()!=null && !asientocontableOrigen.getId().equals(0L))) {asientocontable.setId(asientocontableOrigen.getId());}}
			if(conDefault || (!conDefault && asientocontableOrigen.getcodigo()!=null && !asientocontableOrigen.getcodigo().equals(""))) {asientocontable.setcodigo(asientocontableOrigen.getcodigo());}
			if(conDefault || (!conDefault && asientocontableOrigen.getfecha()!=null && !asientocontableOrigen.getfecha().equals(new Date()))) {asientocontable.setfecha(asientocontableOrigen.getfecha());}
			if(conDefault || (!conDefault && asientocontableOrigen.getnumero_mayor()!=null && !asientocontableOrigen.getnumero_mayor().equals(""))) {asientocontable.setnumero_mayor(asientocontableOrigen.getnumero_mayor());}
			if(conDefault || (!conDefault && asientocontableOrigen.getes_retencion()!=null && !asientocontableOrigen.getes_retencion().equals(false))) {asientocontable.setes_retencion(asientocontableOrigen.getes_retencion());}
			if(conDefault || (!conDefault && asientocontableOrigen.getnumero_retencion()!=null && !asientocontableOrigen.getnumero_retencion().equals(""))) {asientocontable.setnumero_retencion(asientocontableOrigen.getnumero_retencion());}
			if(conDefault || (!conDefault && asientocontableOrigen.getvalor()!=null && !asientocontableOrigen.getvalor().equals(0.0))) {asientocontable.setvalor(asientocontableOrigen.getvalor());}
			if(conDefault || (!conDefault && asientocontableOrigen.getes_retencion_iva()!=null && !asientocontableOrigen.getes_retencion_iva().equals(false))) {asientocontable.setes_retencion_iva(asientocontableOrigen.getes_retencion_iva());}
			if(conDefault || (!conDefault && asientocontableOrigen.getnumero_retencion_iva()!=null && !asientocontableOrigen.getnumero_retencion_iva().equals(""))) {asientocontable.setnumero_retencion_iva(asientocontableOrigen.getnumero_retencion_iva());}
			if(conDefault || (!conDefault && asientocontableOrigen.getcotizacion()!=null && !asientocontableOrigen.getcotizacion().equals(0.0))) {asientocontable.setcotizacion(asientocontableOrigen.getcotizacion());}
			if(conDefault || (!conDefault && asientocontableOrigen.getbeneficiario()!=null && !asientocontableOrigen.getbeneficiario().equals(""))) {asientocontable.setbeneficiario(asientocontableOrigen.getbeneficiario());}
			if(conDefault || (!conDefault && asientocontableOrigen.getdescripcion()!=null && !asientocontableOrigen.getdescripcion().equals(""))) {asientocontable.setdescripcion(asientocontableOrigen.getdescripcion());}
			if(conDefault || (!conDefault && asientocontableOrigen.getfecha_emision()!=null && !asientocontableOrigen.getfecha_emision().equals(new Date()))) {asientocontable.setfecha_emision(asientocontableOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && asientocontableOrigen.getfecha_finalizacion()!=null && !asientocontableOrigen.getfecha_finalizacion().equals(new Date()))) {asientocontable.setfecha_finalizacion(asientocontableOrigen.getfecha_finalizacion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioAsientoContable(AsientoContable asientocontable) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setText(asientocontable.getId().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setText(asientocontable.getcodigo());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setDate(asientocontable.getfecha());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setText(asientocontable.getnumero_mayor());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setSelected(asientocontable.getes_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setText(asientocontable.getnumero_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setText(asientocontable.getvalor().toString());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setSelected(asientocontable.getes_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setText(asientocontable.getnumero_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setText(asientocontable.getcotizacion().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setText(asientocontable.getbeneficiario());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setText(asientocontable.getdescripcion());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setDate(asientocontable.getfecha_finalizacion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioAsientoContable(AsientoContableBean asientocontableBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setText(asientocontableBean.getId().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setText(asientocontableBean.getcodigo());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setDate(asientocontableBean.getfecha());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setText(asientocontableBean.getnumero_mayor());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setSelected(asientocontableBean.getes_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setText(asientocontableBean.getnumero_retencion());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setText(asientocontableBean.getvalor().toString());
			this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setSelected(asientocontableBean.getes_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setText(asientocontableBean.getnumero_retencion_iva());
			this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setText(asientocontableBean.getcotizacion().toString());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setText(asientocontableBean.getbeneficiario());
			this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setText(asientocontableBean.getdescripcion());
			this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setDate(asientocontableBean.getfecha_finalizacion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanAsientoContable(AsientoContableParameterReturnGeneral asientocontableReturnGeneral,AsientoContableBean asientocontableBean,Boolean conDefault) throws Exception { 
		try {
			AsientoContable asientocontableLocal=new AsientoContable();
			
			asientocontableLocal=asientocontableReturnGeneral.getAsientoContable();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && asientocontableLocal.getId()!=null && !asientocontableLocal.getId().equals(0L))) {asientocontableBean.setId(asientocontableLocal.getId());}}
			if(conDefault || (!conDefault && asientocontableLocal.getcodigo()!=null && !asientocontableLocal.getcodigo().equals(""))) {asientocontableBean.setcodigo(asientocontableLocal.getcodigo());}
			if(conDefault || (!conDefault && asientocontableLocal.getfecha()!=null && !asientocontableLocal.getfecha().equals(new Date()))) {asientocontableBean.setfecha(asientocontableLocal.getfecha());}
			if(conDefault || (!conDefault && asientocontableLocal.getnumero_mayor()!=null && !asientocontableLocal.getnumero_mayor().equals(""))) {asientocontableBean.setnumero_mayor(asientocontableLocal.getnumero_mayor());}
			if(conDefault || (!conDefault && asientocontableLocal.getes_retencion()!=null && !asientocontableLocal.getes_retencion().equals(false))) {asientocontableBean.setes_retencion(asientocontableLocal.getes_retencion());}
			if(conDefault || (!conDefault && asientocontableLocal.getnumero_retencion()!=null && !asientocontableLocal.getnumero_retencion().equals(""))) {asientocontableBean.setnumero_retencion(asientocontableLocal.getnumero_retencion());}
			if(conDefault || (!conDefault && asientocontableLocal.getvalor()!=null && !asientocontableLocal.getvalor().equals(0.0))) {asientocontableBean.setvalor(asientocontableLocal.getvalor());}
			if(conDefault || (!conDefault && asientocontableLocal.getes_retencion_iva()!=null && !asientocontableLocal.getes_retencion_iva().equals(false))) {asientocontableBean.setes_retencion_iva(asientocontableLocal.getes_retencion_iva());}
			if(conDefault || (!conDefault && asientocontableLocal.getnumero_retencion_iva()!=null && !asientocontableLocal.getnumero_retencion_iva().equals(""))) {asientocontableBean.setnumero_retencion_iva(asientocontableLocal.getnumero_retencion_iva());}
			if(conDefault || (!conDefault && asientocontableLocal.getcotizacion()!=null && !asientocontableLocal.getcotizacion().equals(0.0))) {asientocontableBean.setcotizacion(asientocontableLocal.getcotizacion());}
			if(conDefault || (!conDefault && asientocontableLocal.getbeneficiario()!=null && !asientocontableLocal.getbeneficiario().equals(""))) {asientocontableBean.setbeneficiario(asientocontableLocal.getbeneficiario());}
			if(conDefault || (!conDefault && asientocontableLocal.getdescripcion()!=null && !asientocontableLocal.getdescripcion().equals(""))) {asientocontableBean.setdescripcion(asientocontableLocal.getdescripcion());}
			if(conDefault || (!conDefault && asientocontableLocal.getfecha_finalizacion()!=null && !asientocontableLocal.getfecha_finalizacion().equals(new Date()))) {asientocontableBean.setfecha_finalizacion(asientocontableLocal.getfecha_finalizacion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxAsientoContableGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxAsientoContable,List<AsientoContable> asientocontablesLocal)throws Exception {
		try {
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesLocal) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			jComboBoxAsientoContable.setSelectedItem(asientocontableTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxAsientoContableGenerico(JComboBox jComboBoxAsientoContable,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxAsientoContable.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxAsientoContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxAsientoContable.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxAsientoContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxAsientoContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxAsientoContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("Sri")) {
			jButtonSriActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("ImportarExportar")) {
			jButtonImportarExportarActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("DetalleMoviClienProve")) {
			jButtonDetalleMoviClienProveActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("Prestamo")) {
			jButtonPrestamoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("DetalleAsientoContable")) {
			jButtonDetalleAsientoContableActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("Retencion")) {
			jButtonRetencionActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			asientocontable=(AsientoContable) asientocontableLogic.getAsientoContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			asientocontable =(AsientoContable) asientocontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getmes_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getusuario_descripcion();
			}
		}

		if(sTipo.equals("TipoDocumento")) {
			//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.gettipodocumento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.gettipodocumento_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimiento")) {
			//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.gettipomovimiento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.gettipomovimiento_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoDescripcionAsiento")) {
			//sDescripcion=this.getActualTipoDescripcionAsientoForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.gettipodescripcionasiento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDescripcionAsientoForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.gettipodescripcionasiento_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getformato_descripcion();
			}
		}

		if(sTipo.equals("EstadoAsientoContable")) {
			//sDescripcion=this.getActualEstadoAsientoContableForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.getestadoasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.getestadoasientocontable_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimientoModulo")) {
			//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
			if(!asientocontable.getIsNew() && !asientocontable.getIsChanged() && !asientocontable.getIsDeleted()) {
				sDescripcion=asientocontable.gettipomovimientomodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
				sDescripcion=asientocontable.gettipomovimientomodulo_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		AsientoContable asientocontableRow=new AsientoContable();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			asientocontableRow=(AsientoContable) asientocontableLogic.getAsientoContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			asientocontableRow=(AsientoContable) asientocontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("EstadoAsientoContable")) {
			color=FuncionesSwing.getColorGeneral(asientocontableRow.getEstadoAsientoContable().getid_color_general());
		}

		
		return color;
	}
	
	
	
	
	public void jButtonSriActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosSri && this.permiteMantenimiento(this.asientocontable)) {
					SriBeanSwingJInternalFrame sriBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup=new SriBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						sriBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup;
					} else {
						sriBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//sriBeanSwingJInternalFrame.sriSessionBean.setConGuardarRelaciones(false);
						//sriBeanSwingJInternalFrame.sriSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					sriBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarSriBeanSwingJInternalFrame(asientocontables,this.asientocontable,sriBeanSwingJInternalFrame,/*conInicializar,*/sriBeanSwingJInternalFrame.sriSessionBean.getConGuardarRelaciones(),sriBeanSwingJInternalFrame.sriSessionBean.getEsGuardarRelacionado());
					sriBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						sriBeanSwingJInternalFrame.actualizarEstadoPanelsSri("no_relacionado");

						sriBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(SriConstantesFunciones.ITAMANIOFILATABLA + (SriConstantesFunciones.ITAMANIOFILATABLA/2));

						sriBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderSri=(TitledBorder)sriBeanSwingJInternalFrame.jScrollPanelDatosSri.getBorder();

						titledBorderSri.setTitle(titledBorderAsientoContable.getTitle() + " -> Sri");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,sriBeanSwingJInternalFrame);
						}

						sriBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(sriBeanSwingJInternalFrame);

						sriBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Sri",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonImportarExportarActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosImportarExportar && this.permiteMantenimiento(this.asientocontable)) {
					ImportarExportarBeanSwingJInternalFrame importarexportarBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup=new ImportarExportarBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						importarexportarBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup;
					} else {
						importarexportarBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.setConGuardarRelaciones(false);
						//importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					importarexportarBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarImportarExportarBeanSwingJInternalFrame(asientocontables,this.asientocontable,importarexportarBeanSwingJInternalFrame,/*conInicializar,*/importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.getConGuardarRelaciones(),importarexportarBeanSwingJInternalFrame.importarexportarSessionBean.getEsGuardarRelacionado());
					importarexportarBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						importarexportarBeanSwingJInternalFrame.actualizarEstadoPanelsImportarExportar("no_relacionado");

						importarexportarBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(ImportarExportarConstantesFunciones.ITAMANIOFILATABLA + (ImportarExportarConstantesFunciones.ITAMANIOFILATABLA/2));

						importarexportarBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderImportarExportar=(TitledBorder)importarexportarBeanSwingJInternalFrame.jScrollPanelDatosImportarExportar.getBorder();

						titledBorderImportarExportar.setTitle(titledBorderAsientoContable.getTitle() + " -> Importar Exportar");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,importarexportarBeanSwingJInternalFrame);
						}

						importarexportarBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(importarexportarBeanSwingJInternalFrame);

						importarexportarBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Importar Exportar",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonDetalleMoviClienProveActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosDetalleMoviClienProve && this.permiteMantenimiento(this.asientocontable)) {
					DetalleMoviClienProveBeanSwingJInternalFrame detallemoviclienproveBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup=new DetalleMoviClienProveBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallemoviclienproveBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup;
					} else {
						detallemoviclienproveBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.setConGuardarRelaciones(false);
						//detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallemoviclienproveBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarDetalleMoviClienProveBeanSwingJInternalFrame(asientocontables,this.asientocontable,detallemoviclienproveBeanSwingJInternalFrame,/*conInicializar,*/detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.getConGuardarRelaciones(),detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveSessionBean.getEsGuardarRelacionado());
					detallemoviclienproveBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallemoviclienproveBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleMoviClienProve("no_relacionado");

						detallemoviclienproveBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleMoviClienProveConstantesFunciones.ITAMANIOFILATABLA + (DetalleMoviClienProveConstantesFunciones.ITAMANIOFILATABLA/2));

						detallemoviclienproveBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderDetalleMoviClienProve=(TitledBorder)detallemoviclienproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleMoviClienProve.getBorder();

						titledBorderDetalleMoviClienProve.setTitle(titledBorderAsientoContable.getTitle() + " -> Detalle Cliente");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallemoviclienproveBeanSwingJInternalFrame);
						}

						detallemoviclienproveBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallemoviclienproveBeanSwingJInternalFrame);

						detallemoviclienproveBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Cliente",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonPrestamoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosPrestamo && this.permiteMantenimiento(this.asientocontable)) {
					PrestamoBeanSwingJInternalFrame prestamoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup=new PrestamoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						prestamoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup;
					} else {
						prestamoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//prestamoBeanSwingJInternalFrame.prestamoSessionBean.setConGuardarRelaciones(false);
						//prestamoBeanSwingJInternalFrame.prestamoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					prestamoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarPrestamoBeanSwingJInternalFrame(asientocontables,this.asientocontable,prestamoBeanSwingJInternalFrame,/*conInicializar,*/prestamoBeanSwingJInternalFrame.prestamoSessionBean.getConGuardarRelaciones(),prestamoBeanSwingJInternalFrame.prestamoSessionBean.getEsGuardarRelacionado());
					prestamoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						prestamoBeanSwingJInternalFrame.actualizarEstadoPanelsPrestamo("no_relacionado");

						prestamoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PrestamoConstantesFunciones.ITAMANIOFILATABLA + (PrestamoConstantesFunciones.ITAMANIOFILATABLA/2));

						prestamoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderPrestamo=(TitledBorder)prestamoBeanSwingJInternalFrame.jScrollPanelDatosPrestamo.getBorder();

						titledBorderPrestamo.setTitle(titledBorderAsientoContable.getTitle() + " -> Prestamo");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,prestamoBeanSwingJInternalFrame);
						}

						prestamoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(prestamoBeanSwingJInternalFrame);

						prestamoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Prestamo",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonDetalleAsientoContableActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosDetalleAsientoContable && this.permiteMantenimiento(this.asientocontable)) {
					DetalleAsientoContableBeanSwingJInternalFrame detalleasientocontableBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup=new DetalleAsientoContableBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detalleasientocontableBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup;
					} else {
						detalleasientocontableBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.setConGuardarRelaciones(false);
						//detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detalleasientocontableBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarDetalleAsientoContableBeanSwingJInternalFrame(asientocontables,this.asientocontable,detalleasientocontableBeanSwingJInternalFrame,/*conInicializar,*/detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.getConGuardarRelaciones(),detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableSessionBean.getEsGuardarRelacionado());
					detalleasientocontableBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detalleasientocontableBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleAsientoContable("no_relacionado");

						detalleasientocontableBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleAsientoContableConstantesFunciones.ITAMANIOFILATABLA + (DetalleAsientoContableConstantesFunciones.ITAMANIOFILATABLA/2));

						detalleasientocontableBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderDetalleAsientoContable=(TitledBorder)detalleasientocontableBeanSwingJInternalFrame.jScrollPanelDatosDetalleAsientoContable.getBorder();

						titledBorderDetalleAsientoContable.setTitle(titledBorderAsientoContable.getTitle() + " -> Detalle Asiento Contable");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detalleasientocontableBeanSwingJInternalFrame);
						}

						detalleasientocontableBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detalleasientocontableBeanSwingJInternalFrame);

						detalleasientocontableBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Asiento Contable",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonRetencionActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,AsientoContable asientocontable) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormAsientoContable==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable = (AsientoContable)this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.asientocontable = (AsientoContable)this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(asientocontable!=null) {
						this.asientocontable = asientocontable;
					} else {
						this.asientocontable = new AsientoContable();
					}
				}

				if(this.isTienePermisosRetencion && this.permiteMantenimiento(this.asientocontable)) {
					RetencionBeanSwingJInternalFrame retencionBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup=new RetencionBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						retencionBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup;
					} else {
						retencionBeanSwingJInternalFrame=this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame;
					}

					List<AsientoContable> asientocontables=new ArrayList<AsientoContable>();
					asientocontables.add(this.asientocontable);
					if(!esRelacionado) {
						//retencionBeanSwingJInternalFrame.retencionSessionBean.setConGuardarRelaciones(false);
						//retencionBeanSwingJInternalFrame.retencionSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					retencionBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormAsientoContable.cargarRetencionBeanSwingJInternalFrame(asientocontables,this.asientocontable,retencionBeanSwingJInternalFrame,/*conInicializar,*/retencionBeanSwingJInternalFrame.retencionSessionBean.getConGuardarRelaciones(),retencionBeanSwingJInternalFrame.retencionSessionBean.getEsGuardarRelacionado());
					retencionBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						retencionBeanSwingJInternalFrame.actualizarEstadoPanelsRetencion("no_relacionado");

						retencionBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(RetencionConstantesFunciones.ITAMANIOFILATABLA + (RetencionConstantesFunciones.ITAMANIOFILATABLA/2));

						retencionBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
						TitledBorder titledBorderRetencion=(TitledBorder)retencionBeanSwingJInternalFrame.jScrollPanelDatosRetencion.getBorder();

						titledBorderRetencion.setTitle(titledBorderAsientoContable.getTitle() + " -> Retencion");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,retencionBeanSwingJInternalFrame);
						}

						retencionBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(retencionBeanSwingJInternalFrame);

						retencionBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.asientocontableSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Retencion",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualAsientoContable(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable));			
			this.jButtonDuplicarAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarAsientoContable && this.isPermisoDuplicarAsientoContable));			
			this.jButtonCopiarAsientoContable.setVisible((this.isVisibilidadCeldaCopiarAsientoContable && this.isPermisoCopiarAsientoContable));
			this.jButtonVerFormAsientoContable.setVisible((this.isVisibilidadCeldaVerFormAsientoContable && this.isPermisoVerFormAsientoContable));
			
			this.jButtonAbrirOrderByAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));			
			
			this.jButtonNuevoRelacionesAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesAsientoContable && this.isPermisoNuevoAsientoContable));			
			this.jButtonNuevoGuardarCambiosAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable && this.isPermisoGuardarCambiosAsientoContable));
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonModificarAsientoContable.setVisible((this.isVisibilidadCeldaModificarAsientoContable && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.setVisible((this.isVisibilidadCeldaActualizarAsientoContable && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.setVisible((this.isVisibilidadCeldaEliminarAsientoContable && this.isPermisoEliminarAsientoContable));
			this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.setVisible(this.isVisibilidadCeldaCancelarAsientoContable);							
			this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.setVisible((this.isVisibilidadCeldaGuardarAsientoContable && this.isPermisoGuardarCambiosAsientoContable));			
			
			}
						
			this.jButtonGuardarCambiosTablaAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosAsientoContable && this.isPermisoGuardarCambiosAsientoContable));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable));						
			this.jButtonDuplicarToolBarAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarAsientoContable && this.isPermisoDuplicarAsientoContable));						
			this.jButtonCopiarToolBarAsientoContable.setVisible((this.isVisibilidadCeldaCopiarAsientoContable && this.isPermisoCopiarAsientoContable));			
			this.jButtonVerFormToolBarAsientoContable.setVisible((this.isVisibilidadCeldaVerFormAsientoContable && this.isPermisoVerFormAsientoContable));			
			this.jButtonAbrirOrderByToolBarAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));
			this.jButtonNuevoRelacionesToolBarAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesAsientoContable && this.isPermisoNuevoAsientoContable));			
			this.jButtonNuevoGuardarCambiosToolBarAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable && this.isPermisoGuardarCambiosAsientoContable));			
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonModificarToolBarAsientoContable.setVisible((this.isVisibilidadCeldaModificarAsientoContable && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarToolBarAsientoContable.setVisible((this.isVisibilidadCeldaActualizarAsientoContable  && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarToolBarAsientoContable.setVisible((this.isVisibilidadCeldaEliminarAsientoContable && this.isPermisoEliminarAsientoContable));
			this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarToolBarAsientoContable.setVisible(this.isVisibilidadCeldaCancelarAsientoContable);				
			this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosToolBarAsientoContable.setVisible((this.isVisibilidadCeldaGuardarAsientoContable && this.isPermisoGuardarCambiosAsientoContable));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosAsientoContable && this.isPermisoGuardarCambiosAsientoContable));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable));			
			this.jMenuItemDuplicarAsientoContable.setVisible((this.isVisibilidadCeldaDuplicarAsientoContable && this.isPermisoDuplicarAsientoContable));			
			this.jMenuItemCopiarAsientoContable.setVisible((this.isVisibilidadCeldaCopiarAsientoContable && this.isPermisoCopiarAsientoContable));			
			this.jMenuItemVerFormAsientoContable.setVisible((this.isVisibilidadCeldaVerFormAsientoContable && this.isPermisoVerFormAsientoContable));			
			this.jMenuItemAbrirOrderByAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));			
			//this.jMenuItemMostrarOcultarAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));
			this.jMenuItemDetalleAbrirOrderByAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));			
			//this.jMenuItemDetalleMostrarOcultarAsientoContable.setVisible((this.isVisibilidadCeldaOrdenAsientoContable && this.isPermisoOrdenAsientoContable));			
			this.jMenuItemNuevoRelacionesAsientoContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesAsientoContable && this.isPermisoNuevoAsientoContable));			
			this.jMenuItemNuevoGuardarCambiosAsientoContable.setVisible((this.isVisibilidadCeldaNuevoAsientoContable && this.isPermisoNuevoAsientoContable && this.isPermisoGuardarCambiosAsientoContable));									
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemModificarAsientoContable.setVisible((this.isVisibilidadCeldaModificarAsientoContable && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemActualizarAsientoContable.setVisible((this.isVisibilidadCeldaActualizarAsientoContable && this.isPermisoActualizarAsientoContable));	
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemEliminarAsientoContable.setVisible((this.isVisibilidadCeldaEliminarAsientoContable && this.isPermisoEliminarAsientoContable));
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemCancelarAsientoContable.setVisible(this.isVisibilidadCeldaCancelarAsientoContable);				
			}
			
			this.jMenuItemGuardarCambiosAsientoContable.setVisible((this.isVisibilidadCeldaGuardarAsientoContable && this.isPermisoGuardarCambiosAsientoContable));						
			this.jMenuItemGuardarCambiosTablaAsientoContable.setVisible((this.isVisibilidadCeldaGuardarCambiosAsientoContable && this.isPermisoGuardarCambiosAsientoContable));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoAsientoContable=this.jButtonNuevoAsientoContable.isVisible();
			this.isVisibilidadCeldaDuplicarAsientoContable=this.jButtonDuplicarAsientoContable.isVisible();
			this.isVisibilidadCeldaCopiarAsientoContable=this.jButtonCopiarAsientoContable.isVisible();
			this.isVisibilidadCeldaVerFormAsientoContable=this.jButtonVerFormAsientoContable.isVisible();
			
			this.isVisibilidadCeldaOrdenAsientoContable=this.jButtonAbrirOrderByAsientoContable.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=this.jButtonNuevoRelacionesAsientoContable.isVisible();
			this.isVisibilidadCeldaModificarAsientoContable=this.jButtonModificarAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.isVisibilidadCeldaActualizarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=this.jButtonGuardarCambiosTablaAsientoContable.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoAsientoContable=this.jButtonNuevoToolBarAsientoContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=this.jButtonNuevoRelacionesToolBarAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.isVisibilidadCeldaModificarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonModificarToolBarAsientoContable.isVisible();
			this.isVisibilidadCeldaActualizarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarToolBarAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarToolBarAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarToolBarAsientoContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarAsientoContable=this.jButtonGuardarCambiosToolBarAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=this.jButtonGuardarCambiosTablaToolBarAsientoContable.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoAsientoContable=this.jMenuItemNuevoAsientoContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=this.jMenuItemNuevoRelacionesAsientoContable.isVisible();
			
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.isVisibilidadCeldaModificarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jMenuItemModificarAsientoContable.isVisible();
			this.isVisibilidadCeldaActualizarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jMenuItemActualizarAsientoContable.isVisible();
			this.isVisibilidadCeldaEliminarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jMenuItemEliminarAsientoContable.isVisible();
			this.isVisibilidadCeldaCancelarAsientoContable=this.jInternalFrameDetalleFormAsientoContable.jMenuItemCancelarAsientoContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarAsientoContable=this.jMenuItemGuardarCambiosAsientoContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=this.jMenuItemGuardarCambiosTablaAsientoContable.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesAsientoContable(Boolean esInicializar) {
		if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {			
			if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
				//if(this.asientocontableSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesAsientoContable();
			}
			
			this.inicializarActualizarBindingBotonesManualAsientoContable(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualAsientoContable() {
		this.jButtonNuevoAsientoContable.setVisible(this.isPermisoNuevoAsientoContable);			
		this.jButtonDuplicarAsientoContable.setVisible(this.isPermisoDuplicarAsientoContable);			
		this.jButtonCopiarAsientoContable.setVisible(this.isPermisoCopiarAsientoContable);			
		this.jButtonVerFormAsientoContable.setVisible(this.isPermisoVerFormAsientoContable);			
		
		this.jButtonAbrirOrderByAsientoContable.setVisible(this.isPermisoOrdenAsientoContable);					
		
		this.jButtonNuevoRelacionesAsientoContable.setVisible(this.isPermisoNuevoAsientoContable);			
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonModificarAsientoContable.setVisible(this.isPermisoActualizarAsientoContable);	
			this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.setVisible(this.isPermisoActualizarAsientoContable);	
			this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.setVisible(this.isPermisoEliminarAsientoContable);
			this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.setVisible(this.isVisibilidadCeldaCancelarAsientoContable);						
			this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.setVisible(this.isPermisoGuardarCambiosAsientoContable);							
		}
		
		this.jButtonGuardarCambiosTablaAsientoContable.setVisible(this.isPermisoActualizarAsientoContable);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleAsientoContable() {
		this.jInternalFrameDetalleFormAsientoContable.jButtonModificarAsientoContable.setVisible(this.isPermisoActualizarAsientoContable);	
		this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.setVisible(this.isPermisoActualizarAsientoContable);	
		this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.setVisible(this.isPermisoEliminarAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.setVisible(this.isVisibilidadCeldaCancelarAsientoContable);							
		this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.setVisible((this.isVisibilidadCeldaGuardarAsientoContable && this.isPermisoGuardarCambiosAsientoContable));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosAsientoContable() {
		if(AsientoContableJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualAsientoContable();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesAsientoContable() {
	}
	
	public void jTableDatosAsientoContableListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarAsientoContable(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.asientocontable.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebAsientoContable(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderAsientoContable.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.asientocontable.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebAsientoContable(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderAsientoContable.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.asientocontable.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebAsientoContable(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderAsientoContable.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.asientocontable.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebAsientoContable(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderAsientoContable.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.asientocontable.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebAsientoContable(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderAsientoContable.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.asientocontable.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebAsientoContable(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderAsientoContable.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.asientocontable.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebAsientoContable(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderAsientoContable.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.asientocontable.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebAsientoContable(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderAsientoContable.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.asientocontable.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_documentoAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodocumento=true;

			idTienePermisotipodocumento=this.tienePermisosUsuarioEnPaginaWebAsientoContable(TipoDocumentoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodocumento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.tipodocumentoBeanSwingJInternalFrame=new TipoDocumentoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodocumentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodocumentoBeanSwingJInternalFrame.getTipoDocumentoLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_tipo_documento()!=null) {
					this.tipodocumentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodocumentoBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_tipo_documento());
					this.tipodocumentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDocumento();
				}

				JInternalFrameBase jinternalFrame =this.tipodocumentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordertipodocumento=(TitledBorder)this.tipodocumentoBeanSwingJInternalFrame.jScrollPanelDatosTipoDocumento.getBorder();

				titledBordertipodocumento.setTitle(titledBorderAsientoContable.getTitle() + " -> Tipo Documento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_documentoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_tipo_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_documento = "+this.asientocontable.getid_tipo_documento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.asientocontable.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.asientocontable.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimientoAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimiento=true;

			idTienePermisotipomovimiento=this.tienePermisosUsuarioEnPaginaWebAsientoContable(TipoMovimientoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimiento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.tipomovimientoBeanSwingJInternalFrame=new TipoMovimientoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientoBeanSwingJInternalFrame.getTipoMovimientoLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_tipo_movimiento()!=null) {
					this.tipomovimientoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientoBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_tipo_movimiento());
					this.tipomovimientoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimiento();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordertipomovimiento=(TitledBorder)this.tipomovimientoBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimiento.getBorder();

				titledBordertipomovimiento.setTitle(titledBorderAsientoContable.getTitle() + " -> Tipo Movimiento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimientoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_tipo_movimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento = "+this.asientocontable.getid_tipo_movimiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_mayorAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getnumero_mayor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_mayor like '%"+this.asientocontable.getnumero_mayor()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebAsientoContable(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderAsientoContable.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.asientocontable.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_retencionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getes_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_retencion = "+this.asientocontable.getes_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_retencionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getnumero_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_retencion like '%"+this.asientocontable.getnumero_retencion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalorAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getvalor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor = "+this.asientocontable.getvalor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_retencion_ivaAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getes_retencion_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_retencion_iva = "+this.asientocontable.getes_retencion_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_retencion_ivaAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getnumero_retencion_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_retencion_iva like '%"+this.asientocontable.getnumero_retencion_iva()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncotizacionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getcotizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cotizacion = "+this.asientocontable.getcotizacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteAsientoContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderAsientoContable=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosAsientoContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderAsientoContable.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebAsientoContable(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderAsientoContable.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.asientocontable.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_descripcion_asientoAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodescripcionasiento=true;

			idTienePermisotipodescripcionasiento=this.tienePermisosUsuarioEnPaginaWebAsientoContable(TipoDescripcionAsientoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodescripcionasiento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.tipodescripcionasientoBeanSwingJInternalFrame=new TipoDescripcionAsientoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodescripcionasientoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodescripcionasientoBeanSwingJInternalFrame.getTipoDescripcionAsientoLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_tipo_descripcion_asiento()!=null) {
					this.tipodescripcionasientoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodescripcionasientoBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_tipo_descripcion_asiento());
					this.tipodescripcionasientoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodescripcionasientoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodescripcionasientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDescripcionAsiento();
				}

				JInternalFrameBase jinternalFrame =this.tipodescripcionasientoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordertipodescripcionasiento=(TitledBorder)this.tipodescripcionasientoBeanSwingJInternalFrame.jScrollPanelDatosTipoDescripcionAsiento.getBorder();

				titledBordertipodescripcionasiento.setTitle(titledBorderAsientoContable.getTitle() + " -> Tipo Descripcion Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_descripcion_asientoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_tipo_descripcion_asiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_descripcion_asiento = "+this.asientocontable.getid_tipo_descripcion_asiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebAsientoContable(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderAsientoContable.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.asientocontable.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbeneficiarioAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getbeneficiario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where beneficiario like '%"+this.asientocontable.getbeneficiario()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.asientocontable.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.asientocontable.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_finalizacionAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getfecha_finalizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_finalizacion = '"+Funciones2.getStringPostgresDate(this.asientocontable.getfecha_finalizacion())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_asiento_contableAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadoasientocontable=true;

			idTienePermisoestadoasientocontable=this.tienePermisosUsuarioEnPaginaWebAsientoContable(EstadoAsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.estadoasientocontableBeanSwingJInternalFrame=new EstadoAsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadoasientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadoasientocontableBeanSwingJInternalFrame.getEstadoAsientoContableLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_estado_asiento_contable()!=null) {
					this.estadoasientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadoasientocontableBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_estado_asiento_contable());
					this.estadoasientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadoasientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadoasientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.estadoasientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBorderestadoasientocontable=(TitledBorder)this.estadoasientocontableBeanSwingJInternalFrame.jScrollPanelDatosEstadoAsientoContable.getBorder();

				titledBorderestadoasientocontable.setTitle(titledBorderAsientoContable.getTitle() + " -> Estado Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_asiento_contableAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_estado_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_asiento_contable = "+this.asientocontable.getid_estado_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimiento_moduloAsientoContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimientomodulo=true;

			idTienePermisotipomovimientomodulo=this.tienePermisosUsuarioEnPaginaWebAsientoContable(TipoMovimientoModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimientomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAsientoContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAsientoContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);

				this.tipomovimientomoduloBeanSwingJInternalFrame=new TipoMovimientoModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientomoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientomoduloBeanSwingJInternalFrame.getTipoMovimientoModuloLogic().setConnexion(this.asientocontableLogic.getConnexion());

				if(this.asientocontable.getid_tipo_movimiento_modulo()!=null) {
					this.tipomovimientomoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientomoduloBeanSwingJInternalFrame.setIdActual(this.asientocontable.getid_tipo_movimiento_modulo());
					this.tipomovimientomoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimientoModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientomoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAsientoContable=(TitledBorder)this.jScrollPanelDatosAsientoContable.getBorder();
				TitledBorder titledBordertipomovimientomodulo=(TitledBorder)this.tipomovimientomoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimientoModulo.getBorder();

				titledBordertipomovimientomodulo.setTitle(titledBorderAsientoContable.getTitle() + " -> Tipo Movimiento Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimiento_moduloAsientoContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.getasientocontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.asientocontable==null) {
						this.asientocontable = new AsientoContable();
					}

					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);
				}

				if(this.asientocontable.getid_tipo_movimiento_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento_modulo = "+this.asientocontable.getid_tipo_movimiento_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAsientoContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorBeneficiarioAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorBeneficiario();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorCodigoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorCodigo();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorFechaEmisionAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorFechaEmision();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNumeroMayorAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorNumeroMayor();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNumeroRetencionAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorNumeroRetencion();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorValorAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesBusquedaPorValor();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAnioAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdAnio();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdAsientoContable();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdCliente();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdEjercicio();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdEmpresa();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdFormato();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdMes();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdModulo();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdMoneda();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdPeriodo();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdSucursal();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDescripcionAsientoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdTipoDescripcionAsiento();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDocumentoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdTipoDocumento();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdTipoMovimiento();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoModuloAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdTipoMovimientoModulo();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioAsientoContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAsientoContable(false,false);

			this.getAsientoContablesFK_IdUsuario();

			this.inicializarActualizarBindingAsientoContable(false);

			//if(AsientoContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAsientoContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.asientocontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameAsientoContable() {
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
		

		if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.setVisible(false);	    			
			this.jInternalFrameDetalleFormAsientoContable.dispose();
			this.jInternalFrameDetalleFormAsientoContable=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
			this.jInternalFrameReporteDinamicoAsientoContable.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoAsientoContable.dispose();
			this.jInternalFrameReporteDinamicoAsientoContable=null;
		}
		
		if(this.jInternalFrameImportacionAsientoContable!=null) {
			this.jInternalFrameImportacionAsientoContable.setVisible(false);	    			
			this.jInternalFrameImportacionAsientoContable.dispose();
			this.jInternalFrameImportacionAsientoContable=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessAsientoContable();
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			
			if(sTipo.equals("NuevoAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarAsientoContable")) {
				jButtonDuplicarAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarAsientoContable")) {
				jButtonCopiarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormAsientoContable")) {
				jButtonVerFormAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarAsientoContable")) {
				jButtonDuplicarAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarAsientoContable")) {
				jButtonDuplicarAsientoContableActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarAsientoContable")) {
				jButtonModificarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarAsientoContable")) {
				jButtonModificarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarAsientoContable")) {
				jButtonModificarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarAsientoContable")) {
				jButtonActualizarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarAsientoContable")) {
				jButtonActualizarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarAsientoContable")) {
				jButtonActualizarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarAsientoContable")) {
				jButtonEliminarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarAsientoContable")) {
				jButtonEliminarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarAsientoContable")) {
				jButtonEliminarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarAsientoContable")) {
				jButtonCancelarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarAsientoContable")) {
				jButtonCancelarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarAsientoContable")) {
				jButtonCancelarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarAsientoContable")) {
				jButtonCerrarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarAsientoContable")) {
				jButtonCerrarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarAsientoContable")) {
				jButtonCerrarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarAsientoContable")) {
				jButtonMostrarOcultarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarAsientoContable")) {
				jButtonCancelarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarAsientoContable")) {
				jButtonCopiarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarAsientoContable")) {
				jButtonVerFormAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarAsientoContable")) {
				jButtonCopiarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormAsientoContable")) {
				jButtonVerFormAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionAsientoContable")) {
				jButtonRecargarInformacionAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarAsientoContable")) {
				jButtonRecargarInformacionAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionAsientoContable")) {
				jButtonRecargarInformacionAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresAsientoContable")) {
				jButtonAnterioresAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarAsientoContable")) {
				jButtonAnterioresAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreAsientoContable")) {
				jButtonAnterioresAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesAsientoContable")) {
				jButtonSiguientesAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarAsientoContable")) {
				jButtonSiguientesAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesAsientoContable")) {
				jButtonSiguientesAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByAsientoContable") || sTipo.equals("MenuItemDetalleAbrirOrderByAsientoContable")) {
				jButtonAbrirOrderByAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarAsientoContable") || sTipo.equals("MenuItemDetalleMostrarOcultarAsientoContable")) {
				jButtonMostrarOcultarAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosAsientoContable")) {
				jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarAsientoContable")) {
				jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosAsientoContable")) {
				jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoAsientoContable")) {
				jButtonCerrarReporteDinamicoAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoAsientoContable")) {
				jButtonGenerarReporteDinamicoAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoAsientoContable")) {
				
				jButtonGenerarExcelReporteDinamicoAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionAsientoContable")) {
				jButtonCerrarImportacionAsientoContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionAsientoContable")) {
				
				jButtonGenerarImportacionAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionAsientoContable")) {
				
				jButtonAbrirImportacionAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesAsientoContable")) {
				jComboBoxTiposAccionesAsientoContableActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesAsientoContable")) {
				jComboBoxTiposRelacionesAsientoContableActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioAsientoContable")) {
				jComboBoxTiposAccionesAsientoContableActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarAsientoContable")) {
				
				jComboBoxTiposSeleccionarAsientoContableActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralAsientoContable")) {
				jTextFieldValorCampoGeneralAsientoContableActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByAsientoContable")) {
				jButtonAbrirOrderByAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarAsientoContable")) {
				jButtonAbrirOrderByAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByAsientoContable")) {
				jButtonCerrarOrderByAsientoContableActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idAsientoContableBusqueda")) {
				this.jButtonidAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaAsientoContableUpdate")) {
				this.jButtonid_empresaAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaAsientoContableBusqueda")) {
				this.jButtonid_empresaAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalAsientoContableUpdate")) {
				this.jButtonid_sucursalAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalAsientoContableBusqueda")) {
				this.jButtonid_sucursalAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioAsientoContableUpdate")) {
				this.jButtonid_ejercicioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioAsientoContableBusqueda")) {
				this.jButtonid_ejercicioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoAsientoContableUpdate")) {
				this.jButtonid_periodoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoAsientoContableBusqueda")) {
				this.jButtonid_periodoAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioAsientoContableUpdate")) {
				this.jButtonid_anioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioAsientoContableBusqueda")) {
				this.jButtonid_anioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesAsientoContableUpdate")) {
				this.jButtonid_mesAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesAsientoContableBusqueda")) {
				this.jButtonid_mesAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloAsientoContableUpdate")) {
				this.jButtonid_moduloAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloAsientoContableBusqueda")) {
				this.jButtonid_moduloAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioAsientoContableUpdate")) {
				this.jButtonid_usuarioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioAsientoContableBusqueda")) {
				this.jButtonid_usuarioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoAsientoContableUpdate")) {
				this.jButtonid_tipo_documentoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoAsientoContableBusqueda")) {
				this.jButtonid_tipo_documentoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoAsientoContableBusqueda")) {
				this.jButtoncodigoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaAsientoContableBusqueda")) {
				this.jButtonfechaAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoAsientoContableUpdate")) {
				this.jButtonid_tipo_movimientoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoAsientoContableBusqueda")) {
				this.jButtonid_tipo_movimientoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorAsientoContableBusqueda")) {
				this.jButtonnumero_mayorAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaAsientoContableUpdate")) {
				this.jButtonid_monedaAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaAsientoContableBusqueda")) {
				this.jButtonid_monedaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencionAsientoContableBusqueda")) {
				this.jButtones_retencionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionAsientoContableBusqueda")) {
				this.jButtonnumero_retencionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valorAsientoContableBusqueda")) {
				this.jButtonvalorAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencion_ivaAsientoContableBusqueda")) {
				this.jButtones_retencion_ivaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencion_ivaAsientoContableBusqueda")) {
				this.jButtonnumero_retencion_ivaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionAsientoContableBusqueda")) {
				this.jButtoncotizacionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteAsientoContable")) {
				this.jButtonid_clienteAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteAsientoContableUpdate")) {
				this.jButtonid_clienteAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteAsientoContableBusqueda")) {
				this.jButtonid_clienteAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContableUpdate")) {
				this.jButtonid_tipo_descripcion_asientoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContableBusqueda")) {
				this.jButtonid_tipo_descripcion_asientoAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoAsientoContableUpdate")) {
				this.jButtonid_formatoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoAsientoContableBusqueda")) {
				this.jButtonid_formatoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("beneficiarioAsientoContableBusqueda")) {
				this.jButtonbeneficiarioAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionAsientoContableBusqueda")) {
				this.jButtondescripcionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionAsientoContableBusqueda")) {
				this.jButtonfecha_emisionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finalizacionAsientoContableBusqueda")) {
				this.jButtonfecha_finalizacionAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_asiento_contableAsientoContableUpdate")) {
				this.jButtonid_estado_asiento_contableAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_asiento_contableAsientoContableBusqueda")) {
				this.jButtonid_estado_asiento_contableAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloAsientoContableUpdate")) {
				this.jButtonid_tipo_movimiento_moduloAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloAsientoContableBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloAsientoContableBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteAsientoContable")) {
				this.jButtonid_clienteAsientoContableActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorBeneficiarioAsientoContable")) {
				this.jButtonBusquedaPorBeneficiarioAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorCodigoAsientoContable")) {
				this.jButtonBusquedaPorCodigoAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorFechaEmisionAsientoContable")) {
				this.jButtonBusquedaPorFechaEmisionAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNumeroMayorAsientoContable")) {
				this.jButtonBusquedaPorNumeroMayorAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNumeroRetencionAsientoContable")) {
				this.jButtonBusquedaPorNumeroRetencionAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorValorAsientoContable")) {
				this.jButtonBusquedaPorValorAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteAsientoContable")) {
				this.jButtonFK_IdClienteAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDescripcionAsientoAsientoContable")) {
				this.jButtonFK_IdTipoDescripcionAsientoAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDocumentoAsientoContable")) {
				this.jButtonFK_IdTipoDocumentoAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoMovimientoModuloAsientoContable")) {
				this.jButtonFK_IdTipoMovimientoModuloAsientoContableActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("RelacionesFinformas_de_pagoAsientoContable")) {
				this.jButtonRelacionesFinformas_de_pagoAsientoContableActionPerformed(evt);
			}
			else if(sTipo.equals("RelacionesFinNormalAsientoContable")) {
				this.jButtonRelacionesFinNormalAsientoContableActionPerformed(evt);
			};
			
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessAsientoContable();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				


				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			AsientoContable asientocontableLocal=null;
			
			if(!this.getEsControlTabla()) {
				asientocontableLocal=this.asientocontable;
			} else {
				asientocontableLocal=this.asientocontableAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
							
				
				


				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
								
						
				


			if(sTipo.equals("fechaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"DATE",classes,true,esControlTabla);
			}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
								
				
				


			if(sTipo.equals("fechaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"DATE",classes,true,esControlTabla);
			}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
							
				
				


				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
								
				
				


			if(sTipo.equals("fechaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("es_retencionAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("es_retencion_ivaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,true,esControlTabla);
			}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosAsientoContable")) {
					jCheckBoxSeleccionarTodosAsientoContableItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosAsientoContable")) {
					jCheckBoxSeleccionadosAsientoContableItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarAsientoContable")) {
					
				}
				
				


			if(sTipo.equals("es_retencionAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,"CHECKBOX",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("es_retencion_ivaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,"CHECKBOX",classes,true,esControlTabla);
			}
				
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
												
				
				


			if(sTipo.equals("es_retencionAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,"CHECKBOX",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("es_retencion_ivaAsientoContable")) {
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,"CHECKBOX",classes,true,esControlTabla);
			}
				
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_monedaAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyMoneda(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("id_clienteAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteAsientoContable")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
				//recargarFormAsientoContableCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
			}
			 else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable")) {
				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
				//recargarFormAsientoContableTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAsientoContableActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_monedaAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyMoneda(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("id_clienteAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteAsientoContable")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
				//recargarFormAsientoContableCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
			}
			 else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable")) {
				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
				//recargarFormAsientoContableTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
			}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.asientocontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.asientocontable);
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_monedaAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyMoneda(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,true,esControlTabla);
			}
			 else if(sTipo.equals("id_clienteAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteAsientoContable")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
				//recargarFormAsientoContableCliente(jComboBoxid_clienteFK_IdClienteAsientoContable,"FK_IdCliente");
			}
			 else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContable")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable;
				}

				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					//classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxGenerico,"Formulario");

				this.recargarFormAsientoContable(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable")) {
				this.procesarActionsCombosForeignKeyTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
				//recargarFormAsientoContableTipoDescripcionAsiento(jComboBoxid_tipo_descripcion_asientoFK_IdTipoDescripcionAsientoAsientoContable,"FK_IdTipoDescripcionAsiento");
			}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AsientoContable.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AsientoContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAsientoContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.asientocontableAnterior =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarAsientoContable")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosAsientoContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosAsientoContable.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.asientocontable =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.asientocontable =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.asientocontable);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarAsientoContable")) {
				
				}
				
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarAsientoContable")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosAsientoContable.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarAsientoContable")) {
			
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	
		public void jButtonRelacionesFinformas_de_pagoAsientoContableActionPerformed(ActionEvent evt) {
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setVisible(false);

			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.setVisible(true);
			}
		}

		public void jButtonRelacionesFinNormalAsientoContableActionPerformed(ActionEvent evt) {
			if(this.jInternalFrameDetalleFormAsientoContable!=null) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.setVisible(false);
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setVisible(false);

			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.setVisible(true);
			}
		};
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessAsientoContable();
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			if(sTipo.equals("NuevoAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarAsientoContable")) {
				jButtonDuplicarAsientoContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarAsientoContable")) {
				jButtonCopiarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormAsientoContable")) {
				jButtonVerFormAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesAsientoContable")) {
				jButtonNuevoAsientoContableActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarAsientoContable")) {
				jButtonModificarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarAsientoContable")) {
				jButtonActualizarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarAsientoContable")) {
				jButtonEliminarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarAsientoContable")) {
				jButtonCancelarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarAsientoContable")) {
				jButtonCerrarAsientoContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosAsientoContable")) {
				jButtonGuardarCambiosAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosAsientoContable")) {
				jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByAsientoContable")) {
				jButtonAbrirOrderByAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionAsientoContable")) {
				jButtonRecargarInformacionAsientoContableActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresAsientoContable")) {
				jButtonAnterioresAsientoContableActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesAsientoContable")) {
				jButtonSiguientesAsientoContableActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idAsientoContableBusqueda")) {
				this.jButtonidAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaAsientoContableUpdate")) {
				this.jButtonid_empresaAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaAsientoContableBusqueda")) {
				this.jButtonid_empresaAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalAsientoContableUpdate")) {
				this.jButtonid_sucursalAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalAsientoContableBusqueda")) {
				this.jButtonid_sucursalAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioAsientoContableUpdate")) {
				this.jButtonid_ejercicioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioAsientoContableBusqueda")) {
				this.jButtonid_ejercicioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoAsientoContableUpdate")) {
				this.jButtonid_periodoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoAsientoContableBusqueda")) {
				this.jButtonid_periodoAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioAsientoContableUpdate")) {
				this.jButtonid_anioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioAsientoContableBusqueda")) {
				this.jButtonid_anioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesAsientoContableUpdate")) {
				this.jButtonid_mesAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesAsientoContableBusqueda")) {
				this.jButtonid_mesAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloAsientoContableUpdate")) {
				this.jButtonid_moduloAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloAsientoContableBusqueda")) {
				this.jButtonid_moduloAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioAsientoContableUpdate")) {
				this.jButtonid_usuarioAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioAsientoContableBusqueda")) {
				this.jButtonid_usuarioAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoAsientoContableUpdate")) {
				this.jButtonid_tipo_documentoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoAsientoContableBusqueda")) {
				this.jButtonid_tipo_documentoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoAsientoContableBusqueda")) {
				this.jButtoncodigoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaAsientoContableBusqueda")) {
				this.jButtonfechaAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoAsientoContableUpdate")) {
				this.jButtonid_tipo_movimientoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoAsientoContableBusqueda")) {
				this.jButtonid_tipo_movimientoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorAsientoContableBusqueda")) {
				this.jButtonnumero_mayorAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaAsientoContableUpdate")) {
				this.jButtonid_monedaAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaAsientoContableBusqueda")) {
				this.jButtonid_monedaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencionAsientoContableBusqueda")) {
				this.jButtones_retencionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionAsientoContableBusqueda")) {
				this.jButtonnumero_retencionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valorAsientoContableBusqueda")) {
				this.jButtonvalorAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencion_ivaAsientoContableBusqueda")) {
				this.jButtones_retencion_ivaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencion_ivaAsientoContableBusqueda")) {
				this.jButtonnumero_retencion_ivaAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cotizacionAsientoContableBusqueda")) {
				this.jButtoncotizacionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteAsientoContable")) {
				this.jButtonid_clienteAsientoContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteAsientoContableUpdate")) {
				this.jButtonid_clienteAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteAsientoContableBusqueda")) {
				this.jButtonid_clienteAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContableUpdate")) {
				this.jButtonid_tipo_descripcion_asientoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_descripcion_asientoAsientoContableBusqueda")) {
				this.jButtonid_tipo_descripcion_asientoAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoAsientoContableUpdate")) {
				this.jButtonid_formatoAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoAsientoContableBusqueda")) {
				this.jButtonid_formatoAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("beneficiarioAsientoContableBusqueda")) {
				this.jButtonbeneficiarioAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionAsientoContableBusqueda")) {
				this.jButtondescripcionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionAsientoContableBusqueda")) {
				this.jButtonfecha_emisionAsientoContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finalizacionAsientoContableBusqueda")) {
				this.jButtonfecha_finalizacionAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_asiento_contableAsientoContableUpdate")) {
				this.jButtonid_estado_asiento_contableAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_asiento_contableAsientoContableBusqueda")) {
				this.jButtonid_estado_asiento_contableAsientoContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloAsientoContableUpdate")) {
				this.jButtonid_tipo_movimiento_moduloAsientoContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloAsientoContableBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloAsientoContableBusquedaActionPerformed(evt);
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessAsientoContable();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameAsientoContable")) {
				closingInternalFrameAsientoContable();
				
			} else if(sTipo.equals("jButtonCancelarAsientoContable")) {
				JInternalFrameBase jInternalFrameDetalleFormAsientoContable = (JInternalFrameBase)evt.getSource();
	            	
	            AsientoContableBeanSwingJInternalFrame jInternalFrameParent=(AsientoContableBeanSwingJInternalFrame)jInternalFrameDetalleFormAsientoContable.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarAsientoContableActionPerformed(null);
			}
			
			AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.asientocontable,new Object(),this.asientocontableParameterGeneral,this.asientocontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormAsientoContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormAsientoContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormAsientoContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.asientocontable)) {
			if(!esControlTabla) {
				if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);			
				}
				
				if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualAsientoContable(this.asientocontable,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.asientocontableReturnGeneral=asientocontableLogic.procesarEventosAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.asientocontableLogic.getAsientoContables(),this.asientocontable,this.asientocontableParameterGeneral,this.isEsNuevoAsientoContable,classes);//this.asientocontableLogic.getAsientoContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanAsientoContable(this.asientocontableReturnGeneral,this.asientocontableBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanAsientoContable(classes,this.asientocontableReturnGeneral,this.asientocontableBean,false);
					}
						
					if(this.asientocontableReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyAsientoContable(this.asientocontableReturnGeneral.getAsientoContable());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioAsientoContable(this.asientocontableReturnGeneral.getAsientoContable());	
					}
						
					if(this.asientocontableReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioAsientoContable(this.asientocontableReturnGeneral.getAsientoContable(),classes);//this.asientocontableBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioAsientoContable(this.asientocontable,classes);//this.asientocontableBean);									
				}
			
				if(AsientoContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualAsientoContable(this.asientocontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysAsientoContable(this.asientocontable);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.asientocontableAnterior!=null) {
						this.asientocontable=this.asientocontableAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.asientocontableReturnGeneral=asientocontableLogic.procesarEventosAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.asientocontableLogic.getAsientoContables(),this.asientocontable,this.asientocontableParameterGeneral,this.isEsNuevoAsientoContable,classes);//this.asientocontableLogic.getAsientoContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.asientocontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.asientocontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.asientocontableReturnGeneral.getAsientoContable(),asientocontableLogic.getAsientoContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.asientocontableReturnGeneral.getAsientoContable(),this.asientocontables);
				}
				//ARCHITECTURE
				
				//this.jTableDatosAsientoContable.repaint();
				
				//((AbstractTableModel) this.jTableDatosAsientoContable.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosAsientoContable();
			}
		}
	}
	
	public void actualizarVisualTableDatosAsientoContable() throws Exception {
		
		AsientoContableModel asientocontableModel=(AsientoContableModel)this.jTableDatosAsientoContable.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			asientocontableModel.asientocontables=this.asientocontableLogic.getAsientoContables();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			asientocontableModel.asientocontables=this.asientocontables;
		}
		
		
		((AsientoContableModel) this.jTableDatosAsientoContable.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaAsientoContable() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getasientocontableAnterior(),this.asientocontableLogic.getAsientoContables());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getasientocontableAnterior(),this.asientocontables);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosAsientoContable();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioAsientoContable(AsientoContable asientocontable,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(Sri.class)) {
					this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.setSris(asientocontable.getSris());
					this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.inicializarActualizarBindingTablaSri(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ImportarExportar.class)) {
					this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.setImportarExportars(asientocontable.getImportarExportars());
					this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.inicializarActualizarBindingTablaImportarExportar(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMoviClienProve.class)) {
					this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.setDetalleMoviClienProves(asientocontable.getDetalleMoviClienProves());
					this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleMoviClienProve(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Prestamo.class)) {
					this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.setPrestamos(asientocontable.getPrestamos());
					this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPrestamo(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleAsientoContable.class)) {
					this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.setDetalleAsientoContables(asientocontable.getDetalleAsientoContables());
					this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleAsientoContable(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Retencion.class)) {
					this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.setRetencions(asientocontable.getRetencions());
					this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaRetencion(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.asientocontable,new Object(),generalEntityParameterGeneral,this.asientocontableReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.asientocontableSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=AsientoContableConstantesFunciones.getClassesRelationshipsOfAsientoContable(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=AsientoContableConstantesFunciones.getClassesRelationshipsFromStringsOfAsientoContable(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormAsientoContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				AsientoContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.asientocontable,new Object(),generalEntityParameterGeneral,this.asientocontableReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioAsientoContable(AsientoContableBean asientocontableBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(Sri.class)) {
					this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.setSris(asientocontable.getSris());
					this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.inicializarActualizarBindingTablaSri(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ImportarExportar.class)) {
					this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.setImportarExportars(asientocontable.getImportarExportars());
					this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.inicializarActualizarBindingTablaImportarExportar(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMoviClienProve.class)) {
					this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.setDetalleMoviClienProves(asientocontable.getDetalleMoviClienProves());
					this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleMoviClienProve(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Prestamo.class)) {
					this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.setPrestamos(asientocontable.getPrestamos());
					this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPrestamo(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleAsientoContable.class)) {
					this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.setDetalleAsientoContables(asientocontable.getDetalleAsientoContables());
					this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleAsientoContable(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Retencion.class)) {
					this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.setRetencions(asientocontable.getRetencions());
					this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaRetencion(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanAsientoContable(ArrayList<Classe> classes,AsientoContableReturnGeneral asientocontableReturnGeneral,AsientoContableBean asientocontableBean,Boolean conDefault) throws Exception {
		
			this.asientocontableBean.setSris(asientocontableReturnGeneral.getAsientoContable().getSris());
			this.asientocontableBean.setImportarExportars(asientocontableReturnGeneral.getAsientoContable().getImportarExportars());
			this.asientocontableBean.setDetalleMoviClienProves(asientocontableReturnGeneral.getAsientoContable().getDetalleMoviClienProves());
			this.asientocontableBean.setPrestamos(asientocontableReturnGeneral.getAsientoContable().getPrestamos());
			this.asientocontableBean.setDetalleAsientoContables(asientocontableReturnGeneral.getAsientoContable().getDetalleAsientoContables());
			this.asientocontableBean.setRetencions(asientocontableReturnGeneral.getAsientoContable().getRetencions());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualAsientoContable(AsientoContable asientocontable,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(Sri.class)) {
					asientocontable.setSris(this.jInternalFrameDetalleFormAsientoContable.sriBeanSwingJInternalFrame.sriLogic.getSris());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(ImportarExportar.class)) {
					asientocontable.setImportarExportars(this.jInternalFrameDetalleFormAsientoContable.importarexportarBeanSwingJInternalFrame.importarexportarLogic.getImportarExportars());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleMoviClienProve.class)) {
					asientocontable.setDetalleMoviClienProves(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveBeanSwingJInternalFrame.detallemoviclienproveLogic.getDetalleMoviClienProves());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Prestamo.class)) {
					asientocontable.setPrestamos(this.jInternalFrameDetalleFormAsientoContable.prestamoBeanSwingJInternalFrame.prestamoLogic.getPrestamos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleAsientoContable.class)) {
					asientocontable.setDetalleAsientoContables(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableBeanSwingJInternalFrame.detalleasientocontableLogic.getDetalleAsientoContables());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(Retencion.class)) {
					asientocontable.setRetencions(this.jInternalFrameDetalleFormAsientoContable.retencionBeanSwingJInternalFrame.retencionLogic.getRetencions());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.asientocontable)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormAsientoContable = new AsientoContableDetalleFormJInternalFrame(jDesktopPane,this.asientocontableSessionBean.getConGuardarRelaciones(),this.asientocontableSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.setVisible(false);
		this.jInternalFrameDetalleFormAsientoContable.setSelected(false);						
		
		this.jInternalFrameDetalleFormAsientoContable.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormAsientoContable.asientocontableLogic=this.asientocontableLogic;
		
		this.cargarCombosFrameForeignKeyAsientoContable("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleAsientoContable();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleAsientoContable();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyAsientoContable("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyAsientoContable();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormAsientoContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarAsientoContable"));
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonModificarAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarAsientoContable"));

		
		this.jInternalFrameDetalleFormAsientoContable.jButtonModificarToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarAsientoContable"));
					
		this.jInternalFrameDetalleFormAsientoContable.jMenuItemModificarAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarAsientoContable"));		
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.addActionListener (new ButtonActionListener(this,"ActualizarAsientoContable"));
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarAsientoContable"));
						
		this.jInternalFrameDetalleFormAsientoContable.jMenuItemActualizarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarAsientoContable"));		
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarAsientoContable"));
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarAsientoContable"));
								
		this.jInternalFrameDetalleFormAsientoContable.jMenuItemEliminarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarAsientoContable"));		
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarAsientoContable"));
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarAsientoContable"));
					
		this.jInternalFrameDetalleFormAsientoContable.jMenuItemCancelarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarAsientoContable"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jMenuItemDetalleCerrarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarAsientoContable"));		
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAsientoContable"));
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAsientoContable"));
		
		
		
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioAsientoContable"));
		
		
		//CAMPO EVENTO
		FuncionesSwing.addDateListener(this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable, this, "fechaAsientoContable");


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.addItemListener(new CheckBoxItemListener(this,"es_retencionAsientoContable"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.addItemListener(new CheckBoxItemListener(this,"es_retencion_ivaAsientoContable"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonidAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncodigoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfechaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_mayorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonvalorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"valorAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncotizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionAsientoContableBusqueda"));
		//jButtonid_clienteAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContable.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonbeneficiarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtondescripcionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_emisionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_finalizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalizacionAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableBusqueda"));
		
		
		
				this.jInternalFrameDetalleFormAsientoContable.jButtonRelacionesFinformas_de_pagoAsientoContable.addActionListener (new ButtonActionListener(this,"RelacionesFinformas_de_pagoAsientoContable"));
				this.jInternalFrameDetalleFormAsientoContable.jButtonRelacionesFinNormalAsientoContable.addActionListener (new ButtonActionListener(this,"RelacionesFinNormalAsientoContable"));;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesAsientoContable"));
		
		
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFinformas_de_pagoAsientoContable"));;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameAsientoContable"));
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarAsientoContable"));
		}
		
		this.jTableDatosAsientoContable.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarAsientoContable"));
		
		this.jTableDatosAsientoContable.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarAsientoContable"));
		
		this.jButtonNuevoAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoAsientoContable"));
		
		this.jButtonDuplicarAsientoContable.addActionListener(new ButtonActionListener(this,"DuplicarAsientoContable"));
		
		this.jButtonCopiarAsientoContable.addActionListener(new ButtonActionListener(this,"CopiarAsientoContable"));
		
		this.jButtonVerFormAsientoContable.addActionListener(new ButtonActionListener(this,"VerFormAsientoContable"));
		
		
		this.jButtonNuevoToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoToolBarAsientoContable"));
			
		this.jButtonDuplicarToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"DuplicarToolBarAsientoContable"));
			
		this.jMenuItemNuevoAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoAsientoContable"));
			
		this.jMenuItemDuplicarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarAsientoContable"));		
		
		
		this.jButtonNuevoRelacionesAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoRelacionesAsientoContable"));
		
		
		this.jButtonNuevoRelacionesToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarAsientoContable"));
			
		this.jMenuItemNuevoRelacionesAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesAsientoContable"));		
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonModificarAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarAsientoContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonModificarToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarAsientoContable"));
			
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemModificarAsientoContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarAsientoContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarAsientoContable.addActionListener (new ButtonActionListener(this,"ActualizarAsientoContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonActualizarToolBarAsientoContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarAsientoContable"));
				
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemActualizarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarAsientoContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarAsientoContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonEliminarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarAsientoContable"));
						
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemEliminarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarAsientoContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarAsientoContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonCancelarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarAsientoContable"));
			
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemCancelarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarAsientoContable"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarAsientoContable"));		
		
		
		this.jButtonCerrarAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarAsientoContable"));
		
		
		this.jButtonCerrarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarToolBarAsientoContable"));
			
		this.jMenuItemCerrarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCerrarAsientoContable"));
			
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jMenuItemDetalleCerrarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarAsientoContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosAsientoContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAsientoContable"));
		}
		
		this.jButtonCopiarToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"CopiarToolBarAsientoContable"));
			
		this.jButtonVerFormToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"VerFormToolBarAsientoContable"));
		
		this.jMenuItemGuardarCambiosAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosAsientoContable"));
			
		this.jMenuItemCopiarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemCopiarAsientoContable"));		
		
		this.jMenuItemVerFormAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemVerFormAsientoContable"));		
		
		
		this.jButtonGuardarCambiosTablaAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaAsientoContable"));
		
		
		this.jButtonGuardarCambiosTablaToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarAsientoContable"));
			
		this.jMenuItemGuardarCambiosTablaAsientoContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaAsientoContable"));		
		
		
		
		this.jButtonRecargarInformacionAsientoContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionAsientoContable"));
					
		this.jButtonRecargarInformacionToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarAsientoContable"));
		
		this.jMenuItemRecargarInformacionAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionAsientoContable"));		
		
		
		
		this.jButtonAnterioresAsientoContable.addActionListener (new ButtonActionListener(this,"AnterioresAsientoContable"));
		
		
		this.jButtonAnterioresToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"AnterioresToolBarAsientoContable"));
		
		this.jMenuItemAnterioresAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresAsientoContable"));		
		
		
		this.jButtonSiguientesAsientoContable.addActionListener (new ButtonActionListener(this,"SiguientesAsientoContable"));
		
		
		this.jButtonSiguientesToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"SiguientesToolBarAsientoContable"));
			
		this.jMenuItemSiguientesAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesAsientoContable"));
			
		this.jMenuItemAbrirOrderByAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByAsientoContable"));
			
		this.jMenuItemMostrarOcultarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarAsientoContable"));
			
		this.jMenuItemDetalleAbrirOrderByAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByAsientoContable"));
			
		this.jMenuItemDetalleMostarOcultarAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarAsientoContable"));		
		
		
		this.jButtonNuevoGuardarCambiosAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosAsientoContable"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarAsientoContable"));
			
		this.jMenuItemNuevoGuardarCambiosAsientoContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosAsientoContable"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosAsientoContable.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosAsientoContable"));

		this.jCheckBoxSeleccionadosAsientoContable.addItemListener(new CheckBoxItemListener(this,"SeleccionadosAsientoContable"));
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioAsientoContable"));
		}
		
		
		this.jComboBoxTiposRelacionesAsientoContable.addActionListener (new ButtonActionListener(this,"TiposRelacionesAsientoContable"));
			
		this.jComboBoxTiposAccionesAsientoContable.addActionListener (new ButtonActionListener(this,"TiposAccionesAsientoContable"));
					
		this.jComboBoxTiposSeleccionarAsientoContable.addActionListener (new ButtonActionListener(this,"TiposSeleccionarAsientoContable"));
			
		this.jTextFieldValorCampoGeneralAsientoContable.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralAsientoContable"));		
		
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		FuncionesSwing.addDateListener(this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable, this, "fechaAsientoContable");


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.addItemListener(new CheckBoxItemListener(this,"es_retencionAsientoContable"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.addItemListener(new CheckBoxItemListener(this,"es_retencion_ivaAsientoContable"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonidAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncodigoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfechaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_mayorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonvalorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"valorAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncotizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionAsientoContableBusqueda"));
		//jButtonid_clienteAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContable.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonbeneficiarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtondescripcionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_emisionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_finalizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalizacionAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorBeneficiarioAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorBeneficiarioAsientoContable"));

			this.jButtonBusquedaPorCodigoAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoAsientoContable"));

			this.jButtonBusquedaPorFechaEmisionAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorFechaEmisionAsientoContable"));

			this.jButtonBusquedaPorNumeroMayorAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroMayorAsientoContable"));

			this.jButtonBusquedaPorNumeroRetencionAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroRetencionAsientoContable"));

			this.jButtonBusquedaPorValorAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorValorAsientoContable"));

			this.jButtonFK_IdClienteAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdClienteAsientoContable"));

			this.jButtonBuscarFK_IdClienteid_clienteAsientoContable.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContable"));

			this.jButtonFK_IdTipoDescripcionAsientoAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoDescripcionAsientoAsientoContable"));

			this.jButtonFK_IdTipoDocumentoAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoAsientoContable"));

			this.jButtonFK_IdTipoMovimientoModuloAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloAsientoContable"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoAsientoContable!=null) {
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAsientoContable"));
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAsientoContable"));
				this.jInternalFrameReporteDinamicoAsientoContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAsientoContable"));
			}
			
			//this.jButtonCerrarReporteDinamicoAsientoContable.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAsientoContable"));				
			//this.jButtonGenerarReporteDinamicoAsientoContable.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAsientoContable"));
			//this.jButtonGenerarExcelReporteDinamicoAsientoContable.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAsientoContable"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionAsientoContable!=null) {
				this.jInternalFrameImportacionAsientoContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionAsientoContable"));
				this.jInternalFrameImportacionAsientoContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionAsientoContable"));
				this.jInternalFrameImportacionAsientoContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionAsientoContable"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByAsientoContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByAsientoContable"));
			
			this.jButtonAbrirOrderByToolBarAsientoContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarAsientoContable"));			
			
			if(this.jInternalFrameOrderByAsientoContable!=null) {
				this.jInternalFrameOrderByAsientoContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByAsientoContable"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			
				this.jInternalFrameDetalleFormAsientoContable.jButtonRelacionesFinformas_de_pagoAsientoContable.addActionListener (new ButtonActionListener(this,"RelacionesFinformas_de_pagoAsientoContable"));
				this.jInternalFrameDetalleFormAsientoContable.jButtonRelacionesFinNormalAsientoContable.addActionListener (new ButtonActionListener(this,"RelacionesFinNormalAsientoContable"));;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormAsientoContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesAsientoContable"));
		
		
			this.jInternalFrameDetalleFormAsientoContable.jTabbedPaneRelacionesFinformas_de_pagoAsientoContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFinformas_de_pagoAsientoContable"));;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameAsientoContable();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormAsientoContable.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormAsientoContable = (JInternalFrameBase)event.getSource();
	            	
	            AsientoContableBeanSwingJInternalFrame jInternalFrameParent=(AsientoContableBeanSwingJInternalFrame)jInternalFrameDetalleFormAsientoContable.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarAsientoContableActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosAsientoContable.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosAsientoContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosAsientoContable.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosAsientoContable.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoAsientoContable";
		inputMap = this.jButtonNuevoAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoAsientoContableActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAsientoContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesAsientoContable";
		inputMap = this.jButtonNuevoRelacionesAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoAsientoContableActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarAsientoContable";
		inputMap = this.jButtonModificarAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarAsientoContable";
		inputMap = this.jButtonActualizarAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarAsientoContable";
		inputMap = this.jButtonEliminarAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarAsientoContable";
		inputMap = this.jButtonCancelarAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarAsientoContable";
		inputMap = this.jButtonCerrarAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosAsientoContable";
		inputMap = this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormAsientoContable.jButtonGuardarCambiosAsientoContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosAsientoContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosAsientoContable.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosAsientoContableItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralAsientoContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralAsientoContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonidAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"idAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_empresaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_sucursalAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_ejercicioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_periodoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_anioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_anioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_mesAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_mesAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_usuarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_documentoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncodigoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"codigoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfechaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fechaAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_mayorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_monedaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonvalorAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"valorAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtones_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonnumero_retencion_ivaAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencion_ivaAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtoncotizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"cotizacionAsientoContableBusqueda"));
		//jButtonid_clienteAsientoContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAsientoContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContable.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_descripcion_asientoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_descripcion_asientoAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_formatoAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonbeneficiarioAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"beneficiarioAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtondescripcionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_emisionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAsientoContableBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonfecha_finalizacionAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalizacionAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_estado_asiento_contableAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_asiento_contableAsientoContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAsientoContable.jButtonid_tipo_movimiento_moduloAsientoContableBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloAsientoContableBusqueda"));
		
		
		this.jButtonBusquedaPorBeneficiarioAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorBeneficiarioAsientoContable"));

		this.jButtonBusquedaPorCodigoAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoAsientoContable"));

		this.jButtonBusquedaPorFechaEmisionAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorFechaEmisionAsientoContable"));

		this.jButtonBusquedaPorNumeroMayorAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroMayorAsientoContable"));

		this.jButtonBusquedaPorNumeroRetencionAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroRetencionAsientoContable"));

		this.jButtonBusquedaPorValorAsientoContable.addActionListener(new ButtonActionListener(this,"BusquedaPorValorAsientoContable"));

		this.jButtonFK_IdClienteAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdClienteAsientoContable"));

		this.jButtonBuscarFK_IdClienteid_clienteAsientoContable.addActionListener(new ButtonActionListener(this,"id_clienteAsientoContable"));

		this.jButtonFK_IdTipoDescripcionAsientoAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoDescripcionAsientoAsientoContable"));

		this.jButtonFK_IdTipoDocumentoAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoAsientoContable"));

		this.jButtonFK_IdTipoMovimientoModuloAsientoContable.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloAsientoContable"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionAsientoContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionAsientoContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarAsientoContableActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarAsientoContable.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosAsientoContable(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
					asientocontableAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AsientoContable asientocontableAux:asientocontables) {
					asientocontableAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosAsientoContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingAsientoContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
						asientocontableAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AsientoContable asientocontableAux:asientocontables) {
						asientocontableAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
					
						if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCION)) {
							existe=true;
							asientocontableAux.setes_retencion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA)) {
							existe=true;
							asientocontableAux.setes_retencion_iva(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AsientoContable asientocontableAux:asientocontables) {
						
						if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCION)) {
							existe=true;
							asientocontableAux.setes_retencion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA)) {
							existe=true;
							asientocontableAux.setes_retencion_iva(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaAsientoContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosAsientoContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosAsientoContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosAsientoContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingAsientoContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosAsientoContable.getSelectedRows();
			
			AsientoContable asientocontableLocal=new AsientoContable();
			
			//this.seleccionarTodosAsientoContable(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLocal =(AsientoContable) this.asientocontableLogic.getAsientoContables().toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					asientocontableLocal =(AsientoContable) this.asientocontables.toArray()[this.jTableDatosAsientoContable.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				asientocontableLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
						asientocontableAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AsientoContable asientocontableAux:asientocontables) {
						asientocontableAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaAsientoContable(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosAsientoContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosAsientoContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosAsientoContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualAsientoContableItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarAsientoContableParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralAsientoContableActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingAsientoContable(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralAsientoContable.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(AsientoContable asientocontableAux:this.asientocontableLogic.getAsientoContables()) {
				
						if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							asientocontableAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							asientocontableAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							asientocontableAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							asientocontableAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_VALOR)) {
							existe=true;
							asientocontableAux.setvalor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA)) {
							existe=true;
							asientocontableAux.setnumero_retencion_iva(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							asientocontableAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO)) {
							existe=true;
							asientocontableAux.setbeneficiario(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							asientocontableAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							asientocontableAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION)) {
							existe=true;
							asientocontableAux.setfecha_finalizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AsientoContable asientocontableAux:asientocontables) {
					
						if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							asientocontableAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							asientocontableAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							asientocontableAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							asientocontableAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_VALOR)) {
							existe=true;
							asientocontableAux.setvalor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA)) {
							existe=true;
							asientocontableAux.setnumero_retencion_iva(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_COTIZACION)) {
							existe=true;
							asientocontableAux.setcotizacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO)) {
							existe=true;
							asientocontableAux.setbeneficiario(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							asientocontableAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							asientocontableAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION)) {
							existe=true;
							asientocontableAux.setfecha_finalizacion(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaAsientoContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesAsientoContableActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingAsientoContable(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioAsientoContable=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesAsientoContable.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteAsientoContable) {				
					conSplash=true;//false;										
					
					//this.startProcessAsientoContable(conSplash);
				
					this.generarReporteAsientoContablesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoAsientoContablesSeleccionados();
				//this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoAsientoContablesSeleccionados(false);
				//this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoAsientoContablesSeleccionados(true);
				//this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessAsientoContable();
				
				this.exportarAsientoContablesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionAsientoContables();
				//this.importarAsientoContables();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessAsientoContable();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelAsientoContablesSeleccionados();
				//this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessAsientoContable();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoAsientoContable)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyAsientoContable(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
				}	
			} 			
			else if(AsientoContableBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteAsientoContable) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessAsientoContable(conSplash);
					
						//this.actualizarParametrosGeneralAsientoContable();
						
						this.generarReporteProcesoAccionAsientoContablesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(AsientoContableBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Asiento ContableS SELECCIONADOS?", "MANTENIMIENTO DE Asiento Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessAsientoContable();
				
						this.actualizarParametrosGeneralAsientoContable();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.asientocontableReturnGeneral=asientocontableLogic.procesarAccionAsientoContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.asientocontableLogic.getAsientoContables(),this.asientocontableParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarAsientoContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralAsientoContable();
					
					AsientoContableBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarAsientoContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesAsientoContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormAsientoContable.jComboBoxTiposAccionesFormularioAsientoContable.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessAsientoContable(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesAsientoContableActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessAsientoContable();
			
			if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
			AsientoContable asientocontable=new AsientoContable();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingAsientoContable(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesAsientoContable.getSelectedItem();
			
			
			
			
			asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
			//this.sTipoAccion;
			
			if(asientocontablesSeleccionados.size()==1) {
				for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
					asientocontable=asientocontableAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Sri")) {
					jButtonSriActionPerformed(null,rowIndex,true,false,asientocontable);
				}
				else if(this.sTipoRelacion.equals("Importar Exportar")) {
					jButtonImportarExportarActionPerformed(null,rowIndex,true,false,asientocontable);
				}
				else if(this.sTipoRelacion.equals("Detalle Cliente")) {
					jButtonDetalleMoviClienProveActionPerformed(null,rowIndex,true,false,asientocontable);
				}
				else if(this.sTipoRelacion.equals("Prestamo")) {
					jButtonPrestamoActionPerformed(null,rowIndex,true,false,asientocontable);
				}
				else if(this.sTipoRelacion.equals("Detalle Asiento Contable")) {
					jButtonDetalleAsientoContableActionPerformed(null,rowIndex,true,false,asientocontable);
				}
				else if(this.sTipoRelacion.equals("Retencion")) {
					jButtonRetencionActionPerformed(null,rowIndex,true,false,asientocontable);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessAsientoContable();
			
      		//this.finishProcessAsientoContable(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarAsientoContableReturnGeneral() throws Exception {
		if(this.asientocontableReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.asientocontableReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.asientocontableReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.asientocontableReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.asientocontableReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.asientocontableReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingAsientoContable(false);
		}
		
		if(this.asientocontableReturnGeneral.getConRetornoLista() || this.asientocontableReturnGeneral.getConRetornoObjeto()) {
			if(this.asientocontableReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.asientocontableLogic.setAsientoContables(this.asientocontableReturnGeneral.getAsientoContables());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.asientocontableReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.asientocontableLogic.setAsientoContable(this.asientocontableReturnGeneral.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingAsientoContable(false);
		}
	}
	
	public void actualizarParametrosGeneralAsientoContable() throws Exception {
		
		
	}
	
	public ArrayList<AsientoContable> getAsientoContablesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioAsientoContable) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(AsientoContable asientocontableAux:asientocontableLogic.getAsientoContables()) {
					if(asientocontableAux.getIsSelected()) {
						asientocontablesSeleccionados.add(asientocontableAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AsientoContable asientocontableAux:this.asientocontables) {
					if(asientocontableAux.getIsSelected()) {
						asientocontablesSeleccionados.add(asientocontableAux);				
					}
				}
			}
			
			if(asientocontablesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						asientocontablesSeleccionados.addAll(this.asientocontableLogic.getAsientoContables());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						asientocontablesSeleccionados.addAll(this.asientocontables);				
					}
				}
			}
		} else {
			asientocontablesSeleccionados.add(this.asientocontable);
		}
		
		return asientocontablesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteAsientoContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalAsientoContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoAsientoContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoAsientoContablesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoAsientoContablesSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesAsientoContablesSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Asiento Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados);
		
	}	
	
	public void generarReporteNormalAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionAsientoContablesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		
		this.abrirInicializarFrameReporteDinamicoAsientoContable();
		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoAsientoContable();
		
		
		//this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados ,asientocontableImplementable,asientocontableImplementableHome);
	}
	
	public void mostrarImportacionAsientoContables() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionAsientoContable();
		
		this.abrirFrameImportacionAsientoContable();		
		
			
		//this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados ,asientocontableImplementable,asientocontableImplementableHome);
	}
	
	public void importarAsientoContables() throws Exception {		
	
	}
	
	public void exportarAsientoContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelAsientoContablesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoAsientoContablesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlAsientoContablesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Asiento Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarAsientoContable(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarAsientoContable(asientocontableAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//asientocontableAux.setsDetalleGeneralEntityReporte(asientocontableAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarAsientoContable(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_ESRETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_NUMERORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_VALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_COTIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_BENEFICIARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarAsientoContable(AsientoContable asientocontable,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=asientocontable.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.gettipodocumento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.gettipomovimiento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getnumero_mayor();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getes_retencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getnumero_retencion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getvalor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getes_retencion_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getnumero_retencion_iva();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getcotizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.gettipodescripcionasiento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getbeneficiario();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getfecha_finalizacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.getestadoasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=asientocontable.gettipomovimientomodulo_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("AsientoContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelAsientoContable(row);				
				iRow++;
			}				
			
			for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelAsientoContable(asientocontableAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlAsientoContablesSeleccionados() throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();		
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"asientocontable.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("asientocontables");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("asientocontable");
			//elementRoot.appendChild(element);
		
			for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
				element = document.createElement("asientocontable");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlAsientoContable(asientocontableAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Asiento Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelAsientoContable(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_VALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_COTIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelAsientoContable(AsientoContable asientocontable,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.gettipodocumento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.gettipomovimiento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getnumero_mayor());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getes_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getnumero_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getvalor());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getes_retencion_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getnumero_retencion_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getcotizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.gettipodescripcionasiento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getbeneficiario());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getfecha_finalizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.getestadoasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(asientocontable.gettipomovimientomodulo_descripcion());				
	}
	
	public void setFilaDatosExportarXmlAsientoContable(AsientoContable asientocontable,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(AsientoContableConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(asientocontable.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(AsientoContableConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(asientocontable.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(AsientoContableConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(asientocontable.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(AsientoContableConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(asientocontable.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(AsientoContableConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(asientocontable.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(AsientoContableConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(asientocontable.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(AsientoContableConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(asientocontable.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(AsientoContableConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(asientocontable.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementmodulo_descripcion = document.createElement(AsientoContableConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(asientocontable.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementusuario_descripcion = document.createElement(AsientoContableConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(asientocontable.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementtipodocumento_descripcion = document.createElement(AsientoContableConstantesFunciones.IDTIPODOCUMENTO);
		elementtipodocumento_descripcion.appendChild(document.createTextNode(asientocontable.gettipodocumento_descripcion()));
		element.appendChild(elementtipodocumento_descripcion);

		Element elementcodigo = document.createElement(AsientoContableConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(asientocontable.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementfecha = document.createElement(AsientoContableConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(asientocontable.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementtipomovimiento_descripcion = document.createElement(AsientoContableConstantesFunciones.IDTIPOMOVIMIENTO);
		elementtipomovimiento_descripcion.appendChild(document.createTextNode(asientocontable.gettipomovimiento_descripcion()));
		element.appendChild(elementtipomovimiento_descripcion);

		Element elementnumero_mayor = document.createElement(AsientoContableConstantesFunciones.NUMEROMAYOR);
		elementnumero_mayor.appendChild(document.createTextNode(asientocontable.getnumero_mayor().trim()));
		element.appendChild(elementnumero_mayor);

		Element elementmoneda_descripcion = document.createElement(AsientoContableConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(asientocontable.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementes_retencion = document.createElement(AsientoContableConstantesFunciones.ESRETENCION);
		elementes_retencion.appendChild(document.createTextNode(asientocontable.getes_retencion().toString().trim()));
		element.appendChild(elementes_retencion);

		Element elementnumero_retencion = document.createElement(AsientoContableConstantesFunciones.NUMERORETENCION);
		elementnumero_retencion.appendChild(document.createTextNode(asientocontable.getnumero_retencion().trim()));
		element.appendChild(elementnumero_retencion);

		Element elementvalor = document.createElement(AsientoContableConstantesFunciones.VALOR);
		elementvalor.appendChild(document.createTextNode(asientocontable.getvalor().toString().trim()));
		element.appendChild(elementvalor);

		Element elementes_retencion_iva = document.createElement(AsientoContableConstantesFunciones.ESRETENCIONIVA);
		elementes_retencion_iva.appendChild(document.createTextNode(asientocontable.getes_retencion_iva().toString().trim()));
		element.appendChild(elementes_retencion_iva);

		Element elementnumero_retencion_iva = document.createElement(AsientoContableConstantesFunciones.NUMERORETENCIONIVA);
		elementnumero_retencion_iva.appendChild(document.createTextNode(asientocontable.getnumero_retencion_iva().trim()));
		element.appendChild(elementnumero_retencion_iva);

		Element elementcotizacion = document.createElement(AsientoContableConstantesFunciones.COTIZACION);
		elementcotizacion.appendChild(document.createTextNode(asientocontable.getcotizacion().toString().trim()));
		element.appendChild(elementcotizacion);

		Element elementcliente_descripcion = document.createElement(AsientoContableConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(asientocontable.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementtipodescripcionasiento_descripcion = document.createElement(AsientoContableConstantesFunciones.IDTIPODESCRIPCIONASIENTO);
		elementtipodescripcionasiento_descripcion.appendChild(document.createTextNode(asientocontable.gettipodescripcionasiento_descripcion()));
		element.appendChild(elementtipodescripcionasiento_descripcion);

		Element elementformato_descripcion = document.createElement(AsientoContableConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(asientocontable.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementbeneficiario = document.createElement(AsientoContableConstantesFunciones.BENEFICIARIO);
		elementbeneficiario.appendChild(document.createTextNode(asientocontable.getbeneficiario().trim()));
		element.appendChild(elementbeneficiario);

		Element elementdescripcion = document.createElement(AsientoContableConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(asientocontable.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementfecha_emision = document.createElement(AsientoContableConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(asientocontable.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_finalizacion = document.createElement(AsientoContableConstantesFunciones.FECHAFINALIZACION);
		elementfecha_finalizacion.appendChild(document.createTextNode(asientocontable.getfecha_finalizacion().toString().trim()));
		element.appendChild(elementfecha_finalizacion);

		Element elementestadoasientocontable_descripcion = document.createElement(AsientoContableConstantesFunciones.IDESTADOASIENTOCONTABLE);
		elementestadoasientocontable_descripcion.appendChild(document.createTextNode(asientocontable.getestadoasientocontable_descripcion()));
		element.appendChild(elementestadoasientocontable_descripcion);

		Element elementtipomovimientomodulo_descripcion = document.createElement(AsientoContableConstantesFunciones.IDTIPOMOVIMIENTOMODULO);
		elementtipomovimientomodulo_descripcion.appendChild(document.createTextNode(asientocontable.gettipomovimientomodulo_descripcion()));
		element.appendChild(elementtipomovimientomodulo_descripcion);
	}
	
	public void generarReporteGroupGenericoAsientoContablesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<AsientoContable> asientocontablesSeleccionados=new ArrayList<AsientoContable>();
		
		asientocontablesSeleccionados=this.getAsientoContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoAsientoContable(asientocontablesSeleccionados);
		
		this.generarReporteAsientoContables("Todos",asientocontablesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoAsientoContable(ArrayList<AsientoContable> asientocontablesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(AsientoContable asientocontableAux:asientocontablesSeleccionados) {
				asientocontableAux.setsDetalleGeneralEntityReporte(asientocontableAux.toString());
			
				if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDTIPODOCUMENTO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.gettipodocumento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(asientocontableAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.gettipomovimiento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMEROMAYOR)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getnumero_mayor());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCION)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(asientocontableAux.getes_retencion()));
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCION)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getnumero_retencion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_ESRETENCIONIVA)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(asientocontableAux.getes_retencion_iva()));
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_NUMERORETENCIONIVA)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getnumero_retencion_iva());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDTIPODESCRIPCIONASIENTO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.gettipodescripcionasiento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_BENEFICIARIO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getbeneficiario());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(asientocontableAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_FECHAFINALIZACION)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(asientocontableAux.getfecha_finalizacion()));
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDESTADOASIENTOCONTABLE)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.getestadoasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AsientoContableConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO)) {
					existe=true;
					asientocontableAux.setsDescripcionGeneralEntityReporte1(asientocontableAux.gettipomovimientomodulo_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AsientoContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesAsientoContable(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoAsientoContable=true;
				this.isVisibilidadCeldaNuevoRelacionesAsientoContable=true;
				this.isVisibilidadCeldaGuardarCambiosAsientoContable=true;
			}
			
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=true;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=true;
			this.isVisibilidadCeldaEliminarAsientoContable=true;
			this.isVisibilidadCeldaCancelarAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=true;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=true;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=true;
			this.isVisibilidadCeldaModificarAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=true;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
			this.isVisibilidadCeldaModificarAsientoContable=true;
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
			this.isVisibilidadCeldaCancelarAsientoContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				} else {
					this.isVisibilidadCeldaGuardarAsientoContable=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(AsientoContableJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoAsientoContable=true;
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=true;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=true;
		} else {
			this.actualizarEstadoPanelsAsientoContable(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarAsientoContable=false;
			//this.isVisibilidadCeldaVerFormAsientoContable=false;
			this.isVisibilidadCeldaDuplicarAsientoContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!asientocontableSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
		} else {
			this.isVisibilidadCeldaNuevoAsientoContable=false;
			this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(asientocontableSessionBean.getEsGuardarRelacionado()) {
			if(!asientocontableSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;												
			}
			
			this.jButtonCerrarAsientoContable.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesAsientoContable=false;
		}
		
		if(!this.permiteMantenimiento(this.asientocontable)) {
			this.isVisibilidadCeldaActualizarAsientoContable=false;
			this.isVisibilidadCeldaEliminarAsientoContable=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesAsientoContable() {
		this.isVisibilidadCeldaNuevoAsientoContable=false;
		this.isVisibilidadCeldaGuardarCambiosAsientoContable=false;
	}
	
	public void actualizarEstadoPanelsAsientoContable(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionAsientoContable!=null) {
				this.jScrollPanelDatosEdicionAsientoContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAsientoContable!=null) {
				this.jScrollPanelDatosAsientoContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionAsientoContable!=null) {
				this.jPanelPaginacionAsientoContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasAsientoContable!=null) {
					this.jTabbedPaneBusquedasAsientoContable.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.asientocontableSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAsientoContable!=null) {
				this.jTabbedPaneBusquedasAsientoContable.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesAsientoContable!=null) {
				this.jPanelParametrosReportesAsientoContable.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorBeneficiario=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaPorBeneficiario=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadBusquedaPorBeneficiario=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaEjercicioNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadBusquedaPorBeneficiario=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaPeriodoNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadBusquedaPorBeneficiario=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaAnioNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadBusquedaPorBeneficiario=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaMesNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadBusquedaPorBeneficiario=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaModuloNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadBusquedaPorBeneficiario=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaUsuarioNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDocumento(Boolean isParaTipoDocumento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDocumentoNegation=!isParaTipoDocumento;

			this.isVisibilidadBusquedaPorBeneficiario=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDocumento;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimiento(Boolean isParaTipoMovimiento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoNegation=!isParaTipoMovimiento;

			this.isVisibilidadBusquedaPorBeneficiario=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadBusquedaPorBeneficiario=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaMonedaNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadBusquedaPorBeneficiario=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaClienteNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDescripcionAsiento(Boolean isParaTipoDescripcionAsiento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDescripcionAsientoNegation=!isParaTipoDescripcionAsiento;

			this.isVisibilidadBusquedaPorBeneficiario=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaTipoDescripcionAsiento;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoDescripcionAsientoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadBusquedaPorBeneficiario=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaFormatoNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoAsientoContable(Boolean isParaEstadoAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoAsientoContableNegation=!isParaEstadoAsientoContable;

			this.isVisibilidadBusquedaPorBeneficiario=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEstadoAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimientoModulo(Boolean isParaTipoMovimientoModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoModuloNegation=!isParaTipoMovimientoModulo;

			this.isVisibilidadBusquedaPorBeneficiario=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorBeneficiario) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorBeneficiarioAsientoContable);}

			this.isVisibilidadBusquedaPorCodigo=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorCodigoAsientoContable);}

			this.isVisibilidadBusquedaPorFechaEmision=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorFechaEmision) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorFechaEmisionAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroMayor=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorNumeroMayor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroMayorAsientoContable);}

			this.isVisibilidadBusquedaPorNumeroRetencion=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorNumeroRetencion) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorNumeroRetencionAsientoContable);}

			this.isVisibilidadBusquedaPorValor=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadBusquedaPorValor) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelBusquedaPorValorAsientoContable);}

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdClienteAsientoContable);}

			this.isVisibilidadFK_IdTipoDescripcionAsiento=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDescripcionAsiento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDescripcionAsientoAsientoContable);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoDocumentoAsientoContable);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoModulo;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasAsientoContable.remove(jPanelFK_IdTipoMovimientoModuloAsientoContable);}
		}
		
	}
	
	

	public String registrarSesionAsientoContableParaSris() throws Exception {
		Boolean isPaginaPopupSri=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.sriSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.sriSessionBean=new SriSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+SriConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupSri=this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeSri(true);
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeSri(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.sriSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionAsientoContableParaImportarExportars() throws Exception {
		Boolean isPaginaPopupImportarExportar=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean=new ImportarExportarSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ImportarExportarConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupImportarExportar=this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeImportarExportar(true);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeImportarExportar(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.importarexportarSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionAsientoContableParaDetalleMoviClienProves() throws Exception {
		Boolean isPaginaPopupDetalleMoviClienProve=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean=new DetalleMoviClienProveSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleMoviClienProveConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleMoviClienProve=this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleMoviClienProve(true);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleMoviClienProve(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.detallemoviclienproveSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionAsientoContableParaPrestamos() throws Exception {
		Boolean isPaginaPopupPrestamo=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean=new PrestamoSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PrestamoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPrestamo=this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePrestamo(true);
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePrestamo(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.prestamoSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionAsientoContableParaDetalleAsientoContables() throws Exception {
		Boolean isPaginaPopupDetalleAsientoContable=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean=new DetalleAsientoContableSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleAsientoContableConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleAsientoContable=this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleAsientoContable(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.detalleasientocontableSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionAsientoContableParaRetenciones() throws Exception {
		Boolean isPaginaPopupRetencion=false;

		try {

			if(this.asientocontableSessionBean==null) {
				this.asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean==null) {
				this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean=new RetencionSessionBean();
			}

			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+RetencionConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupRetencion=this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeRetencion(true);
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeRetencion(AsientoContableConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);
			this.jInternalFrameDetalleFormAsientoContable.retencionSessionBean.setNoMantenimiento(true);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionAsientoContableParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(asientocontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.asientocontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(AsientoContableConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionAsientoContable(true);
			//clienteSessionBean.setlidAsientoContableActual(this.idAsientoContableActual);

			asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAsientoContable(true);
			asientocontableSessionBean.setlIdAsientoContableActualForeignKey(this.idAsientoContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//AsientoContableSessionBean asientocontableSessionBean=new AsientoContableSessionBean();
		
		if(this.asientocontableSessionBean==null) {
			this.asientocontableSessionBean=new AsientoContableSessionBean();
		}
		
		this.asientocontableSessionBean.setsUltimaBusquedaAsientoContable(this.getsAccionBusqueda());
		this.asientocontableSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.asientocontableSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorBeneficiario")) {
			asientocontableSessionBean.setbeneficiario(this.getbeneficiarioBusquedaPorBeneficiario());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			asientocontableSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorFechaEmision")) {
			asientocontableSessionBean.setfecha_emision(this.getfecha_emisionBusquedaPorFechaEmision());	
			asientocontableSessionBean.setfecha_emisionFinal(this.getfecha_emisionFinalBusquedaPorFechaEmision());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroMayor")) {
			asientocontableSessionBean.setnumero_mayor(this.getnumero_mayorBusquedaPorNumeroMayor());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroRetencion")) {
			asientocontableSessionBean.setnumero_retencion(this.getnumero_retencionBusquedaPorNumeroRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorValor")) {
			asientocontableSessionBean.setvalor(this.getvalorBusquedaPorValor());	
			asientocontableSessionBean.setvalorFinal(this.getvalorFinalBusquedaPorValor());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			asientocontableSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			asientocontableSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			asientocontableSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			asientocontableSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			asientocontableSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			asientocontableSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDescripcionAsiento")) {
			asientocontableSessionBean.setid_tipo_descripcion_asiento(this.getid_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
			asientocontableSessionBean.setid_tipo_documento(this.getid_tipo_documentoFK_IdTipoDocumento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
			asientocontableSessionBean.setid_tipo_movimiento_modulo(this.getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//AsientoContableSessionBean asientocontableSessionBean=new AsientoContableSessionBean();
		
		if(this.asientocontableSessionBean==null) {
			this.asientocontableSessionBean=new AsientoContableSessionBean();
		}
		
		if(this.asientocontableSessionBean.getsUltimaBusquedaAsientoContable()!=null&&!this.asientocontableSessionBean.getsUltimaBusquedaAsientoContable().equals("")) {
			this.setsAccionBusqueda(asientocontableSessionBean.getsUltimaBusquedaAsientoContable());
			this.setiNumeroPaginacion(asientocontableSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(asientocontableSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorBeneficiario")) {
				this.setbeneficiarioBusquedaPorBeneficiario(asientocontableSessionBean.getbeneficiario());
				asientocontableSessionBean.setbeneficiario("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(asientocontableSessionBean.getcodigo());
				asientocontableSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorFechaEmision")) {
				this.setfecha_emisionBusquedaPorFechaEmision(asientocontableSessionBean.getfecha_emision());
				asientocontableSessionBean.setfecha_emision(new Date());
				this.setfecha_emisionFinalBusquedaPorFechaEmision(asientocontableSessionBean.getfecha_emisionFinal());
				asientocontableSessionBean.setfecha_emisionFinal(new Date());
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroMayor")) {
				this.setnumero_mayorBusquedaPorNumeroMayor(asientocontableSessionBean.getnumero_mayor());
				asientocontableSessionBean.setnumero_mayor("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroRetencion")) {
				this.setnumero_retencionBusquedaPorNumeroRetencion(asientocontableSessionBean.getnumero_retencion());
				asientocontableSessionBean.setnumero_retencion("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorValor")) {
				this.setvalorBusquedaPorValor(asientocontableSessionBean.getvalor());
				asientocontableSessionBean.setvalor(0.0);
				this.setvalorFinalBusquedaPorValor(asientocontableSessionBean.getvalorFinal());
				asientocontableSessionBean.setvalorFinal(0.0);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(asientocontableSessionBean.getid_cliente());
				asientocontableSessionBean.setid_cliente(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(asientocontableSessionBean.getid_ejercicio());
				asientocontableSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(asientocontableSessionBean.getid_empresa());
				asientocontableSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(asientocontableSessionBean.getid_modulo());
				asientocontableSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(asientocontableSessionBean.getid_periodo());
				asientocontableSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(asientocontableSessionBean.getid_sucursal());
				asientocontableSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDescripcionAsiento")) {
				this.setid_tipo_descripcion_asientoFK_IdTipoDescripcionAsiento(asientocontableSessionBean.getid_tipo_descripcion_asiento());
				asientocontableSessionBean.setid_tipo_descripcion_asiento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
				this.setid_tipo_documentoFK_IdTipoDocumento(asientocontableSessionBean.getid_tipo_documento());
				asientocontableSessionBean.setid_tipo_documento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
				this.setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(asientocontableSessionBean.getid_tipo_movimiento_modulo());
				asientocontableSessionBean.setid_tipo_movimiento_modulo(-1L);
			}
		}
		
		this.asientocontableSessionBean.setsUltimaBusquedaAsientoContable("");
		this.asientocontableSessionBean.setiNumeroPaginacion(AsientoContableConstantesFunciones.INUMEROPAGINACION);
		this.asientocontableSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaAsientoContable(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioAsientoContable() {
		this.updateBorderResaltarBusquedasFormularioAsientoContable();
		this.updateVisibilidadBusquedasFormularioAsientoContable();
		this.updateHabilitarBusquedasFormularioAsientoContable();
	}
	
	public void updateBorderResaltarBusquedasFormularioAsientoContable() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasAsientoContable.getComponents().length>0) {
	

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorBeneficiarioAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorBeneficiarioAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorBeneficiarioAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorCodigoAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorCodigoAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorCodigoAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorFechaEmisionAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorFechaEmisionAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorFechaEmisionAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroMayorAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroMayorAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroMayorAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroRetencionAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroRetencionAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroRetencionAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarBusquedaPorValorAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorValorAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorValorAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarFK_IdClienteAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdClienteAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdClienteAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDescripcionAsientoAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDescripcionAsientoAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDescripcionAsientoAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDocumentoAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDocumentoAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDocumentoAsientoContable);
			}
		}

		if(this.asientocontableConstantesFunciones.resaltarFK_IdTipoMovimientoModuloAsientoContable!=null) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloAsientoContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoMovimientoModuloAsientoContable);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioAsientoContable() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasAsientoContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorBeneficiarioAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorBeneficiarioAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorBeneficiarioAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorCodigoAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorCodigoAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorCodigoAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorFechaEmisionAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorFechaEmisionAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorFechaEmisionAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroMayorAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorNumeroMayorAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorNumeroMayorAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroRetencionAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorNumeroRetencionAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorNumeroRetencionAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorValorAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarBusquedaPorValorAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarBusquedaPorValorAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdClienteAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarFK_IdClienteAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarFK_IdClienteAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDescripcionAsientoAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarFK_IdTipoDescripcionAsientoAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarFK_IdTipoDescripcionAsientoAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDocumentoAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarFK_IdTipoDocumentoAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarFK_IdTipoDocumentoAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloAsientoContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.asientocontableConstantesFunciones.mostrarFK_IdTipoMovimientoModuloAsientoContable);
			if(!this.asientocontableConstantesFunciones.mostrarFK_IdTipoMovimientoModuloAsientoContable && index>-1) {
				this.jTabbedPaneBusquedasAsientoContable.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioAsientoContable() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasAsientoContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorBeneficiarioAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorBeneficiarioAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorBeneficiarioAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorCodigoAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorCodigoAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorCodigoAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorFechaEmisionAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorFechaEmisionAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorFechaEmisionAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroMayorAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorNumeroMayorAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorNumeroMayorAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroRetencionAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorNumeroRetencionAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorNumeroRetencionAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorValorAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarBusquedaPorValorAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarBusquedaPorValorAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdClienteAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarFK_IdClienteAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarFK_IdClienteAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDescripcionAsientoAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarFK_IdTipoDescripcionAsientoAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarFK_IdTipoDescripcionAsientoAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDocumentoAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarFK_IdTipoDocumentoAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarFK_IdTipoDocumentoAsientoContable);
			}

			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloAsientoContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.asientocontableConstantesFunciones.activarFK_IdTipoMovimientoModuloAsientoContable);
				this.jTabbedPaneBusquedasAsientoContable.setEnabledAt(index,this.asientocontableConstantesFunciones.activarFK_IdTipoMovimientoModuloAsientoContable);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaAsientoContable(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorBeneficiario")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorBeneficiarioAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorBeneficiarioAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorBeneficiarioAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorCodigoAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorCodigoAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorCodigoAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorFechaEmision")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorFechaEmisionAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorFechaEmisionAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorFechaEmisionAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNumeroMayor")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroMayorAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorNumeroMayorAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroMayorAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNumeroRetencion")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorNumeroRetencionAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorNumeroRetencionAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorNumeroRetencionAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorValor")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelBusquedaPorValorAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarBusquedaPorValorAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarBusquedaPorValorAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdClienteAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarFK_IdClienteAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdClienteAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDescripcionAsiento")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDescripcionAsientoAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarFK_IdTipoDescripcionAsientoAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDescripcionAsientoAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDocumento")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoDocumentoAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarFK_IdTipoDocumentoAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoDocumentoAsientoContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoMovimientoModulo")) {
			index= this.jTabbedPaneBusquedasAsientoContable.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloAsientoContable);

			this.jTabbedPaneBusquedasAsientoContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAsientoContable.getComponent(index);

			this.asientocontableConstantesFunciones.setResaltarFK_IdTipoMovimientoModuloAsientoContable(resaltar);

			jPanel.setBorder(this.asientocontableConstantesFunciones.resaltarFK_IdTipoMovimientoModuloAsientoContable);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarAsientoContable.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioAsientoContable() throws Exception {

		if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioAsientoContable();
		this.updateVisibilidadResaltarControlesFormularioAsientoContable();
		this.updateHabilitarResaltarControlesFormularioAsientoContable();
		
	}
	
	public void updateBorderResaltarControlesFormularioAsientoContable() throws Exception {
		if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.asientocontableConstantesFunciones.resaltaridAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltaridAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_empresaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_empresaAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_sucursalAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_sucursalAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_ejercicioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_ejercicioAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_periodoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_periodoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_anioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_anioAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_mesAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_mesAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_moduloAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_moduloAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_usuarioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_usuarioAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_tipo_documentoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_tipo_documentoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarcodigoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarcodigoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarfechaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarfechaAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_tipo_movimientoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_tipo_movimientoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarnumero_mayorAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarnumero_mayorAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_monedaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_monedaAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltares_retencionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setBorderPainted(true);this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltares_retencionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarnumero_retencionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarnumero_retencionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarvalorAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarvalorAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltares_retencion_ivaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setBorderPainted(true);this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltares_retencion_ivaAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarnumero_retencion_ivaAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarnumero_retencion_ivaAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarcotizacionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarcotizacionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_clienteAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_clienteAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_tipo_descripcion_asientoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_tipo_descripcion_asientoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_formatoAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_formatoAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarbeneficiarioAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarbeneficiarioAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltardescripcionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltardescripcionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarfecha_emisionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_emisionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarfecha_emisionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarfecha_finalizacionAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarfecha_finalizacionAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_estado_asiento_contableAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_estado_asiento_contableAsientoContable);}
		if(this.asientocontableConstantesFunciones.resaltarid_tipo_movimiento_moduloAsientoContable!=null && this.jInternalFrameDetalleFormAsientoContable!=null) {this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setBorder(this.asientocontableConstantesFunciones.resaltarid_tipo_movimiento_moduloAsientoContable);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioAsientoContable() throws Exception {		
		if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
	
		//this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostraridAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelidAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostraridAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_empresaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_empresaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_empresaAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_sucursalAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_sucursalAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_sucursalAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_ejercicioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_ejercicioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_ejercicioAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_periodoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_periodoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_periodoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_anioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_anioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_anioAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_mesAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_mesAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_mesAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_moduloAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_moduloAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_moduloAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_usuarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_usuarioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_usuarioAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_documentoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_tipo_documentoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_documentoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarcodigoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelcodigoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarcodigoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfechaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelfechaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfechaAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_movimientoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_tipo_movimientoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_movimientoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_mayorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelnumero_mayorAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_mayorAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_monedaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_monedaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_monedaAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrares_retencionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPaneles_retencionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrares_retencionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_retencionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelnumero_retencionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_retencionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarvalorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelvalorAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarvalorAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrares_retencion_ivaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPaneles_retencion_ivaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrares_retencion_ivaAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_retencion_ivaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelnumero_retencion_ivaAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarnumero_retencion_ivaAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarcotizacionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelcotizacionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarcotizacionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_clienteAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_clienteAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_clienteAsientoContable);
			this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_clienteAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_descripcion_asientoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_tipo_descripcion_asientoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_descripcion_asientoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_formatoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_formatoAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_formatoAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarbeneficiarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelbeneficiarioAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarbeneficiarioAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrardescripcionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPaneldescripcionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrardescripcionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_emisionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfecha_emisionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelfecha_emisionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfecha_emisionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfecha_finalizacionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelfecha_finalizacionAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarfecha_finalizacionAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_estado_asiento_contableAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_estado_asiento_contableAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_estado_asiento_contableAsientoContable);
		//this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_movimiento_moduloAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jPanelid_tipo_movimiento_moduloAsientoContable.setVisible(this.asientocontableConstantesFunciones.mostrarid_tipo_movimiento_moduloAsientoContable);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioAsientoContable() throws Exception {
		if(this.jInternalFrameDetalleFormAsientoContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormAsientoContable!=null) {
	
		this.jInternalFrameDetalleFormAsientoContable.jLabelidAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activaridAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_empresaAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_empresaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_sucursalAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_sucursalAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_ejercicioAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_ejercicioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_periodoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_periodoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_anioAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_anioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_mesAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_mesAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_moduloAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_moduloAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_usuarioAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_usuarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_documentoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_tipo_documentoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldcodigoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarcodigoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfechaAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarfechaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimientoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_tipo_movimientoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreanumero_mayorAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarnumero_mayorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_monedaAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_monedaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activares_retencionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarnumero_retencionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldvalorAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarvalorAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jCheckBoxes_retencion_ivaAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activares_retencion_ivaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldnumero_retencion_ivaAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarnumero_retencion_ivaAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextFieldcotizacionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarcotizacionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_clienteAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_clienteAsientoContable);
			this.jInternalFrameDetalleFormAsientoContable.jButtonid_clienteAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_clienteAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_descripcion_asientoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_tipo_descripcion_asientoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_formatoAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_formatoAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreabeneficiarioAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarbeneficiarioAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jTextAreadescripcionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activardescripcionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_emisionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarfecha_emisionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jDateChooserfecha_finalizacionAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarfecha_finalizacionAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_estado_asiento_contableAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_estado_asiento_contableAsientoContable);
		this.jInternalFrameDetalleFormAsientoContable.jComboBoxid_tipo_movimiento_moduloAsientoContable.setEnabled(this.asientocontableConstantesFunciones.activarid_tipo_movimiento_moduloAsientoContable);
		}
	}
	
		
}